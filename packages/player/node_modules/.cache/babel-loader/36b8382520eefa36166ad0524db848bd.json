{"ast":null,"code":"import { filterBuffer } from '../helpers/filter-buffer';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\n\nconst filterFullBuffer = (renderedBuffer, nativeOfflineAudioContext, feedback, feedforward) => {\n  const feedbackLength = feedback.length;\n  const feedforwardLength = feedforward.length;\n  const minLength = Math.min(feedbackLength, feedforwardLength);\n\n  if (feedback[0] !== 1) {\n    for (let i = 0; i < feedbackLength; i += 1) {\n      feedforward[i] /= feedback[0];\n    }\n\n    for (let i = 1; i < feedforwardLength; i += 1) {\n      feedback[i] /= feedback[0];\n    }\n  }\n\n  const bufferLength = 32;\n  const xBuffer = new Float32Array(bufferLength);\n  const yBuffer = new Float32Array(bufferLength);\n  const filteredBuffer = nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels, renderedBuffer.length, renderedBuffer.sampleRate);\n  const numberOfChannels = renderedBuffer.numberOfChannels;\n\n  for (let i = 0; i < numberOfChannels; i += 1) {\n    const input = renderedBuffer.getChannelData(i);\n    const output = filteredBuffer.getChannelData(i);\n    xBuffer.fill(0);\n    yBuffer.fill(0);\n    filterBuffer(feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, 0, bufferLength, input, output);\n  }\n\n  return filteredBuffer;\n};\n\nexport const createIIRFilterNodeRendererFactory = (createNativeAudioBufferSourceNode, createNativeAudioNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n  return (feedback, feedforward) => {\n    const renderedNativeAudioNodes = new WeakMap();\n    let filteredBufferPromise = null;\n\n    const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeIIRFilterNode = getNativeAudioNode(proxy);\n      let nativeAudioBufferSourceNode = null; // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeIIRFilterNodeIsOwnedByContext = isOwnedByContext(nativeIIRFilterNode, nativeOfflineAudioContext); // Bug #9: Safari does not support IIRFilterNodes.\n\n      if (nativeOfflineAudioContext.createIIRFilter === undefined) {\n        nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext);\n      } else if (!nativeIIRFilterNodeIsOwnedByContext) {\n        nativeIIRFilterNode = createNativeAudioNode(nativeOfflineAudioContext, ntvCntxt => {\n          return ntvCntxt.createIIRFilter(feedforward, feedback);\n        });\n      }\n\n      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode === null ? nativeIIRFilterNode : nativeAudioBufferSourceNode);\n\n      if (nativeAudioBufferSourceNode !== null) {\n        if (filteredBufferPromise === null) {\n          if (nativeOfflineAudioContextConstructor === null) {\n            throw new Error('Missing the native OfflineAudioContext constructor.');\n          }\n\n          const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor( // Bug #47: The AudioDestinationNode in Edge and Safari gets not initialized correctly.\n          proxy.context.destination.channelCount, // Bug #17: Safari does not yet expose the length.\n          proxy.context.length, nativeOfflineAudioContext.sampleRate);\n\n          filteredBufferPromise = (async () => {\n            await renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination, trace);\n            const renderedBuffer = await renderNativeOfflineAudioContext(partialOfflineAudioContext);\n            return filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward);\n          })();\n        }\n\n        const filteredBuffer = await filteredBufferPromise;\n        nativeAudioBufferSourceNode.buffer = filteredBuffer;\n        nativeAudioBufferSourceNode.start(0);\n        return nativeAudioBufferSourceNode;\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode, trace);\n      return nativeIIRFilterNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/iir-filter-node-renderer-factory.js"],"names":["filterBuffer","isOwnedByContext","filterFullBuffer","renderedBuffer","nativeOfflineAudioContext","feedback","feedforward","feedbackLength","length","feedforwardLength","minLength","Math","min","i","bufferLength","xBuffer","Float32Array","yBuffer","filteredBuffer","createBuffer","numberOfChannels","sampleRate","input","getChannelData","output","fill","createIIRFilterNodeRendererFactory","createNativeAudioBufferSourceNode","createNativeAudioNode","getNativeAudioNode","nativeOfflineAudioContextConstructor","renderInputsOfAudioNode","renderNativeOfflineAudioContext","renderedNativeAudioNodes","WeakMap","filteredBufferPromise","createAudioNode","proxy","trace","nativeIIRFilterNode","nativeAudioBufferSourceNode","nativeIIRFilterNodeIsOwnedByContext","createIIRFilter","undefined","ntvCntxt","set","Error","partialOfflineAudioContext","context","destination","channelCount","buffer","start","render","renderedNativeAudioNode","get","Promise","resolve"],"mappings":"AAAA,SAASA,YAAT,QAA6B,0BAA7B;AACA,SAASC,gBAAT,QAAiC,gCAAjC;;AACA,MAAMC,gBAAgB,GAAG,CAACC,cAAD,EAAiBC,yBAAjB,EAA4CC,QAA5C,EAAsDC,WAAtD,KAAsE;AAC3F,QAAMC,cAAc,GAAGF,QAAQ,CAACG,MAAhC;AACA,QAAMC,iBAAiB,GAAGH,WAAW,CAACE,MAAtC;AACA,QAAME,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASL,cAAT,EAAyBE,iBAAzB,CAAlB;;AACA,MAAIJ,QAAQ,CAAC,CAAD,CAAR,KAAgB,CAApB,EAAuB;AACnB,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,cAApB,EAAoCM,CAAC,IAAI,CAAzC,EAA4C;AACxCP,MAAAA,WAAW,CAACO,CAAD,CAAX,IAAkBR,QAAQ,CAAC,CAAD,CAA1B;AACH;;AACD,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,iBAApB,EAAuCI,CAAC,IAAI,CAA5C,EAA+C;AAC3CR,MAAAA,QAAQ,CAACQ,CAAD,CAAR,IAAeR,QAAQ,CAAC,CAAD,CAAvB;AACH;AACJ;;AACD,QAAMS,YAAY,GAAG,EAArB;AACA,QAAMC,OAAO,GAAG,IAAIC,YAAJ,CAAiBF,YAAjB,CAAhB;AACA,QAAMG,OAAO,GAAG,IAAID,YAAJ,CAAiBF,YAAjB,CAAhB;AACA,QAAMI,cAAc,GAAGd,yBAAyB,CAACe,YAA1B,CAAuChB,cAAc,CAACiB,gBAAtD,EAAwEjB,cAAc,CAACK,MAAvF,EAA+FL,cAAc,CAACkB,UAA9G,CAAvB;AACA,QAAMD,gBAAgB,GAAGjB,cAAc,CAACiB,gBAAxC;;AACA,OAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,gBAApB,EAAsCP,CAAC,IAAI,CAA3C,EAA8C;AAC1C,UAAMS,KAAK,GAAGnB,cAAc,CAACoB,cAAf,CAA8BV,CAA9B,CAAd;AACA,UAAMW,MAAM,GAAGN,cAAc,CAACK,cAAf,CAA8BV,CAA9B,CAAf;AACAE,IAAAA,OAAO,CAACU,IAAR,CAAa,CAAb;AACAR,IAAAA,OAAO,CAACQ,IAAR,CAAa,CAAb;AACAzB,IAAAA,YAAY,CAACK,QAAD,EAAWE,cAAX,EAA2BD,WAA3B,EAAwCG,iBAAxC,EAA2DC,SAA3D,EAAsEK,OAAtE,EAA+EE,OAA/E,EAAwF,CAAxF,EAA2FH,YAA3F,EAAyGQ,KAAzG,EAAgHE,MAAhH,CAAZ;AACH;;AACD,SAAON,cAAP;AACH,CAzBD;;AA0BA,OAAO,MAAMQ,kCAAkC,GAAG,CAACC,iCAAD,EAAoCC,qBAApC,EAA2DC,kBAA3D,EAA+EC,oCAA/E,EAAqHC,uBAArH,EAA8IC,+BAA9I,KAAkL;AAChO,SAAO,CAAC3B,QAAD,EAAWC,WAAX,KAA2B;AAC9B,UAAM2B,wBAAwB,GAAG,IAAIC,OAAJ,EAAjC;AACA,QAAIC,qBAAqB,GAAG,IAA5B;;AACA,UAAMC,eAAe,GAAG,OAAOC,KAAP,EAAcjC,yBAAd,EAAyCkC,KAAzC,KAAmD;AACvE,UAAIC,mBAAmB,GAAGV,kBAAkB,CAACQ,KAAD,CAA5C;AACA,UAAIG,2BAA2B,GAAG,IAAlC,CAFuE,CAGvE;;AACA,YAAMC,mCAAmC,GAAGxC,gBAAgB,CAACsC,mBAAD,EAAsBnC,yBAAtB,CAA5D,CAJuE,CAKvE;;AACA,UAAIA,yBAAyB,CAACsC,eAA1B,KAA8CC,SAAlD,EAA6D;AACzDH,QAAAA,2BAA2B,GAAGb,iCAAiC,CAACvB,yBAAD,CAA/D;AACH,OAFD,MAGK,IAAI,CAACqC,mCAAL,EAA0C;AAC3CF,QAAAA,mBAAmB,GAAGX,qBAAqB,CAACxB,yBAAD,EAA6BwC,QAAD,IAAc;AACjF,iBAAOA,QAAQ,CAACF,eAAT,CAAyBpC,WAAzB,EAAsCD,QAAtC,CAAP;AACH,SAF0C,CAA3C;AAGH;;AACD4B,MAAAA,wBAAwB,CAACY,GAAzB,CAA6BzC,yBAA7B,EAAyDoC,2BAA2B,KAAK,IAAjC,GAAyCD,mBAAzC,GAA+DC,2BAAvH;;AACA,UAAIA,2BAA2B,KAAK,IAApC,EAA0C;AACtC,YAAIL,qBAAqB,KAAK,IAA9B,EAAoC;AAChC,cAAIL,oCAAoC,KAAK,IAA7C,EAAmD;AAC/C,kBAAM,IAAIgB,KAAJ,CAAU,qDAAV,CAAN;AACH;;AACD,gBAAMC,0BAA0B,GAAG,IAAIjB,oCAAJ,EACnC;AACAO,UAAAA,KAAK,CAACW,OAAN,CAAcC,WAAd,CAA0BC,YAFS,EAGnC;AACAb,UAAAA,KAAK,CAACW,OAAN,CAAcxC,MAJqB,EAIbJ,yBAAyB,CAACiB,UAJb,CAAnC;;AAKAc,UAAAA,qBAAqB,GAAG,CAAC,YAAY;AACjC,kBAAMJ,uBAAuB,CAACM,KAAD,EAAQU,0BAAR,EAAoCA,0BAA0B,CAACE,WAA/D,EAA4EX,KAA5E,CAA7B;AACA,kBAAMnC,cAAc,GAAG,MAAM6B,+BAA+B,CAACe,0BAAD,CAA5D;AACA,mBAAO7C,gBAAgB,CAACC,cAAD,EAAiBC,yBAAjB,EAA4CC,QAA5C,EAAsDC,WAAtD,CAAvB;AACH,WAJuB,GAAxB;AAKH;;AACD,cAAMY,cAAc,GAAG,MAAMiB,qBAA7B;AACAK,QAAAA,2BAA2B,CAACW,MAA5B,GAAqCjC,cAArC;AACAsB,QAAAA,2BAA2B,CAACY,KAA5B,CAAkC,CAAlC;AACA,eAAOZ,2BAAP;AACH;;AACD,YAAMT,uBAAuB,CAACM,KAAD,EAAQjC,yBAAR,EAAmCmC,mBAAnC,EAAwDD,KAAxD,CAA7B;AACA,aAAOC,mBAAP;AACH,KAtCD;;AAuCA,WAAO;AACHc,MAAAA,MAAM,CAAChB,KAAD,EAAQjC,yBAAR,EAAmCkC,KAAnC,EAA0C;AAC5C,cAAMgB,uBAAuB,GAAGrB,wBAAwB,CAACsB,GAAzB,CAA6BnD,yBAA7B,CAAhC;;AACA,YAAIkD,uBAAuB,KAAKX,SAAhC,EAA2C;AACvC,iBAAOa,OAAO,CAACC,OAAR,CAAgBH,uBAAhB,CAAP;AACH;;AACD,eAAOlB,eAAe,CAACC,KAAD,EAAQjC,yBAAR,EAAmCkC,KAAnC,CAAtB;AACH;;AAPE,KAAP;AASH,GAnDD;AAoDH,CArDM","sourcesContent":["import { filterBuffer } from '../helpers/filter-buffer';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nconst filterFullBuffer = (renderedBuffer, nativeOfflineAudioContext, feedback, feedforward) => {\n    const feedbackLength = feedback.length;\n    const feedforwardLength = feedforward.length;\n    const minLength = Math.min(feedbackLength, feedforwardLength);\n    if (feedback[0] !== 1) {\n        for (let i = 0; i < feedbackLength; i += 1) {\n            feedforward[i] /= feedback[0];\n        }\n        for (let i = 1; i < feedforwardLength; i += 1) {\n            feedback[i] /= feedback[0];\n        }\n    }\n    const bufferLength = 32;\n    const xBuffer = new Float32Array(bufferLength);\n    const yBuffer = new Float32Array(bufferLength);\n    const filteredBuffer = nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels, renderedBuffer.length, renderedBuffer.sampleRate);\n    const numberOfChannels = renderedBuffer.numberOfChannels;\n    for (let i = 0; i < numberOfChannels; i += 1) {\n        const input = renderedBuffer.getChannelData(i);\n        const output = filteredBuffer.getChannelData(i);\n        xBuffer.fill(0);\n        yBuffer.fill(0);\n        filterBuffer(feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, 0, bufferLength, input, output);\n    }\n    return filteredBuffer;\n};\nexport const createIIRFilterNodeRendererFactory = (createNativeAudioBufferSourceNode, createNativeAudioNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n    return (feedback, feedforward) => {\n        const renderedNativeAudioNodes = new WeakMap();\n        let filteredBufferPromise = null;\n        const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeIIRFilterNode = getNativeAudioNode(proxy);\n            let nativeAudioBufferSourceNode = null;\n            // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeIIRFilterNodeIsOwnedByContext = isOwnedByContext(nativeIIRFilterNode, nativeOfflineAudioContext);\n            // Bug #9: Safari does not support IIRFilterNodes.\n            if (nativeOfflineAudioContext.createIIRFilter === undefined) {\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext);\n            }\n            else if (!nativeIIRFilterNodeIsOwnedByContext) {\n                nativeIIRFilterNode = createNativeAudioNode(nativeOfflineAudioContext, (ntvCntxt) => {\n                    return ntvCntxt.createIIRFilter(feedforward, feedback);\n                });\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, (nativeAudioBufferSourceNode === null) ? nativeIIRFilterNode : nativeAudioBufferSourceNode);\n            if (nativeAudioBufferSourceNode !== null) {\n                if (filteredBufferPromise === null) {\n                    if (nativeOfflineAudioContextConstructor === null) {\n                        throw new Error('Missing the native OfflineAudioContext constructor.');\n                    }\n                    const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(\n                    // Bug #47: The AudioDestinationNode in Edge and Safari gets not initialized correctly.\n                    proxy.context.destination.channelCount, \n                    // Bug #17: Safari does not yet expose the length.\n                    proxy.context.length, nativeOfflineAudioContext.sampleRate);\n                    filteredBufferPromise = (async () => {\n                        await renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination, trace);\n                        const renderedBuffer = await renderNativeOfflineAudioContext(partialOfflineAudioContext);\n                        return filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward);\n                    })();\n                }\n                const filteredBuffer = await filteredBufferPromise;\n                nativeAudioBufferSourceNode.buffer = filteredBuffer;\n                nativeAudioBufferSourceNode.start(0);\n                return nativeAudioBufferSourceNode;\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode, trace);\n            return nativeIIRFilterNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/iir-filter-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}