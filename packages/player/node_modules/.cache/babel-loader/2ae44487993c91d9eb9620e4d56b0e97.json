{"ast":null,"code":"export const createNativeAudioDestinationNodeFactory = (createNativeGainNode, overwriteAccessors) => {\n  return (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext) => {\n    const nativeAudioDestinationNode = nativeContext.destination; // Bug #132: Edge & Safari do not have the correct channelCount.\n\n    if (nativeAudioDestinationNode.channelCount !== channelCount) {\n      try {\n        nativeAudioDestinationNode.channelCount = channelCount;\n      } catch (_a) {// Bug #169: Safari throws an error on each attempt to change the channelCount.\n      }\n    } // Bug #83: Edge & Safari do not have the correct channelCountMode.\n\n\n    if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== 'explicit') {\n      nativeAudioDestinationNode.channelCountMode = 'explicit';\n    } // Bug #47: The AudioDestinationNode in Edge and Safari does not initialize the maxChannelCount property correctly.\n\n\n    if (nativeAudioDestinationNode.maxChannelCount === 0) {\n      Object.defineProperty(nativeAudioDestinationNode, 'maxChannelCount', {\n        value: channelCount\n      });\n    } // Bug #168: No browser does yet have an AudioDestinationNode with an output.\n\n\n    const gainNode = createNativeGainNode(nativeContext, {\n      channelCount,\n      channelCountMode: nativeAudioDestinationNode.channelCountMode,\n      channelInterpretation: nativeAudioDestinationNode.channelInterpretation,\n      gain: 1\n    });\n    overwriteAccessors(gainNode, 'channelCount', get => () => get.call(gainNode), set => value => {\n      set.call(gainNode, value);\n\n      try {\n        nativeAudioDestinationNode.channelCount = value;\n      } catch (err) {\n        // Bug #169: Safari throws an error on each attempt to change the channelCount.\n        if (value > nativeAudioDestinationNode.maxChannelCount) {\n          throw err;\n        }\n      }\n    });\n    overwriteAccessors(gainNode, 'channelCountMode', get => () => get.call(gainNode), set => value => {\n      set.call(gainNode, value);\n      nativeAudioDestinationNode.channelCountMode = value;\n    });\n    overwriteAccessors(gainNode, 'channelInterpretation', get => () => get.call(gainNode), set => value => {\n      set.call(gainNode, value);\n      nativeAudioDestinationNode.channelInterpretation = value;\n    });\n    Object.defineProperty(gainNode, 'maxChannelCount', {\n      get: () => nativeAudioDestinationNode.maxChannelCount\n    }); // @todo This should be disconnected when the context is closed.\n\n    gainNode.connect(nativeAudioDestinationNode);\n    return gainNode;\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/native-audio-destination-node.js"],"names":["createNativeAudioDestinationNodeFactory","createNativeGainNode","overwriteAccessors","nativeContext","channelCount","isNodeOfNativeOfflineAudioContext","nativeAudioDestinationNode","destination","_a","channelCountMode","maxChannelCount","Object","defineProperty","value","gainNode","channelInterpretation","gain","get","call","set","err","connect"],"mappings":"AAAA,OAAO,MAAMA,uCAAuC,GAAG,CAACC,oBAAD,EAAuBC,kBAAvB,KAA8C;AACjG,SAAO,CAACC,aAAD,EAAgBC,YAAhB,EAA8BC,iCAA9B,KAAoE;AACvE,UAAMC,0BAA0B,GAAGH,aAAa,CAACI,WAAjD,CADuE,CAEvE;;AACA,QAAID,0BAA0B,CAACF,YAA3B,KAA4CA,YAAhD,EAA8D;AAC1D,UAAI;AACAE,QAAAA,0BAA0B,CAACF,YAA3B,GAA0CA,YAA1C;AACH,OAFD,CAGA,OAAOI,EAAP,EAAW,CACP;AACH;AACJ,KAVsE,CAWvE;;;AACA,QAAIH,iCAAiC,IAAIC,0BAA0B,CAACG,gBAA3B,KAAgD,UAAzF,EAAqG;AACjGH,MAAAA,0BAA0B,CAACG,gBAA3B,GAA8C,UAA9C;AACH,KAdsE,CAevE;;;AACA,QAAIH,0BAA0B,CAACI,eAA3B,KAA+C,CAAnD,EAAsD;AAClDC,MAAAA,MAAM,CAACC,cAAP,CAAsBN,0BAAtB,EAAkD,iBAAlD,EAAqE;AACjEO,QAAAA,KAAK,EAAET;AAD0D,OAArE;AAGH,KApBsE,CAqBvE;;;AACA,UAAMU,QAAQ,GAAGb,oBAAoB,CAACE,aAAD,EAAgB;AACjDC,MAAAA,YADiD;AAEjDK,MAAAA,gBAAgB,EAAEH,0BAA0B,CAACG,gBAFI;AAGjDM,MAAAA,qBAAqB,EAAET,0BAA0B,CAACS,qBAHD;AAIjDC,MAAAA,IAAI,EAAE;AAJ2C,KAAhB,CAArC;AAMAd,IAAAA,kBAAkB,CAACY,QAAD,EAAW,cAAX,EAA4BG,GAAD,IAAS,MAAMA,GAAG,CAACC,IAAJ,CAASJ,QAAT,CAA1C,EAA+DK,GAAD,IAAUN,KAAD,IAAW;AAChGM,MAAAA,GAAG,CAACD,IAAJ,CAASJ,QAAT,EAAmBD,KAAnB;;AACA,UAAI;AACAP,QAAAA,0BAA0B,CAACF,YAA3B,GAA0CS,KAA1C;AACH,OAFD,CAGA,OAAOO,GAAP,EAAY;AACR;AACA,YAAIP,KAAK,GAAGP,0BAA0B,CAACI,eAAvC,EAAwD;AACpD,gBAAMU,GAAN;AACH;AACJ;AACJ,KAXiB,CAAlB;AAYAlB,IAAAA,kBAAkB,CAACY,QAAD,EAAW,kBAAX,EAAgCG,GAAD,IAAS,MAAMA,GAAG,CAACC,IAAJ,CAASJ,QAAT,CAA9C,EAAmEK,GAAD,IAAUN,KAAD,IAAW;AACpGM,MAAAA,GAAG,CAACD,IAAJ,CAASJ,QAAT,EAAmBD,KAAnB;AACAP,MAAAA,0BAA0B,CAACG,gBAA3B,GAA8CI,KAA9C;AACH,KAHiB,CAAlB;AAIAX,IAAAA,kBAAkB,CAACY,QAAD,EAAW,uBAAX,EAAqCG,GAAD,IAAS,MAAMA,GAAG,CAACC,IAAJ,CAASJ,QAAT,CAAnD,EAAwEK,GAAD,IAAUN,KAAD,IAAW;AACzGM,MAAAA,GAAG,CAACD,IAAJ,CAASJ,QAAT,EAAmBD,KAAnB;AACAP,MAAAA,0BAA0B,CAACS,qBAA3B,GAAmDF,KAAnD;AACH,KAHiB,CAAlB;AAIAF,IAAAA,MAAM,CAACC,cAAP,CAAsBE,QAAtB,EAAgC,iBAAhC,EAAmD;AAC/CG,MAAAA,GAAG,EAAE,MAAMX,0BAA0B,CAACI;AADS,KAAnD,EAhDuE,CAmDvE;;AACAI,IAAAA,QAAQ,CAACO,OAAT,CAAiBf,0BAAjB;AACA,WAAOQ,QAAP;AACH,GAtDD;AAuDH,CAxDM","sourcesContent":["export const createNativeAudioDestinationNodeFactory = (createNativeGainNode, overwriteAccessors) => {\n    return (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext) => {\n        const nativeAudioDestinationNode = nativeContext.destination;\n        // Bug #132: Edge & Safari do not have the correct channelCount.\n        if (nativeAudioDestinationNode.channelCount !== channelCount) {\n            try {\n                nativeAudioDestinationNode.channelCount = channelCount;\n            }\n            catch (_a) {\n                // Bug #169: Safari throws an error on each attempt to change the channelCount.\n            }\n        }\n        // Bug #83: Edge & Safari do not have the correct channelCountMode.\n        if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== 'explicit') {\n            nativeAudioDestinationNode.channelCountMode = 'explicit';\n        }\n        // Bug #47: The AudioDestinationNode in Edge and Safari does not initialize the maxChannelCount property correctly.\n        if (nativeAudioDestinationNode.maxChannelCount === 0) {\n            Object.defineProperty(nativeAudioDestinationNode, 'maxChannelCount', {\n                value: channelCount\n            });\n        }\n        // Bug #168: No browser does yet have an AudioDestinationNode with an output.\n        const gainNode = createNativeGainNode(nativeContext, {\n            channelCount,\n            channelCountMode: nativeAudioDestinationNode.channelCountMode,\n            channelInterpretation: nativeAudioDestinationNode.channelInterpretation,\n            gain: 1\n        });\n        overwriteAccessors(gainNode, 'channelCount', (get) => () => get.call(gainNode), (set) => (value) => {\n            set.call(gainNode, value);\n            try {\n                nativeAudioDestinationNode.channelCount = value;\n            }\n            catch (err) {\n                // Bug #169: Safari throws an error on each attempt to change the channelCount.\n                if (value > nativeAudioDestinationNode.maxChannelCount) {\n                    throw err;\n                }\n            }\n        });\n        overwriteAccessors(gainNode, 'channelCountMode', (get) => () => get.call(gainNode), (set) => (value) => {\n            set.call(gainNode, value);\n            nativeAudioDestinationNode.channelCountMode = value;\n        });\n        overwriteAccessors(gainNode, 'channelInterpretation', (get) => () => get.call(gainNode), (set) => (value) => {\n            set.call(gainNode, value);\n            nativeAudioDestinationNode.channelInterpretation = value;\n        });\n        Object.defineProperty(gainNode, 'maxChannelCount', {\n            get: () => nativeAudioDestinationNode.maxChannelCount\n        });\n        // @todo This should be disconnected when the context is closed.\n        gainNode.connect(nativeAudioDestinationNode);\n        return gainNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-destination-node.js.map"]},"metadata":{},"sourceType":"module"}