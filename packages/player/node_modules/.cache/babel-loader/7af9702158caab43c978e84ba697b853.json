{"ast":null,"code":"import _objectSpread from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  offset: 1\n};\nexport var createConstantSourceNodeConstructor = function createConstantSourceNodeConstructor(audioNodeConstructor, createAudioParam, createConstantSourceNodeRendererFactory, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(ConstantSourceNode, _audioNodeConstructor);\n\n    var _super = _createSuper(ConstantSourceNode);\n\n    function ConstantSourceNode(context) {\n      var _this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_OPTIONS;\n\n      _classCallCheck(this, ConstantSourceNode);\n\n      var nativeContext = getNativeContext(context);\n\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n      var nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var constantSourceNodeRenderer = isOffline ? createConstantSourceNodeRendererFactory() : null;\n      _this = _super.call(this, context, false, nativeConstantSourceNode, constantSourceNodeRenderer);\n      _this._constantSourceNodeRenderer = constantSourceNodeRenderer;\n      _this._nativeConstantSourceNode = nativeConstantSourceNode;\n      /*\n       * Bug #62 & #74: Edge & Safari do not support ConstantSourceNodes and do not export the correct values for maxValue and\n       * minValue for GainNodes.\n       */\n\n      _this._offset = createAudioParam(_assertThisInitialized(_this), isOffline, nativeConstantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      _this._onended = null;\n      return _this;\n    }\n\n    _createClass(ConstantSourceNode, [{\n      key: \"start\",\n      value: function start() {\n        var _this2 = this;\n\n        var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n        this._nativeConstantSourceNode.start(when);\n\n        if (this._constantSourceNodeRenderer !== null) {\n          this._constantSourceNodeRenderer.start = when;\n        } else {\n          setInternalStateToActive(this);\n\n          var resetInternalStateToPassive = function resetInternalStateToPassive() {\n            _this2._nativeConstantSourceNode.removeEventListener('ended', resetInternalStateToPassive); // @todo Determine a meaningful delay instead of just using one second.\n\n\n            setTimeout(function () {\n              return setInternalStateToPassive(_this2);\n            }, 1000);\n          };\n\n          this._nativeConstantSourceNode.addEventListener('ended', resetInternalStateToPassive);\n        }\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n        this._nativeConstantSourceNode.stop(when);\n\n        if (this._constantSourceNodeRenderer !== null) {\n          this._constantSourceNodeRenderer.stop = when;\n        }\n      }\n    }, {\n      key: \"offset\",\n      get: function get() {\n        return this._offset;\n      }\n    }, {\n      key: \"onended\",\n      get: function get() {\n        return this._onended;\n      },\n      set: function set(value) {\n        var wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n        this._nativeConstantSourceNode.onended = wrappedListener;\n        var nativeOnEnded = this._nativeConstantSourceNode.onended;\n        this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n      }\n    }]);\n\n    return ConstantSourceNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/constant-source-node-constructor.js"],"names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","setInternalStateToActive","setInternalStateToPassive","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","offset","createConstantSourceNodeConstructor","audioNodeConstructor","createAudioParam","createConstantSourceNodeRendererFactory","createNativeConstantSourceNode","getNativeContext","isNativeOfflineAudioContext","wrapEventListener","context","options","nativeContext","mergedOptions","nativeConstantSourceNode","isOffline","constantSourceNodeRenderer","_constantSourceNodeRenderer","_nativeConstantSourceNode","_offset","_onended","when","start","resetInternalStateToPassive","removeEventListener","setTimeout","addEventListener","stop","value","wrappedListener","onended","nativeOnEnded"],"mappings":"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","sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    offset: 1\n};\nexport const createConstantSourceNodeConstructor = (audioNodeConstructor, createAudioParam, createConstantSourceNodeRendererFactory, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n    return class ConstantSourceNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const constantSourceNodeRenderer = ((isOffline)\n                ? createConstantSourceNodeRendererFactory()\n                : null);\n            super(context, false, nativeConstantSourceNode, constantSourceNodeRenderer);\n            this._constantSourceNodeRenderer = constantSourceNodeRenderer;\n            this._nativeConstantSourceNode = nativeConstantSourceNode;\n            /*\n             * Bug #62 & #74: Edge & Safari do not support ConstantSourceNodes and do not export the correct values for maxValue and\n             * minValue for GainNodes.\n             */\n            this._offset = createAudioParam(this, isOffline, nativeConstantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._onended = null;\n        }\n        get offset() {\n            return this._offset;\n        }\n        get onended() {\n            return this._onended;\n        }\n        set onended(value) {\n            const wrappedListener = (typeof value === 'function') ? wrapEventListener(this, value) : null;\n            this._nativeConstantSourceNode.onended = wrappedListener;\n            const nativeOnEnded = this._nativeConstantSourceNode.onended;\n            this._onended = (nativeOnEnded !== null && nativeOnEnded === wrappedListener) ? value : nativeOnEnded;\n        }\n        start(when = 0) {\n            this._nativeConstantSourceNode.start(when);\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.start = when;\n            }\n            else {\n                setInternalStateToActive(this);\n                const resetInternalStateToPassive = () => {\n                    this._nativeConstantSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n                    // @todo Determine a meaningful delay instead of just using one second.\n                    setTimeout(() => setInternalStateToPassive(this), 1000);\n                };\n                this._nativeConstantSourceNode.addEventListener('ended', resetInternalStateToPassive);\n            }\n        }\n        stop(when = 0) {\n            this._nativeConstantSourceNode.stop(when);\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/constant-source-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}