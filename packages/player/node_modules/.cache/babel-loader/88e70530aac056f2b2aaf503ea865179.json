{"ast":null,"code":"import { abs, asin, cos, epsilon, pi, sin, sqrt } from \"./math.js\";\nexport default function (a, b, c, d, e, f, g, h) {\n  if (arguments.length < 8) h = 0;\n\n  function forward(lambda, phi) {\n    if (!phi) return [a * lambda / pi, 0];\n    var phi2 = phi * phi,\n        xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n        yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n        m = (xB * xB + yB * yB) / (2 * yB),\n        alpha = lambda * asin(xB / m) / pi;\n    return [m * sin(alpha), phi * (1 + phi2 * h) + m * (1 - cos(alpha))];\n  }\n\n  forward.invert = function (x, y) {\n    var lambda = pi * x / a,\n        phi = y,\n        deltaLambda,\n        deltaPhi,\n        i = 50;\n\n    do {\n      var phi2 = phi * phi,\n          xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n          yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n          p = xB * xB + yB * yB,\n          q = 2 * yB,\n          m = p / q,\n          m2 = m * m,\n          dAlphadLambda = asin(xB / m) / pi,\n          alpha = lambda * dAlphadLambda,\n          xB2 = xB * xB,\n          dxBdPhi = (2 * b + phi2 * (4 * c + phi2 * 6 * d)) * phi,\n          dyBdPhi = e + phi2 * (3 * f + phi2 * 5 * g),\n          dpdPhi = 2 * (xB * dxBdPhi + yB * (dyBdPhi - 1)),\n          dqdPhi = 2 * (dyBdPhi - 1),\n          dmdPhi = (dpdPhi * q - p * dqdPhi) / (q * q),\n          cosAlpha = cos(alpha),\n          sinAlpha = sin(alpha),\n          mcosAlpha = m * cosAlpha,\n          msinAlpha = m * sinAlpha,\n          dAlphadPhi = lambda / pi * (1 / sqrt(1 - xB2 / m2)) * (dxBdPhi * m - xB * dmdPhi) / m2,\n          fx = msinAlpha - x,\n          fy = phi * (1 + phi2 * h) + m - mcosAlpha - y,\n          deltaxDeltaPhi = dmdPhi * sinAlpha + mcosAlpha * dAlphadPhi,\n          deltaxDeltaLambda = mcosAlpha * dAlphadLambda,\n          deltayDeltaPhi = 1 + dmdPhi - (dmdPhi * cosAlpha - msinAlpha * dAlphadPhi),\n          deltayDeltaLambda = msinAlpha * dAlphadLambda,\n          denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n      if (!denominator) break;\n      lambda -= deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator;\n      phi -= deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n\n    return [lambda, phi];\n  };\n\n  return forward;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/ginzburgPolyconic.js"],"names":["abs","asin","cos","epsilon","pi","sin","sqrt","a","b","c","d","e","f","g","h","arguments","length","forward","lambda","phi","phi2","xB","yB","m","alpha","invert","x","y","deltaLambda","deltaPhi","i","p","q","m2","dAlphadLambda","xB2","dxBdPhi","dyBdPhi","dpdPhi","dqdPhi","dmdPhi","cosAlpha","sinAlpha","mcosAlpha","msinAlpha","dAlphadPhi","fx","fy","deltaxDeltaPhi","deltaxDeltaLambda","deltayDeltaPhi","deltayDeltaLambda","denominator"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,OAAxB,EAAiCC,EAAjC,EAAqCC,GAArC,EAA0CC,IAA1C,QAAqD,WAArD;AAEA,eAAe,UAASC,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB,EAAqBC,CAArB,EAAwBC,CAAxB,EAA2BC,CAA3B,EAA8BC,CAA9B,EAAiC;AAC9C,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0BF,CAAC,GAAG,CAAJ;;AAE1B,WAASG,OAAT,CAAiBC,MAAjB,EAAyBC,GAAzB,EAA8B;AAC5B,QAAI,CAACA,GAAL,EAAU,OAAO,CAACZ,CAAC,GAAGW,MAAJ,GAAad,EAAd,EAAkB,CAAlB,CAAP;AACV,QAAIgB,IAAI,GAAGD,GAAG,GAAGA,GAAjB;AAAA,QACIE,EAAE,GAAGd,CAAC,GAAGa,IAAI,IAAIZ,CAAC,GAAGY,IAAI,IAAIX,CAAC,GAAGW,IAAI,GAAGV,CAAf,CAAZ,CADjB;AAAA,QAEIY,EAAE,GAAGH,GAAG,IAAIR,CAAC,GAAG,CAAJ,GAAQS,IAAI,IAAIR,CAAC,GAAGE,CAAJ,GAAQM,IAAI,GAAGP,CAAnB,CAAhB,CAFZ;AAAA,QAGIU,CAAC,GAAG,CAACF,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAhB,KAAuB,IAAIA,EAA3B,CAHR;AAAA,QAIIE,KAAK,GAAGN,MAAM,GAAGjB,IAAI,CAACoB,EAAE,GAAGE,CAAN,CAAb,GAAwBnB,EAJpC;AAKA,WAAO,CAACmB,CAAC,GAAGlB,GAAG,CAACmB,KAAD,CAAR,EAAiBL,GAAG,IAAI,IAAIC,IAAI,GAAGN,CAAf,CAAH,GAAuBS,CAAC,IAAI,IAAIrB,GAAG,CAACsB,KAAD,CAAX,CAAzC,CAAP;AACD;;AAEDP,EAAAA,OAAO,CAACQ,MAAR,GAAiB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC9B,QAAIT,MAAM,GAAGd,EAAE,GAAGsB,CAAL,GAASnB,CAAtB;AAAA,QACIY,GAAG,GAAGQ,CADV;AAAA,QAEIC,WAFJ;AAAA,QAEiBC,QAFjB;AAAA,QAE2BC,CAAC,GAAG,EAF/B;;AAGA,OAAG;AACD,UAAIV,IAAI,GAAGD,GAAG,GAAGA,GAAjB;AAAA,UACIE,EAAE,GAAGd,CAAC,GAAGa,IAAI,IAAIZ,CAAC,GAAGY,IAAI,IAAIX,CAAC,GAAGW,IAAI,GAAGV,CAAf,CAAZ,CADjB;AAAA,UAEIY,EAAE,GAAGH,GAAG,IAAIR,CAAC,GAAG,CAAJ,GAAQS,IAAI,IAAIR,CAAC,GAAGE,CAAJ,GAAQM,IAAI,GAAGP,CAAnB,CAAhB,CAFZ;AAAA,UAGIkB,CAAC,GAAGV,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAHvB;AAAA,UAIIU,CAAC,GAAG,IAAIV,EAJZ;AAAA,UAKIC,CAAC,GAAGQ,CAAC,GAAGC,CALZ;AAAA,UAMIC,EAAE,GAAGV,CAAC,GAAGA,CANb;AAAA,UAOIW,aAAa,GAAGjC,IAAI,CAACoB,EAAE,GAAGE,CAAN,CAAJ,GAAenB,EAPnC;AAAA,UAQIoB,KAAK,GAAGN,MAAM,GAAGgB,aARrB;AAAA,UASIC,GAAG,GAAGd,EAAE,GAAGA,EATf;AAAA,UAUIe,OAAO,GAAG,CAAC,IAAI5B,CAAJ,GAAQY,IAAI,IAAI,IAAIX,CAAJ,GAAQW,IAAI,GAAG,CAAP,GAAWV,CAAvB,CAAb,IAA0CS,GAVxD;AAAA,UAWIkB,OAAO,GAAG1B,CAAC,GAAGS,IAAI,IAAI,IAAIR,CAAJ,GAAQQ,IAAI,GAAG,CAAP,GAAWP,CAAvB,CAXtB;AAAA,UAYIyB,MAAM,GAAG,KAAKjB,EAAE,GAAGe,OAAL,GAAed,EAAE,IAAIe,OAAO,GAAG,CAAd,CAAtB,CAZb;AAAA,UAaIE,MAAM,GAAG,KAAKF,OAAO,GAAG,CAAf,CAbb;AAAA,UAcIG,MAAM,GAAG,CAACF,MAAM,GAAGN,CAAT,GAAaD,CAAC,GAAGQ,MAAlB,KAA6BP,CAAC,GAAGA,CAAjC,CAdb;AAAA,UAeIS,QAAQ,GAAGvC,GAAG,CAACsB,KAAD,CAflB;AAAA,UAgBIkB,QAAQ,GAAGrC,GAAG,CAACmB,KAAD,CAhBlB;AAAA,UAiBImB,SAAS,GAAGpB,CAAC,GAAGkB,QAjBpB;AAAA,UAkBIG,SAAS,GAAGrB,CAAC,GAAGmB,QAlBpB;AAAA,UAmBIG,UAAU,GAAK3B,MAAM,GAAGd,EAAV,IAAiB,IAAIE,IAAI,CAAC,IAAI6B,GAAG,GAAGF,EAAX,CAAzB,KAA4CG,OAAO,GAAGb,CAAV,GAAcF,EAAE,GAAGmB,MAA/D,CAAD,GAA2EP,EAnB5F;AAAA,UAoBIa,EAAE,GAAGF,SAAS,GAAGlB,CApBrB;AAAA,UAqBIqB,EAAE,GAAG5B,GAAG,IAAI,IAAIC,IAAI,GAAGN,CAAf,CAAH,GAAuBS,CAAvB,GAA2BoB,SAA3B,GAAuChB,CArBhD;AAAA,UAsBIqB,cAAc,GAAGR,MAAM,GAAGE,QAAT,GAAoBC,SAAS,GAAGE,UAtBrD;AAAA,UAuBII,iBAAiB,GAAGN,SAAS,GAAGT,aAvBpC;AAAA,UAwBIgB,cAAc,GAAG,IAAIV,MAAJ,IAAcA,MAAM,GAAGC,QAAT,GAAoBG,SAAS,GAAGC,UAA9C,CAxBrB;AAAA,UAyBIM,iBAAiB,GAAGP,SAAS,GAAGV,aAzBpC;AAAA,UA0BIkB,WAAW,GAAGJ,cAAc,GAAGG,iBAAjB,GAAqCD,cAAc,GAAGD,iBA1BxE;AA2BA,UAAI,CAACG,WAAL,EAAkB;AAClBlC,MAAAA,MAAM,IAAIU,WAAW,GAAG,CAACmB,EAAE,GAAGC,cAAL,GAAsBF,EAAE,GAAGI,cAA5B,IAA8CE,WAAtE;AACAjC,MAAAA,GAAG,IAAIU,QAAQ,GAAG,CAACiB,EAAE,GAAGK,iBAAL,GAAyBJ,EAAE,GAAGE,iBAA/B,IAAoDG,WAAtE;AACD,KA/BD,QA+BS,CAACpD,GAAG,CAAC4B,WAAD,CAAH,GAAmBzB,OAAnB,IAA8BH,GAAG,CAAC6B,QAAD,CAAH,GAAgB1B,OAA/C,KAA2D,EAAE2B,CAAF,GAAM,CA/B1E;;AAgCA,WAAO,CAACZ,MAAD,EAASC,GAAT,CAAP;AACD,GArCD;;AAuCA,SAAOF,OAAP;AACD","sourcesContent":["import {abs, asin, cos, epsilon, pi, sin, sqrt} from \"./math.js\";\n\nexport default function(a, b, c, d, e, f, g, h) {\n  if (arguments.length < 8) h = 0;\n\n  function forward(lambda, phi) {\n    if (!phi) return [a * lambda / pi, 0];\n    var phi2 = phi * phi,\n        xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n        yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n        m = (xB * xB + yB * yB) / (2 * yB),\n        alpha = lambda * asin(xB / m) / pi;\n    return [m * sin(alpha), phi * (1 + phi2 * h) + m * (1 - cos(alpha))];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda = pi * x / a,\n        phi = y,\n        deltaLambda, deltaPhi, i = 50;\n    do {\n      var phi2 = phi * phi,\n          xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n          yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n          p = xB * xB + yB * yB,\n          q = 2 * yB,\n          m = p / q,\n          m2 = m * m,\n          dAlphadLambda = asin(xB / m) / pi,\n          alpha = lambda * dAlphadLambda,\n          xB2 = xB * xB,\n          dxBdPhi = (2 * b + phi2 * (4 * c + phi2 * 6 * d)) * phi,\n          dyBdPhi = e + phi2 * (3 * f + phi2 * 5 * g),\n          dpdPhi = 2 * (xB * dxBdPhi + yB * (dyBdPhi - 1)),\n          dqdPhi = 2 * (dyBdPhi - 1),\n          dmdPhi = (dpdPhi * q - p * dqdPhi) / (q * q),\n          cosAlpha = cos(alpha),\n          sinAlpha = sin(alpha),\n          mcosAlpha = m * cosAlpha,\n          msinAlpha = m * sinAlpha,\n          dAlphadPhi = ((lambda / pi) * (1 / sqrt(1 - xB2 / m2)) * (dxBdPhi * m - xB * dmdPhi)) / m2,\n          fx = msinAlpha - x,\n          fy = phi * (1 + phi2 * h) + m - mcosAlpha - y,\n          deltaxDeltaPhi = dmdPhi * sinAlpha + mcosAlpha * dAlphadPhi,\n          deltaxDeltaLambda = mcosAlpha * dAlphadLambda,\n          deltayDeltaPhi = 1 + dmdPhi - (dmdPhi * cosAlpha - msinAlpha * dAlphadPhi),\n          deltayDeltaLambda = msinAlpha * dAlphadLambda,\n          denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n      if (!denominator) break;\n      lambda -= deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator;\n      phi -= deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n    return [lambda, phi];\n  };\n\n  return forward;\n}\n"]},"metadata":{},"sourceType":"module"}