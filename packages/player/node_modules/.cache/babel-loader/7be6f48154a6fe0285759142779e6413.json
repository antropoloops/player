{"ast":null,"code":"export class Sampler {\n  constructor(audioset, buffers, audio) {\n    this.audioset = audioset;\n    this.buffers = buffers;\n    this.audio = audio;\n    this.master = void 0;\n    this.tracks = {};\n    this.audioSources = {};\n    this.master = audio.createTrack({\n      volume: 0.8\n    });\n    audioset.tracks.forEach(track => {\n      this.tracks[track.id] = audio.createTrack({\n        volume: 1\n      }, this.master);\n    });\n  }\n\n  run(command) {\n    switch (command.command) {\n      case \"startClip\":\n        return this.start(command.clipId, command.time);\n\n      case \"stopClip\":\n        return this.stop(command.clipId, command.time);\n\n      default:\n    }\n  }\n\n  start(clipId, time) {\n    if (this.audioSources[clipId]) return;\n    const buffer = this.buffers.getBuffer(clipId);\n    const trackId = this.audioset.index.trackIdOfClip[clipId];\n    const track = this.tracks[trackId];\n    const source = this.audio.createAudioSource({\n      buffer\n    }, track);\n    this.audioSources[clipId] = source;\n    source.start(time);\n  }\n\n  stop(clipId, time) {\n    const source = this.audioSources[clipId];\n\n    if (source !== undefined) {\n      source.stop(time);\n    }\n\n    this.audioSources[clipId] = undefined;\n  }\n\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/Player/Sampler.ts"],"names":["Sampler","constructor","audioset","buffers","audio","master","tracks","audioSources","createTrack","volume","forEach","track","id","run","command","start","clipId","time","stop","buffer","getBuffer","trackId","index","trackIdOfClip","source","createAudioSource","undefined"],"mappings":"AAQA,OAAO,MAAMA,OAAN,CAAc;AAKnBC,EAAAA,WAAW,CAASC,QAAT,EAAqCC,OAArC,EAAsEC,KAAtE,EAA0F;AAAA,SAAjFF,QAAiF,GAAjFA,QAAiF;AAAA,SAArDC,OAAqD,GAArDA,OAAqD;AAAA,SAApBC,KAAoB,GAApBA,KAAoB;AAAA,SAJ7FC,MAI6F;AAAA,SAH7FC,MAG6F,GAHxD,EAGwD;AAAA,SAF7FC,YAE6F,GAFrC,EAEqC;AACnG,SAAKF,MAAL,GAAcD,KAAK,CAACI,WAAN,CAAkB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAlB,CAAd;AACAP,IAAAA,QAAQ,CAACI,MAAT,CAAgBI,OAAhB,CAAyBC,KAAD,IAAW;AACjC,WAAKL,MAAL,CAAYK,KAAK,CAACC,EAAlB,IAAwBR,KAAK,CAACI,WAAN,CAAkB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAlB,EAAiC,KAAKJ,MAAtC,CAAxB;AACD,KAFD;AAGD;;AAEDQ,EAAAA,GAAG,CAACC,OAAD,EAA0B;AAC3B,YAAQA,OAAO,CAACA,OAAhB;AACE,WAAK,WAAL;AACE,eAAO,KAAKC,KAAL,CAAWD,OAAO,CAACE,MAAnB,EAA2BF,OAAO,CAACG,IAAnC,CAAP;;AACF,WAAK,UAAL;AACE,eAAO,KAAKC,IAAL,CAAUJ,OAAO,CAACE,MAAlB,EAA0BF,OAAO,CAACG,IAAlC,CAAP;;AACF;AALF;AAOD;;AAEDF,EAAAA,KAAK,CAACC,MAAD,EAAiBC,IAAjB,EAA+B;AAClC,QAAI,KAAKV,YAAL,CAAkBS,MAAlB,CAAJ,EAA+B;AAE/B,UAAMG,MAAM,GAAG,KAAKhB,OAAL,CAAaiB,SAAb,CAAuBJ,MAAvB,CAAf;AACA,UAAMK,OAAO,GAAG,KAAKnB,QAAL,CAAcoB,KAAd,CAAoBC,aAApB,CAAkCP,MAAlC,CAAhB;AACA,UAAML,KAAK,GAAG,KAAKL,MAAL,CAAYe,OAAZ,CAAd;AACA,UAAMG,MAAM,GAAG,KAAKpB,KAAL,CAAWqB,iBAAX,CAA6B;AAAEN,MAAAA;AAAF,KAA7B,EAAyCR,KAAzC,CAAf;AACA,SAAKJ,YAAL,CAAkBS,MAAlB,IAA4BQ,MAA5B;AAEAA,IAAAA,MAAM,CAACT,KAAP,CAAaE,IAAb;AACD;;AAEDC,EAAAA,IAAI,CAACF,MAAD,EAAiBC,IAAjB,EAA+B;AACjC,UAAMO,MAAM,GAAG,KAAKjB,YAAL,CAAkBS,MAAlB,CAAf;;AACA,QAAIQ,MAAM,KAAKE,SAAf,EAA0B;AACxBF,MAAAA,MAAM,CAACN,IAAP,CAAYD,IAAZ;AACD;;AACD,SAAKV,YAAL,CAAkBS,MAAlB,IAA4BU,SAA5B;AACD;;AAxCkB","sourcesContent":["import { Audioset } from \"../Audioset\";\nimport { AudioEngine, AudioTrack, AudioSource } from \"./Audio\";\nimport { ControlCommand } from \"./AudiosetControl\";\n\nexport interface SamplerBuffers {\n  getBuffer(clipId: string): any;\n}\n\nexport class Sampler {\n  private master: AudioTrack;\n  private tracks: Record<string, AudioTrack> = {};\n  private audioSources: Record<string, AudioSource | undefined> = {};\n\n  constructor(private audioset: Audioset, private buffers: SamplerBuffers, private audio: AudioEngine) {\n    this.master = audio.createTrack({ volume: 0.8 });\n    audioset.tracks.forEach((track) => {\n      this.tracks[track.id] = audio.createTrack({ volume: 1 }, this.master);\n    });\n  }\n\n  run(command: ControlCommand) {\n    switch (command.command) {\n      case \"startClip\":\n        return this.start(command.clipId, command.time);\n      case \"stopClip\":\n        return this.stop(command.clipId, command.time);\n      default:\n    }\n  }\n\n  start(clipId: string, time: number) {\n    if (this.audioSources[clipId]) return;\n\n    const buffer = this.buffers.getBuffer(clipId);\n    const trackId = this.audioset.index.trackIdOfClip[clipId];\n    const track = this.tracks[trackId];\n    const source = this.audio.createAudioSource({ buffer }, track);\n    this.audioSources[clipId] = source;\n\n    source.start(time);\n  }\n\n  stop(clipId: string, time: number) {\n    const source = this.audioSources[clipId];\n    if (source !== undefined) {\n      source.stop(time);\n    }\n    this.audioSources[clipId] = undefined;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}