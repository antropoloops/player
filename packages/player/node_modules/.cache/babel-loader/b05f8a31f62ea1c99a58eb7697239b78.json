{"ast":null,"code":"import { geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw, geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { abs, asin, atan2, cos, degrees, epsilon, epsilon2, halfPi, pi, radians, round, sin, sqrt } from \"./math.js\";\nexport function gingeryRaw(rho, n) {\n  var k = 2 * pi / n,\n      rho2 = rho * rho;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi),\n        x = p[0],\n        y = p[1],\n        r2 = x * x + y * y;\n\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          alpha = theta - theta0,\n          rhoCosAlpha = rho * cos(alpha),\n          k_ = (rho * sin(alpha) - alpha * sin(rhoCosAlpha)) / (halfPi - rhoCosAlpha),\n          s_ = gingeryLength(alpha, k_),\n          e = (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n      x = r;\n      var i = 50,\n          delta;\n\n      do {\n        x -= delta = (rho + gingeryIntegrate(s_, rhoCosAlpha, x) * e - r) / (s_(x) * e);\n      } while (abs(delta) > epsilon && --i > 0);\n\n      y = alpha * sin(x);\n      if (x < halfPi) y -= k_ * (x - halfPi);\n      var s = sin(theta0),\n          c = cos(theta0);\n      p[0] = x * c - y * s;\n      p[1] = x * s + y * c;\n    }\n\n    return p;\n  }\n\n  forward.invert = function (x, y) {\n    var r2 = x * x + y * y;\n\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          dTheta = theta - theta0;\n      x = r * cos(dTheta);\n      y = r * sin(dTheta);\n      var x_halfPi = x - halfPi,\n          sinx = sin(x),\n          alpha = y / sinx,\n          delta = x < halfPi ? Infinity : 0,\n          i = 10;\n\n      while (true) {\n        var rhosinAlpha = rho * sin(alpha),\n            rhoCosAlpha = rho * cos(alpha),\n            sinRhoCosAlpha = sin(rhoCosAlpha),\n            halfPi_RhoCosAlpha = halfPi - rhoCosAlpha,\n            k_ = (rhosinAlpha - alpha * sinRhoCosAlpha) / halfPi_RhoCosAlpha,\n            s_ = gingeryLength(alpha, k_);\n        if (abs(delta) < epsilon2 || ! --i) break;\n        alpha -= delta = (alpha * sinx - k_ * x_halfPi - y) / (sinx - x_halfPi * 2 * (halfPi_RhoCosAlpha * (rhoCosAlpha + alpha * rhosinAlpha * cos(rhoCosAlpha) - sinRhoCosAlpha) - rhosinAlpha * (rhosinAlpha - alpha * sinRhoCosAlpha)) / (halfPi_RhoCosAlpha * halfPi_RhoCosAlpha));\n      }\n\n      r = rho + gingeryIntegrate(s_, rhoCosAlpha, x) * (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n      theta = theta0 + alpha;\n      x = r * cos(theta);\n      y = r * sin(theta);\n    }\n\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction gingeryLength(alpha, k) {\n  return function (x) {\n    var y_ = alpha * cos(x);\n    if (x < halfPi) y_ -= k;\n    return sqrt(1 + y_ * y_);\n  };\n} // Numerical integration: trapezoidal rule.\n\n\nfunction gingeryIntegrate(f, a, b) {\n  var n = 50,\n      h = (b - a) / n,\n      s = f(a) + f(b);\n\n  for (var i = 1, x = a; i < n; ++i) {\n    s += 2 * f(x += h);\n  }\n\n  return s * 0.5 * h;\n}\n\nexport default function () {\n  var n = 6,\n      rho = 30 * radians,\n      cRho = cos(rho),\n      sRho = sin(rho),\n      m = projectionMutator(gingeryRaw),\n      p = m(rho, n),\n      stream_ = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.radius = function (_) {\n    if (!arguments.length) return rho * degrees;\n    cRho = cos(rho = _ * radians);\n    sRho = sin(rho);\n    return m(rho, n);\n  };\n\n  p.lobes = function (_) {\n    if (!arguments.length) return n;\n    return m(rho, n = +_);\n  };\n\n  p.stream = function (stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n\n    rotateStream.sphere = function () {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n\n      for (var i = 0, delta = 2 * pi / n, phi = 0; i < n; ++i, phi -= delta) {\n        sphereStream.point(atan2(sr * cos(phi), cr) * degrees, asin(sr * sin(phi)) * degrees);\n        sphereStream.point(atan2(sRho * cos(phi - delta / 2), cRho) * degrees, asin(sRho * sin(phi - delta / 2)) * degrees);\n      }\n\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n\n    return rotateStream;\n  };\n\n  return p.rotate([90, -40]).scale(91.7095).clipAngle(180 - 1e-3);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/gingery.js"],"names":["geoAzimuthalEquidistantRaw","azimuthalEquidistantRaw","geoProjectionMutator","projectionMutator","abs","asin","atan2","cos","degrees","epsilon","epsilon2","halfPi","pi","radians","round","sin","sqrt","gingeryRaw","rho","n","k","rho2","forward","lambda","phi","p","x","y","r2","r","theta","theta0","alpha","rhoCosAlpha","k_","s_","gingeryLength","e","gingeryIntegrate","i","delta","s","c","invert","dTheta","x_halfPi","sinx","Infinity","rhosinAlpha","sinRhoCosAlpha","halfPi_RhoCosAlpha","y_","f","a","b","h","cRho","sRho","m","stream_","stream","cr","sr","radius","_","arguments","length","lobes","rotate","rotateStream","sphereStream","sphere","polygonStart","lineStart","point","lineEnd","polygonEnd","scale","clipAngle"],"mappings":"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","sourcesContent":["import {geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, degrees, epsilon, epsilon2, halfPi, pi, radians, round, sin, sqrt} from \"./math.js\";\n\nexport function gingeryRaw(rho, n) {\n  var k = 2 * pi / n,\n      rho2 = rho * rho;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi),\n        x = p[0],\n        y = p[1],\n        r2 = x * x + y * y;\n\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          alpha = theta - theta0,\n          rhoCosAlpha = rho * cos(alpha),\n          k_ = (rho * sin(alpha) - alpha * sin(rhoCosAlpha)) / (halfPi - rhoCosAlpha),\n          s_ = gingeryLength(alpha, k_),\n          e = (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n\n      x = r;\n      var i = 50, delta;\n      do {\n        x -= delta = (rho + gingeryIntegrate(s_, rhoCosAlpha, x) * e - r) / (s_(x) * e);\n      } while (abs(delta) > epsilon && --i > 0);\n\n      y = alpha * sin(x);\n      if (x < halfPi) y -= k_ * (x - halfPi);\n\n      var s = sin(theta0),\n          c = cos(theta0);\n      p[0] = x * c - y * s;\n      p[1] = x * s + y * c;\n    }\n    return p;\n  }\n\n  forward.invert = function(x, y) {\n    var r2 = x * x + y * y;\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          dTheta = theta - theta0;\n\n      x = r * cos(dTheta);\n      y = r * sin(dTheta);\n\n      var x_halfPi = x - halfPi,\n          sinx = sin(x),\n          alpha = y / sinx,\n          delta = x < halfPi ? Infinity : 0,\n          i = 10;\n\n      while (true) {\n        var rhosinAlpha = rho * sin(alpha),\n            rhoCosAlpha = rho * cos(alpha),\n            sinRhoCosAlpha = sin(rhoCosAlpha),\n            halfPi_RhoCosAlpha = halfPi - rhoCosAlpha,\n            k_ = (rhosinAlpha - alpha * sinRhoCosAlpha) / halfPi_RhoCosAlpha,\n            s_ = gingeryLength(alpha, k_);\n\n        if (abs(delta) < epsilon2 || !--i) break;\n\n        alpha -= delta = (alpha * sinx - k_ * x_halfPi - y) / (\n          sinx - x_halfPi * 2 * (\n            halfPi_RhoCosAlpha * (rhoCosAlpha + alpha * rhosinAlpha * cos(rhoCosAlpha) - sinRhoCosAlpha) -\n            rhosinAlpha * (rhosinAlpha - alpha * sinRhoCosAlpha)\n          ) / (halfPi_RhoCosAlpha * halfPi_RhoCosAlpha));\n      }\n      r = rho + gingeryIntegrate(s_, rhoCosAlpha, x) * (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n      theta = theta0 + alpha;\n      x = r * cos(theta);\n      y = r * sin(theta);\n    }\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction gingeryLength(alpha, k) {\n  return function(x) {\n    var y_ = alpha * cos(x);\n    if (x < halfPi) y_ -= k;\n    return sqrt(1 + y_ * y_);\n  };\n}\n\n// Numerical integration: trapezoidal rule.\nfunction gingeryIntegrate(f, a, b) {\n  var n = 50,\n      h = (b - a) / n,\n      s = f(a) + f(b);\n  for (var i = 1, x = a; i < n; ++i) s += 2 * f(x += h);\n  return s * 0.5 * h;\n}\n\nexport default function() {\n  var n = 6,\n      rho = 30 * radians,\n      cRho = cos(rho),\n      sRho = sin(rho),\n      m = projectionMutator(gingeryRaw),\n      p = m(rho, n),\n      stream_ = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.radius = function(_) {\n    if (!arguments.length) return rho * degrees;\n    cRho = cos(rho = _ * radians);\n    sRho = sin(rho);\n    return m(rho, n);\n  };\n\n  p.lobes = function(_) {\n    if (!arguments.length) return n;\n    return m(rho, n = +_);\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var i = 0, delta = 2 * pi / n, phi = 0; i < n; ++i, phi -= delta) {\n        sphereStream.point(atan2(sr * cos(phi), cr) * degrees, asin(sr * sin(phi)) * degrees);\n        sphereStream.point(atan2(sRho * cos(phi - delta / 2), cRho) * degrees, asin(sRho * sin(phi - delta / 2)) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .rotate([90, -40])\n      .scale(91.7095)\n      .clipAngle(180 - 1e-3);\n}\n"]},"metadata":{},"sourceType":"module"}