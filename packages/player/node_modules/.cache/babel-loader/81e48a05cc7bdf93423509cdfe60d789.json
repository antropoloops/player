{"ast":null,"code":"import _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport { isNativeAudioNode } from '../guards/native-audio-node';\nexport var wrapAudioNodeDisconnectMethod = function wrapAudioNodeDisconnectMethod(nativeAudioNode) {\n  var connections = new Map();\n\n  nativeAudioNode.connect = function (connect) {\n    return function (destination) {\n      var output = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var input = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var returnValue = isNativeAudioNode(destination) ? connect(destination, output, input) : connect(destination, output); // Save the new connection only if the calls to connect above didn't throw an error.\n\n      var connectionsToDestination = connections.get(destination);\n\n      if (connectionsToDestination === undefined) {\n        connections.set(destination, [{\n          input: input,\n          output: output\n        }]);\n      } else {\n        if (connectionsToDestination.every(function (connection) {\n          return connection.input !== input || connection.output !== output;\n        })) {\n          connectionsToDestination.push({\n            input: input,\n            output: output\n          });\n        }\n      }\n\n      return returnValue;\n    };\n  }(nativeAudioNode.connect.bind(nativeAudioNode));\n\n  nativeAudioNode.disconnect = function (disconnect) {\n    return function (destinationOrOutput, output, input) {\n      disconnect.apply(nativeAudioNode);\n\n      if (destinationOrOutput === undefined) {\n        connections.clear();\n      } else if (typeof destinationOrOutput === 'number') {\n        var _iterator = _createForOfIteratorHelper(connections),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _step$value = _slicedToArray(_step.value, 2),\n                destination = _step$value[0],\n                connectionsToDestination = _step$value[1];\n\n            var filteredConnections = connectionsToDestination.filter(function (connection) {\n              return connection.output !== destinationOrOutput;\n            });\n\n            if (filteredConnections.length === 0) {\n              connections.delete(destination);\n            } else {\n              connections.set(destination, filteredConnections);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } else if (connections.has(destinationOrOutput)) {\n        if (output === undefined) {\n          connections.delete(destinationOrOutput);\n        } else {\n          var _connectionsToDestination = connections.get(destinationOrOutput);\n\n          if (_connectionsToDestination !== undefined) {\n            var _filteredConnections = _connectionsToDestination.filter(function (connection) {\n              return connection.output !== output && (connection.input !== input || input === undefined);\n            });\n\n            if (_filteredConnections.length === 0) {\n              connections.delete(destinationOrOutput);\n            } else {\n              connections.set(destinationOrOutput, _filteredConnections);\n            }\n          }\n        }\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(connections),\n          _step2;\n\n      try {\n        var _loop = function _loop() {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              destination = _step2$value[0],\n              connectionsToDestination = _step2$value[1];\n\n          connectionsToDestination.forEach(function (connection) {\n            if (isNativeAudioNode(destination)) {\n              nativeAudioNode.connect(destination, connection.output, connection.input);\n            } else {\n              nativeAudioNode.connect(destination, connection.output);\n            }\n          });\n        };\n\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    };\n  }(nativeAudioNode.disconnect);\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-node-disconnect-method.js"],"names":["isNativeAudioNode","wrapAudioNodeDisconnectMethod","nativeAudioNode","connections","Map","connect","destination","output","input","returnValue","connectionsToDestination","get","undefined","set","every","connection","push","bind","disconnect","destinationOrOutput","apply","clear","filteredConnections","filter","length","delete","has","forEach"],"mappings":"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","sourcesContent":["import { isNativeAudioNode } from '../guards/native-audio-node';\nexport const wrapAudioNodeDisconnectMethod = (nativeAudioNode) => {\n    const connections = new Map();\n    nativeAudioNode.connect = ((connect) => {\n        return (destination, output = 0, input = 0) => {\n            const returnValue = (isNativeAudioNode(destination))\n                ? connect(destination, output, input)\n                : connect(destination, output);\n            // Save the new connection only if the calls to connect above didn't throw an error.\n            const connectionsToDestination = connections.get(destination);\n            if (connectionsToDestination === undefined) {\n                connections.set(destination, [{ input, output }]);\n            }\n            else {\n                if (connectionsToDestination.every((connection) => (connection.input !== input || connection.output !== output))) {\n                    connectionsToDestination.push({ input, output });\n                }\n            }\n            return returnValue;\n        };\n    })(nativeAudioNode.connect.bind(nativeAudioNode));\n    nativeAudioNode.disconnect = ((disconnect) => {\n        return (destinationOrOutput, output, input) => {\n            disconnect.apply(nativeAudioNode);\n            if (destinationOrOutput === undefined) {\n                connections.clear();\n            }\n            else if (typeof destinationOrOutput === 'number') {\n                for (const [destination, connectionsToDestination] of connections) {\n                    const filteredConnections = connectionsToDestination\n                        .filter((connection) => (connection.output !== destinationOrOutput));\n                    if (filteredConnections.length === 0) {\n                        connections.delete(destination);\n                    }\n                    else {\n                        connections.set(destination, filteredConnections);\n                    }\n                }\n            }\n            else if (connections.has(destinationOrOutput)) {\n                if (output === undefined) {\n                    connections.delete(destinationOrOutput);\n                }\n                else {\n                    const connectionsToDestination = connections.get(destinationOrOutput);\n                    if (connectionsToDestination !== undefined) {\n                        const filteredConnections = connectionsToDestination\n                            .filter((connection) => (connection.output !== output && (connection.input !== input || input === undefined)));\n                        if (filteredConnections.length === 0) {\n                            connections.delete(destinationOrOutput);\n                        }\n                        else {\n                            connections.set(destinationOrOutput, filteredConnections);\n                        }\n                    }\n                }\n            }\n            for (const [destination, connectionsToDestination] of connections) {\n                connectionsToDestination\n                    .forEach((connection) => {\n                    if (isNativeAudioNode(destination)) {\n                        nativeAudioNode.connect(destination, connection.output, connection.input);\n                    }\n                    else {\n                        nativeAudioNode.connect(destination, connection.output);\n                    }\n                });\n            }\n        };\n    })(nativeAudioNode.disconnect);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-node-disconnect-method.js.map"]},"metadata":{},"sourceType":"module"}