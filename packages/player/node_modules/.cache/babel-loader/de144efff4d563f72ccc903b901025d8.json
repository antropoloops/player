{"ast":null,"code":"import { createInvalidStateError } from '../factories/invalid-state-error';\nexport var wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = function wrapAudioBufferSourceNodeStartMethodConsecutiveCalls(nativeAudioBufferSourceNode) {\n  nativeAudioBufferSourceNode.start = function (start) {\n    var isScheduled = false;\n    return function () {\n      var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var duration = arguments.length > 2 ? arguments[2] : undefined;\n\n      if (isScheduled) {\n        throw createInvalidStateError();\n      }\n\n      start.call(nativeAudioBufferSourceNode, when, offset, duration);\n      isScheduled = true;\n    };\n  }(nativeAudioBufferSourceNode.start);\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.js"],"names":["createInvalidStateError","wrapAudioBufferSourceNodeStartMethodConsecutiveCalls","nativeAudioBufferSourceNode","start","isScheduled","when","offset","duration","call"],"mappings":"AAAA,SAASA,uBAAT,QAAwC,kCAAxC;AACA,OAAO,IAAMC,oDAAoD,GAAG,SAAvDA,oDAAuD,CAACC,2BAAD,EAAiC;AACjGA,EAAAA,2BAA2B,CAACC,KAA5B,GAAqC,UAACA,KAAD,EAAW;AAC5C,QAAIC,WAAW,GAAG,KAAlB;AACA,WAAO,YAAoC;AAAA,UAAnCC,IAAmC,uEAA5B,CAA4B;AAAA,UAAzBC,MAAyB,uEAAhB,CAAgB;AAAA,UAAbC,QAAa;;AACvC,UAAIH,WAAJ,EAAiB;AACb,cAAMJ,uBAAuB,EAA7B;AACH;;AACDG,MAAAA,KAAK,CAACK,IAAN,CAAWN,2BAAX,EAAwCG,IAAxC,EAA8CC,MAA9C,EAAsDC,QAAtD;AACAH,MAAAA,WAAW,GAAG,IAAd;AACH,KAND;AAOH,GATmC,CASjCF,2BAA2B,CAACC,KATK,CAApC;AAUH,CAXM","sourcesContent":["import { createInvalidStateError } from '../factories/invalid-state-error';\nexport const wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = (nativeAudioBufferSourceNode) => {\n    nativeAudioBufferSourceNode.start = ((start) => {\n        let isScheduled = false;\n        return (when = 0, offset = 0, duration) => {\n            if (isScheduled) {\n                throw createInvalidStateError();\n            }\n            start.call(nativeAudioBufferSourceNode, when, offset, duration);\n            isScheduled = true;\n        };\n    })(nativeAudioBufferSourceNode.start);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.js.map"]},"metadata":{},"sourceType":"module"}