{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { abs, acos, cos, epsilon, pi, sin, sinci, sqrt } from \"./math.js\";\nexport function aitoffRaw(x, y) {\n  var cosy = cos(y),\n      sincia = sinci(acos(cosy * cos(x /= 2)));\n  return [2 * cosy * sin(x) * sincia, sin(y) * sincia];\n} // Abort if [x, y] is not within an ellipse centered at [0, 0] with\n// semi-major axis pi and semi-minor axis pi/2.\n\naitoffRaw.invert = function (x, y) {\n  if (x * x + 4 * y * y > pi * pi + epsilon) return;\n  var x1 = x,\n      y1 = y,\n      i = 25;\n\n  do {\n    var sinx = sin(x1),\n        sinx_2 = sin(x1 / 2),\n        cosx_2 = cos(x1 / 2),\n        siny = sin(y1),\n        cosy = cos(y1),\n        sin_2y = sin(2 * y1),\n        sin2y = siny * siny,\n        cos2y = cosy * cosy,\n        sin2x_2 = sinx_2 * sinx_2,\n        c = 1 - cos2y * cosx_2 * cosx_2,\n        e = c ? acos(cosy * cosx_2) * sqrt(f = 1 / c) : f = 0,\n        f,\n        fx = 2 * e * cosy * sinx_2 - x,\n        fy = e * siny - y,\n        dxdx = f * (cos2y * sin2x_2 + e * cosy * cosx_2 * sin2y),\n        dxdy = f * (0.5 * sinx * sin_2y - e * 2 * siny * sinx_2),\n        dydx = f * 0.25 * (sin_2y * sinx_2 - e * siny * cos2y * sinx),\n        dydy = f * (sin2y * cosx_2 + e * sin2x_2 * cosy),\n        z = dxdy * dydx - dydy * dxdx;\n    if (!z) break;\n    var dx = (fy * dxdy - fx * dydy) / z,\n        dy = (fx * dydx - fy * dxdx) / z;\n    x1 -= dx, y1 -= dy;\n  } while ((abs(dx) > epsilon || abs(dy) > epsilon) && --i > 0);\n\n  return [x1, y1];\n};\n\nexport default function () {\n  return projection(aitoffRaw).scale(152.63);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/aitoff.js"],"names":["geoProjection","projection","abs","acos","cos","epsilon","pi","sin","sinci","sqrt","aitoffRaw","x","y","cosy","sincia","invert","x1","y1","i","sinx","sinx_2","cosx_2","siny","sin_2y","sin2y","cos2y","sin2x_2","c","e","f","fx","fy","dxdx","dxdy","dydx","dydy","z","dx","dy","scale"],"mappings":"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","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, cos, epsilon, pi, sin, sinci, sqrt} from \"./math.js\";\n\nexport function aitoffRaw(x, y) {\n  var cosy = cos(y), sincia = sinci(acos(cosy * cos(x /= 2)));\n  return [2 * cosy * sin(x) * sincia, sin(y) * sincia];\n}\n\n// Abort if [x, y] is not within an ellipse centered at [0, 0] with\n// semi-major axis pi and semi-minor axis pi/2.\naitoffRaw.invert = function(x, y) {\n  if (x * x + 4 * y * y > pi * pi + epsilon) return;\n  var x1 = x, y1 = y, i = 25;\n  do {\n    var sinx = sin(x1),\n        sinx_2 = sin(x1 / 2),\n        cosx_2 = cos(x1 / 2),\n        siny = sin(y1),\n        cosy = cos(y1),\n        sin_2y = sin(2 * y1),\n        sin2y = siny * siny,\n        cos2y = cosy * cosy,\n        sin2x_2 = sinx_2 * sinx_2,\n        c = 1 - cos2y * cosx_2 * cosx_2,\n        e = c ? acos(cosy * cosx_2) * sqrt(f = 1 / c) : f = 0,\n        f,\n        fx = 2 * e * cosy * sinx_2 - x,\n        fy = e * siny - y,\n        dxdx = f * (cos2y * sin2x_2 + e * cosy * cosx_2 * sin2y),\n        dxdy = f * (0.5 * sinx * sin_2y - e * 2 * siny * sinx_2),\n        dydx = f * 0.25 * (sin_2y * sinx_2 - e * siny * cos2y * sinx),\n        dydy = f * (sin2y * cosx_2 + e * sin2x_2 * cosy),\n        z = dxdy * dydx - dydy * dxdx;\n    if (!z) break;\n    var dx = (fy * dxdy - fx * dydy) / z,\n        dy = (fx * dydx - fy * dxdx) / z;\n    x1 -= dx, y1 -= dy;\n  } while ((abs(dx) > epsilon || abs(dy) > epsilon) && --i > 0);\n  return [x1, y1];\n};\n\nexport default function() {\n  return projection(aitoffRaw)\n      .scale(152.63);\n}\n"]},"metadata":{},"sourceType":"module"}