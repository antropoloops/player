{"ast":null,"code":"import _classCallCheck from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import debug from\"debug\";import{addResizeObserver}from\"../add-resize-observer\";import{Visuals}from\"../visuals\";var log=debug(\"atpls:visuals\");export function createVisualEffects(audioset){return new VisualEffects(audioset);}var VisualEffects=/*#__PURE__*/function(){function VisualEffects(audioset){_classCallCheck(this,VisualEffects);this.audioset=audioset;this.visuals=void 0;}_createClass(VisualEffects,[{key:\"attach\",value:function attach(el){var _this=this;this.detach();this.visuals=new Visuals(this.audioset,el);setupVisuals(this.audioset,this.visuals);var resize=function resize(width,height){if(_this.visuals){_this.visuals.resizeSvg(width,height);}};this.detach=addResizeObserver(el,resize);}},{key:\"detach\",value:function detach(){// Attach replaces this method\n}},{key:\"run\",value:function run(command){if(this.visuals){switch(command.command){case\"startClip\":return this.visuals.show(command.clipId);case\"stopClip\":return this.visuals.hide(command.clipId);}}}}]);return VisualEffects;}();// TODO: this should be part of resource loader\nfunction setupVisuals(audioset,visuals){if(audioset.visuals.mode===\"map\"){// TODO: remove it when found a solution for mobile / desktop\nreturn fetchGeomap(audioset.visuals.geomap.url).then(function(data){return visuals.setGeodata(data);}).then(function(){return visuals;});}else{visuals.setup();return Promise.resolve(visuals);}}function fetchGeomap(url){log(\"Geomap url %s\",url);return fetch(url).then(function(response){return response.json();});}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/VisualEffects.ts"],"names":["debug","addResizeObserver","Visuals","log","createVisualEffects","audioset","VisualEffects","visuals","el","detach","setupVisuals","resize","width","height","resizeSvg","command","show","clipId","hide","mode","fetchGeomap","geomap","url","then","data","setGeodata","setup","Promise","resolve","fetch","response","json"],"mappings":"sTAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,iBAAT,KAAkC,wBAAlC,CAEA,OAASC,OAAT,KAAwB,YAAxB,CAIA,GAAMC,CAAAA,GAAG,CAAGH,KAAK,CAAC,eAAD,CAAjB,CAEA,MAAO,SAASI,CAAAA,mBAAT,CAA6BC,QAA7B,CAA0D,CAC/D,MAAO,IAAIC,CAAAA,aAAJ,CAAkBD,QAAlB,CAAP,CACD,C,GAEKC,CAAAA,a,yBAEJ,uBAAqBD,QAArB,CAAyC,0CAApBA,QAAoB,CAApBA,QAAoB,MADjCE,OACiC,QAAE,C,gEAE7BC,E,CAAe,gBAC3B,KAAKC,MAAL,GACA,KAAKF,OAAL,CAAe,GAAIL,CAAAA,OAAJ,CAAY,KAAKG,QAAjB,CAA2BG,EAA3B,CAAf,CACAE,YAAY,CAAC,KAAKL,QAAN,CAAgB,KAAKE,OAArB,CAAZ,CACA,GAAMI,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,KAAD,CAAgBC,MAAhB,CAAmC,CAChD,GAAI,KAAI,CAACN,OAAT,CAAkB,CAChB,KAAI,CAACA,OAAL,CAAaO,SAAb,CAAuBF,KAAvB,CAA8BC,MAA9B,EACD,CACF,CAJD,CAKA,KAAKJ,MAAL,CAAcR,iBAAiB,CAACO,EAAD,CAAKG,MAAL,CAA/B,CACD,C,uCACqB,CACpB;AACD,C,gCACUI,O,CAA+B,CACxC,GAAI,KAAKR,OAAT,CAAkB,CAChB,OAAQQ,OAAO,CAACA,OAAhB,EACE,IAAK,WAAL,CACE,MAAO,MAAKR,OAAL,CAAaS,IAAb,CAAkBD,OAAO,CAACE,MAA1B,CAAP,CACF,IAAK,UAAL,CACE,MAAO,MAAKV,OAAL,CAAaW,IAAb,CAAkBH,OAAO,CAACE,MAA1B,CAAP,CAJJ,CAMD,CACF,C,6BAGH;AACA,QAASP,CAAAA,YAAT,CAAsBL,QAAtB,CAA0CE,OAA1C,CAA8E,CAC5E,GAAIF,QAAQ,CAACE,OAAT,CAAiBY,IAAjB,GAA0B,KAA9B,CAAqC,CACnC;AACA,MAAOC,CAAAA,WAAW,CAACf,QAAQ,CAACE,OAAT,CAAiBc,MAAjB,CAAwBC,GAAzB,CAAX,CACJC,IADI,CACC,SAACC,IAAD,QAAkBjB,CAAAA,OAAO,CAACkB,UAAR,CAAmBD,IAAnB,CAAlB,EADD,EAEJD,IAFI,CAEC,iBAAMhB,CAAAA,OAAN,EAFD,CAAP,CAGD,CALD,IAKO,CACLA,OAAO,CAACmB,KAAR,GACA,MAAOC,CAAAA,OAAO,CAACC,OAAR,CAAgBrB,OAAhB,CAAP,CACD,CACF,CAED,QAASa,CAAAA,WAAT,CAAqBE,GAArB,CAAmD,CACjDnB,GAAG,CAAC,eAAD,CAAkBmB,GAAlB,CAAH,CAEA,MAAOO,CAAAA,KAAK,CAACP,GAAD,CAAL,CAAWC,IAAX,CAAgB,SAACO,QAAD,QAAcA,CAAAA,QAAQ,CAACC,IAAT,EAAd,EAAhB,CAAP,CACD","sourcesContent":["import debug from \"debug\";\nimport { addResizeObserver } from \"../add-resize-observer\";\nimport { Audioset } from \"../audioset\";\nimport { Visuals } from \"../visuals\";\nimport { ControlCommand } from \"./Control\";\nimport { Effects } from \"./Control\";\n\nconst log = debug(\"atpls:visuals\");\n\nexport function createVisualEffects(audioset: Audioset): Effects {\n  return new VisualEffects(audioset);\n}\n\nclass VisualEffects implements Effects {\n  private visuals?: Visuals;\n  constructor(readonly audioset: Audioset) {}\n\n  public attach(el: any): void {\n    this.detach();\n    this.visuals = new Visuals(this.audioset, el);\n    setupVisuals(this.audioset, this.visuals);\n    const resize = (width: number, height: number) => {\n      if (this.visuals) {\n        this.visuals.resizeSvg(width, height);\n      }\n    };\n    this.detach = addResizeObserver(el, resize);\n  }\n  public detach(): void {\n    // Attach replaces this method\n  }\n  public run(command: ControlCommand): void {\n    if (this.visuals) {\n      switch (command.command) {\n        case \"startClip\":\n          return this.visuals.show(command.clipId);\n        case \"stopClip\":\n          return this.visuals.hide(command.clipId);\n      }\n    }\n  }\n}\n\n// TODO: this should be part of resource loader\nfunction setupVisuals(audioset: Audioset, visuals: Visuals): Promise<Visuals> {\n  if (audioset.visuals.mode === \"map\") {\n    // TODO: remove it when found a solution for mobile / desktop\n    return fetchGeomap(audioset.visuals.geomap.url)\n      .then((data: object) => visuals.setGeodata(data))\n      .then(() => visuals);\n  } else {\n    visuals.setup();\n    return Promise.resolve(visuals);\n  }\n}\n\nfunction fetchGeomap(url: string): Promise<object> {\n  log(\"Geomap url %s\", url);\n\n  return fetch(url).then((response) => response.json());\n}\n"]},"metadata":{},"sourceType":"module"}