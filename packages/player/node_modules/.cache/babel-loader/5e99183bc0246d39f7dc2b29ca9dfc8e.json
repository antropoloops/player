{"ast":null,"code":"import _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/dani/Antropoloops/atpls-player/src/ui/Player/Player.tsx\";\nimport React, { useState } from \"react\";\nimport { getActiveAudioContext, player } from \"../../player\";\nimport { useDeviceType } from \"../useDeviceType\";\nimport { Sidebar } from \"./Sidebar\";\nimport { useFullscreen } from \"./useFullscreen\";\nimport { useKeyboardListener } from \"./useKeyboardListener\";\nimport { Visuals } from \"./Visuals\";\n\nconst startPlayer = () => getActiveAudioContext().then(() => {\n  player.resources.load();\n  player.control.keyboard.setActive(true);\n});\n\nexport const Player = ({\n  audioset\n}) => {\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        isReady = _useState2[0],\n        setReady = _useState2[1];\n\n  const fullscreen = useFullscreen();\n\n  const _useDeviceType = useDeviceType(),\n        isDesktop = _useDeviceType.isDesktop;\n\n  useKeyboardListener();\n  const isVisual = isDesktop || isReady;\n  const isSidebarVisible = !fullscreen.isFull; // useAutoStartAudio(isReady, audioset, handleStart);\n\n  return React.createElement(\"div\", {\n    className: \"App Player\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, isSidebarVisible && React.createElement(Sidebar, {\n    audioset: audioset,\n    onFullscreen: () => fullscreen.toggle(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), isVisual && React.createElement(\"div\", {\n    className: \"visuals\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(Visuals, {\n    audioset: audioset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  })));\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/Player.tsx"],"names":["React","useState","getActiveAudioContext","player","useDeviceType","Sidebar","useFullscreen","useKeyboardListener","Visuals","startPlayer","then","resources","load","control","keyboard","setActive","Player","audioset","isReady","setReady","fullscreen","isDesktop","isVisual","isSidebarVisible","isFull","toggle"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,qBAAT,EAAgCC,MAAhC,QAA8C,cAA9C;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,OAAT,QAAwB,WAAxB;;AAMA,MAAMC,WAAW,GAAG,MAClBP,qBAAqB,GAAGQ,IAAxB,CAA6B,MAAM;AACjCP,EAAAA,MAAM,CAACQ,SAAP,CAAiBC,IAAjB;AACAT,EAAAA,MAAM,CAACU,OAAP,CAAeC,QAAf,CAAwBC,SAAxB,CAAkC,IAAlC;AACD,CAHD,CADF;;AAMA,OAAO,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA+B;AAAA,oBACvBhB,QAAQ,EADe;AAAA;AAAA,QAC5CiB,OAD4C;AAAA,QACnCC,QADmC;;AAEnD,QAAMC,UAAU,GAAGd,aAAa,EAAhC;;AAFmD,yBAG7BF,aAAa,EAHgB;AAAA,QAG3CiB,SAH2C,kBAG3CA,SAH2C;;AAInDd,EAAAA,mBAAmB;AAEnB,QAAMe,QAAQ,GAAGD,SAAS,IAAIH,OAA9B;AAEA,QAAMK,gBAAgB,GAAG,CAACH,UAAU,CAACI,MAArC,CARmD,CASnD;;AAEA,SACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,gBAAgB,IACf,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAEN,QAAnB;AAA6B,IAAA,YAAY,EAAE,MAAMG,UAAU,CAACK,MAAX,EAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAIGH,QAAQ,IACP;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0B,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAEL,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA1B,CALJ,CADF;AAUD,CArBM","sourcesContent":["import React, { useState } from \"react\";\nimport { Audioset } from \"../../audioset\";\nimport { getActiveAudioContext, player } from \"../../player\";\nimport { useDeviceType } from \"../useDeviceType\";\nimport { Sidebar } from \"./Sidebar\";\nimport { useFullscreen } from \"./useFullscreen\";\nimport { useKeyboardListener } from \"./useKeyboardListener\";\nimport { Visuals } from \"./Visuals\";\n\nexport interface PlayerProps {\n  audioset: Audioset;\n}\n\nconst startPlayer = () =>\n  getActiveAudioContext().then(() => {\n    player.resources.load();\n    player.control.keyboard.setActive(true);\n  });\n\nexport const Player = ({ audioset }: PlayerProps) => {\n  const [isReady, setReady] = useState<boolean>();\n  const fullscreen = useFullscreen();\n  const { isDesktop } = useDeviceType();\n  useKeyboardListener();\n\n  const isVisual = isDesktop || isReady;\n\n  const isSidebarVisible = !fullscreen.isFull;\n  // useAutoStartAudio(isReady, audioset, handleStart);\n\n  return (\n    <div className=\"App Player\">\n      {isSidebarVisible && (\n        <Sidebar audioset={audioset} onFullscreen={() => fullscreen.toggle()} />\n      )}\n      {isVisual && (\n        <div className=\"visuals\">{<Visuals audioset={audioset} />}</div>\n      )}\n    </div>\n  );\n};\n\n"]},"metadata":{},"sourceType":"module"}