{"ast":null,"code":"export const createRenderInputsOfAudioNode = (getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle) => {\n  return async (audioNode, nativeOfflineAudioContext, nativeAudioNode, trace) => {\n    const audioNodeConnections = getAudioNodeConnections(audioNode);\n    const nextTrace = [...trace, audioNode];\n    await Promise.all(audioNodeConnections.activeInputs.map((connections, input) => Array.from(connections).filter(([source]) => !nextTrace.includes(source)).map(async ([source, output]) => {\n      const audioNodeRenderer = getAudioNodeRenderer(source);\n      const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext, nextTrace);\n\n      if (!isPartOfACycle(source) && !(audioNode === audioNode.context.destination && isPartOfACycle(audioNode))) {\n        renderedNativeAudioNode.connect(nativeAudioNode, output, input);\n      }\n    })).reduce((allRenderingPromises, renderingPromises) => [...allRenderingPromises, ...renderingPromises], []));\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/render-inputs-of-audio-node.js"],"names":["createRenderInputsOfAudioNode","getAudioNodeConnections","getAudioNodeRenderer","isPartOfACycle","audioNode","nativeOfflineAudioContext","nativeAudioNode","trace","audioNodeConnections","nextTrace","Promise","all","activeInputs","map","connections","input","Array","from","filter","source","includes","output","audioNodeRenderer","renderedNativeAudioNode","render","context","destination","connect","reduce","allRenderingPromises","renderingPromises"],"mappings":"AAAA,OAAO,MAAMA,6BAA6B,GAAG,CAACC,uBAAD,EAA0BC,oBAA1B,EAAgDC,cAAhD,KAAmE;AAC5G,SAAO,OAAOC,SAAP,EAAkBC,yBAAlB,EAA6CC,eAA7C,EAA8DC,KAA9D,KAAwE;AAC3E,UAAMC,oBAAoB,GAAGP,uBAAuB,CAACG,SAAD,CAApD;AACA,UAAMK,SAAS,GAAG,CAAC,GAAGF,KAAJ,EAAWH,SAAX,CAAlB;AACA,UAAMM,OAAO,CACRC,GADC,CACGH,oBAAoB,CAACI,YAArB,CACJC,GADI,CACA,CAACC,WAAD,EAAcC,KAAd,KAAwBC,KAAK,CACjCC,IAD4B,CACvBH,WADuB,EAE5BI,MAF4B,CAErB,CAAC,CAACC,MAAD,CAAD,KAAc,CAACV,SAAS,CAACW,QAAV,CAAmBD,MAAnB,CAFM,EAG5BN,GAH4B,CAGxB,OAAO,CAACM,MAAD,EAASE,MAAT,CAAP,KAA4B;AACjC,YAAMC,iBAAiB,GAAGpB,oBAAoB,CAACiB,MAAD,CAA9C;AACA,YAAMI,uBAAuB,GAAG,MAAMD,iBAAiB,CAACE,MAAlB,CAAyBL,MAAzB,EAAiCd,yBAAjC,EAA4DI,SAA5D,CAAtC;;AACA,UAAI,CAACN,cAAc,CAACgB,MAAD,CAAf,IAA2B,EAAEf,SAAS,KAAKA,SAAS,CAACqB,OAAV,CAAkBC,WAAhC,IAA+CvB,cAAc,CAACC,SAAD,CAA/D,CAA/B,EAA4G;AACxGmB,QAAAA,uBAAuB,CAACI,OAAxB,CAAgCrB,eAAhC,EAAiDe,MAAjD,EAAyDN,KAAzD;AACH;AACJ,KATgC,CADxB,EAWJa,MAXI,CAWG,CAACC,oBAAD,EAAuBC,iBAAvB,KAA6C,CAAC,GAAGD,oBAAJ,EAA0B,GAAGC,iBAA7B,CAXhD,EAWiG,EAXjG,CADH,CAAN;AAaH,GAhBD;AAiBH,CAlBM","sourcesContent":["export const createRenderInputsOfAudioNode = (getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle) => {\n    return async (audioNode, nativeOfflineAudioContext, nativeAudioNode, trace) => {\n        const audioNodeConnections = getAudioNodeConnections(audioNode);\n        const nextTrace = [...trace, audioNode];\n        await Promise\n            .all(audioNodeConnections.activeInputs\n            .map((connections, input) => Array\n            .from(connections)\n            .filter(([source]) => !nextTrace.includes(source))\n            .map(async ([source, output]) => {\n            const audioNodeRenderer = getAudioNodeRenderer(source);\n            const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext, nextTrace);\n            if (!isPartOfACycle(source) && !(audioNode === audioNode.context.destination && isPartOfACycle(audioNode))) {\n                renderedNativeAudioNode.connect(nativeAudioNode, output, input);\n            }\n        }))\n            .reduce((allRenderingPromises, renderingPromises) => [...allRenderingPromises, ...renderingPromises], []));\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/render-inputs-of-audio-node.js.map"]},"metadata":{},"sourceType":"module"}