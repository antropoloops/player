{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { augustRaw } from \"./august.js\";\nimport { abs, atan, cos, epsilon, halfPi, log, max, min, sin, sqrt, sqrt1_2, sqrt2 } from \"./math.js\";\nvar eisenlohrK = 3 + 2 * sqrt2;\nexport function eisenlohrRaw(lambda, phi) {\n  var s0 = sin(lambda /= 2),\n      c0 = cos(lambda),\n      k = sqrt(cos(phi)),\n      c1 = cos(phi /= 2),\n      t = sin(phi) / (c1 + sqrt2 * c0 * k),\n      c = sqrt(2 / (1 + t * t)),\n      v = sqrt((sqrt2 * c1 + (c0 + s0) * k) / (sqrt2 * c1 + (c0 - s0) * k));\n  return [eisenlohrK * (c * (v - 1 / v) - 2 * log(v)), eisenlohrK * (c * t * (v + 1 / v) - 2 * atan(t))];\n}\n\neisenlohrRaw.invert = function (x, y) {\n  if (!(p = augustRaw.invert(x / 1.2, y * 1.065))) return null;\n  var lambda = p[0],\n      phi = p[1],\n      i = 20,\n      p;\n  x /= eisenlohrK, y /= eisenlohrK;\n\n  do {\n    var _0 = lambda / 2,\n        _1 = phi / 2,\n        s0 = sin(_0),\n        c0 = cos(_0),\n        s1 = sin(_1),\n        c1 = cos(_1),\n        cos1 = cos(phi),\n        k = sqrt(cos1),\n        t = s1 / (c1 + sqrt2 * c0 * k),\n        t2 = t * t,\n        c = sqrt(2 / (1 + t2)),\n        v0 = sqrt2 * c1 + (c0 + s0) * k,\n        v1 = sqrt2 * c1 + (c0 - s0) * k,\n        v2 = v0 / v1,\n        v = sqrt(v2),\n        vm1v = v - 1 / v,\n        vp1v = v + 1 / v,\n        fx = c * vm1v - 2 * log(v) - x,\n        fy = c * t * vp1v - 2 * atan(t) - y,\n        deltatDeltaLambda = s1 && sqrt1_2 * k * s0 * t2 / s1,\n        deltatDeltaPhi = (sqrt2 * c0 * c1 + k) / (2 * (c1 + sqrt2 * c0 * k) * (c1 + sqrt2 * c0 * k) * k),\n        deltacDeltat = -0.5 * t * c * c * c,\n        deltacDeltaLambda = deltacDeltat * deltatDeltaLambda,\n        deltacDeltaPhi = deltacDeltat * deltatDeltaPhi,\n        A = (A = 2 * c1 + sqrt2 * k * (c0 - s0)) * A * v,\n        deltavDeltaLambda = (sqrt2 * c0 * c1 * k + cos1) / A,\n        deltavDeltaPhi = -(sqrt2 * s0 * s1) / (k * A),\n        deltaxDeltaLambda = vm1v * deltacDeltaLambda - 2 * deltavDeltaLambda / v + c * (deltavDeltaLambda + deltavDeltaLambda / v2),\n        deltaxDeltaPhi = vm1v * deltacDeltaPhi - 2 * deltavDeltaPhi / v + c * (deltavDeltaPhi + deltavDeltaPhi / v2),\n        deltayDeltaLambda = t * vp1v * deltacDeltaLambda - 2 * deltatDeltaLambda / (1 + t2) + c * vp1v * deltatDeltaLambda + c * t * (deltavDeltaLambda - deltavDeltaLambda / v2),\n        deltayDeltaPhi = t * vp1v * deltacDeltaPhi - 2 * deltatDeltaPhi / (1 + t2) + c * vp1v * deltatDeltaPhi + c * t * (deltavDeltaPhi - deltavDeltaPhi / v2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n\n    if (!denominator) break;\n    var deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda;\n    phi = max(-halfPi, min(halfPi, phi - deltaPhi));\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n\n  return abs(abs(phi) - halfPi) < epsilon ? [0, phi] : i && [lambda, phi];\n};\n\nexport default function () {\n  return projection(eisenlohrRaw).scale(62.5271);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/eisenlohr.js"],"names":["geoProjection","projection","augustRaw","abs","atan","cos","epsilon","halfPi","log","max","min","sin","sqrt","sqrt1_2","sqrt2","eisenlohrK","eisenlohrRaw","lambda","phi","s0","c0","k","c1","t","c","v","invert","x","y","p","i","_0","_1","s1","cos1","t2","v0","v1","v2","vm1v","vp1v","fx","fy","deltatDeltaLambda","deltatDeltaPhi","deltacDeltat","deltacDeltaLambda","deltacDeltaPhi","A","deltavDeltaLambda","deltavDeltaPhi","deltaxDeltaLambda","deltaxDeltaPhi","deltayDeltaLambda","deltayDeltaPhi","denominator","deltaLambda","deltaPhi","scale"],"mappings":"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","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {augustRaw} from \"./august.js\";\nimport {abs, atan, cos, epsilon, halfPi, log, max, min, sin, sqrt, sqrt1_2, sqrt2} from \"./math.js\";\n\nvar eisenlohrK = 3 + 2 * sqrt2;\n\nexport function eisenlohrRaw(lambda, phi) {\n  var s0 = sin(lambda /= 2),\n      c0 = cos(lambda),\n      k = sqrt(cos(phi)),\n      c1 = cos(phi /= 2),\n      t = sin(phi) / (c1 + sqrt2 * c0 * k),\n      c = sqrt(2 / (1 + t * t)),\n      v = sqrt((sqrt2 * c1 + (c0 + s0) * k) / (sqrt2 * c1 + (c0 - s0) * k));\n  return [\n    eisenlohrK * (c * (v - 1 / v) - 2 * log(v)),\n    eisenlohrK * (c * t * (v + 1 / v) - 2 * atan(t))\n  ];\n}\n\neisenlohrRaw.invert = function(x, y) {\n  if (!(p = augustRaw.invert(x / 1.2, y * 1.065))) return null;\n  var lambda = p[0], phi = p[1], i = 20, p;\n  x /= eisenlohrK, y /= eisenlohrK;\n  do {\n    var _0 = lambda / 2,\n        _1 = phi / 2,\n        s0 = sin(_0),\n        c0 = cos(_0),\n        s1 = sin(_1),\n        c1 = cos(_1),\n        cos1 = cos(phi),\n        k = sqrt(cos1),\n        t = s1 / (c1 + sqrt2 * c0 * k),\n        t2 = t * t,\n        c = sqrt(2 / (1 + t2)),\n        v0 = (sqrt2 * c1 + (c0 + s0) * k),\n        v1 = (sqrt2 * c1 + (c0 - s0) * k),\n        v2 = v0 / v1,\n        v = sqrt(v2),\n        vm1v = v - 1 / v,\n        vp1v = v + 1 / v,\n        fx = c * vm1v - 2 * log(v) - x,\n        fy = c * t * vp1v - 2 * atan(t) - y,\n        deltatDeltaLambda = s1 && sqrt1_2 * k * s0 * t2 / s1,\n        deltatDeltaPhi = (sqrt2 * c0 * c1 + k) / (2 * (c1 + sqrt2 * c0 * k) * (c1 + sqrt2 * c0 * k) * k),\n        deltacDeltat = -0.5 * t * c * c * c,\n        deltacDeltaLambda = deltacDeltat * deltatDeltaLambda,\n        deltacDeltaPhi = deltacDeltat * deltatDeltaPhi,\n        A = (A = 2 * c1 + sqrt2 * k * (c0 - s0)) * A * v,\n        deltavDeltaLambda = (sqrt2 * c0 * c1 * k + cos1) / A,\n        deltavDeltaPhi = -(sqrt2 * s0 * s1) / (k * A),\n        deltaxDeltaLambda = vm1v * deltacDeltaLambda - 2 * deltavDeltaLambda / v + c * (deltavDeltaLambda + deltavDeltaLambda / v2),\n        deltaxDeltaPhi = vm1v * deltacDeltaPhi - 2 * deltavDeltaPhi / v + c * (deltavDeltaPhi + deltavDeltaPhi / v2),\n        deltayDeltaLambda = t * vp1v * deltacDeltaLambda - 2 * deltatDeltaLambda / (1 + t2) + c * vp1v * deltatDeltaLambda + c * t * (deltavDeltaLambda - deltavDeltaLambda / v2),\n        deltayDeltaPhi = t * vp1v * deltacDeltaPhi - 2 * deltatDeltaPhi / (1 + t2) + c * vp1v * deltatDeltaPhi + c * t * (deltavDeltaPhi - deltavDeltaPhi / v2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n    if (!denominator) break;\n    var deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda;\n    phi = max(-halfPi, min(halfPi, phi - deltaPhi));\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n  return abs(abs(phi) - halfPi) < epsilon ? [0, phi] : i && [lambda, phi];\n};\n\nexport default function() {\n  return projection(eisenlohrRaw)\n      .scale(62.5271);\n}\n"]},"metadata":{},"sourceType":"module"}