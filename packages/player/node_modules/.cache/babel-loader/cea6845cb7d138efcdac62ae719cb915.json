{"ast":null,"code":"// import ResizeObserver from \"resize-observer-polyfill\";\nconst _window = window,\n      ResizeObserver = _window.ResizeObserver;\nexport function addResizeObserver(element, callback) {\n  const resizeObserver = new ResizeObserver(entries => {\n    if (!Array.isArray(entries)) {\n      return;\n    } // Since we only observe the one element, we don't need to loop over the array\n\n\n    if (!entries.length) {\n      return;\n    }\n\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    callback(width, height);\n  });\n  resizeObserver.observe(element);\n  return resizeObserver;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/visuals/addResizeObserver.ts"],"names":["window","ResizeObserver","addResizeObserver","element","callback","resizeObserver","entries","Array","isArray","length","entry","width","contentRect","height","observe"],"mappings":"AAAA;gBAE2BA,M;MAAnBC,c,WAAAA,c;AAIR,OAAO,SAASC,iBAAT,CACLC,OADK,EAELC,QAFK,EAGW;AAChB,QAAMC,cAAc,GAAG,IAAIJ,cAAJ,CAAmBK,OAAO,IAAI;AACnD,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,OAAd,CAAL,EAA6B;AAC3B;AACD,KAHkD,CAInD;;;AACA,QAAI,CAACA,OAAO,CAACG,MAAb,EAAqB;AACnB;AACD;;AACD,UAAMC,KAAK,GAAGJ,OAAO,CAAC,CAAD,CAArB;AACA,UAAMK,KAAK,GAAGD,KAAK,CAACE,WAAN,CAAkBD,KAAhC;AACA,UAAME,MAAM,GAAGH,KAAK,CAACE,WAAN,CAAkBC,MAAjC;AACAT,IAAAA,QAAQ,CAACO,KAAD,EAAQE,MAAR,CAAR;AACD,GAZsB,CAAvB;AAaAR,EAAAA,cAAc,CAACS,OAAf,CAAuBX,OAAvB;AACA,SAAOE,cAAP;AACD","sourcesContent":["// import ResizeObserver from \"resize-observer-polyfill\";\n\nconst { ResizeObserver } = window;\n\ntype ResizeListener = (width: number, heigth: number) => void;\n\nexport function addResizeObserver(\n  element: any,\n  callback: ResizeListener,\n): ResizeObserver {\n  const resizeObserver = new ResizeObserver(entries => {\n    if (!Array.isArray(entries)) {\n      return;\n    }\n    // Since we only observe the one element, we don't need to loop over the array\n    if (!entries.length) {\n      return;\n    }\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    callback(width, height);\n  });\n  resizeObserver.observe(element);\n  return resizeObserver;\n}\n"]},"metadata":{},"sourceType":"module"}