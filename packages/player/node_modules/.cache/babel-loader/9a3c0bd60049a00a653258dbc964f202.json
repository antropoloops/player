{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAnalyserNodeRendererFactory = (createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAnalyserNodes = new WeakMap();\n\n    const createAnalyserNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeAnalyserNode = getNativeAudioNode(proxy); // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);\n\n      if (!nativeAnalyserNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeAnalyserNode.channelCount,\n          channelCountMode: nativeAnalyserNode.channelCountMode,\n          channelInterpretation: nativeAnalyserNode.channelInterpretation,\n          fftSize: nativeAnalyserNode.fftSize,\n          maxDecibels: nativeAnalyserNode.maxDecibels,\n          minDecibels: nativeAnalyserNode.minDecibels,\n          smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant\n        };\n        nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode, trace);\n      return nativeAnalyserNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAnalyserNode !== undefined) {\n          return Promise.resolve(renderedNativeAnalyserNode);\n        }\n\n        return createAnalyserNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/analyser-node-renderer-factory.js"],"names":["isOwnedByContext","createAnalyserNodeRendererFactory","createNativeAnalyserNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeAnalyserNodes","WeakMap","createAnalyserNode","proxy","nativeOfflineAudioContext","trace","nativeAnalyserNode","nativeAnalyserNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","fftSize","maxDecibels","minDecibels","smoothingTimeConstant","set","render","renderedNativeAnalyserNode","get","undefined","Promise","resolve"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AACA,OAAO,MAAMC,iCAAiC,GAAG,CAACC,wBAAD,EAA2BC,kBAA3B,EAA+CC,uBAA/C,KAA2E;AACxH,SAAO,MAAM;AACT,UAAMC,2BAA2B,GAAG,IAAIC,OAAJ,EAApC;;AACA,UAAMC,kBAAkB,GAAG,OAAOC,KAAP,EAAcC,yBAAd,EAAyCC,KAAzC,KAAmD;AAC1E,UAAIC,kBAAkB,GAAGR,kBAAkB,CAACK,KAAD,CAA3C,CAD0E,CAE1E;;AACA,YAAMI,kCAAkC,GAAGZ,gBAAgB,CAACW,kBAAD,EAAqBF,yBAArB,CAA3D;;AACA,UAAI,CAACG,kCAAL,EAAyC;AACrC,cAAMC,OAAO,GAAG;AACZC,UAAAA,YAAY,EAAEH,kBAAkB,CAACG,YADrB;AAEZC,UAAAA,gBAAgB,EAAEJ,kBAAkB,CAACI,gBAFzB;AAGZC,UAAAA,qBAAqB,EAAEL,kBAAkB,CAACK,qBAH9B;AAIZC,UAAAA,OAAO,EAAEN,kBAAkB,CAACM,OAJhB;AAKZC,UAAAA,WAAW,EAAEP,kBAAkB,CAACO,WALpB;AAMZC,UAAAA,WAAW,EAAER,kBAAkB,CAACQ,WANpB;AAOZC,UAAAA,qBAAqB,EAAET,kBAAkB,CAACS;AAP9B,SAAhB;AASAT,QAAAA,kBAAkB,GAAGT,wBAAwB,CAACO,yBAAD,EAA4BI,OAA5B,CAA7C;AACH;;AACDR,MAAAA,2BAA2B,CAACgB,GAA5B,CAAgCZ,yBAAhC,EAA2DE,kBAA3D;AACA,YAAMP,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCE,kBAAnC,EAAuDD,KAAvD,CAA7B;AACA,aAAOC,kBAAP;AACH,KAnBD;;AAoBA,WAAO;AACHW,MAAAA,MAAM,CAACd,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,EAA0C;AAC5C,cAAMa,0BAA0B,GAAGlB,2BAA2B,CAACmB,GAA5B,CAAgCf,yBAAhC,CAAnC;;AACA,YAAIc,0BAA0B,KAAKE,SAAnC,EAA8C;AAC1C,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,0BAAhB,CAAP;AACH;;AACD,eAAOhB,kBAAkB,CAACC,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,CAAzB;AACH;;AAPE,KAAP;AASH,GA/BD;AAgCH,CAjCM","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAnalyserNodeRendererFactory = (createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeAnalyserNodes = new WeakMap();\n        const createAnalyserNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeAnalyserNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);\n            if (!nativeAnalyserNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAnalyserNode.channelCount,\n                    channelCountMode: nativeAnalyserNode.channelCountMode,\n                    channelInterpretation: nativeAnalyserNode.channelInterpretation,\n                    fftSize: nativeAnalyserNode.fftSize,\n                    maxDecibels: nativeAnalyserNode.maxDecibels,\n                    minDecibels: nativeAnalyserNode.minDecibels,\n                    smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant\n                };\n                nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode, trace);\n            return nativeAnalyserNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAnalyserNode !== undefined) {\n                    return Promise.resolve(renderedNativeAnalyserNode);\n                }\n                return createAnalyserNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/analyser-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}