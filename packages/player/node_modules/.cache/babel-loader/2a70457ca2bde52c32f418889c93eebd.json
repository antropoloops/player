{"ast":null,"code":"export const createAudioParamRenderer = automationEventList => {\n  return {\n    replay(audioParam) {\n      for (const automationEvent of automationEventList) {\n        if (automationEvent.type === 'exponentialRampToValue') {\n          const endTime = automationEvent.endTime,\n                value = automationEvent.value;\n          audioParam.exponentialRampToValueAtTime(value, endTime);\n        } else if (automationEvent.type === 'linearRampToValue') {\n          const endTime = automationEvent.endTime,\n                value = automationEvent.value;\n          audioParam.linearRampToValueAtTime(value, endTime);\n        } else if (automationEvent.type === 'setTarget') {\n          const startTime = automationEvent.startTime,\n                target = automationEvent.target,\n                timeConstant = automationEvent.timeConstant;\n          audioParam.setTargetAtTime(target, startTime, timeConstant);\n        } else if (automationEvent.type === 'setValue') {\n          const startTime = automationEvent.startTime,\n                value = automationEvent.value;\n          audioParam.setValueAtTime(value, startTime);\n        } else if (automationEvent.type === 'setValueCurve') {\n          const duration = automationEvent.duration,\n                startTime = automationEvent.startTime,\n                values = automationEvent.values;\n          audioParam.setValueCurveAtTime(values, startTime, duration);\n        } else {\n          throw new Error(\"Can't apply an unknown automation.\");\n        }\n      }\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/audio-param-renderer.js"],"names":["createAudioParamRenderer","automationEventList","replay","audioParam","automationEvent","type","endTime","value","exponentialRampToValueAtTime","linearRampToValueAtTime","startTime","target","timeConstant","setTargetAtTime","setValueAtTime","duration","values","setValueCurveAtTime","Error"],"mappings":"AAAA,OAAO,MAAMA,wBAAwB,GAAIC,mBAAD,IAAyB;AAC7D,SAAO;AACHC,IAAAA,MAAM,CAACC,UAAD,EAAa;AACf,WAAK,MAAMC,eAAX,IAA8BH,mBAA9B,EAAmD;AAC/C,YAAIG,eAAe,CAACC,IAAhB,KAAyB,wBAA7B,EAAuD;AAAA,gBAC3CC,OAD2C,GACxBF,eADwB,CAC3CE,OAD2C;AAAA,gBAClCC,KADkC,GACxBH,eADwB,CAClCG,KADkC;AAEnDJ,UAAAA,UAAU,CAACK,4BAAX,CAAwCD,KAAxC,EAA+CD,OAA/C;AACH,SAHD,MAIK,IAAIF,eAAe,CAACC,IAAhB,KAAyB,mBAA7B,EAAkD;AAAA,gBAC3CC,OAD2C,GACxBF,eADwB,CAC3CE,OAD2C;AAAA,gBAClCC,KADkC,GACxBH,eADwB,CAClCG,KADkC;AAEnDJ,UAAAA,UAAU,CAACM,uBAAX,CAAmCF,KAAnC,EAA0CD,OAA1C;AACH,SAHI,MAIA,IAAIF,eAAe,CAACC,IAAhB,KAAyB,WAA7B,EAA0C;AAAA,gBACnCK,SADmC,GACCN,eADD,CACnCM,SADmC;AAAA,gBACxBC,MADwB,GACCP,eADD,CACxBO,MADwB;AAAA,gBAChBC,YADgB,GACCR,eADD,CAChBQ,YADgB;AAE3CT,UAAAA,UAAU,CAACU,eAAX,CAA2BF,MAA3B,EAAmCD,SAAnC,EAA8CE,YAA9C;AACH,SAHI,MAIA,IAAIR,eAAe,CAACC,IAAhB,KAAyB,UAA7B,EAAyC;AAAA,gBAClCK,SADkC,GACbN,eADa,CAClCM,SADkC;AAAA,gBACvBH,KADuB,GACbH,eADa,CACvBG,KADuB;AAE1CJ,UAAAA,UAAU,CAACW,cAAX,CAA0BP,KAA1B,EAAiCG,SAAjC;AACH,SAHI,MAIA,IAAIN,eAAe,CAACC,IAAhB,KAAyB,eAA7B,EAA8C;AAAA,gBACvCU,QADuC,GACPX,eADO,CACvCW,QADuC;AAAA,gBAC7BL,SAD6B,GACPN,eADO,CAC7BM,SAD6B;AAAA,gBAClBM,MADkB,GACPZ,eADO,CAClBY,MADkB;AAE/Cb,UAAAA,UAAU,CAACc,mBAAX,CAA+BD,MAA/B,EAAuCN,SAAvC,EAAkDK,QAAlD;AACH,SAHI,MAIA;AACD,gBAAM,IAAIG,KAAJ,CAAU,oCAAV,CAAN;AACH;AACJ;AACJ;;AA3BE,GAAP;AA6BH,CA9BM","sourcesContent":["export const createAudioParamRenderer = (automationEventList) => {\n    return {\n        replay(audioParam) {\n            for (const automationEvent of automationEventList) {\n                if (automationEvent.type === 'exponentialRampToValue') {\n                    const { endTime, value } = automationEvent;\n                    audioParam.exponentialRampToValueAtTime(value, endTime);\n                }\n                else if (automationEvent.type === 'linearRampToValue') {\n                    const { endTime, value } = automationEvent;\n                    audioParam.linearRampToValueAtTime(value, endTime);\n                }\n                else if (automationEvent.type === 'setTarget') {\n                    const { startTime, target, timeConstant } = automationEvent;\n                    audioParam.setTargetAtTime(target, startTime, timeConstant);\n                }\n                else if (automationEvent.type === 'setValue') {\n                    const { startTime, value } = automationEvent;\n                    audioParam.setValueAtTime(value, startTime);\n                }\n                else if (automationEvent.type === 'setValueCurve') {\n                    const { duration, startTime, values } = automationEvent;\n                    audioParam.setValueCurveAtTime(values, startTime, duration);\n                }\n                else {\n                    throw new Error(\"Can't apply an unknown automation.\");\n                }\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-param-renderer.js.map"]},"metadata":{},"sourceType":"module"}