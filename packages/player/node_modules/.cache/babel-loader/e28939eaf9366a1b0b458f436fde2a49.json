{"ast":null,"code":"import { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nexport const createIncrementCycleCounterFactory = (cycleCounters, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode) => {\n  return isOffline => {\n    return (audioNode, count) => {\n      const cycleCounter = cycleCounters.get(audioNode);\n\n      if (cycleCounter === undefined) {\n        if (!isOffline && isActiveAudioNode(audioNode)) {\n          const nativeSourceAudioNode = getNativeAudioNode(audioNode);\n\n          const _getAudioNodeConnecti = getAudioNodeConnections(audioNode),\n                outputs = _getAudioNodeConnecti.outputs;\n\n          for (const output of outputs) {\n            if (isAudioNodeOutputConnection(output)) {\n              const nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n              disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n            } else {\n              const nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n              nativeSourceAudioNode.disconnect(nativeDestinationAudioParam, output[1]);\n            }\n          }\n        }\n\n        cycleCounters.set(audioNode, count);\n      } else {\n        cycleCounters.set(audioNode, cycleCounter + count);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/increment-cycle-counter-factory.js"],"names":["isAudioNodeOutputConnection","createIncrementCycleCounterFactory","cycleCounters","disconnectNativeAudioNodeFromNativeAudioNode","getAudioNodeConnections","getNativeAudioNode","getNativeAudioParam","isActiveAudioNode","isOffline","audioNode","count","cycleCounter","get","undefined","nativeSourceAudioNode","outputs","output","nativeDestinationAudioNode","nativeDestinationAudioParam","disconnect","set"],"mappings":"AAAA,SAASA,2BAAT,QAA4C,wCAA5C;AACA,OAAO,MAAMC,kCAAkC,GAAG,CAACC,aAAD,EAAgBC,4CAAhB,EAA8DC,uBAA9D,EAAuFC,kBAAvF,EAA2GC,mBAA3G,EAAgIC,iBAAhI,KAAsJ;AACpM,SAAQC,SAAD,IAAe;AAClB,WAAO,CAACC,SAAD,EAAYC,KAAZ,KAAsB;AACzB,YAAMC,YAAY,GAAGT,aAAa,CAACU,GAAd,CAAkBH,SAAlB,CAArB;;AACA,UAAIE,YAAY,KAAKE,SAArB,EAAgC;AAC5B,YAAI,CAACL,SAAD,IAAcD,iBAAiB,CAACE,SAAD,CAAnC,EAAgD;AAC5C,gBAAMK,qBAAqB,GAAGT,kBAAkB,CAACI,SAAD,CAAhD;;AAD4C,wCAExBL,uBAAuB,CAACK,SAAD,CAFC;AAAA,gBAEpCM,OAFoC,yBAEpCA,OAFoC;;AAG5C,eAAK,MAAMC,MAAX,IAAqBD,OAArB,EAA8B;AAC1B,gBAAIf,2BAA2B,CAACgB,MAAD,CAA/B,EAAyC;AACrC,oBAAMC,0BAA0B,GAAGZ,kBAAkB,CAACW,MAAM,CAAC,CAAD,CAAP,CAArD;AACAb,cAAAA,4CAA4C,CAACW,qBAAD,EAAwBG,0BAAxB,EAAoDD,MAAM,CAAC,CAAD,CAA1D,EAA+DA,MAAM,CAAC,CAAD,CAArE,CAA5C;AACH,aAHD,MAIK;AACD,oBAAME,2BAA2B,GAAGZ,mBAAmB,CAACU,MAAM,CAAC,CAAD,CAAP,CAAvD;AACAF,cAAAA,qBAAqB,CAACK,UAAtB,CAAiCD,2BAAjC,EAA8DF,MAAM,CAAC,CAAD,CAApE;AACH;AACJ;AACJ;;AACDd,QAAAA,aAAa,CAACkB,GAAd,CAAkBX,SAAlB,EAA6BC,KAA7B;AACH,OAhBD,MAiBK;AACDR,QAAAA,aAAa,CAACkB,GAAd,CAAkBX,SAAlB,EAA6BE,YAAY,GAAGD,KAA5C;AACH;AACJ,KAtBD;AAuBH,GAxBD;AAyBH,CA1BM","sourcesContent":["import { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nexport const createIncrementCycleCounterFactory = (cycleCounters, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode) => {\n    return (isOffline) => {\n        return (audioNode, count) => {\n            const cycleCounter = cycleCounters.get(audioNode);\n            if (cycleCounter === undefined) {\n                if (!isOffline && isActiveAudioNode(audioNode)) {\n                    const nativeSourceAudioNode = getNativeAudioNode(audioNode);\n                    const { outputs } = getAudioNodeConnections(audioNode);\n                    for (const output of outputs) {\n                        if (isAudioNodeOutputConnection(output)) {\n                            const nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n                            disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n                        }\n                        else {\n                            const nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n                            nativeSourceAudioNode.disconnect(nativeDestinationAudioParam, output[1]);\n                        }\n                    }\n                }\n                cycleCounters.set(audioNode, count);\n            }\n            else {\n                cycleCounters.set(audioNode, cycleCounter + count);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/increment-cycle-counter-factory.js.map"]},"metadata":{},"sourceType":"module"}