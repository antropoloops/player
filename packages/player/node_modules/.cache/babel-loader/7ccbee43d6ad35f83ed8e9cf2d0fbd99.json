{"ast":null,"code":"import _slicedToArray from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import*as topojson from\"topojson\";import{getAlbumHeight}from\"./dimensions\";import drawCircle from\"./drawCircle\";import drawAlbum from\"./drawAlbum\";import drawRefLine from\"./drawRefLine\";import drawWave from\"./drawWave\";import{drawMap,calculateMapScale,createMapProjector}from\"./drawMap\";import{drawPanel,createPanelProjector}from\"./drawPanel\";var remove=function remove(name,group){var value=group[name];if(value){value.remove();group[name]=null;}};function createProjector(visuals,dimensions){var width=dimensions.width,height=dimensions.height;var albumsHeight=getAlbumHeight(width);var scale=calculateMapScale(width,height-albumsHeight);if(visuals.mode===\"map\"){var _visuals$geomap=visuals.geomap,scaleFactor=_visuals$geomap.scaleFactor,center=_visuals$geomap.center;return createMapProjector(width,height-albumsHeight,scaleFactor*scale,center);}else{return createPanelProjector(width,height-albumsHeight,visuals.image.size.width,visuals.image.size.height);}}/**\n * It stores the state required to render visualizations\n */var Visuals=/*#__PURE__*/function(){function Visuals(set,display){_classCallCheck(this,Visuals);this.set=set;this.display=display;this.circles=void 0;this.albums=void 0;this.refLines=void 0;this.countries=void 0;this.backgroundContainer=void 0;this.circlesContainer=void 0;this.albumsContainer=void 0;this.refLinesContainer=void 0;this.wavesContainer=void 0;this.circles={};this.albums={};this.refLines={};}_createClass(Visuals,[{key:\"setGeodata\",value:function setGeodata(geodata){var collection=topojson.feature(geodata,geodata.objects.countries);this.countries=collection.features.filter(function(country){return country.id!==\"010\";});this.setup();}},{key:\"show\",value:function show(name){var clip=this.set.index.clipById[name];if(!clip)return;// REVIEW: See if there is a better way to get this info (scale, projection)\n// that is already calculated in drawMap\nvar _this$display$dimensi=this.display.dimensions,width=_this$display$dimensi.width,height=_this$display$dimensi.height;var albumsHeight=getAlbumHeight(width);var projector=createProjector(this.set.visuals,this.display.dimensions);var _projector=projector(clip.position),_projector2=_slicedToArray(_projector,2),cx=_projector2[0],cy=_projector2[1];// REVIEW: fix width parameter to draw circles with the proper size\nvar circle=drawCircle(this.circlesContainer,width,cx,cy,clip);this.circles[name]=circle;var album=drawAlbum(this.albumsContainer,width,clip);this.albums[name]=album;var refLine=drawRefLine(this.refLinesContainer,width,cx,cy,clip);this.refLines[name]=refLine;drawWave(this.wavesContainer,width,cx,cy,clip);}},{key:\"hide\",value:function hide(name){remove(name,this.circles);remove(name,this.albums);remove(name,this.refLines);}},{key:\"resizeSvg\",value:function resizeSvg(){// TODO: create a resize function that only changes the svg viewBox\nthis.setup();}},{key:\"setup\",value:function setup(){this.display.clear();this.display.createSvg();var backgroundWidth=this.display.dimensions.width;var albumsHeight=getAlbumHeight(backgroundWidth);var backgroundHeight=this.display.dimensions.height-albumsHeight;var svg=this.display.svg;this.backgroundContainer=createGroup(svg,\"background\",albumsHeight);this.albumsContainer=createGroup(svg,\"albums\",0);this.refLinesContainer=createGroup(svg,\"refLines\",albumsHeight);this.circlesContainer=createGroup(svg,\"circles\",albumsHeight);this.wavesContainer=createGroup(svg,\"waves\",albumsHeight);if(this.set.visuals.mode===\"map\"){drawMap(this.backgroundContainer,this.countries,backgroundWidth,backgroundHeight,this.set.visuals);}else{drawPanel(this.backgroundContainer,backgroundWidth,backgroundHeight,this.set.visuals.image.url);}}}]);return Visuals;}();export{Visuals as default};function createGroup(svg,id,height){return svg.append(\"g\").attr(\"id\",id).attr(\"transform\",\"translate(0, \".concat(height,\")\"));}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/visuals/visuals.ts"],"names":["topojson","getAlbumHeight","drawCircle","drawAlbum","drawRefLine","drawWave","drawMap","calculateMapScale","createMapProjector","drawPanel","createPanelProjector","remove","name","group","value","createProjector","visuals","dimensions","width","height","albumsHeight","scale","mode","geomap","scaleFactor","center","image","size","Visuals","set","display","circles","albums","refLines","countries","backgroundContainer","circlesContainer","albumsContainer","refLinesContainer","wavesContainer","geodata","collection","feature","objects","features","filter","country","id","setup","clip","index","clipById","projector","position","cx","cy","circle","album","refLine","clear","createSvg","backgroundWidth","backgroundHeight","svg","createGroup","url","append","attr"],"mappings":"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","sourcesContent":["import * as topojson from \"topojson\";\n\nimport { getAlbumHeight } from \"./dimensions\";\n\nimport drawCircle from \"./drawCircle\";\nimport drawAlbum from \"./drawAlbum\";\nimport drawRefLine from \"./drawRefLine\";\nimport drawWave from \"./drawWave\";\nimport { drawMap, calculateMapScale, createMapProjector } from \"./drawMap\";\nimport { drawPanel, createPanelProjector } from \"./drawPanel\";\nimport { Audioset, AudiosetVisuals } from \"../Audioset\";\nimport Display, { Dimension } from \"./display\";\n\nconst remove = (name:string, group:any) => {\n  const value = group[name];\n  if (value) {\n    value.remove();\n    group[name] = null;\n  }\n};\n\nfunction createProjector(visuals: AudiosetVisuals, dimensions: Dimension) {\n  const { width, height } = dimensions;\n  const albumsHeight = getAlbumHeight(width);\n  const scale = calculateMapScale(width, height - albumsHeight);\n  if (visuals.mode === \"map\") {\n    const { scaleFactor, center } = visuals.geomap;\n    return createMapProjector(width, height - albumsHeight, scaleFactor * scale, center);\n  } else {\n    return createPanelProjector(width, height - albumsHeight, visuals.image.size.width, visuals.image.size.height);\n  }\n}\n\n/**\n * It stores the state required to render visualizations\n */\nexport default class Visuals {\n  circles: Record<string, any>;\n  albums: Record<string, any>;\n  refLines: Record<string, any>;\n  countries: any;\n  backgroundContainer: any;\n  circlesContainer!: Record<string, any>;\n  albumsContainer!: Record<string, any>;\n  refLinesContainer!: Record<string, any>;\n  wavesContainer!: Record<string, any>;\n\n  constructor(private set: Audioset, private display: Display) {\n    this.circles = {};\n    this.albums = {};\n    this.refLines = {};\n  }\n\n  setGeodata(geodata: any) {\n    const collection = topojson.feature(geodata, geodata.objects.countries) as any;\n    this.countries = collection.features.filter((country: any) => country.id !== \"010\");\n    this.setup();\n  }\n\n  show(name: string) {\n    const clip = this.set.index.clipById[name];\n    if (!clip) return;\n\n    // REVIEW: See if there is a better way to get this info (scale, projection)\n    // that is already calculated in drawMap\n    const { width, height } = this.display.dimensions;\n    const albumsHeight = getAlbumHeight(width);\n\n    const projector = createProjector(this.set.visuals, this.display.dimensions);\n    const [cx, cy] = projector(clip.position);\n\n    // REVIEW: fix width parameter to draw circles with the proper size\n    const circle = drawCircle(this.circlesContainer, width, cx, cy, clip);\n    this.circles[name] = circle;\n\n    const album = drawAlbum(this.albumsContainer, width, clip);\n    this.albums[name] = album;\n\n    const refLine = drawRefLine(this.refLinesContainer, width, cx, cy, clip);\n    this.refLines[name] = refLine;\n\n    drawWave(this.wavesContainer, width, cx, cy, clip);\n  }\n\n  hide(name: string) {\n    remove(name, this.circles);\n    remove(name, this.albums);\n    remove(name, this.refLines);\n  }\n\n  resizeSvg() {\n    // TODO: create a resize function that only changes the svg viewBox\n    this.setup();\n  }\n\n  setup() {\n    this.display.clear();\n    this.display.createSvg();\n\n    const backgroundWidth = this.display.dimensions.width;\n    const albumsHeight = getAlbumHeight(backgroundWidth);\n    const backgroundHeight = this.display.dimensions.height - albumsHeight;\n\n    const svg = this.display.svg;\n\n    this.backgroundContainer = createGroup(svg, \"background\", albumsHeight);\n    this.albumsContainer = createGroup(svg, \"albums\", 0);\n    this.refLinesContainer = createGroup(svg, \"refLines\", albumsHeight);\n    this.circlesContainer = createGroup(svg, \"circles\", albumsHeight);\n    this.wavesContainer = createGroup(svg, \"waves\", albumsHeight);\n\n    if (this.set.visuals.mode === \"map\") {\n      drawMap(this.backgroundContainer, this.countries, backgroundWidth, backgroundHeight, this.set.visuals);\n    } else {\n      drawPanel(this.backgroundContainer, backgroundWidth, backgroundHeight, this.set.visuals.image.url);\n    }\n  }\n\n\n}\n\nfunction createGroup(svg:any, id:string, height:number) {\n  return svg.append(\"g\").attr(\"id\", id).attr(\"transform\", `translate(0, ${height})`);\n}\n"]},"metadata":{},"sourceType":"module"}