{"ast":null,"code":"import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { isConstructible } from '../helpers/is-constructible';\nimport { splitImportStatements } from '../helpers/split-import-statements';\n\nconst verifyParameterDescriptors = parameterDescriptors => {\n  if (parameterDescriptors !== undefined && !Array.isArray(parameterDescriptors)) {\n    throw new TypeError('The parameterDescriptors property of given value for processorCtor is not an array.');\n  }\n};\n\nconst verifyProcessorCtor = processorCtor => {\n  if (!isConstructible(processorCtor)) {\n    throw new TypeError('The given value for processorCtor should be a constructor.');\n  }\n\n  if (processorCtor.prototype === null || typeof processorCtor.prototype !== 'object') {\n    throw new TypeError('The given value for processorCtor should have a prototype.');\n  }\n};\n\nexport const createAddAudioWorkletModule = (createAbortError, createNotSupportedError, evaluateSource, exposeCurrentFrameAndCurrentTime, fetchSource, getBackupNativeContext, getNativeContext, ongoingRequests, resolvedRequests) => {\n  return (context, moduleURL, options = {\n    credentials: 'omit'\n  }) => {\n    const nativeContext = getNativeContext(context);\n    const absoluteUrl = new URL(moduleURL, location.href).toString(); // Bug #59: Only Chrome & Opera do implement the audioWorklet property.\n\n    if (nativeContext.audioWorklet !== undefined) {\n      return fetchSource(moduleURL).then(source => {\n        const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n        /*\n         * Bug #86: Chrome and Opera do not invoke the process() function if the corresponding AudioWorkletNode has no output.\n         *\n         * This is the unminified version of the code used below:\n         *\n         * ```js\n         * `${ importStatements };\n         * ((registerProcessor) => {${ sourceWithoutImportStatements }\n         * })((name, processorCtor) => registerProcessor(name, class extends processorCtor {\n         *\n         *     constructor (options) {\n         *         const { hasNoOutput, ...otherParameterData } = options.parameterData;\n         *\n         *         if (hasNoOutput === 1) {\n         *             super({ ...options, numberOfOutputs: 0, outputChannelCount: [ ], parameterData: otherParameterData });\n         *\n         *             this._hasNoOutput = true;\n         *         } else {\n         *             super(options);\n         *\n         *             this._hasNoOutput = false;\n         *         }\n         *     }\n         *\n         *     process (inputs, outputs, parameters) {\n         *         return super.process(inputs, (this._hasNoOutput) ? [ ] : outputs, parameters);\n         *     }\n         *\n         * }))`\n         * ```\n         */\n\n        const wrappedSource = `${importStatements};(registerProcessor=>{${sourceWithoutImportStatements}\n})((n,p)=>registerProcessor(n,class extends p{constructor(o){const{hasNoOutput,...q}=o.parameterData;if(hasNoOutput===1){super({...o,numberOfOutputs:0,outputChannelCount:[],parameterData:q});this._h=true}else{super(o);this._h=false}}process(i,o,p){return super.process(i,(this._h)?[]:o,p)}}))`; // tslint:disable-line:max-line-length\n\n        const blob = new Blob([wrappedSource], {\n          type: 'application/javascript; charset=utf-8'\n        });\n        const url = URL.createObjectURL(blob);\n        const backupNativeContext = getBackupNativeContext(nativeContext);\n        const nativeContextOrBackupNativeContext = backupNativeContext !== null ? backupNativeContext : nativeContext;\n        return nativeContextOrBackupNativeContext.audioWorklet.addModule(url, options).then(() => URL.revokeObjectURL(url)) // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n        .catch(err => {\n          URL.revokeObjectURL(url);\n          throw err; // tslint:disable-line:rxjs-throw-error\n        });\n      });\n    }\n\n    const resolvedRequestsOfContext = resolvedRequests.get(context);\n\n    if (resolvedRequestsOfContext !== undefined && resolvedRequestsOfContext.has(moduleURL)) {\n      return Promise.resolve();\n    }\n\n    const ongoingRequestsOfContext = ongoingRequests.get(context);\n\n    if (ongoingRequestsOfContext !== undefined) {\n      const promiseOfOngoingRequest = ongoingRequestsOfContext.get(moduleURL);\n\n      if (promiseOfOngoingRequest !== undefined) {\n        return promiseOfOngoingRequest;\n      }\n    }\n\n    const promise = fetchSource(moduleURL).then(source => {\n      const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n      /*\n       * This is the unminified version of the code used below:\n       *\n       * ```js\n       * ${ importStatements };\n       * ((a, b) => {\n       *     (a[b] = a[b] || [ ]).push(\n       *         (AudioWorkletProcessor, global, registerProcessor, sampleRate, self, window) => {\n       *             ${ sourceWithoutImportStatements }\n       *         }\n       *     );\n       * })(window, '_AWGS');\n       * ```\n       */\n      // tslint:disable-next-line:max-line-length\n\n      const wrappedSource = `${importStatements};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${sourceWithoutImportStatements}\n})})(window,'_AWGS')`; // @todo Evaluating the given source code is a possible security problem.\n\n      return evaluateSource(wrappedSource);\n    }).then(() => {\n      const evaluateAudioWorkletGlobalScope = window._AWGS.pop();\n\n      if (evaluateAudioWorkletGlobalScope === undefined) {\n        throw new SyntaxError();\n      }\n\n      exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () => evaluateAudioWorkletGlobalScope(class AudioWorkletProcessor {}, undefined, (name, processorCtor) => {\n        if (name.trim() === '') {\n          throw createNotSupportedError();\n        }\n\n        const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n\n        if (nodeNameToProcessorConstructorMap !== undefined) {\n          if (nodeNameToProcessorConstructorMap.has(name)) {\n            throw createNotSupportedError();\n          }\n\n          verifyProcessorCtor(processorCtor);\n          verifyParameterDescriptors(processorCtor.parameterDescriptors);\n          nodeNameToProcessorConstructorMap.set(name, processorCtor);\n        } else {\n          verifyProcessorCtor(processorCtor);\n          verifyParameterDescriptors(processorCtor.parameterDescriptors);\n          NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.set(nativeContext, new Map([[name, processorCtor]]));\n        }\n      }, nativeContext.sampleRate, undefined, undefined));\n    }).catch(err => {\n      if (err.name === 'SyntaxError') {\n        throw createAbortError();\n      }\n\n      throw err; // tslint:disable-line:rxjs-throw-error\n    });\n\n    if (ongoingRequestsOfContext === undefined) {\n      ongoingRequests.set(context, new Map([[moduleURL, promise]]));\n    } else {\n      ongoingRequestsOfContext.set(moduleURL, promise);\n    }\n\n    promise.then(() => {\n      const rslvdRqstsFCntxt = resolvedRequests.get(context);\n\n      if (rslvdRqstsFCntxt === undefined) {\n        resolvedRequests.set(context, new Set([moduleURL]));\n      } else {\n        rslvdRqstsFCntxt.add(moduleURL);\n      }\n    }).catch(() => {}) // tslint:disable-line:no-empty\n    // @todo Use finally when it becomes available in all supported browsers.\n    .then(() => {\n      const ngngRqstsFCntxt = ongoingRequests.get(context);\n\n      if (ngngRqstsFCntxt !== undefined) {\n        ngngRqstsFCntxt.delete(moduleURL);\n      }\n    });\n    return promise;\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/add-audio-worklet-module.js"],"names":["NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS","isConstructible","splitImportStatements","verifyParameterDescriptors","parameterDescriptors","undefined","Array","isArray","TypeError","verifyProcessorCtor","processorCtor","prototype","createAddAudioWorkletModule","createAbortError","createNotSupportedError","evaluateSource","exposeCurrentFrameAndCurrentTime","fetchSource","getBackupNativeContext","getNativeContext","ongoingRequests","resolvedRequests","context","moduleURL","options","credentials","nativeContext","absoluteUrl","URL","location","href","toString","audioWorklet","then","source","importStatements","sourceWithoutImportStatements","wrappedSource","blob","Blob","type","url","createObjectURL","backupNativeContext","nativeContextOrBackupNativeContext","addModule","revokeObjectURL","catch","err","resolvedRequestsOfContext","get","has","Promise","resolve","ongoingRequestsOfContext","promiseOfOngoingRequest","promise","evaluateAudioWorkletGlobalScope","window","_AWGS","pop","SyntaxError","currentTime","sampleRate","AudioWorkletProcessor","name","trim","nodeNameToProcessorConstructorMap","set","Map","rslvdRqstsFCntxt","Set","add","ngngRqstsFCntxt","delete"],"mappings":"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","sourcesContent":["import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { isConstructible } from '../helpers/is-constructible';\nimport { splitImportStatements } from '../helpers/split-import-statements';\nconst verifyParameterDescriptors = (parameterDescriptors) => {\n    if (parameterDescriptors !== undefined && !Array.isArray(parameterDescriptors)) {\n        throw new TypeError('The parameterDescriptors property of given value for processorCtor is not an array.');\n    }\n};\nconst verifyProcessorCtor = (processorCtor) => {\n    if (!isConstructible(processorCtor)) {\n        throw new TypeError('The given value for processorCtor should be a constructor.');\n    }\n    if (processorCtor.prototype === null || typeof processorCtor.prototype !== 'object') {\n        throw new TypeError('The given value for processorCtor should have a prototype.');\n    }\n};\nexport const createAddAudioWorkletModule = (createAbortError, createNotSupportedError, evaluateSource, exposeCurrentFrameAndCurrentTime, fetchSource, getBackupNativeContext, getNativeContext, ongoingRequests, resolvedRequests) => {\n    return (context, moduleURL, options = { credentials: 'omit' }) => {\n        const nativeContext = getNativeContext(context);\n        const absoluteUrl = (new URL(moduleURL, location.href)).toString();\n        // Bug #59: Only Chrome & Opera do implement the audioWorklet property.\n        if (nativeContext.audioWorklet !== undefined) {\n            return fetchSource(moduleURL)\n                .then((source) => {\n                const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n                /*\n                 * Bug #86: Chrome and Opera do not invoke the process() function if the corresponding AudioWorkletNode has no output.\n                 *\n                 * This is the unminified version of the code used below:\n                 *\n                 * ```js\n                 * `${ importStatements };\n                 * ((registerProcessor) => {${ sourceWithoutImportStatements }\n                 * })((name, processorCtor) => registerProcessor(name, class extends processorCtor {\n                 *\n                 *     constructor (options) {\n                 *         const { hasNoOutput, ...otherParameterData } = options.parameterData;\n                 *\n                 *         if (hasNoOutput === 1) {\n                 *             super({ ...options, numberOfOutputs: 0, outputChannelCount: [ ], parameterData: otherParameterData });\n                 *\n                 *             this._hasNoOutput = true;\n                 *         } else {\n                 *             super(options);\n                 *\n                 *             this._hasNoOutput = false;\n                 *         }\n                 *     }\n                 *\n                 *     process (inputs, outputs, parameters) {\n                 *         return super.process(inputs, (this._hasNoOutput) ? [ ] : outputs, parameters);\n                 *     }\n                 *\n                 * }))`\n                 * ```\n                 */\n                const wrappedSource = `${importStatements};(registerProcessor=>{${sourceWithoutImportStatements}\n})((n,p)=>registerProcessor(n,class extends p{constructor(o){const{hasNoOutput,...q}=o.parameterData;if(hasNoOutput===1){super({...o,numberOfOutputs:0,outputChannelCount:[],parameterData:q});this._h=true}else{super(o);this._h=false}}process(i,o,p){return super.process(i,(this._h)?[]:o,p)}}))`; // tslint:disable-line:max-line-length\n                const blob = new Blob([wrappedSource], { type: 'application/javascript; charset=utf-8' });\n                const url = URL.createObjectURL(blob);\n                const backupNativeContext = getBackupNativeContext(nativeContext);\n                const nativeContextOrBackupNativeContext = (backupNativeContext !== null) ? backupNativeContext : nativeContext;\n                return nativeContextOrBackupNativeContext.audioWorklet\n                    .addModule(url, options)\n                    .then(() => URL.revokeObjectURL(url))\n                    // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n                    .catch((err) => {\n                    URL.revokeObjectURL(url);\n                    throw err; // tslint:disable-line:rxjs-throw-error\n                });\n            });\n        }\n        const resolvedRequestsOfContext = resolvedRequests.get(context);\n        if (resolvedRequestsOfContext !== undefined && resolvedRequestsOfContext.has(moduleURL)) {\n            return Promise.resolve();\n        }\n        const ongoingRequestsOfContext = ongoingRequests.get(context);\n        if (ongoingRequestsOfContext !== undefined) {\n            const promiseOfOngoingRequest = ongoingRequestsOfContext.get(moduleURL);\n            if (promiseOfOngoingRequest !== undefined) {\n                return promiseOfOngoingRequest;\n            }\n        }\n        const promise = fetchSource(moduleURL)\n            .then((source) => {\n            const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n            /*\n             * This is the unminified version of the code used below:\n             *\n             * ```js\n             * ${ importStatements };\n             * ((a, b) => {\n             *     (a[b] = a[b] || [ ]).push(\n             *         (AudioWorkletProcessor, global, registerProcessor, sampleRate, self, window) => {\n             *             ${ sourceWithoutImportStatements }\n             *         }\n             *     );\n             * })(window, '_AWGS');\n             * ```\n             */\n            // tslint:disable-next-line:max-line-length\n            const wrappedSource = `${importStatements};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${sourceWithoutImportStatements}\n})})(window,'_AWGS')`;\n            // @todo Evaluating the given source code is a possible security problem.\n            return evaluateSource(wrappedSource);\n        })\n            .then(() => {\n            const evaluateAudioWorkletGlobalScope = window._AWGS.pop();\n            if (evaluateAudioWorkletGlobalScope === undefined) {\n                throw new SyntaxError();\n            }\n            exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () => evaluateAudioWorkletGlobalScope(class AudioWorkletProcessor {\n            }, undefined, (name, processorCtor) => {\n                if (name.trim() === '') {\n                    throw createNotSupportedError();\n                }\n                const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n                if (nodeNameToProcessorConstructorMap !== undefined) {\n                    if (nodeNameToProcessorConstructorMap.has(name)) {\n                        throw createNotSupportedError();\n                    }\n                    verifyProcessorCtor(processorCtor);\n                    verifyParameterDescriptors(processorCtor.parameterDescriptors);\n                    nodeNameToProcessorConstructorMap.set(name, processorCtor);\n                }\n                else {\n                    verifyProcessorCtor(processorCtor);\n                    verifyParameterDescriptors(processorCtor.parameterDescriptors);\n                    NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.set(nativeContext, new Map([[name, processorCtor]]));\n                }\n            }, nativeContext.sampleRate, undefined, undefined));\n        })\n            .catch((err) => {\n            if (err.name === 'SyntaxError') {\n                throw createAbortError();\n            }\n            throw err; // tslint:disable-line:rxjs-throw-error\n        });\n        if (ongoingRequestsOfContext === undefined) {\n            ongoingRequests.set(context, new Map([[moduleURL, promise]]));\n        }\n        else {\n            ongoingRequestsOfContext.set(moduleURL, promise);\n        }\n        promise\n            .then(() => {\n            const rslvdRqstsFCntxt = resolvedRequests.get(context);\n            if (rslvdRqstsFCntxt === undefined) {\n                resolvedRequests.set(context, new Set([moduleURL]));\n            }\n            else {\n                rslvdRqstsFCntxt.add(moduleURL);\n            }\n        })\n            .catch(() => { }) // tslint:disable-line:no-empty\n            // @todo Use finally when it becomes available in all supported browsers.\n            .then(() => {\n            const ngngRqstsFCntxt = ongoingRequests.get(context);\n            if (ngngRqstsFCntxt !== undefined) {\n                ngngRqstsFCntxt.delete(moduleURL);\n            }\n        });\n        return promise;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/add-audio-worklet-module.js.map"]},"metadata":{},"sourceType":"module"}