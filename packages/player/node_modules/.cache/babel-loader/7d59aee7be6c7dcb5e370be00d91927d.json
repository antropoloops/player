{"ast":null,"code":"import debug from \"debug\";\nimport { AudioContext } from \"standardized-audio-context\";\nlet context;\nlet state = \"suspended\";\nconst log = debug(\"atpls:context\");\n\nfunction getAudioContext() {\n  if (context === undefined) {\n    context = new AudioContext();\n    state = context.state;\n\n    context.onstatechange = function (event) {\n      console.log(\"joder\", event, state);\n    };\n  }\n\n  return context;\n}\n/**\n * @see https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio\n */\n\n\nexport async function getActiveAudioContext() {\n  context = context || new AudioContext();\n\n  if (context.state !== \"running\" && context.resume) {\n    log(\"waiting for context...\");\n    return context.resume().then(() => startAudioContext(context));\n  } else {\n    return context;\n  }\n}\n\nfunction startAudioContext(ctx) {\n  log(\"start context\"); // iOS hack. See https://github.com/tambien/StartAudioContext/blob/master/StartAudioContext.js\n\n  const buffer = ctx.createBuffer(1, 1, ctx.sampleRate);\n  const source = ctx.createBufferSource();\n  source.buffer = buffer;\n  source.connect(ctx.destination);\n  source.start(0);\n  return ctx;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/AudioContext.ts"],"names":["debug","AudioContext","context","state","log","getAudioContext","undefined","onstatechange","event","console","getActiveAudioContext","resume","then","startAudioContext","ctx","buffer","createBuffer","sampleRate","source","createBufferSource","connect","destination","start"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAAiD,4BAAjD;AAEA,IAAIC,OAAJ;AACA,IAAIC,KAAyB,GAAG,WAAhC;AAEA,MAAMC,GAAG,GAAGJ,KAAK,CAAC,eAAD,CAAjB;;AAEA,SAASK,eAAT,GAA2B;AACzB,MAAIH,OAAO,KAAKI,SAAhB,EAA2B;AACzBJ,IAAAA,OAAO,GAAG,IAAID,YAAJ,EAAV;AACAE,IAAAA,KAAK,GAAGD,OAAO,CAACC,KAAhB;;AACAD,IAAAA,OAAO,CAACK,aAAR,GAAwB,UAASC,KAAT,EAAuB;AAC7CC,MAAAA,OAAO,CAACL,GAAR,CAAY,OAAZ,EAAqBI,KAArB,EAA4BL,KAA5B;AACD,KAFD;AAGD;;AACD,SAAOD,OAAP;AACD;AAED;;;;;AAGA,OAAO,eAAeQ,qBAAf,GAA8D;AACnER,EAAAA,OAAO,GAAGA,OAAO,IAAI,IAAID,YAAJ,EAArB;;AAEA,MAAIC,OAAO,CAACC,KAAR,KAAkB,SAAlB,IAA+BD,OAAO,CAACS,MAA3C,EAAmD;AACjDP,IAAAA,GAAG,CAAC,wBAAD,CAAH;AACA,WAAOF,OAAO,CACXS,MADI,GAEJC,IAFI,CAEC,MAAMC,iBAAiB,CAACX,OAAD,CAFxB,CAAP;AAGD,GALD,MAKO;AACL,WAAOA,OAAP;AACD;AACF;;AAED,SAASW,iBAAT,CAA2BC,GAA3B,EAA4D;AAC1DV,EAAAA,GAAG,CAAC,eAAD,CAAH,CAD0D,CAE1D;;AACA,QAAMW,MAAM,GAAGD,GAAG,CAACE,YAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuBF,GAAG,CAACG,UAA3B,CAAf;AACA,QAAMC,MAAM,GAAGJ,GAAG,CAACK,kBAAJ,EAAf;AACAD,EAAAA,MAAM,CAACH,MAAP,GAAgBA,MAAhB;AACAG,EAAAA,MAAM,CAACE,OAAP,CAAeN,GAAG,CAACO,WAAnB;AACAH,EAAAA,MAAM,CAACI,KAAP,CAAa,CAAb;AACA,SAAOR,GAAP;AACD","sourcesContent":["import debug from \"debug\";\nimport { AudioContext, TAudioContextState } from \"standardized-audio-context\";\n\nlet context: AudioContext | undefined;\nlet state: TAudioContextState = \"suspended\";\n\nconst log = debug(\"atpls:context\");\n\nfunction getAudioContext() {\n  if (context === undefined) {\n    context = new AudioContext();\n    state = context.state;\n    context.onstatechange = function(event: Event) {\n      console.log(\"joder\", event, state);\n    };\n  }\n  return context;\n}\n\n/**\n * @see https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio\n */\nexport async function getActiveAudioContext(): Promise<AudioContext> {\n  context = context || new AudioContext();\n\n  if (context.state !== \"running\" && context.resume) {\n    log(\"waiting for context...\");\n    return context\n      .resume()\n      .then(() => startAudioContext(context as AudioContext));\n  } else {\n    return context;\n  }\n}\n\nfunction startAudioContext(ctx: AudioContext): AudioContext {\n  log(\"start context\");\n  // iOS hack. See https://github.com/tambien/StartAudioContext/blob/master/StartAudioContext.js\n  const buffer = ctx.createBuffer(1, 1, ctx.sampleRate);\n  const source = ctx.createBufferSource();\n  source.buffer = buffer;\n  source.connect(ctx.destination);\n  source.start(0);\n  return ctx;\n}\n"]},"metadata":{},"sourceType":"module"}