{"ast":null,"code":"const DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  fftSize: 2048,\n  maxDecibels: -30,\n  minDecibels: -100,\n  smoothingTimeConstant: 0.8\n};\nexport const createAnalyserNodeConstructor = (audionNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class AnalyserNode extends audionNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);\n      const analyserNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createAnalyserNodeRenderer() : null;\n      super(context, false, nativeAnalyserNode, analyserNodeRenderer);\n      this._nativeAnalyserNode = nativeAnalyserNode;\n    }\n\n    get fftSize() {\n      return this._nativeAnalyserNode.fftSize;\n    }\n\n    set fftSize(value) {\n      this._nativeAnalyserNode.fftSize = value;\n    }\n\n    get frequencyBinCount() {\n      return this._nativeAnalyserNode.frequencyBinCount;\n    }\n\n    get maxDecibels() {\n      return this._nativeAnalyserNode.maxDecibels;\n    }\n\n    set maxDecibels(value) {\n      // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n      const maxDecibels = this._nativeAnalyserNode.maxDecibels;\n      this._nativeAnalyserNode.maxDecibels = value;\n\n      if (!(value > this._nativeAnalyserNode.minDecibels)) {\n        this._nativeAnalyserNode.maxDecibels = maxDecibels;\n        throw createIndexSizeError();\n      }\n    }\n\n    get minDecibels() {\n      return this._nativeAnalyserNode.minDecibels;\n    }\n\n    set minDecibels(value) {\n      // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n      const minDecibels = this._nativeAnalyserNode.minDecibels;\n      this._nativeAnalyserNode.minDecibels = value;\n\n      if (!(this._nativeAnalyserNode.maxDecibels > value)) {\n        this._nativeAnalyserNode.minDecibels = minDecibels;\n        throw createIndexSizeError();\n      }\n    }\n\n    get smoothingTimeConstant() {\n      return this._nativeAnalyserNode.smoothingTimeConstant;\n    }\n\n    set smoothingTimeConstant(value) {\n      this._nativeAnalyserNode.smoothingTimeConstant = value;\n    }\n\n    getByteFrequencyData(array) {\n      this._nativeAnalyserNode.getByteFrequencyData(array);\n    }\n\n    getByteTimeDomainData(array) {\n      this._nativeAnalyserNode.getByteTimeDomainData(array);\n    }\n\n    getFloatFrequencyData(array) {\n      this._nativeAnalyserNode.getFloatFrequencyData(array);\n    }\n\n    getFloatTimeDomainData(array) {\n      this._nativeAnalyserNode.getFloatTimeDomainData(array);\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/analyser-node-constructor.js"],"names":["DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","fftSize","maxDecibels","minDecibels","smoothingTimeConstant","createAnalyserNodeConstructor","audionNodeConstructor","createAnalyserNodeRenderer","createIndexSizeError","createNativeAnalyserNode","getNativeContext","isNativeOfflineAudioContext","AnalyserNode","constructor","context","options","nativeContext","mergedOptions","nativeAnalyserNode","analyserNodeRenderer","_nativeAnalyserNode","value","frequencyBinCount","getByteFrequencyData","array","getByteTimeDomainData","getFloatFrequencyData","getFloatTimeDomainData"],"mappings":"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","sourcesContent":["const DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    fftSize: 2048,\n    maxDecibels: -30,\n    minDecibels: -100,\n    smoothingTimeConstant: 0.8\n};\nexport const createAnalyserNodeConstructor = (audionNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class AnalyserNode extends audionNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);\n            const analyserNodeRenderer = ((isNativeOfflineAudioContext(nativeContext))\n                ? createAnalyserNodeRenderer()\n                : null);\n            super(context, false, nativeAnalyserNode, analyserNodeRenderer);\n            this._nativeAnalyserNode = nativeAnalyserNode;\n        }\n        get fftSize() {\n            return this._nativeAnalyserNode.fftSize;\n        }\n        set fftSize(value) {\n            this._nativeAnalyserNode.fftSize = value;\n        }\n        get frequencyBinCount() {\n            return this._nativeAnalyserNode.frequencyBinCount;\n        }\n        get maxDecibels() {\n            return this._nativeAnalyserNode.maxDecibels;\n        }\n        set maxDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const maxDecibels = this._nativeAnalyserNode.maxDecibels;\n            this._nativeAnalyserNode.maxDecibels = value;\n            if (!(value > this._nativeAnalyserNode.minDecibels)) {\n                this._nativeAnalyserNode.maxDecibels = maxDecibels;\n                throw createIndexSizeError();\n            }\n        }\n        get minDecibels() {\n            return this._nativeAnalyserNode.minDecibels;\n        }\n        set minDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const minDecibels = this._nativeAnalyserNode.minDecibels;\n            this._nativeAnalyserNode.minDecibels = value;\n            if (!(this._nativeAnalyserNode.maxDecibels > value)) {\n                this._nativeAnalyserNode.minDecibels = minDecibels;\n                throw createIndexSizeError();\n            }\n        }\n        get smoothingTimeConstant() {\n            return this._nativeAnalyserNode.smoothingTimeConstant;\n        }\n        set smoothingTimeConstant(value) {\n            this._nativeAnalyserNode.smoothingTimeConstant = value;\n        }\n        getByteFrequencyData(array) {\n            this._nativeAnalyserNode.getByteFrequencyData(array);\n        }\n        getByteTimeDomainData(array) {\n            this._nativeAnalyserNode.getByteTimeDomainData(array);\n        }\n        getFloatFrequencyData(array) {\n            this._nativeAnalyserNode.getFloatFrequencyData(array);\n        }\n        getFloatTimeDomainData(array) {\n            this._nativeAnalyserNode.getFloatTimeDomainData(array);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/analyser-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}