{"ast":null,"code":"import _classCallCheck from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";export var KeyboardControler=/*#__PURE__*/function(){function KeyboardControler(audioset,control){var _this=this;_classCallCheck(this,KeyboardControler);this.control=control;this.active=false;this.pressed={};this.clipIdToKey={};this.keyToClipId={};audioset.clips.forEach(function(clip){var key=clip.keyMap.toUpperCase();_this.clipIdToKey[clip.id]=key;_this.keyToClipId[key]=clip.id;});}_createClass(KeyboardControler,[{key:\"setKey\",value:function setKey(clipId,key){var oldKey=this.clipIdToKey[clipId];if(oldKey){this.keyToClipId[oldKey]=undefined;}key=key.toUpperCase();this.keyToClipId[key]=clipId;this.clipIdToKey[clipId]=key;}},{key:\"keyDown\",value:function keyDown(key){if(!this.active){return;}key=key.toUpperCase();if(this.pressed[key]){return;}this.pressed[key]=true;var clipId=this.keyToClipId[key];if(clipId){this.control.startClip(clipId,0);}}},{key:\"keyUp\",value:function keyUp(key){if(!this.active){return;}key=key.toUpperCase();this.pressed[key]=false;var clipId=this.keyToClipId[key];if(clipId){this.control.stopClip(clipId,0);}}}]);return KeyboardControler;}();","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/KeyboardControler.ts"],"names":["KeyboardControler","audioset","control","active","pressed","clipIdToKey","keyToClipId","clips","forEach","clip","key","keyMap","toUpperCase","id","clipId","oldKey","undefined","startClip","stopClip"],"mappings":"sTAOA,UAAaA,CAAAA,iBAAb,yBAME,2BAAYC,QAAZ,CAAwCC,OAAxC,CAA0D,6DAAlBA,OAAkB,CAAlBA,OAAkB,MALnDC,MAKmD,CALjC,KAKiC,MAJnDC,OAImD,CAJhB,EAIgB,MAHnDC,WAGmD,CAHb,EAGa,MAFnDC,WAEmD,CAFD,EAEC,CACxDL,QAAQ,CAACM,KAAT,CAAeC,OAAf,CAAuB,SAAAC,IAAI,CAAI,CAC7B,GAAMC,CAAAA,GAAG,CAAGD,IAAI,CAACE,MAAL,CAAYC,WAAZ,EAAZ,CACA,KAAI,CAACP,WAAL,CAAiBI,IAAI,CAACI,EAAtB,EAA4BH,GAA5B,CACA,KAAI,CAACJ,WAAL,CAAiBI,GAAjB,EAAwBD,IAAI,CAACI,EAA7B,CACD,CAJD,EAKD,CAZH,oEAcgBC,MAdhB,CAcgCJ,GAdhC,CAc6C,CACzC,GAAMK,CAAAA,MAAM,CAAG,KAAKV,WAAL,CAAiBS,MAAjB,CAAf,CACA,GAAIC,MAAJ,CAAY,CACV,KAAKT,WAAL,CAAiBS,MAAjB,EAA2BC,SAA3B,CACD,CACDN,GAAG,CAAGA,GAAG,CAACE,WAAJ,EAAN,CACA,KAAKN,WAAL,CAAiBI,GAAjB,EAAwBI,MAAxB,CACA,KAAKT,WAAL,CAAiBS,MAAjB,EAA2BJ,GAA3B,CACD,CAtBH,wCAwBiBA,GAxBjB,CAwB8B,CAC1B,GAAI,CAAC,KAAKP,MAAV,CAAkB,CAChB,OACD,CAEDO,GAAG,CAAGA,GAAG,CAACE,WAAJ,EAAN,CACA,GAAI,KAAKR,OAAL,CAAaM,GAAb,CAAJ,CAAuB,CACrB,OACD,CACD,KAAKN,OAAL,CAAaM,GAAb,EAAoB,IAApB,CAEA,GAAMI,CAAAA,MAAM,CAAG,KAAKR,WAAL,CAAiBI,GAAjB,CAAf,CACA,GAAII,MAAJ,CAAY,CACV,KAAKZ,OAAL,CAAae,SAAb,CAAuBH,MAAvB,CAA+B,CAA/B,EACD,CACF,CAvCH,oCAwCeJ,GAxCf,CAwC4B,CACxB,GAAI,CAAC,KAAKP,MAAV,CAAkB,CAChB,OACD,CAEDO,GAAG,CAAGA,GAAG,CAACE,WAAJ,EAAN,CACA,KAAKR,OAAL,CAAaM,GAAb,EAAoB,KAApB,CAEA,GAAMI,CAAAA,MAAM,CAAG,KAAKR,WAAL,CAAiBI,GAAjB,CAAf,CACA,GAAII,MAAJ,CAAY,CACV,KAAKZ,OAAL,CAAagB,QAAb,CAAsBJ,MAAtB,CAA8B,CAA9B,EACD,CACF,CApDH","sourcesContent":["import { Audioset } from \"../audioset\";\n\nexport interface Control {\n  startClip(clipId: string, time: number): void;\n  stopClip(clipId: string, time: number): void;\n}\n\nexport class KeyboardControler {\n  public active: boolean = false;\n  public pressed: Record<string, boolean> = {};\n  public clipIdToKey: Record<string, string> = {};\n  public keyToClipId: Record<string, string | undefined> = {};\n\n  constructor(audioset: Audioset, private control: Control) {\n    audioset.clips.forEach(clip => {\n      const key = clip.keyMap.toUpperCase();\n      this.clipIdToKey[clip.id] = key;\n      this.keyToClipId[key] = clip.id;\n    });\n  }\n\n  public setKey(clipId: string, key: string) {\n    const oldKey = this.clipIdToKey[clipId];\n    if (oldKey) {\n      this.keyToClipId[oldKey] = undefined;\n    }\n    key = key.toUpperCase();\n    this.keyToClipId[key] = clipId;\n    this.clipIdToKey[clipId] = key;\n  }\n\n  public keyDown(key: string) {\n    if (!this.active) {\n      return;\n    }\n\n    key = key.toUpperCase();\n    if (this.pressed[key]) {\n      return;\n    }\n    this.pressed[key] = true;\n\n    const clipId = this.keyToClipId[key];\n    if (clipId) {\n      this.control.startClip(clipId, 0);\n    }\n  }\n  public keyUp(key: string) {\n    if (!this.active) {\n      return;\n    }\n\n    key = key.toUpperCase();\n    this.pressed[key] = false;\n\n    const clipId = this.keyToClipId[key];\n    if (clipId) {\n      this.control.stopClip(clipId, 0);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}