{"ast":null,"code":"import * as d3geo from \"d3-geo-projection\";\nimport * as d3 from \"d3\";\nimport { WORLDRATIO } from \"./dimensions\";\nexport function drawMap(container, countries, width, height, mapConfig) {\n  const scaleFactor = mapConfig.scaleFactor,\n        center = mapConfig.center;\n  const scale = calculateMapScale(width, height);\n  const projector = createMapProjector(width, height, scale * scaleFactor, center);\n  const path = d3.geoPath().projection(projector);\n  container.selectAll(\".countries\").data(countries).enter().append(\"path\").attr(\"id\", d => \"country\".concat(d.id)).attr(\"class\", \"countries\").attr(\"d\", path).style(\"stroke\", \"#2c2c2c\").style(\"stroke-width\", 0.5).style(\"fill\", \"#888888\");\n}\nexport function createMapProjector(width, height, scale, center) {\n  return d3geo.geoRobinson().scale(scale).center([center.x, center.y]).translate([width / 2, height / 2]);\n}\nexport function calculateMapScale(width, height) {\n  const containerAspectRatio = width / height;\n  const mapWidth = containerAspectRatio < WORLDRATIO ? width : height * WORLDRATIO; // This is the scale needed for a world map drawn using the robinson projection to fit in a rectangle\n  // with a WORLDRATIO proportion, defined as width-dependent\n\n  const scale = mapWidth / 5.9;\n  return scale;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/visuals/drawMap.js"],"names":["d3geo","d3","WORLDRATIO","drawMap","container","countries","width","height","mapConfig","scaleFactor","center","scale","calculateMapScale","projector","createMapProjector","path","geoPath","projection","selectAll","data","enter","append","attr","d","id","style","geoRobinson","x","y","translate","containerAspectRatio","mapWidth"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,mBAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,OAAO,SAASC,OAAT,CAAiBC,SAAjB,EAA4BC,SAA5B,EAAuCC,KAAvC,EAA8CC,MAA9C,EAAsDC,SAAtD,EAAiE;AAAA,QAC9DC,WAD8D,GACtCD,SADsC,CAC9DC,WAD8D;AAAA,QACjDC,MADiD,GACtCF,SADsC,CACjDE,MADiD;AAEtE,QAAMC,KAAK,GAAGC,iBAAiB,CAACN,KAAD,EAAQC,MAAR,CAA/B;AAEA,QAAMM,SAAS,GAAGC,kBAAkB,CAClCR,KADkC,EAElCC,MAFkC,EAGlCI,KAAK,GAAGF,WAH0B,EAIlCC,MAJkC,CAApC;AAOA,QAAMK,IAAI,GAAGd,EAAE,CAACe,OAAH,GAAaC,UAAb,CAAwBJ,SAAxB,CAAb;AAEAT,EAAAA,SAAS,CACNc,SADH,CACa,YADb,EAEGC,IAFH,CAEQd,SAFR,EAGGe,KAHH,GAIGC,MAJH,CAIU,MAJV,EAKGC,IALH,CAKQ,IALR,EAKcC,CAAC,qBAAcA,CAAC,CAACC,EAAhB,CALf,EAMGF,IANH,CAMQ,OANR,EAMiB,WANjB,EAOGA,IAPH,CAOQ,GAPR,EAOaP,IAPb,EAQGU,KARH,CAQS,QART,EAQmB,SARnB,EASGA,KATH,CASS,cATT,EASyB,GATzB,EAUGA,KAVH,CAUS,MAVT,EAUiB,SAVjB;AAWD;AAED,OAAO,SAASX,kBAAT,CAA4BR,KAA5B,EAAmCC,MAAnC,EAA2CI,KAA3C,EAAkDD,MAAlD,EAA0D;AAC/D,SAAOV,KAAK,CACT0B,WADI,GAEJf,KAFI,CAEEA,KAFF,EAGJD,MAHI,CAGG,CAACA,MAAM,CAACiB,CAAR,EAAWjB,MAAM,CAACkB,CAAlB,CAHH,EAIJC,SAJI,CAIM,CAACvB,KAAK,GAAG,CAAT,EAAYC,MAAM,GAAG,CAArB,CAJN,CAAP;AAKD;AAED,OAAO,SAASK,iBAAT,CAA2BN,KAA3B,EAAkCC,MAAlC,EAA0C;AAC/C,QAAMuB,oBAAoB,GAAGxB,KAAK,GAAGC,MAArC;AACA,QAAMwB,QAAQ,GACZD,oBAAoB,GAAG5B,UAAvB,GAAoCI,KAApC,GAA4CC,MAAM,GAAGL,UADvD,CAF+C,CAK/C;AACA;;AACA,QAAMS,KAAK,GAAGoB,QAAQ,GAAG,GAAzB;AAEA,SAAOpB,KAAP;AACD","sourcesContent":["import * as d3geo from \"d3-geo-projection\";\nimport * as d3 from \"d3\";\nimport { WORLDRATIO } from \"./dimensions\";\n\nexport function drawMap(container, countries, width, height, mapConfig) {\n  const { scaleFactor, center } = mapConfig;\n  const scale = calculateMapScale(width, height);\n\n  const projector = createMapProjector(\n    width,\n    height,\n    scale * scaleFactor,\n    center\n  );\n\n  const path = d3.geoPath().projection(projector);\n\n  container\n    .selectAll(\".countries\")\n    .data(countries)\n    .enter()\n    .append(\"path\")\n    .attr(\"id\", d => `country${d.id}`)\n    .attr(\"class\", \"countries\")\n    .attr(\"d\", path)\n    .style(\"stroke\", \"#2c2c2c\")\n    .style(\"stroke-width\", 0.5)\n    .style(\"fill\", \"#888888\");\n}\n\nexport function createMapProjector(width, height, scale, center) {\n  return d3geo\n    .geoRobinson()\n    .scale(scale)\n    .center([center.x, center.y])\n    .translate([width / 2, height / 2]);\n}\n\nexport function calculateMapScale(width, height) {\n  const containerAspectRatio = width / height;\n  const mapWidth =\n    containerAspectRatio < WORLDRATIO ? width : height * WORLDRATIO;\n\n  // This is the scale needed for a world map drawn using the robinson projection to fit in a rectangle\n  // with a WORLDRATIO proportion, defined as width-dependent\n  const scale = mapWidth / 5.9;\n\n  return scale;\n}\n"]},"metadata":{},"sourceType":"module"}