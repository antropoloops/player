{"ast":null,"code":"import { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { filterBuffer } from '../helpers/filter-buffer';\nimport { interceptConnections } from '../helpers/intercept-connections';\n\nfunction divide(a, b) {\n  const denominator = b[0] * b[0] + b[1] * b[1];\n  return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];\n}\n\nfunction multiply(a, b) {\n  return [a[0] * b[0] - a[1] * b[1], a[0] * b[1] + a[1] * b[0]];\n}\n\nfunction evaluatePolynomial(coefficient, z) {\n  let result = [0, 0];\n\n  for (let i = coefficient.length - 1; i >= 0; i -= 1) {\n    result = multiply(result, z);\n    result[0] += coefficient[i];\n  }\n\n  return result;\n}\n\nexport const createNativeIIRFilterNodeFakerFactory = (createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError) => {\n  return (nativeContext, baseLatency, {\n    channelCount,\n    channelCountMode,\n    channelInterpretation,\n    feedback,\n    feedforward\n  }) => {\n    const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n    const feedbackLength = feedback.length;\n    const feedforwardLength = feedforward.length;\n    const minLength = Math.min(feedbackLength, feedforwardLength);\n\n    if (feedback.length === 0 || feedback.length > 20) {\n      throw createNotSupportedError();\n    }\n\n    if (feedback[0] === 0) {\n      throw createInvalidStateError();\n    }\n\n    if (feedforward.length === 0 || feedforward.length > 20) {\n      throw createNotSupportedError();\n    }\n\n    if (feedforward[0] === 0) {\n      throw createInvalidStateError();\n    }\n\n    if (feedback[0] !== 1) {\n      for (let i = 0; i < feedforwardLength; i += 1) {\n        feedforward[i] /= feedback[0];\n      }\n\n      for (let i = 1; i < feedbackLength; i += 1) {\n        feedback[i] /= feedback[0];\n      }\n    }\n\n    const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, channelCount, channelCount);\n    scriptProcessorNode.channelCount = channelCount;\n    scriptProcessorNode.channelCountMode = channelCountMode;\n    scriptProcessorNode.channelInterpretation = channelInterpretation;\n    const bufferLength = 32;\n    const bufferIndexes = [];\n    const xBuffers = [];\n    const yBuffers = [];\n\n    for (let i = 0; i < channelCount; i += 1) {\n      bufferIndexes.push(0);\n      const xBuffer = new Float32Array(bufferLength);\n      const yBuffer = new Float32Array(bufferLength);\n      xBuffer.fill(0);\n      yBuffer.fill(0);\n      xBuffers.push(xBuffer);\n      yBuffers.push(yBuffer);\n    }\n\n    scriptProcessorNode.onaudioprocess = event => {\n      const inputBuffer = event.inputBuffer;\n      const outputBuffer = event.outputBuffer;\n      const numberOfChannels = inputBuffer.numberOfChannels;\n\n      for (let i = 0; i < numberOfChannels; i += 1) {\n        const input = inputBuffer.getChannelData(i);\n        const output = outputBuffer.getChannelData(i);\n        bufferIndexes[i] = filterBuffer(feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffers[i], yBuffers[i], bufferIndexes[i], bufferLength, input, output);\n      }\n    };\n\n    const nyquist = nativeContext.sampleRate / 2;\n    const nativeIIRFilterNodeFaker = {\n      get bufferSize() {\n        return bufferSize;\n      },\n\n      get channelCount() {\n        return scriptProcessorNode.channelCount;\n      },\n\n      set channelCount(value) {\n        scriptProcessorNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return scriptProcessorNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        scriptProcessorNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return scriptProcessorNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        scriptProcessorNode.channelInterpretation = value;\n      },\n\n      get context() {\n        return scriptProcessorNode.context;\n      },\n\n      get inputs() {\n        return [scriptProcessorNode];\n      },\n\n      get numberOfInputs() {\n        return scriptProcessorNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return scriptProcessorNode.numberOfOutputs;\n      },\n\n      addEventListener(...args) {\n        // @todo Dissallow adding an audioprocess listener.\n        return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n      },\n\n      dispatchEvent(...args) {\n        return scriptProcessorNode.dispatchEvent(args[0]);\n      },\n\n      getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n        if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n          throw createInvalidAccessError();\n        }\n\n        const length = frequencyHz.length;\n\n        for (let i = 0; i < length; i += 1) {\n          const omega = -Math.PI * (frequencyHz[i] / nyquist);\n          const z = [Math.cos(omega), Math.sin(omega)];\n          const numerator = evaluatePolynomial(feedforward, z);\n          const denominator = evaluatePolynomial(feedback, z);\n          const response = divide(numerator, denominator);\n          magResponse[i] = Math.sqrt(response[0] * response[0] + response[1] * response[1]);\n          phaseResponse[i] = Math.atan2(response[1], response[0]);\n        }\n      },\n\n      removeEventListener(...args) {\n        return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n      }\n\n    };\n    return interceptConnections(nativeIIRFilterNodeFaker, scriptProcessorNode);\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/native-iir-filter-node-faker-factory.js"],"names":["computeBufferSize","filterBuffer","interceptConnections","divide","a","b","denominator","multiply","evaluatePolynomial","coefficient","z","result","i","length","createNativeIIRFilterNodeFakerFactory","createInvalidAccessError","createInvalidStateError","createNativeScriptProcessorNode","createNotSupportedError","nativeContext","baseLatency","channelCount","channelCountMode","channelInterpretation","feedback","feedforward","bufferSize","sampleRate","feedbackLength","feedforwardLength","minLength","Math","min","scriptProcessorNode","bufferLength","bufferIndexes","xBuffers","yBuffers","push","xBuffer","Float32Array","yBuffer","fill","onaudioprocess","event","inputBuffer","outputBuffer","numberOfChannels","input","getChannelData","output","nyquist","nativeIIRFilterNodeFaker","value","context","inputs","numberOfInputs","numberOfOutputs","addEventListener","args","dispatchEvent","getFrequencyResponse","frequencyHz","magResponse","phaseResponse","omega","PI","cos","sin","numerator","response","sqrt","atan2","removeEventListener"],"mappings":"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","sourcesContent":["import { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { filterBuffer } from '../helpers/filter-buffer';\nimport { interceptConnections } from '../helpers/intercept-connections';\nfunction divide(a, b) {\n    const denominator = (b[0] * b[0]) + (b[1] * b[1]);\n    return [(((a[0] * b[0]) + (a[1] * b[1])) / denominator), (((a[1] * b[0]) - (a[0] * b[1])) / denominator)];\n}\nfunction multiply(a, b) {\n    return [((a[0] * b[0]) - (a[1] * b[1])), ((a[0] * b[1]) + (a[1] * b[0]))];\n}\nfunction evaluatePolynomial(coefficient, z) {\n    let result = [0, 0];\n    for (let i = coefficient.length - 1; i >= 0; i -= 1) {\n        result = multiply(result, z);\n        result[0] += coefficient[i];\n    }\n    return result;\n}\nexport const createNativeIIRFilterNodeFakerFactory = (createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError) => {\n    return (nativeContext, baseLatency, { channelCount, channelCountMode, channelInterpretation, feedback, feedforward }) => {\n        const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n        const feedbackLength = feedback.length;\n        const feedforwardLength = feedforward.length;\n        const minLength = Math.min(feedbackLength, feedforwardLength);\n        if (feedback.length === 0 || feedback.length > 20) {\n            throw createNotSupportedError();\n        }\n        if (feedback[0] === 0) {\n            throw createInvalidStateError();\n        }\n        if (feedforward.length === 0 || feedforward.length > 20) {\n            throw createNotSupportedError();\n        }\n        if (feedforward[0] === 0) {\n            throw createInvalidStateError();\n        }\n        if (feedback[0] !== 1) {\n            for (let i = 0; i < feedforwardLength; i += 1) {\n                feedforward[i] /= feedback[0];\n            }\n            for (let i = 1; i < feedbackLength; i += 1) {\n                feedback[i] /= feedback[0];\n            }\n        }\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, channelCount, channelCount);\n        scriptProcessorNode.channelCount = channelCount;\n        scriptProcessorNode.channelCountMode = channelCountMode;\n        scriptProcessorNode.channelInterpretation = channelInterpretation;\n        const bufferLength = 32;\n        const bufferIndexes = [];\n        const xBuffers = [];\n        const yBuffers = [];\n        for (let i = 0; i < channelCount; i += 1) {\n            bufferIndexes.push(0);\n            const xBuffer = new Float32Array(bufferLength);\n            const yBuffer = new Float32Array(bufferLength);\n            xBuffer.fill(0);\n            yBuffer.fill(0);\n            xBuffers.push(xBuffer);\n            yBuffers.push(yBuffer);\n        }\n        scriptProcessorNode.onaudioprocess = (event) => {\n            const inputBuffer = event.inputBuffer;\n            const outputBuffer = event.outputBuffer;\n            const numberOfChannels = inputBuffer.numberOfChannels;\n            for (let i = 0; i < numberOfChannels; i += 1) {\n                const input = inputBuffer.getChannelData(i);\n                const output = outputBuffer.getChannelData(i);\n                bufferIndexes[i] = filterBuffer(feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffers[i], yBuffers[i], bufferIndexes[i], bufferLength, input, output);\n            }\n        };\n        const nyquist = nativeContext.sampleRate / 2;\n        const nativeIIRFilterNodeFaker = {\n            get bufferSize() {\n                return bufferSize;\n            },\n            get channelCount() {\n                return scriptProcessorNode.channelCount;\n            },\n            set channelCount(value) {\n                scriptProcessorNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return scriptProcessorNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                scriptProcessorNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return scriptProcessorNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                scriptProcessorNode.channelInterpretation = value;\n            },\n            get context() {\n                return scriptProcessorNode.context;\n            },\n            get inputs() {\n                return [scriptProcessorNode];\n            },\n            get numberOfInputs() {\n                return scriptProcessorNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return scriptProcessorNode.numberOfOutputs;\n            },\n            addEventListener(...args) {\n                // @todo Dissallow adding an audioprocess listener.\n                return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return scriptProcessorNode.dispatchEvent(args[0]);\n            },\n            getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n                if ((frequencyHz.length !== magResponse.length) || (magResponse.length !== phaseResponse.length)) {\n                    throw createInvalidAccessError();\n                }\n                const length = frequencyHz.length;\n                for (let i = 0; i < length; i += 1) {\n                    const omega = -Math.PI * (frequencyHz[i] / nyquist);\n                    const z = [Math.cos(omega), Math.sin(omega)];\n                    const numerator = evaluatePolynomial(feedforward, z);\n                    const denominator = evaluatePolynomial(feedback, z);\n                    const response = divide(numerator, denominator);\n                    magResponse[i] = Math.sqrt((response[0] * response[0]) + (response[1] * response[1]));\n                    phaseResponse[i] = Math.atan2(response[1], response[0]);\n                }\n            },\n            removeEventListener(...args) {\n                return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        return interceptConnections(nativeIIRFilterNodeFaker, scriptProcessorNode);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-iir-filter-node-faker-factory.js.map"]},"metadata":{},"sourceType":"module"}