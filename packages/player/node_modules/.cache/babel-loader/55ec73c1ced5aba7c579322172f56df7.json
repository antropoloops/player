{"ast":null,"code":"import { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  detune: 0,\n  frequency: 440,\n  type: 'sine'\n};\nexport const createOscillatorNodeConstructor = (audioNodeConstructor, createAudioParam, createInvalidStateError, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n  return class OscillatorNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeOscillatorNode = createNativeOscillatorNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const oscillatorNodeRenderer = isOffline ? createOscillatorNodeRenderer() : null;\n      const nyquist = context.sampleRate / 2;\n      super(context, false, nativeOscillatorNode, oscillatorNodeRenderer); // Bug #81: Edge, Firefox & Safari do not export the correct values for maxValue and minValue.\n\n      this._detune = createAudioParam(this, isOffline, nativeOscillatorNode.detune, 153600, -153600); // Bug #76: Edge & Safari do not export the correct values for maxValue and minValue.\n\n      this._frequency = createAudioParam(this, isOffline, nativeOscillatorNode.frequency, nyquist, -nyquist);\n      this._nativeOscillatorNode = nativeOscillatorNode;\n      this._onended = null;\n      this._oscillatorNodeRenderer = oscillatorNodeRenderer;\n\n      if (this._oscillatorNodeRenderer !== null && mergedOptions.periodicWave !== undefined) {\n        this._oscillatorNodeRenderer.periodicWave = mergedOptions.periodicWave;\n      }\n    }\n\n    get detune() {\n      return this._detune;\n    }\n\n    get frequency() {\n      return this._frequency;\n    }\n\n    get onended() {\n      return this._onended;\n    }\n\n    set onended(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeOscillatorNode.onended = wrappedListener;\n      const nativeOnEnded = this._nativeOscillatorNode.onended;\n      this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n    }\n\n    get type() {\n      return this._nativeOscillatorNode.type;\n    }\n\n    set type(value) {\n      this._nativeOscillatorNode.type = value; // Bug #57: Edge will not throw an error when assigning the type to 'custom'. But it still will change the value.\n\n      if (value === 'custom') {\n        throw createInvalidStateError();\n      }\n\n      if (this._oscillatorNodeRenderer !== null) {\n        this._oscillatorNodeRenderer.periodicWave = null;\n      }\n    }\n\n    setPeriodicWave(periodicWave) {\n      this._nativeOscillatorNode.setPeriodicWave(periodicWave);\n\n      if (this._oscillatorNodeRenderer !== null) {\n        this._oscillatorNodeRenderer.periodicWave = periodicWave;\n      }\n    }\n\n    start(when = 0) {\n      this._nativeOscillatorNode.start(when);\n\n      if (this._oscillatorNodeRenderer !== null) {\n        this._oscillatorNodeRenderer.start = when;\n      } else {\n        setInternalStateToActive(this);\n\n        const resetInternalStateToPassive = () => {\n          this._nativeOscillatorNode.removeEventListener('ended', resetInternalStateToPassive); // @todo Determine a meaningful delay instead of just using one second.\n\n\n          setTimeout(() => setInternalStateToPassive(this), 1000);\n        };\n\n        this._nativeOscillatorNode.addEventListener('ended', resetInternalStateToPassive);\n      }\n    }\n\n    stop(when = 0) {\n      this._nativeOscillatorNode.stop(when);\n\n      if (this._oscillatorNodeRenderer !== null) {\n        this._oscillatorNodeRenderer.stop = when;\n      }\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/oscillator-node-constructor.js"],"names":["setInternalStateToActive","setInternalStateToPassive","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","detune","frequency","type","createOscillatorNodeConstructor","audioNodeConstructor","createAudioParam","createInvalidStateError","createNativeOscillatorNode","createOscillatorNodeRenderer","getNativeContext","isNativeOfflineAudioContext","wrapEventListener","OscillatorNode","constructor","context","options","nativeContext","mergedOptions","nativeOscillatorNode","isOffline","oscillatorNodeRenderer","nyquist","sampleRate","_detune","_frequency","_nativeOscillatorNode","_onended","_oscillatorNodeRenderer","periodicWave","undefined","onended","value","wrappedListener","nativeOnEnded","setPeriodicWave","start","when","resetInternalStateToPassive","removeEventListener","setTimeout","addEventListener","stop"],"mappings":"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","sourcesContent":["import { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    detune: 0,\n    frequency: 440,\n    type: 'sine'\n};\nexport const createOscillatorNodeConstructor = (audioNodeConstructor, createAudioParam, createInvalidStateError, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n    return class OscillatorNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeOscillatorNode = createNativeOscillatorNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const oscillatorNodeRenderer = ((isOffline) ? createOscillatorNodeRenderer() : null);\n            const nyquist = context.sampleRate / 2;\n            super(context, false, nativeOscillatorNode, oscillatorNodeRenderer);\n            // Bug #81: Edge, Firefox & Safari do not export the correct values for maxValue and minValue.\n            this._detune = createAudioParam(this, isOffline, nativeOscillatorNode.detune, 153600, -153600);\n            // Bug #76: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._frequency = createAudioParam(this, isOffline, nativeOscillatorNode.frequency, nyquist, -nyquist);\n            this._nativeOscillatorNode = nativeOscillatorNode;\n            this._onended = null;\n            this._oscillatorNodeRenderer = oscillatorNodeRenderer;\n            if (this._oscillatorNodeRenderer !== null && mergedOptions.periodicWave !== undefined) {\n                this._oscillatorNodeRenderer.periodicWave =\n                    mergedOptions.periodicWave;\n            }\n        }\n        get detune() {\n            return this._detune;\n        }\n        get frequency() {\n            return this._frequency;\n        }\n        get onended() {\n            return this._onended;\n        }\n        set onended(value) {\n            const wrappedListener = (typeof value === 'function') ? wrapEventListener(this, value) : null;\n            this._nativeOscillatorNode.onended = wrappedListener;\n            const nativeOnEnded = this._nativeOscillatorNode.onended;\n            this._onended = (nativeOnEnded !== null && nativeOnEnded === wrappedListener) ? value : nativeOnEnded;\n        }\n        get type() {\n            return this._nativeOscillatorNode.type;\n        }\n        set type(value) {\n            this._nativeOscillatorNode.type = value;\n            // Bug #57: Edge will not throw an error when assigning the type to 'custom'. But it still will change the value.\n            if (value === 'custom') {\n                throw createInvalidStateError();\n            }\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.periodicWave = null;\n            }\n        }\n        setPeriodicWave(periodicWave) {\n            this._nativeOscillatorNode.setPeriodicWave(periodicWave);\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.periodicWave = periodicWave;\n            }\n        }\n        start(when = 0) {\n            this._nativeOscillatorNode.start(when);\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.start = when;\n            }\n            else {\n                setInternalStateToActive(this);\n                const resetInternalStateToPassive = () => {\n                    this._nativeOscillatorNode.removeEventListener('ended', resetInternalStateToPassive);\n                    // @todo Determine a meaningful delay instead of just using one second.\n                    setTimeout(() => setInternalStateToPassive(this), 1000);\n                };\n                this._nativeOscillatorNode.addEventListener('ended', resetInternalStateToPassive);\n            }\n        }\n        stop(when = 0) {\n            this._nativeOscillatorNode.stop(when);\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/oscillator-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}