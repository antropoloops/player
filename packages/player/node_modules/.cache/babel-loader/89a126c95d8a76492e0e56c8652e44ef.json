{"ast":null,"code":"import _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { getActiveAudioContext } from \"../../player\";\nimport { AudioContextEngine } from \"../../player/AudioContextEngine\";\nimport { AudiosetControl, EmptyControlState } from \"../../player/Control\";\nimport { ResourceLoader } from \"../../player/ResourceLoader\";\nimport { Sampler } from \"../../player/Sampler\";\nexport function usePlayer(audioset) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        clipsReady = _useState2[0],\n        setClipsReady = _useState2[1];\n\n  const loader = useMemo(() => new ResourceLoader(audioset, status => {\n    setClipsReady(true);\n  }), [audioset]); // Make visuals render after reference is set: https://dev.to/thekashey/the-same-useref-but-it-will-callback-8bo\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        el = _useState4[0],\n        setReference = _useState4[1];\n\n  const visualsRef = useCallback(newRef => {\n    setReference(newRef);\n  }, []);\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isReady = _useState6[0],\n        setReady = _useState6[1];\n\n  const _useState7 = useState(null),\n        _useState8 = _slicedToArray(_useState7, 2),\n        control = _useState8[0],\n        setControl = _useState8[1];\n\n  const _useState9 = useState(EmptyControlState),\n        _useState10 = _slicedToArray(_useState9, 2),\n        state = _useState10[0],\n        setState = _useState10[1];\n\n  useEffect(() => {\n    let cancelled = false;\n    let sampler;\n    let visuals;\n\n    async function createPlayer() {\n      if (!el) {\n        // FIXME: if no visuals div, nothing works\n        // this is to prevent create a player without visuals\n        // maybe we want to configure visuals or not\n        return;\n      }\n\n      const _ref = await import(\"../../visuals/index\"),\n            VisualControl = _ref.VisualControl;\n\n      const ctx = await getActiveAudioContext();\n\n      if (cancelled) {\n        return;\n      }\n\n      loader.load(ctx);\n      sampler = createSampler(audioset, ctx, loader);\n      visuals = new VisualControl(audioset, el);\n      const ctl = new AudiosetControl(audioset, {\n        onControlStateChanged: newState => {\n          setState(newState);\n        },\n        onControlCommand: command => {\n          var _sampler, _visuals;\n\n          (_sampler = sampler) === null || _sampler === void 0 ? void 0 : _sampler.run(command);\n          (_visuals = visuals) === null || _visuals === void 0 ? void 0 : _visuals.run(command);\n        }\n      });\n      setControl(ctl);\n      setState(ctl.getState());\n    }\n\n    createPlayer();\n    return () => {\n      var _visuals2, _sampler2;\n\n      cancelled = true;\n      (_visuals2 = visuals) === null || _visuals2 === void 0 ? void 0 : _visuals2.detach();\n      (_sampler2 = sampler) === null || _sampler2 === void 0 ? void 0 : _sampler2.dispose();\n    };\n  }, [audioset, loader, el]);\n  return {\n    visualsRef,\n    control,\n    state,\n    isReady,\n    setReady\n  };\n}\n\nfunction createSampler(audioset, ctx, buffers) {\n  const audio = new AudioContextEngine(ctx);\n  const sampler = new Sampler(audioset, buffers, audio);\n  return sampler;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/usePlayer.tsx"],"names":["useCallback","useEffect","useMemo","useState","getActiveAudioContext","AudioContextEngine","AudiosetControl","EmptyControlState","ResourceLoader","Sampler","usePlayer","audioset","clipsReady","setClipsReady","loader","status","el","setReference","visualsRef","newRef","isReady","setReady","control","setControl","state","setState","cancelled","sampler","visuals","createPlayer","VisualControl","ctx","load","createSampler","ctl","onControlStateChanged","newState","onControlCommand","command","run","getState","detach","dispose","buffers","audio"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { IAudioContext } from \"standardized-audio-context\";\nimport { Audioset } from \"../../audioset\";\nimport { getActiveAudioContext } from \"../../player\";\nimport { AudioContextEngine } from \"../../player/AudioContextEngine\";\nimport {\n  AudiosetControl,\n  EmptyControlState,\n  PlayerControl,\n} from \"../../player/Control\";\nimport { ResourceLoader } from \"../../player/ResourceLoader\";\nimport { Sampler } from \"../../player/Sampler\";\nimport { VisualControl as VC } from \"../../visuals\";\n\nexport function usePlayer(audioset: Audioset) {\n  const [clipsReady, setClipsReady] = useState(false);\n  const loader = useMemo<ResourceLoader>(\n    () =>\n      new ResourceLoader(audioset, status => {\n        setClipsReady(true);\n      }),\n    [audioset],\n  );\n  // Make visuals render after reference is set: https://dev.to/thekashey/the-same-useref-but-it-will-callback-8bo\n  const [el, setReference] = useState<HTMLDivElement | null>(null);\n  const visualsRef = useCallback((newRef: HTMLDivElement) => {\n    setReference(newRef);\n  }, []);\n\n  const [isReady, setReady] = useState<boolean>(false);\n  const [control, setControl] = useState<PlayerControl | null>(null);\n  const [state, setState] = useState(EmptyControlState);\n\n  useEffect(() => {\n    let cancelled = false;\n    let sampler: Sampler | undefined;\n    let visuals: VC | undefined;\n\n    async function createPlayer() {\n      if (!el) {\n        // FIXME: if no visuals div, nothing works\n        // this is to prevent create a player without visuals\n        // maybe we want to configure visuals or not\n        return;\n      }\n\n      const { VisualControl } = await import(\"../../visuals/index\");\n      const ctx = await getActiveAudioContext();\n\n      if (cancelled) {\n        return;\n      }\n\n      loader.load(ctx);\n      sampler = createSampler(audioset, ctx, loader);\n\n      visuals = new VisualControl(audioset, el);\n\n      const ctl = new AudiosetControl(audioset, {\n        onControlStateChanged: newState => {\n          setState(newState);\n        },\n        onControlCommand: command => {\n          sampler?.run(command);\n          visuals?.run(command);\n        },\n      });\n      setControl(ctl);\n      setState(ctl.getState());\n    }\n\n    createPlayer();\n    return () => {\n      cancelled = true;\n      visuals?.detach();\n      sampler?.dispose();\n    };\n  }, [audioset, loader, el]);\n\n  return { visualsRef, control, state, isReady, setReady };\n}\n\nfunction createSampler(\n  audioset: Audioset,\n  ctx: IAudioContext,\n  buffers: ResourceLoader,\n): Sampler {\n  const audio = new AudioContextEngine(ctx);\n  const sampler = new Sampler(audioset, buffers, audio);\n  return sampler;\n}\n"]},"metadata":{},"sourceType":"module"}