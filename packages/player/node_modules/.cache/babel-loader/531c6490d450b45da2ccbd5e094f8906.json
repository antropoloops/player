{"ast":null,"code":"import { addResizeObserver } from \"./addResizeObserver\";\nimport Display from \"./display\";\nimport Visuals from \"./visuals\";\nexport class VisualControl {\n  constructor(audioset) {\n    this.display = void 0;\n    this.visuals = void 0;\n    this.detachers = [];\n    this.display = new Display(el);\n    this.visuals = new Visuals(audioset, this.display);\n    setupVisuals(audioset, this.visuals).then(() => {\n      this.detachers.push(addResizeObserver(el, (width, height) => {\n        this.visuals.resizeSvg(width, height);\n      }));\n    });\n  }\n\n  startClip(clipId) {\n    this.visuals.show(clipId);\n  }\n\n  stopClip(clipId) {\n    this.visuals.hide(clipId);\n  }\n\n  detach() {\n    for (const detach of this.detachers) {\n      detach();\n    }\n  }\n\n}\n\nfunction setupVisuals(audioset, visuals) {\n  if (audioset.visuals.mode === \"map\") {\n    return fetch(audioset.visuals.geomap.url).then(response => response.json()).then(data => visuals.setGeodata(data)).then(() => visuals);\n  } else {\n    visuals.setup();\n    return Promise.resolve(visuals);\n  }\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/visuals/index.ts"],"names":["addResizeObserver","Display","Visuals","VisualControl","constructor","audioset","display","visuals","detachers","el","setupVisuals","then","push","width","height","resizeSvg","startClip","clipId","show","stopClip","hide","detach","mode","fetch","geomap","url","response","json","data","setGeodata","setup","Promise","resolve"],"mappings":"AACA,SAASA,iBAAT,QAAkC,qBAAlC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAO,MAAMC,aAAN,CAAoB;AAKzBC,EAAAA,WAAW,CAACC,QAAD,EAAqB;AAAA,SAJxBC,OAIwB;AAAA,SAHxBC,OAGwB;AAAA,SAFxBC,SAEwB,GAFO,EAEP;AAC9B,SAAKF,OAAL,GAAe,IAAIL,OAAJ,CAAYQ,EAAZ,CAAf;AACA,SAAKF,OAAL,GAAe,IAAIL,OAAJ,CAAYG,QAAZ,EAAsB,KAAKC,OAA3B,CAAf;AACAI,IAAAA,YAAY,CAACL,QAAD,EAAW,KAAKE,OAAhB,CAAZ,CAAqCI,IAArC,CAA0C,MAAM;AAC9C,WAAKH,SAAL,CAAeI,IAAf,CACEZ,iBAAiB,CAACS,EAAD,EAAK,CAACI,KAAD,EAAgBC,MAAhB,KAAmC;AACvD,aAAKP,OAAL,CAAaQ,SAAb,CAAuBF,KAAvB,EAA8BC,MAA9B;AACD,OAFgB,CADnB;AAKD,KAND;AAOD;;AAEME,EAAAA,SAAP,CAAiBC,MAAjB,EAAiC;AAC/B,SAAKV,OAAL,CAAaW,IAAb,CAAkBD,MAAlB;AACD;;AAEME,EAAAA,QAAP,CAAgBF,MAAhB,EAAgC;AAC9B,SAAKV,OAAL,CAAaa,IAAb,CAAkBH,MAAlB;AACD;;AAEMI,EAAAA,MAAP,GAAgB;AACd,SAAK,MAAMA,MAAX,IAAqB,KAAKb,SAA1B,EAAqC;AACnCa,MAAAA,MAAM;AACP;AACF;;AA7BwB;;AAgC3B,SAASX,YAAT,CAAsBL,QAAtB,EAA0CE,OAA1C,EAA8E;AAC5E,MAAIF,QAAQ,CAACE,OAAT,CAAiBe,IAAjB,KAA0B,KAA9B,EAAqC;AACnC,WAAOC,KAAK,CAAClB,QAAQ,CAACE,OAAT,CAAiBiB,MAAjB,CAAwBC,GAAzB,CAAL,CACJd,IADI,CACCe,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAEJhB,IAFI,CAECiB,IAAI,IAAIrB,OAAO,CAACsB,UAAR,CAAmBD,IAAnB,CAFT,EAGJjB,IAHI,CAGC,MAAMJ,OAHP,CAAP;AAID,GALD,MAKO;AACLA,IAAAA,OAAO,CAACuB,KAAR;AACA,WAAOC,OAAO,CAACC,OAAR,CAAgBzB,OAAhB,CAAP;AACD;AACF","sourcesContent":["import { Audioset } from \"../audioset\";\nimport { addResizeObserver } from \"./addResizeObserver\";\nimport Display from \"./display\";\nimport Visuals from \"./visuals\";\n\nexport class VisualControl {\n  private display: Display;\n  private visuals: Visuals;\n  private detachers: Array<() => void> = [];\n\n  constructor(audioset: Audioset) {\n    this.display = new Display(el);\n    this.visuals = new Visuals(audioset, this.display);\n    setupVisuals(audioset, this.visuals).then(() => {\n      this.detachers.push(\n        addResizeObserver(el, (width: number, height: number) => {\n          this.visuals.resizeSvg(width, height);\n        }),\n      );\n    });\n  }\n\n  public startClip(clipId: string) {\n    this.visuals.show(clipId);\n  }\n\n  public stopClip(clipId: string) {\n    this.visuals.hide(clipId);\n  }\n\n  public detach() {\n    for (const detach of this.detachers) {\n      detach();\n    }\n  }\n}\n\nfunction setupVisuals(audioset: Audioset, visuals: Visuals): Promise<Visuals> {\n  if (audioset.visuals.mode === \"map\") {\n    return fetch(audioset.visuals.geomap.url)\n      .then(response => response.json())\n      .then(data => visuals.setGeodata(data))\n      .then(() => visuals);\n  } else {\n    visuals.setup();\n    return Promise.resolve(visuals);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}