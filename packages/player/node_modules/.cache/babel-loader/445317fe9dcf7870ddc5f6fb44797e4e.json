{"ast":null,"code":"import _defineProperty from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  delayTime: 0,\n  maxDelayTime: 1\n};\nexport var createDelayNodeConstructor = function createDelayNodeConstructor(audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext) {\n  return (\n    /*#__PURE__*/\n    function (_audioNodeConstructor) {\n      _inherits(DelayNode, _audioNodeConstructor);\n\n      function DelayNode(context) {\n        var _this;\n\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_OPTIONS;\n\n        _classCallCheck(this, DelayNode);\n\n        var nativeContext = getNativeContext(context);\n\n        var mergedOptions = _objectSpread({}, DEFAULT_OPTIONS, {}, options);\n\n        var nativeDelayNode = createNativeDelayNode(nativeContext, mergedOptions);\n        var isOffline = isNativeOfflineAudioContext(nativeContext);\n        var delayNodeRenderer = isOffline ? createDelayNodeRenderer(mergedOptions.maxDelayTime) : null;\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(DelayNode).call(this, context, false, nativeDelayNode, delayNodeRenderer)); // Bug #161: Edge does not export the correct values for maxValue and minValue.\n\n        _this._delayTime = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDelayNode.delayTime, mergedOptions.maxDelayTime, 0);\n        return _this;\n      }\n\n      _createClass(DelayNode, [{\n        key: \"delayTime\",\n        get: function get() {\n          return this._delayTime;\n        }\n      }]);\n\n      return DelayNode;\n    }(audioNodeConstructor)\n  );\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/delay-node-constructor.js"],"names":["DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","delayTime","maxDelayTime","createDelayNodeConstructor","audioNodeConstructor","createAudioParam","createDelayNodeRenderer","createNativeDelayNode","getNativeContext","isNativeOfflineAudioContext","context","options","nativeContext","mergedOptions","nativeDelayNode","isOffline","delayNodeRenderer","_delayTime"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,eAAe,GAAG;AACpBC,EAAAA,YAAY,EAAE,CADM;AAEpBC,EAAAA,gBAAgB,EAAE,KAFE;AAGpBC,EAAAA,qBAAqB,EAAE,UAHH;AAIpBC,EAAAA,SAAS,EAAE,CAJS;AAKpBC,EAAAA,YAAY,EAAE;AALM,CAAxB;AAOA,OAAO,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACC,oBAAD,EAAuBC,gBAAvB,EAAyCC,uBAAzC,EAAkEC,qBAAlE,EAAyFC,gBAAzF,EAA2GC,2BAA3G,EAA2I;AACjL;AAAA;AAAA;AAAA;;AACI,yBAAYC,OAAZ,EAAgD;AAAA;;AAAA,YAA3BC,OAA2B,uEAAjBd,eAAiB;;AAAA;;AAC5C,YAAMe,aAAa,GAAGJ,gBAAgB,CAACE,OAAD,CAAtC;;AACA,YAAMG,aAAa,qBAAQhB,eAAR,MAA4Bc,OAA5B,CAAnB;;AACA,YAAMG,eAAe,GAAGP,qBAAqB,CAACK,aAAD,EAAgBC,aAAhB,CAA7C;AACA,YAAME,SAAS,GAAGN,2BAA2B,CAACG,aAAD,CAA7C;AACA,YAAMI,iBAAiB,GAAKD,SAAD,GACrBT,uBAAuB,CAACO,aAAa,CAACX,YAAf,CADF,GAErB,IAFN;AAGA,uFAAMQ,OAAN,EAAe,KAAf,EAAsBI,eAAtB,EAAuCE,iBAAvC,GAR4C,CAS5C;;AACA,cAAKC,UAAL,GAAkBZ,gBAAgB,gCAAOU,SAAP,EAAkBD,eAAe,CAACb,SAAlC,EAA6CY,aAAa,CAACX,YAA3D,EAAyE,CAAzE,CAAlC;AAV4C;AAW/C;;AAZL;AAAA;AAAA,4BAaoB;AACZ,iBAAO,KAAKe,UAAZ;AACH;AAfL;;AAAA;AAAA,MAA+Bb,oBAA/B;AAAA;AAiBH,CAlBM","sourcesContent":["const DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    delayTime: 0,\n    maxDelayTime: 1\n};\nexport const createDelayNodeConstructor = (audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class DelayNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeDelayNode = createNativeDelayNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const delayNodeRenderer = ((isOffline)\n                ? createDelayNodeRenderer(mergedOptions.maxDelayTime)\n                : null);\n            super(context, false, nativeDelayNode, delayNodeRenderer);\n            // Bug #161: Edge does not export the correct values for maxValue and minValue.\n            this._delayTime = createAudioParam(this, isOffline, nativeDelayNode.delayTime, mergedOptions.maxDelayTime, 0);\n        }\n        get delayTime() {\n            return this._delayTime;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/delay-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}