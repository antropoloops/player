{"ast":null,"code":"const DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  curve: null,\n  oversample: 'none'\n};\nexport const createWaveShaperNodeConstructor = (audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {\n  return class WaveShaperNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const waveShaperNodeRenderer = isOffline ? createWaveShaperNodeRenderer() : null; // @todo Add a mechanism to only switch a WaveShaperNode to active while it is connected.\n\n      super(context, true, nativeWaveShaperNode, waveShaperNodeRenderer);\n      this._isCurveNullified = false;\n      this._nativeWaveShaperNode = nativeWaveShaperNode;\n    }\n\n    get curve() {\n      if (this._isCurveNullified) {\n        return null;\n      }\n\n      return this._nativeWaveShaperNode.curve;\n    }\n\n    set curve(value) {\n      // Bug #103: Safari does not allow to set the curve to null.\n      if (value === null) {\n        this._isCurveNullified = true;\n        this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);\n      } else {\n        // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n        // Bug #104: Chrome will throw an InvalidAccessError when the curve has less than two samples.\n        if (value.length < 2) {\n          throw createInvalidStateError();\n        }\n\n        this._isCurveNullified = false;\n        this._nativeWaveShaperNode.curve = value;\n      }\n    }\n\n    get oversample() {\n      return this._nativeWaveShaperNode.oversample;\n    }\n\n    set oversample(value) {\n      this._nativeWaveShaperNode.oversample = value;\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/wave-shaper-node-constructor.js"],"names":["DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","curve","oversample","createWaveShaperNodeConstructor","audioNodeConstructor","createInvalidStateError","createNativeWaveShaperNode","createWaveShaperNodeRenderer","getNativeContext","isNativeOfflineAudioContext","WaveShaperNode","constructor","context","options","nativeContext","mergedOptions","nativeWaveShaperNode","isOffline","waveShaperNodeRenderer","_isCurveNullified","_nativeWaveShaperNode","value","Float32Array","length"],"mappings":"AAAA,MAAMA,eAAe,GAAG;AACpBC,EAAAA,YAAY,EAAE,CADM;AAEpBC,EAAAA,gBAAgB,EAAE,KAFE;AAGpBC,EAAAA,qBAAqB,EAAE,UAHH;AAIpBC,EAAAA,KAAK,EAAE,IAJa;AAKpBC,EAAAA,UAAU,EAAE;AALQ,CAAxB;AAOA,OAAO,MAAMC,+BAA+B,GAAG,CAACC,oBAAD,EAAuBC,uBAAvB,EAAgDC,0BAAhD,EAA4EC,4BAA5E,EAA0GC,gBAA1G,EAA4HC,2BAA5H,KAA4J;AACvM,SAAO,MAAMC,cAAN,SAA6BN,oBAA7B,CAAkD;AACrDO,IAAAA,WAAW,CAACC,OAAD,EAAUC,OAAO,GAAGhB,eAApB,EAAqC;AAC5C,YAAMiB,aAAa,GAAGN,gBAAgB,CAACI,OAAD,CAAtC;AACA,YAAMG,aAAa,GAAG,EAAE,GAAGlB,eAAL;AAAsB,WAAGgB;AAAzB,OAAtB;AACA,YAAMG,oBAAoB,GAAGV,0BAA0B,CAACQ,aAAD,EAAgBC,aAAhB,CAAvD;AACA,YAAME,SAAS,GAAGR,2BAA2B,CAACK,aAAD,CAA7C;AACA,YAAMI,sBAAsB,GAAKD,SAAD,GAAcV,4BAA4B,EAA1C,GAA+C,IAA/E,CAL4C,CAM5C;;AACA,YAAMK,OAAN,EAAe,IAAf,EAAqBI,oBAArB,EAA2CE,sBAA3C;AACA,WAAKC,iBAAL,GAAyB,KAAzB;AACA,WAAKC,qBAAL,GAA6BJ,oBAA7B;AACH;;AACD,QAAIf,KAAJ,GAAY;AACR,UAAI,KAAKkB,iBAAT,EAA4B;AACxB,eAAO,IAAP;AACH;;AACD,aAAO,KAAKC,qBAAL,CAA2BnB,KAAlC;AACH;;AACD,QAAIA,KAAJ,CAAUoB,KAAV,EAAiB;AACb;AACA,UAAIA,KAAK,KAAK,IAAd,EAAoB;AAChB,aAAKF,iBAAL,GAAyB,IAAzB;AACA,aAAKC,qBAAL,CAA2BnB,KAA3B,GAAmC,IAAIqB,YAAJ,CAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB,CAAnC;AACH,OAHD,MAIK;AACD;AACA;AACA,YAAID,KAAK,CAACE,MAAN,GAAe,CAAnB,EAAsB;AAClB,gBAAMlB,uBAAuB,EAA7B;AACH;;AACD,aAAKc,iBAAL,GAAyB,KAAzB;AACA,aAAKC,qBAAL,CAA2BnB,KAA3B,GAAmCoB,KAAnC;AACH;AACJ;;AACD,QAAInB,UAAJ,GAAiB;AACb,aAAO,KAAKkB,qBAAL,CAA2BlB,UAAlC;AACH;;AACD,QAAIA,UAAJ,CAAemB,KAAf,EAAsB;AAClB,WAAKD,qBAAL,CAA2BlB,UAA3B,GAAwCmB,KAAxC;AACH;;AAvCoD,GAAzD;AAyCH,CA1CM","sourcesContent":["const DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    curve: null,\n    oversample: 'none'\n};\nexport const createWaveShaperNodeConstructor = (audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {\n    return class WaveShaperNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const waveShaperNodeRenderer = ((isOffline) ? createWaveShaperNodeRenderer() : null);\n            // @todo Add a mechanism to only switch a WaveShaperNode to active while it is connected.\n            super(context, true, nativeWaveShaperNode, waveShaperNodeRenderer);\n            this._isCurveNullified = false;\n            this._nativeWaveShaperNode = nativeWaveShaperNode;\n        }\n        get curve() {\n            if (this._isCurveNullified) {\n                return null;\n            }\n            return this._nativeWaveShaperNode.curve;\n        }\n        set curve(value) {\n            // Bug #103: Safari does not allow to set the curve to null.\n            if (value === null) {\n                this._isCurveNullified = true;\n                this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);\n            }\n            else {\n                // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n                // Bug #104: Chrome will throw an InvalidAccessError when the curve has less than two samples.\n                if (value.length < 2) {\n                    throw createInvalidStateError();\n                }\n                this._isCurveNullified = false;\n                this._nativeWaveShaperNode.curve = value;\n            }\n        }\n        get oversample() {\n            return this._nativeWaveShaperNode.oversample;\n        }\n        set oversample(value) {\n            this._nativeWaveShaperNode.oversample = value;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wave-shaper-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}