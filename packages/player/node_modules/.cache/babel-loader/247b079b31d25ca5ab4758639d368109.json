{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = require(\"react\");\n\nfunction getHeight(content) {\n  if (content && content.current && content.current.scrollHeight) {\n    return \"\".concat(content.current.scrollHeight, \"px\");\n  }\n\n  return '0px';\n}\n\nvar useCollapse = function useCollapse(_ref) {\n  var isOpen = _ref.isOpen,\n      content = _ref.content;\n\n  var _useState = (0, _react.useState)('0'),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      height = _useState2[0],\n      setHeight = _useState2[1];\n\n  var _useState3 = (0, _react.useState)('hidden'),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      overflow = _useState4[0],\n      setOverflow = _useState4[1];\n\n  var _useState5 = (0, _react.useState)('hidden'),\n      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n      visibility = _useState6[0],\n      setVisibility = _useState6[1];\n\n  var _useState7 = (0, _react.useState)(true),\n      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),\n      isFirstRender = _useState8[0],\n      setIsFirstRender = _useState8[1];\n\n  var setIsExpandedStyle = function setIsExpandedStyle() {\n    setHeight('auto');\n    setOverflow('visible');\n    setVisibility('visible');\n  };\n\n  var setIsCollapsedStyle = function setIsCollapsedStyle() {\n    setVisibility('hidden');\n  };\n\n  (0, _react.useEffect)(function () {\n    if (isOpen) {\n      setVisibility('visible');\n\n      if (isFirstRender) {\n        setHeight('auto');\n        setOverflow('visible');\n      } else {\n        setHeight(getHeight(content));\n      }\n    } else if (!isFirstRender) {\n      setHeight(getHeight(content)); // The magic: Set collapsed style after setting height to enable smooth transition based on height\n\n      window.requestAnimationFrame(function () {\n        // Setting these properties will start transition from measured height to 0\n        setTimeout(function () {\n          // Setting these properties will start transition from measured height to 0\n          setHeight('0');\n          setOverflow('hidden');\n        });\n      });\n    }\n  }, [isOpen]);\n  (0, _react.useEffect)(function () {\n    setIsFirstRender(false);\n  }, []);\n  return {\n    setIsExpandedStyle: setIsExpandedStyle,\n    setIsCollapsedStyle: setIsCollapsedStyle,\n    style: {\n      overflow: overflow,\n      visibility: visibility,\n      height: height\n    }\n  };\n};\n\nvar _default = useCollapse;\nexports.default = _default;","map":{"version":3,"sources":["../src/components/useCollapse.js"],"names":["content","useCollapse","isOpen","height","setHeight","overflow","setOverflow","visibility","setVisibility","isFirstRender","setIsFirstRender","setIsExpandedStyle","setIsCollapsedStyle","getHeight","window","setTimeout","style"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\n\nfunction getHeight(content) {\n  if (content && content.current && content.current.scrollHeight) {\n    return `${content.current.scrollHeight}px`;\n  }\n  return '0px';\n}\n\nconst useCollapse = ({ isOpen, content }) => {\n  const [height, setHeight] = useState('0');\n  const [overflow, setOverflow] = useState('hidden');\n  const [visibility, setVisibility] = useState('hidden');\n  const [isFirstRender, setIsFirstRender] = useState(true);\n\n  const setIsExpandedStyle = () => {\n    setHeight('auto');\n    setOverflow('visible');\n    setVisibility('visible');\n  };\n\n  const setIsCollapsedStyle = () => {\n    setVisibility('hidden');\n  };\n\n  useEffect(() => {\n    if (isOpen) {\n      setVisibility('visible');\n      if (isFirstRender) {\n        setHeight('auto');\n        setOverflow('visible');\n      } else {\n        setHeight(getHeight(content));\n      }\n    } else if (!isFirstRender) {\n      setHeight(getHeight(content));\n      // The magic: Set collapsed style after setting height to enable smooth transition based on height\n      window.requestAnimationFrame(() => {\n        // Setting these properties will start transition from measured height to 0\n        setTimeout(() => {\n          // Setting these properties will start transition from measured height to 0\n          setHeight('0');\n          setOverflow('hidden');\n        });\n      });\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setIsFirstRender(false);\n  }, []);\n\n  return {\n    setIsExpandedStyle,\n    setIsCollapsedStyle,\n    style: {\n      overflow,\n      visibility,\n      height,\n    },\n  };\n};\n\nexport default useCollapse;\n"]},"metadata":{},"sourceType":"script"}