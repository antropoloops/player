{"ast":null,"code":"import _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useCallback, useLayoutEffect, useState } from \"react\";\nimport { getActiveAudioContext } from \"../../player\";\nimport { AudioContextEngine } from \"../../player/AudioContextEngine\";\nimport { AudiosetControl, EmptyControlState } from \"../../player/Control\";\nimport { ResourceLoader } from \"../../player/ResourceLoader\";\nimport { Sampler } from \"../../player/Sampler\";\nexport function usePlayer(audioset) {\n  // Make visuals render after reference is set: https://dev.to/thekashey/the-same-useref-but-it-will-callback-8bo\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        el = _useState2[0],\n        setReference = _useState2[1];\n\n  const visualsRef = useCallback(newRef => {\n    setReference(newRef);\n  }, []);\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isReady = _useState4[0],\n        setReady = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        control = _useState6[0],\n        setControl = _useState6[1];\n\n  const _useState7 = useState(EmptyControlState),\n        _useState8 = _slicedToArray(_useState7, 2),\n        state = _useState8[0],\n        setState = _useState8[1];\n\n  useLayoutEffect(() => {\n    let cancelled = false;\n    let sampler;\n    let visuals;\n\n    async function createPlayer() {\n      if (!el) {\n        return;\n      }\n\n      const loader = new ResourceLoader(audioset, status => {// TODO: set clip enabled\n      });\n      loader.preload();\n\n      const _ref = await import(\"../../visuals/index\"),\n            VisualControl = _ref.VisualControl;\n\n      const ctx = await getActiveAudioContext();\n\n      if (cancelled) {\n        return;\n      }\n\n      loader.load(ctx);\n      sampler = createSampler(audioset, ctx, loader);\n      visuals = new VisualControl(audioset, el);\n      const ctl = new AudiosetControl(audioset, {\n        onControlStateChanged: newState => {\n          setState(newState);\n        },\n        onControlCommand: command => {\n          var _sampler, _visuals;\n\n          (_sampler = sampler) === null || _sampler === void 0 ? void 0 : _sampler.run(command);\n          (_visuals = visuals) === null || _visuals === void 0 ? void 0 : _visuals.run(command);\n        }\n      });\n      setControl(ctl);\n      setState(ctl.getState());\n    }\n\n    createPlayer();\n    return () => {\n      var _visuals2, _sampler2;\n\n      cancelled = true;\n      (_visuals2 = visuals) === null || _visuals2 === void 0 ? void 0 : _visuals2.detach();\n      (_sampler2 = sampler) === null || _sampler2 === void 0 ? void 0 : _sampler2.dispose();\n    };\n  }, [audioset, el]);\n  return {\n    visualsRef,\n    control,\n    state,\n    isReady,\n    setReady\n  };\n}\n\nfunction createSampler(audioset, ctx, buffers) {\n  const audio = new AudioContextEngine(ctx);\n  const sampler = new Sampler(audioset, buffers, audio);\n  return sampler;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/usePlayer.tsx"],"names":["useCallback","useLayoutEffect","useState","getActiveAudioContext","AudioContextEngine","AudiosetControl","EmptyControlState","ResourceLoader","Sampler","usePlayer","audioset","el","setReference","visualsRef","newRef","isReady","setReady","control","setControl","state","setState","cancelled","sampler","visuals","createPlayer","loader","status","preload","VisualControl","ctx","load","createSampler","ctl","onControlStateChanged","newState","onControlCommand","command","run","getState","detach","dispose","buffers","audio"],"mappings":"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","sourcesContent":["import {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useReducer,\n  useRef,\n  useState,\n} from \"react\";\nimport { IAudioContext } from \"standardized-audio-context\";\nimport { Audioset } from \"../../audioset\";\nimport { getActiveAudioContext } from \"../../player\";\nimport { AudioContextEngine } from \"../../player/AudioContextEngine\";\nimport {\n  AudiosetControl,\n  EmptyControlState,\n  PlayerControl,\n} from \"../../player/Control\";\nimport { ResourceLoader } from \"../../player/ResourceLoader\";\nimport { Sampler } from \"../../player/Sampler\";\nimport { VisualControl as VC } from \"../../visuals\";\n\nexport function usePlayer(audioset: Audioset) {\n  // Make visuals render after reference is set: https://dev.to/thekashey/the-same-useref-but-it-will-callback-8bo\n  const [el, setReference] = useState<HTMLDivElement | null>(null);\n  const visualsRef = useCallback((newRef: HTMLDivElement) => {\n    setReference(newRef);\n  }, []);\n\n  const [isReady, setReady] = useState<boolean>(false);\n  const [control, setControl] = useState<PlayerControl | null>(null);\n  const [state, setState] = useState(EmptyControlState);\n\n  useLayoutEffect(() => {\n    let cancelled = false;\n    let sampler: Sampler | undefined;\n    let visuals: VC | undefined;\n\n    async function createPlayer() {\n      if (!el) {\n        return;\n      }\n      const loader = new ResourceLoader(audioset, status => {\n        // TODO: set clip enabled\n      });\n      loader.preload();\n\n      const { VisualControl } = await import(\"../../visuals/index\");\n      const ctx = await getActiveAudioContext();\n\n      if (cancelled) {\n        return;\n      }\n\n      loader.load(ctx);\n      sampler = createSampler(audioset, ctx, loader);\n\n      visuals = new VisualControl(audioset, el);\n\n      const ctl = new AudiosetControl(audioset, {\n        onControlStateChanged: newState => {\n          setState(newState);\n        },\n        onControlCommand: command => {\n          sampler?.run(command);\n          visuals?.run(command);\n        },\n      });\n      setControl(ctl);\n      setState(ctl.getState());\n    }\n\n    createPlayer();\n    return () => {\n      cancelled = true;\n      visuals?.detach();\n      sampler?.dispose();\n    };\n  }, [audioset, el]);\n\n  return { visualsRef, control, state, isReady, setReady };\n}\n\nfunction createSampler(\n  audioset: Audioset,\n  ctx: IAudioContext,\n  buffers: ResourceLoader,\n): Sampler {\n  const audio = new AudioContextEngine(ctx);\n  const sampler = new Sampler(audioset, buffers, audio);\n  return sampler;\n}\n"]},"metadata":{},"sourceType":"module"}