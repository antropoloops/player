{"ast":null,"code":"import _classCallCheck from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import debug from\"debug\";import{ControlStateManager}from\"./ControlStateManager\";import{KeyboardController}from\"./KeyboardController\";import{TimeManager}from\"./TimeManager\";var log=debug(\"atpls:control\");/**\n * Controls the playing state of clips and tracks\n *\n * It uses a listener for side effects (using commands) and state changes\n */export var AudiosetControl=/*#__PURE__*/function(){function AudiosetControl(audioset,listener){var _this=this;_classCallCheck(this,AudiosetControl);this.listener=listener;this.keyboard=void 0;this.time=void 0;this.commands=[];this.manager=new ControlStateManager();log(\"create control %s\",audioset.meta.title);this.time=new TimeManager(audioset.audio);this.keyboard=new KeyboardController(audioset,this);audioset.clips.forEach(function(clip){return _this.manager.addClip(clip);});audioset.tracks.forEach(function(track){return _this.manager.addTrack(track);});}_createClass(AudiosetControl,[{key:\"toggleClip\",value:function toggleClip(clipId,time){var clipState=this.manager.getClipState(clipId);if(!clipState){return;}else if(clipState.status===\"stopped\"){this.startClip(clipId,time);}else if(clipState.status===\"playing\"){this.stopClip(clipId,time);}}/**\n   * Start a clip\n   * @param clipId\n   */},{key:\"startClip\",value:function startClip(clipId,time){var _this2=this;var clipState=this.manager.getClipState(clipId);if(!clipState||clipState.status===\"playing\"){return;}time=this.time.startTime(time);log(\"start clip %s %o\",clipId,time);var trackId=this.manager.getTrackIdOfClip(clipId);var sameTrackClipIds=this.manager.getClipIdsOfTrack(trackId);sameTrackClipIds.forEach(function(trackClipId){return _this2.stopClipCommand(trackClipId,time);});this.startTrackCommand(trackId,time);this.startClipCommand(clipId,time);this.sendCommandsAndFireStateChange();}/**\n   * Stops a clip\n   */},{key:\"stopClip\",value:function stopClip(clipId,time){var clipState=this.manager.getClipState(clipId);if(!clipState||clipState.status===\"stopped\"){return;}time=this.time.stopTime(time);log(\"stop clip %s %o\",clipId,time);var trackId=this.manager.getTrackIdOfClip(clipId);this.stopClipCommand(clipId,time);this.stopTrackCommand(trackId,time);this.sendCommandsAndFireStateChange();}/**\n   * Stops all clips\n   */},{key:\"stopAll\",value:function stopAll(time){var _this3=this;this.manager.getAllClipIds().forEach(function(clipId){return _this3.stopClipCommand(clipId,time);});this.manager.getAllTrackIds().forEach(function(trackId){return _this3.stopTrackCommand(trackId,time);});this.sendCommandsAndFireStateChange();}},{key:\"getState\",value:function getState(){return this.manager.getState();}//// PRIVATE ////\n},{key:\"sendCommandsAndFireStateChange\",value:function sendCommandsAndFireStateChange(){var _this4=this;this.commands.forEach(function(command){_this4.listener.onControlCommand(command);});this.commands=[];this.listener.onControlStateChanged(this.getState());}},{key:\"startClipCommand\",value:function startClipCommand(clipId,time){var clipState=this.manager.getClipState(clipId);if(clipState.status===\"playing\"){return;}this.manager.setClipState(clipId,{status:\"playing\"});this.commands.push({command:\"startClip\",clipId:clipId,time:time});}},{key:\"stopClipCommand\",value:function stopClipCommand(clipId,time){var clipState=this.manager.getClipState(clipId);if(clipState.status===\"stopped\"){return;}this.manager.setClipState(clipId,{status:\"stopped\"});this.commands.push({command:\"stopClip\",clipId:clipId,time:time});}},{key:\"startTrackCommand\",value:function startTrackCommand(trackId,time){var trackState=this.manager.getTrackState(trackId);if(trackState.status===\"playing\"){return;}this.manager.setTrackState(trackId,{status:\"playing\",volume:trackState.volume});this.commands.push({command:\"startTrack\",trackId:trackId,time:time});}},{key:\"stopTrackCommand\",value:function stopTrackCommand(trackId,time){var trackState=this.manager.getTrackState(trackId);if(trackState.status===\"stopped\"){return;}this.manager.setTrackState(trackId,{status:\"stopped\",volume:trackState.volume});this.commands.push({command:\"stopTrack\",trackId:trackId,time:time});}}]);return AudiosetControl;}();","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/Control/AudiosetControl.ts"],"names":["debug","ControlStateManager","KeyboardController","TimeManager","log","AudiosetControl","audioset","listener","keyboard","time","commands","manager","meta","title","audio","clips","forEach","clip","addClip","tracks","track","addTrack","clipId","clipState","getClipState","status","startClip","stopClip","startTime","trackId","getTrackIdOfClip","sameTrackClipIds","getClipIdsOfTrack","trackClipId","stopClipCommand","startTrackCommand","startClipCommand","sendCommandsAndFireStateChange","stopTime","stopTrackCommand","getAllClipIds","getAllTrackIds","getState","command","onControlCommand","onControlStateChanged","setClipState","push","trackState","getTrackState","setTrackState","volume"],"mappings":"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","sourcesContent":["import debug from \"debug\";\nimport { Audioset, Clip } from \"../../audioset\";\nimport { ControlCommand } from \"./ControlCommand\";\nimport { ControlState } from \"./ControlState\";\nimport { ControlStateManager } from \"./ControlStateManager\";\nimport { KeyboardController } from \"./KeyboardController\";\nimport { TimeManager } from \"./TimeManager\";\n\nconst log = debug(\"atpls:control\");\n\nexport interface ControlListener {\n  onControlStateChanged: (state: ControlState) => void;\n  onControlCommand: (command: ControlCommand) => void;\n}\n\nexport interface PlayerControl {\n  readonly keyboard: KeyboardController;\n  getState(): ControlState;\n  toggleClip(clipId: string, time: number): void;\n  stopClip(clipId: string, time: number): void;\n  startClip(clipId: string, time: number): void;\n  stopAll(time: number): void;\n}\n\n/**\n * Controls the playing state of clips and tracks\n *\n * It uses a listener for side effects (using commands) and state changes\n */\nexport class AudiosetControl implements PlayerControl {\n  public readonly keyboard: KeyboardController;\n  private time: TimeManager;\n  private commands: ControlCommand[] = [];\n  private manager = new ControlStateManager();\n\n  constructor(audioset: Audioset, private listener: ControlListener) {\n    log(\"create control %s\", audioset.meta.title);\n    this.time = new TimeManager(audioset.audio);\n    this.keyboard = new KeyboardController(audioset, this);\n    audioset.clips.forEach((clip: Clip) => this.manager.addClip(clip));\n    audioset.tracks.forEach((track) => this.manager.addTrack(track));\n  }\n\n  public toggleClip(clipId: string, time: number) {\n    const clipState = this.manager.getClipState(clipId);\n    if (!clipState) {\n      return;\n    } else if (clipState.status === \"stopped\") {\n      this.startClip(clipId, time);\n    } else if (clipState.status === \"playing\") {\n      this.stopClip(clipId, time);\n    }\n  }\n\n  /**\n   * Start a clip\n   * @param clipId\n   */\n  public startClip(clipId: string, time: number) {\n    const clipState = this.manager.getClipState(clipId);\n    if (!clipState || clipState.status === \"playing\") {\n      return;\n    }\n\n    time = this.time.startTime(time);\n    log(\"start clip %s %o\", clipId, time);\n\n    const trackId = this.manager.getTrackIdOfClip(clipId);\n    const sameTrackClipIds = this.manager.getClipIdsOfTrack(trackId);\n    sameTrackClipIds.forEach((trackClipId) =>\n      this.stopClipCommand(trackClipId, time)\n    );\n    this.startTrackCommand(trackId, time);\n    this.startClipCommand(clipId, time);\n    this.sendCommandsAndFireStateChange();\n  }\n\n  /**\n   * Stops a clip\n   */\n  public stopClip(clipId: string, time: number) {\n    const clipState = this.manager.getClipState(clipId);\n    if (!clipState || clipState.status === \"stopped\") {\n      return;\n    }\n\n    time = this.time.stopTime(time);\n    log(\"stop clip %s %o\", clipId, time);\n\n    const trackId = this.manager.getTrackIdOfClip(clipId);\n\n    this.stopClipCommand(clipId, time);\n    this.stopTrackCommand(trackId, time);\n    this.sendCommandsAndFireStateChange();\n  }\n\n  /**\n   * Stops all clips\n   */\n  public stopAll(time: number) {\n    this.manager\n      .getAllClipIds()\n      .forEach((clipId) => this.stopClipCommand(clipId, time));\n    this.manager\n      .getAllTrackIds()\n      .forEach((trackId) => this.stopTrackCommand(trackId, time));\n    this.sendCommandsAndFireStateChange();\n  }\n\n  public getState() {\n    return this.manager.getState();\n  }\n\n  //// PRIVATE ////\n  private sendCommandsAndFireStateChange() {\n    this.commands.forEach((command) => {\n      this.listener.onControlCommand(command);\n    });\n    this.commands = [];\n\n    this.listener.onControlStateChanged(this.getState());\n  }\n\n  private startClipCommand(clipId: string, time: number) {\n    const clipState = this.manager.getClipState(clipId);\n    if (clipState.status === \"playing\") {\n      return;\n    }\n\n    this.manager.setClipState(clipId, { status: \"playing\" });\n    this.commands.push({ command: \"startClip\", clipId, time });\n  }\n\n  private stopClipCommand(clipId: string, time: number) {\n    const clipState = this.manager.getClipState(clipId);\n    if (clipState.status === \"stopped\") {\n      return;\n    }\n\n    this.manager.setClipState(clipId, { status: \"stopped\" });\n    this.commands.push({ command: \"stopClip\", clipId, time });\n  }\n\n  private startTrackCommand(trackId: string, time: number) {\n    const trackState = this.manager.getTrackState(trackId);\n    if (trackState.status === \"playing\") {\n      return;\n    }\n\n    this.manager.setTrackState(trackId, {\n      status: \"playing\",\n      volume: trackState.volume,\n    });\n    this.commands.push({ command: \"startTrack\", trackId, time });\n  }\n\n  private stopTrackCommand(trackId: string, time: number) {\n    const trackState = this.manager.getTrackState(trackId);\n    if (trackState.status === \"stopped\") {\n      return;\n    }\n\n    this.manager.setTrackState(trackId, {\n      status: \"stopped\",\n      volume: trackState.volume,\n    });\n    this.commands.push({ command: \"stopTrack\", trackId, time });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}