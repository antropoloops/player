{"ast":null,"code":"export const createAudioDestinationNodeConstructor = (audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode) => {\n  return class AudioDestinationNode extends audioNodeConstructor {\n    constructor(context, channelCount) {\n      const nativeContext = getNativeContext(context);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const nativeAudioDestinationNode = createNativeAudioDestinationNode(nativeContext, channelCount, isOffline);\n      const audioDestinationNodeRenderer = isOffline ? createAudioDestinationNodeRenderer(renderInputsOfAudioNode) : null;\n      super(context, false, nativeAudioDestinationNode, audioDestinationNodeRenderer);\n      this._isNodeOfNativeOfflineAudioContext = isOffline;\n      this._nativeAudioDestinationNode = nativeAudioDestinationNode;\n    }\n\n    get channelCount() {\n      return this._nativeAudioDestinationNode.channelCount;\n    }\n\n    set channelCount(value) {\n      // Bug #52: Chrome, Edge, Opera & Safari do not throw an exception at all.\n      // Bug #54: Firefox does throw an IndexSizeError.\n      if (this._isNodeOfNativeOfflineAudioContext) {\n        throw createInvalidStateError();\n      } // Bug #47: The AudioDestinationNode in Edge and Safari do not initialize the maxChannelCount property correctly.\n\n\n      if (value > this._nativeAudioDestinationNode.maxChannelCount) {\n        throw createIndexSizeError();\n      }\n\n      this._nativeAudioDestinationNode.channelCount = value;\n    }\n\n    get channelCountMode() {\n      return this._nativeAudioDestinationNode.channelCountMode;\n    }\n\n    set channelCountMode(value) {\n      // Bug #53: No browser does throw an exception yet.\n      if (this._isNodeOfNativeOfflineAudioContext) {\n        throw createInvalidStateError();\n      }\n\n      this._nativeAudioDestinationNode.channelCountMode = value;\n    }\n\n    get maxChannelCount() {\n      return this._nativeAudioDestinationNode.maxChannelCount;\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/audio-destination-node-constructor.js"],"names":["createAudioDestinationNodeConstructor","audioNodeConstructor","createAudioDestinationNodeRenderer","createIndexSizeError","createInvalidStateError","createNativeAudioDestinationNode","getNativeContext","isNativeOfflineAudioContext","renderInputsOfAudioNode","AudioDestinationNode","constructor","context","channelCount","nativeContext","isOffline","nativeAudioDestinationNode","audioDestinationNodeRenderer","_isNodeOfNativeOfflineAudioContext","_nativeAudioDestinationNode","value","maxChannelCount","channelCountMode"],"mappings":"AAAA,OAAO,MAAMA,qCAAqC,GAAG,CAACC,oBAAD,EAAuBC,kCAAvB,EAA2DC,oBAA3D,EAAiFC,uBAAjF,EAA0GC,gCAA1G,EAA4IC,gBAA5I,EAA8JC,2BAA9J,EAA2LC,uBAA3L,KAAuN;AACxQ,SAAO,MAAMC,oBAAN,SAAmCR,oBAAnC,CAAwD;AAC3DS,IAAAA,WAAW,CAACC,OAAD,EAAUC,YAAV,EAAwB;AAC/B,YAAMC,aAAa,GAAGP,gBAAgB,CAACK,OAAD,CAAtC;AACA,YAAMG,SAAS,GAAGP,2BAA2B,CAACM,aAAD,CAA7C;AACA,YAAME,0BAA0B,GAAGV,gCAAgC,CAACQ,aAAD,EAAgBD,YAAhB,EAA8BE,SAA9B,CAAnE;AACA,YAAME,4BAA4B,GAAKF,SAAD,GAChCZ,kCAAkC,CAACM,uBAAD,CADF,GAEhC,IAFN;AAGA,YAAMG,OAAN,EAAe,KAAf,EAAsBI,0BAAtB,EAAkDC,4BAAlD;AACA,WAAKC,kCAAL,GAA0CH,SAA1C;AACA,WAAKI,2BAAL,GAAmCH,0BAAnC;AACH;;AACD,QAAIH,YAAJ,GAAmB;AACf,aAAO,KAAKM,2BAAL,CAAiCN,YAAxC;AACH;;AACD,QAAIA,YAAJ,CAAiBO,KAAjB,EAAwB;AACpB;AACA;AACA,UAAI,KAAKF,kCAAT,EAA6C;AACzC,cAAMb,uBAAuB,EAA7B;AACH,OALmB,CAMpB;;;AACA,UAAIe,KAAK,GAAG,KAAKD,2BAAL,CAAiCE,eAA7C,EAA8D;AAC1D,cAAMjB,oBAAoB,EAA1B;AACH;;AACD,WAAKe,2BAAL,CAAiCN,YAAjC,GAAgDO,KAAhD;AACH;;AACD,QAAIE,gBAAJ,GAAuB;AACnB,aAAO,KAAKH,2BAAL,CAAiCG,gBAAxC;AACH;;AACD,QAAIA,gBAAJ,CAAqBF,KAArB,EAA4B;AACxB;AACA,UAAI,KAAKF,kCAAT,EAA6C;AACzC,cAAMb,uBAAuB,EAA7B;AACH;;AACD,WAAKc,2BAAL,CAAiCG,gBAAjC,GAAoDF,KAApD;AACH;;AACD,QAAIC,eAAJ,GAAsB;AAClB,aAAO,KAAKF,2BAAL,CAAiCE,eAAxC;AACH;;AAvC0D,GAA/D;AAyCH,CA1CM","sourcesContent":["export const createAudioDestinationNodeConstructor = (audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode) => {\n    return class AudioDestinationNode extends audioNodeConstructor {\n        constructor(context, channelCount) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const nativeAudioDestinationNode = createNativeAudioDestinationNode(nativeContext, channelCount, isOffline);\n            const audioDestinationNodeRenderer = ((isOffline)\n                ? createAudioDestinationNodeRenderer(renderInputsOfAudioNode)\n                : null);\n            super(context, false, nativeAudioDestinationNode, audioDestinationNodeRenderer);\n            this._isNodeOfNativeOfflineAudioContext = isOffline;\n            this._nativeAudioDestinationNode = nativeAudioDestinationNode;\n        }\n        get channelCount() {\n            return this._nativeAudioDestinationNode.channelCount;\n        }\n        set channelCount(value) {\n            // Bug #52: Chrome, Edge, Opera & Safari do not throw an exception at all.\n            // Bug #54: Firefox does throw an IndexSizeError.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n                throw createInvalidStateError();\n            }\n            // Bug #47: The AudioDestinationNode in Edge and Safari do not initialize the maxChannelCount property correctly.\n            if (value > this._nativeAudioDestinationNode.maxChannelCount) {\n                throw createIndexSizeError();\n            }\n            this._nativeAudioDestinationNode.channelCount = value;\n        }\n        get channelCountMode() {\n            return this._nativeAudioDestinationNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            // Bug #53: No browser does throw an exception yet.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n                throw createInvalidStateError();\n            }\n            this._nativeAudioDestinationNode.channelCountMode = value;\n        }\n        get maxChannelCount() {\n            return this._nativeAudioDestinationNode.maxChannelCount;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-destination-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}