{"ast":null,"code":"import _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { getActiveAudioContext } from \"../../player\";\nimport { AudioContextEngine } from \"../../player/AudioContextEngine\";\nimport { AudiosetControl, EmptyControlState } from \"../../player/Control\";\nimport { ResourceLoader } from \"../../player/ResourceLoader\";\nimport { Sampler } from \"../../player/Sampler\";\nexport function usePlayer(audioset) {\n  const visualsRef = useRef(null);\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        control = _useState2[0],\n        setControl = _useState2[1];\n\n  const _useState3 = useState(EmptyControlState),\n        _useState4 = _slicedToArray(_useState3, 2),\n        state = _useState4[0],\n        setState = _useState4[1];\n\n  const el = visualsRef.current;\n  useEffect(() => {\n    let cancelled = false;\n    let sampler;\n    let visuals;\n\n    async function createPlayer() {\n      const loader = new ResourceLoader(audioset, status => {// TODO: set clip enabled\n      });\n      loader.preload();\n\n      const _ref = await import(\"../../visuals/index\"),\n            VisualControl = _ref.VisualControl;\n\n      const ctx = await getActiveAudioContext();\n\n      if (cancelled) {\n        return;\n      }\n\n      loader.load(ctx);\n      sampler = createSampler(audioset, ctx, loader);\n      console.log(visualsRef);\n\n      if (visualsRef.current) {\n        visuals = new VisualControl(audioset, visualsRef.current);\n      }\n\n      const ctl = new AudiosetControl(audioset, {\n        onControlStateChanged: newState => {\n          setState(newState);\n        },\n        onControlCommand: command => {\n          var _sampler, _visuals;\n\n          (_sampler = sampler) === null || _sampler === void 0 ? void 0 : _sampler.run(command);\n          (_visuals = visuals) === null || _visuals === void 0 ? void 0 : _visuals.run(command);\n        }\n      });\n      setControl(ctl);\n      setState(ctl.getState());\n    }\n\n    createPlayer();\n    return () => {\n      var _visuals2, _sampler2;\n\n      cancelled = true;\n      (_visuals2 = visuals) === null || _visuals2 === void 0 ? void 0 : _visuals2.detach();\n      (_sampler2 = sampler) === null || _sampler2 === void 0 ? void 0 : _sampler2.dispose();\n    };\n  }, [audioset]);\n  return {\n    el,\n    control,\n    state\n  };\n}\n\nfunction createSampler(audioset, ctx, buffers) {\n  const audio = new AudioContextEngine(ctx);\n  const sampler = new Sampler(audioset, buffers, audio);\n  return sampler;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/usePlayer.tsx"],"names":["useEffect","useRef","useState","getActiveAudioContext","AudioContextEngine","AudiosetControl","EmptyControlState","ResourceLoader","Sampler","usePlayer","audioset","visualsRef","control","setControl","state","setState","el","current","cancelled","sampler","visuals","createPlayer","loader","status","preload","VisualControl","ctx","load","createSampler","console","log","ctl","onControlStateChanged","newState","onControlCommand","command","run","getState","detach","dispose","buffers","audio"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AAGA,SAASC,qBAAT,QAAsC,cAAtC;AACA,SAASC,kBAAT,QAAmC,iCAAnC;AACA,SACEC,eADF,EAEEC,iBAFF,QAIO,sBAJP;AAKA,SAASC,cAAT,QAA+B,6BAA/B;AACA,SAASC,OAAT,QAAwB,sBAAxB;AAGA,OAAO,SAASC,SAAT,CAAmBC,QAAnB,EAAuC;AAC5C,QAAMC,UAAU,GAAGV,MAAM,CAAiB,IAAjB,CAAzB;;AAD4C,oBAEdC,QAAQ,CAAuB,IAAvB,CAFM;AAAA;AAAA,QAErCU,OAFqC;AAAA,QAE5BC,UAF4B;;AAAA,qBAGlBX,QAAQ,CAACI,iBAAD,CAHU;AAAA;AAAA,QAGrCQ,KAHqC;AAAA,QAG9BC,QAH8B;;AAK5C,QAAMC,EAAE,GAAGL,UAAU,CAACM,OAAtB;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIkB,SAAS,GAAG,KAAhB;AACA,QAAIC,OAAJ;AACA,QAAIC,OAAJ;;AAEA,mBAAeC,YAAf,GAA8B;AAC5B,YAAMC,MAAM,GAAG,IAAIf,cAAJ,CAAmBG,QAAnB,EAA6Ba,MAAM,IAAI,CACpD;AACD,OAFc,CAAf;AAGAD,MAAAA,MAAM,CAACE,OAAP;;AAJ4B,mBAMF,MAAM,OAAO,qBAAP,CANJ;AAAA,YAMpBC,aANoB,QAMpBA,aANoB;;AAO5B,YAAMC,GAAG,GAAG,MAAMvB,qBAAqB,EAAvC;;AAEA,UAAIe,SAAJ,EAAe;AACb;AACD;;AAEDI,MAAAA,MAAM,CAACK,IAAP,CAAYD,GAAZ;AACAP,MAAAA,OAAO,GAAGS,aAAa,CAAClB,QAAD,EAAWgB,GAAX,EAAgBJ,MAAhB,CAAvB;AAEAO,MAAAA,OAAO,CAACC,GAAR,CAAYnB,UAAZ;;AACA,UAAIA,UAAU,CAACM,OAAf,EAAwB;AACtBG,QAAAA,OAAO,GAAG,IAAIK,aAAJ,CAAkBf,QAAlB,EAA4BC,UAAU,CAACM,OAAvC,CAAV;AACD;;AAED,YAAMc,GAAG,GAAG,IAAI1B,eAAJ,CAAoBK,QAApB,EAA8B;AACxCsB,QAAAA,qBAAqB,EAAEC,QAAQ,IAAI;AACjClB,UAAAA,QAAQ,CAACkB,QAAD,CAAR;AACD,SAHuC;AAIxCC,QAAAA,gBAAgB,EAAEC,OAAO,IAAI;AAAA;;AAC3B,sBAAAhB,OAAO,UAAP,4CAASiB,GAAT,CAAaD,OAAb;AACA,sBAAAf,OAAO,UAAP,4CAASgB,GAAT,CAAaD,OAAb;AACD;AAPuC,OAA9B,CAAZ;AASAtB,MAAAA,UAAU,CAACkB,GAAD,CAAV;AACAhB,MAAAA,QAAQ,CAACgB,GAAG,CAACM,QAAJ,EAAD,CAAR;AACD;;AAEDhB,IAAAA,YAAY;AACZ,WAAO,MAAM;AAAA;;AACXH,MAAAA,SAAS,GAAG,IAAZ;AACA,mBAAAE,OAAO,UAAP,8CAASkB,MAAT;AACA,mBAAAnB,OAAO,UAAP,8CAASoB,OAAT;AACD,KAJD;AAKD,GA7CQ,EA6CN,CAAC7B,QAAD,CA7CM,CAAT;AA+CA,SAAO;AAAEM,IAAAA,EAAF;AAAMJ,IAAAA,OAAN;AAAeE,IAAAA;AAAf,GAAP;AACD;;AAED,SAASc,aAAT,CACElB,QADF,EAEEgB,GAFF,EAGEc,OAHF,EAIW;AACT,QAAMC,KAAK,GAAG,IAAIrC,kBAAJ,CAAuBsB,GAAvB,CAAd;AACA,QAAMP,OAAO,GAAG,IAAIX,OAAJ,CAAYE,QAAZ,EAAsB8B,OAAtB,EAA+BC,KAA/B,CAAhB;AACA,SAAOtB,OAAP;AACD","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport { IAudioContext } from \"standardized-audio-context\";\nimport { Audioset } from \"../../audioset\";\nimport { getActiveAudioContext } from \"../../player\";\nimport { AudioContextEngine } from \"../../player/AudioContextEngine\";\nimport {\n  AudiosetControl,\n  EmptyControlState,\n  PlayerControl,\n} from \"../../player/Control\";\nimport { ResourceLoader } from \"../../player/ResourceLoader\";\nimport { Sampler } from \"../../player/Sampler\";\nimport { VisualControl as VC } from \"../../visuals\";\n\nexport function usePlayer(audioset: Audioset) {\n  const visualsRef = useRef<HTMLDivElement>(null);\n  const [control, setControl] = useState<PlayerControl | null>(null);\n  const [state, setState] = useState(EmptyControlState);\n\n  const el = visualsRef.current;\n\n  useEffect(() => {\n    let cancelled = false;\n    let sampler: Sampler | undefined;\n    let visuals: VC | undefined;\n\n    async function createPlayer() {\n      const loader = new ResourceLoader(audioset, status => {\n        // TODO: set clip enabled\n      });\n      loader.preload();\n\n      const { VisualControl } = await import(\"../../visuals/index\");\n      const ctx = await getActiveAudioContext();\n\n      if (cancelled) {\n        return;\n      }\n\n      loader.load(ctx);\n      sampler = createSampler(audioset, ctx, loader);\n\n      console.log(visualsRef);\n      if (visualsRef.current) {\n        visuals = new VisualControl(audioset, visualsRef.current);\n      }\n\n      const ctl = new AudiosetControl(audioset, {\n        onControlStateChanged: newState => {\n          setState(newState);\n        },\n        onControlCommand: command => {\n          sampler?.run(command);\n          visuals?.run(command);\n        },\n      });\n      setControl(ctl);\n      setState(ctl.getState());\n    }\n\n    createPlayer();\n    return () => {\n      cancelled = true;\n      visuals?.detach();\n      sampler?.dispose();\n    };\n  }, [audioset]);\n\n  return { el, control, state };\n}\n\nfunction createSampler(\n  audioset: Audioset,\n  ctx: IAudioContext,\n  buffers: ResourceLoader,\n): Sampler {\n  const audio = new AudioContextEngine(ctx);\n  const sampler = new Sampler(audioset, buffers, audio);\n  return sampler;\n}\n"]},"metadata":{},"sourceType":"module"}