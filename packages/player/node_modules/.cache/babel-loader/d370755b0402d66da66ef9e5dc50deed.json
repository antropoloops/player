{"ast":null,"code":"import _slicedToArray from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from\"react\";import*as Screenfull from\"screenfull\";export function useFullscreen(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isFull=_useState2[0],setIsFull=_useState2[1];useEffect(function(){if(Screenfull.isEnabled){var screen=Screenfull;var handleChange=function handleChange(event){setIsFull(screen.isFullscreen);};screen.on(\"change\",handleChange);return function(){screen.off(\"change\",handleChange);};}});function toggle(){if(Screenfull.isEnabled){var screen=Screenfull;screen.isFullscreen?screen.exit():screen.request();}}return{isFull:isFull,toggle:toggle};}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/useFullscreen.ts"],"names":["useEffect","useState","Screenfull","useFullscreen","isFull","setIsFull","isEnabled","screen","handleChange","event","isFullscreen","on","off","toggle","exit","request"],"mappings":"4JAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,MAAO,GAAKC,CAAAA,UAAZ,KAA4B,YAA5B,CAOA,MAAO,SAASC,CAAAA,aAAT,EAAqC,eACdF,QAAQ,CAAC,KAAD,CADM,wCACnCG,MADmC,eAC3BC,SAD2B,eAE1CL,SAAS,CAAC,UAAM,CACd,GAAIE,UAAU,CAACI,SAAf,CAA0B,CACxB,GAAMC,CAAAA,MAAM,CAAGL,UAAf,CACA,GAAMM,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAkB,CACrCJ,SAAS,CAACE,MAAM,CAACG,YAAR,CAAT,CACD,CAFD,CAIAH,MAAM,CAACI,EAAP,CAAU,QAAV,CAAoBH,YAApB,EACA,MAAO,WAAM,CACXD,MAAM,CAACK,GAAP,CAAW,QAAX,CAAqBJ,YAArB,EACD,CAFD,CAGD,CACF,CAZQ,CAAT,CAaA,QAASK,CAAAA,MAAT,EAAkB,CAChB,GAAIX,UAAU,CAACI,SAAf,CAA0B,CACxB,GAAMC,CAAAA,MAAM,CAAGL,UAAf,CACAK,MAAM,CAACG,YAAP,CAAsBH,MAAM,CAACO,IAAP,EAAtB,CAAsCP,MAAM,CAACQ,OAAP,EAAtC,CACD,CACF,CACD,MAAO,CAAEX,MAAM,CAANA,MAAF,CAAUS,MAAM,CAANA,MAAV,CAAP,CACD","sourcesContent":["import { useEffect, useState } from \"react\";\nimport * as Screenfull from \"screenfull\";\n\nexport interface Fullscreen {\n  isFull: boolean;\n  toggle: () => void;\n}\n\nexport function useFullscreen(): Fullscreen {\n  const [isFull, setIsFull] = useState(false);\n  useEffect(() => {\n    if (Screenfull.isEnabled) {\n      const screen = Screenfull;\n      const handleChange = (event: Event) => {\n        setIsFull(screen.isFullscreen);\n      };\n\n      screen.on(\"change\", handleChange);\n      return () => {\n        screen.off(\"change\", handleChange);\n      };\n    }\n  });\n  function toggle() {\n    if (Screenfull.isEnabled) {\n      const screen = Screenfull;\n      screen.isFullscreen ? screen.exit() : screen.request();\n    }\n  }\n  return { isFull, toggle };\n}\n"]},"metadata":{},"sourceType":"module"}