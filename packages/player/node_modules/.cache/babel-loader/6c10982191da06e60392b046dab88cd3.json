{"ast":null,"code":"import _possibleConstructorReturn from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _get from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";import _inherits from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _classCallCheck from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import{EmptyAudioset,isAudioset}from\"../audioset\";import{BundleLoader}from\"../audioset/\";import{DebugAudioEngine}from\"./Audio\";import{AudiosetControl}from\"./Control\";import{Emitter}from\"./Emitter\";import{ResourceLoader}from\"./ResourceLoader\";import{Sampler}from\"./Sampler\";var NoOp=function NoOp(param){return undefined;};var NoControl=new AudiosetControl(EmptyAudioset,{onControlCommand:NoOp,onControlStateChanged:NoOp});var NoResources=new ResourceLoader(EmptyAudioset,NoOp);var NoEngine=new DebugAudioEngine();var NoSampler=new Sampler(EmptyAudioset,NoResources,NoEngine);var NoPlayer={control:NoControl,resources:NoResources,sampler:NoSampler};/**\n * A player is the facade for the rest of the components:\n * - Loader: load audioset and resources\n * - Control: determines how to play clips\n * - Pads: receive pad events\n * - Params: receive param change events\n * - Keyboard: receive keyboard events\n * - Sampler: play the audio\n */var AudiosetPlayer=/*#__PURE__*/function(){function AudiosetPlayer(){var _this=this;_classCallCheck(this,AudiosetPlayer);this.resources=NoResources;this.audioset=EmptyAudioset;this.resourceListener=void 0;this.resourceStatusChanged=new Emitter();this.resourceListener=function(status){_this.handleResourceChanged(status);};}_createClass(AudiosetPlayer,[{key:\"getAudioset\",value:function getAudioset(){return this.audioset;}},{key:\"onResourceStatusChanged\",value:function onResourceStatusChanged(listener){return this.resourceStatusChanged.on(listener);}// PRIVATE //\n},{key:\"setAudioset\",value:function setAudioset(audioset){this.audioset=audioset;this.resources=new ResourceLoader(audioset,this.resourceListener);}},{key:\"handleResourceChanged\",value:function handleResourceChanged(status){this.resourceStatusChanged.emit(status);}}]);return AudiosetPlayer;}();export var ControlPlayer=/*#__PURE__*/function(_AudiosetPlayer){_inherits(ControlPlayer,_AudiosetPlayer);function ControlPlayer(){var _this2;_classCallCheck(this,ControlPlayer);_this2=_possibleConstructorReturn(this,_getPrototypeOf(ControlPlayer).call(this));_this2.control=NoControl;_this2.controlListener=void 0;_this2.stateEvent=new Emitter();_this2.controlCommandEvent=new Emitter();_this2.controlListener={onControlStateChanged:function onControlStateChanged(state){return _this2.handleControlStateChanged(state);},onControlCommand:function onControlCommand(command){return _this2.handleControlCommand(command);}};return _this2;}/**\n   * @override\n   */_createClass(ControlPlayer,[{key:\"setAudioset\",value:function setAudioset(audioset){this.control=new AudiosetControl(audioset,this.controlListener);_get(_getPrototypeOf(ControlPlayer.prototype),\"setAudioset\",this).call(this,audioset);}},{key:\"onControlStateChanged\",value:function onControlStateChanged(listener){return this.stateEvent.on(listener);}},{key:\"onCommand\",value:function onCommand(listener){return this.controlCommandEvent.on(listener);}},{key:\"handleControlCommand\",value:function handleControlCommand(command){this.controlCommandEvent.emit(command);}},{key:\"handleControlStateChanged\",value:function handleControlStateChanged(controlState){this.stateEvent.emit(controlState);}}]);return ControlPlayer;}(AudiosetPlayer);var AudioPlayer=/*#__PURE__*/function(_ControlPlayer){_inherits(AudioPlayer,_ControlPlayer);function AudioPlayer(){var _this3;_classCallCheck(this,AudioPlayer);_this3=_possibleConstructorReturn(this,_getPrototypeOf(AudioPlayer).call(this));_this3.audio=new DebugAudioEngine();_this3.sampler=NoSampler;_this3.sampler=NoSampler;return _this3;}/**\n   * @override\n   */_createClass(AudioPlayer,[{key:\"setAudioset\",value:function setAudioset(audioset){this.sampler=new Sampler(audioset,this.resources,this.audio);_get(_getPrototypeOf(AudioPlayer.prototype),\"setAudioset\",this).call(this,audioset);}},{key:\"setAudioEngine\",value:function setAudioEngine(audio){this.audio=audio;// this.sampler.dispose()\nthis.sampler=new Sampler(this.getAudioset(),this.resources,this.audio);}},{key:\"handleControlCommand\",value:function handleControlCommand(command){this.sampler.run(command);_get(_getPrototypeOf(AudioPlayer.prototype),\"handleControlCommand\",this).call(this,command);}}]);return AudioPlayer;}(ControlPlayer);/**\n * A player with a audioset loader.\n * The idea is a player with state, but not well modelled\n */export var PlayerState=/*#__PURE__*/function(_AudioPlayer){_inherits(PlayerState,_AudioPlayer);function PlayerState(){var _this4;_classCallCheck(this,PlayerState);_this4=_possibleConstructorReturn(this,_getPrototypeOf(PlayerState).call(this));_this4.loader=void 0;_this4.BundleLoadStatusChanged=new Emitter();_this4.loader=new BundleLoader(function(status){return _this4.handleLoadStatusChanged(status);});return _this4;}_createClass(PlayerState,[{key:\"handleLoadStatusChanged\",value:function handleLoadStatusChanged(status){this.BundleLoadStatusChanged.emit(status);if(status.stage===\"ready\"){this.setBundle(status.payload);}}},{key:\"setBundle\",value:function setBundle(bundle){this.control.stopAll(0);if(isAudioset(bundle)){this.setAudioset(bundle);}else{Object.assign(this,NoPlayer);}}}]);return PlayerState;}(AudioPlayer);","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/Player.ts"],"names":["EmptyAudioset","isAudioset","BundleLoader","DebugAudioEngine","AudiosetControl","Emitter","ResourceLoader","Sampler","NoOp","param","undefined","NoControl","onControlCommand","onControlStateChanged","NoResources","NoEngine","NoSampler","NoPlayer","control","resources","sampler","AudiosetPlayer","audioset","resourceListener","resourceStatusChanged","status","handleResourceChanged","listener","on","emit","ControlPlayer","controlListener","stateEvent","controlCommandEvent","state","handleControlStateChanged","command","handleControlCommand","controlState","AudioPlayer","audio","getAudioset","run","PlayerState","loader","BundleLoadStatusChanged","handleLoadStatusChanged","stage","setBundle","payload","bundle","stopAll","setAudioset","Object","assign"],"mappings":"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","sourcesContent":["import { Audioset, Bundle, EmptyAudioset, isAudioset } from \"../audioset\";\nimport { BundleLoader, BundleLoadStatus } from \"../audioset/\";\nimport { AudioEngine, DebugAudioEngine } from \"./Audio\";\nimport {\n  AudiosetControl,\n  ControlCommand,\n  ControlListener,\n  ControlState,\n  PlayerControl,\n} from \"./Control\";\nimport { Emitter, Listener, Unsubscribe } from \"./Emitter\";\nimport {\n  ResourceLoader,\n  ResourceLoadStatus,\n  Resources,\n} from \"./ResourceLoader\";\nimport { Sampler } from \"./Sampler\";\nconst NoOp = (param: any) => undefined;\nconst NoControl = new AudiosetControl(EmptyAudioset, {\n  onControlCommand: NoOp,\n  onControlStateChanged: NoOp,\n});\nconst NoResources = new ResourceLoader(EmptyAudioset, NoOp);\nconst NoEngine = new DebugAudioEngine();\nconst NoSampler = new Sampler(EmptyAudioset, NoResources, NoEngine);\n\nconst NoPlayer = {\n  control: NoControl,\n  resources: NoResources,\n  sampler: NoSampler,\n};\n\n/**\n * A player is the facade for the rest of the components:\n * - Loader: load audioset and resources\n * - Control: determines how to play clips\n * - Pads: receive pad events\n * - Params: receive param change events\n * - Keyboard: receive keyboard events\n * - Sampler: play the audio\n */\nexport interface Player {\n  readonly loader: BundleLoader;\n  readonly resources: Resources;\n  readonly control: PlayerControl;\n  setAudioEngine(audio: AudioEngine): void;\n  onControlStateChanged(listener: Listener<ControlState>): Unsubscribe;\n  onResourceStatusChanged(listener: Listener<ResourceLoadStatus>): Unsubscribe;\n  onCommand(listener: Listener<ControlCommand>): Unsubscribe;\n}\n\nclass AudiosetPlayer {\n  public resources: Resources = NoResources;\n  private audioset: Audioset = EmptyAudioset;\n  private readonly resourceListener: (status: ResourceLoadStatus) => void;\n  private readonly resourceStatusChanged = new Emitter<ResourceLoadStatus>();\n\n  public constructor() {\n    this.resourceListener = (status: ResourceLoadStatus) => {\n      this.handleResourceChanged(status);\n    };\n  }\n\n  public getAudioset() {\n    return this.audioset;\n  }\n\n  public onResourceStatusChanged(listener: Listener<ResourceLoadStatus>) {\n    return this.resourceStatusChanged.on(listener);\n  }\n\n  // PRIVATE //\n\n  protected setAudioset(audioset: Audioset) {\n    this.audioset = audioset;\n    this.resources = new ResourceLoader(audioset, this.resourceListener);\n  }\n\n  private handleResourceChanged(status: ResourceLoadStatus) {\n    this.resourceStatusChanged.emit(status);\n  }\n}\n\nexport class ControlPlayer extends AudiosetPlayer {\n  public control: AudiosetControl = NoControl;\n  protected readonly controlListener: ControlListener;\n\n  private readonly stateEvent = new Emitter<ControlState>();\n  private readonly controlCommandEvent = new Emitter<ControlCommand>();\n\n  constructor() {\n    super();\n    this.controlListener = {\n      onControlStateChanged: state => this.handleControlStateChanged(state),\n      onControlCommand: command => this.handleControlCommand(command),\n    };\n  }\n\n  /**\n   * @override\n   */\n  public setAudioset(audioset: Audioset) {\n    this.control = new AudiosetControl(audioset, this.controlListener);\n    super.setAudioset(audioset);\n  }\n\n  public onControlStateChanged(listener: Listener<ControlState>) {\n    return this.stateEvent.on(listener);\n  }\n\n  public onCommand(listener: Listener<ControlCommand>) {\n    return this.controlCommandEvent.on(listener);\n  }\n\n  protected handleControlCommand(command: ControlCommand) {\n    this.controlCommandEvent.emit(command);\n  }\n\n  private handleControlStateChanged(controlState: ControlState) {\n    this.stateEvent.emit(controlState);\n  }\n}\n\nclass AudioPlayer extends ControlPlayer {\n  protected audio: AudioEngine = new DebugAudioEngine();\n  private sampler: Sampler = NoSampler;\n\n  constructor() {\n    super();\n    this.sampler = NoSampler;\n  }\n\n  /**\n   * @override\n   */\n  public setAudioset(audioset: Audioset) {\n    this.sampler = new Sampler(audioset, this.resources, this.audio);\n    super.setAudioset(audioset);\n  }\n\n  public setAudioEngine(audio: AudioEngine) {\n    this.audio = audio;\n    // this.sampler.dispose()\n    this.sampler = new Sampler(this.getAudioset(), this.resources, this.audio);\n  }\n  protected handleControlCommand(command: ControlCommand) {\n    this.sampler.run(command);\n    super.handleControlCommand(command);\n  }\n}\n\n/**\n * A player with a audioset loader.\n * The idea is a player with state, but not well modelled\n */\nexport class PlayerState extends AudioPlayer implements Player {\n  public readonly loader: BundleLoader;\n  private readonly BundleLoadStatusChanged = new Emitter<BundleLoadStatus>();\n\n  constructor() {\n    super();\n    this.loader = new BundleLoader(status =>\n      this.handleLoadStatusChanged(status),\n    );\n  }\n\n  private handleLoadStatusChanged(status: BundleLoadStatus) {\n    this.BundleLoadStatusChanged.emit(status);\n    if (status.stage === \"ready\") {\n      this.setBundle(status.payload);\n    }\n  }\n\n  private setBundle(bundle: Bundle) {\n    this.control.stopAll(0);\n    if (isAudioset(bundle)) {\n      this.setAudioset(bundle);\n    } else {\n      Object.assign(this, NoPlayer);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}