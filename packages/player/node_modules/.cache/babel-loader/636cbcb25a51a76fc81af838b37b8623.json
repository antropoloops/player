{"ast":null,"code":"import hashset from \"./hash/hashset\";\nimport hashmap from \"./hash/hashmap\";\nimport equalPoint from \"./hash/point-equal\";\nimport hashPoint from \"./hash/point-hash\"; // Given an extracted (pre-)topology, identifies all of the junctions. These are\n// the points at which arcs (lines or rings) will need to be cut so that each\n// arc is represented uniquely.\n//\n// A junction is a point where at least one arc deviates from another arc going\n// through the same point. For example, consider the point B. If there is a arc\n// through ABC and another arc through CBA, then B is not a junction because in\n// both cases the adjacent point pairs are {A,C}. However, if there is an\n// additional arc ABD, then {A,D} != {A,C}, and thus B becomes a junction.\n//\n// For a closed ring ABCA, the first point A’s adjacent points are the second\n// and last point {B,C}. For a line, the first and last point are always\n// considered junctions, even if the line is closed; this ensures that a closed\n// line is never rotated.\n\nexport default function (topology) {\n  var coordinates = topology.coordinates,\n      lines = topology.lines,\n      rings = topology.rings,\n      indexes = index(),\n      visitedByIndex = new Int32Array(coordinates.length),\n      leftByIndex = new Int32Array(coordinates.length),\n      rightByIndex = new Int32Array(coordinates.length),\n      junctionByIndex = new Int8Array(coordinates.length),\n      junctionCount = 0,\n      // upper bound on number of junctions\n  i,\n      n,\n      previousIndex,\n      currentIndex,\n      nextIndex;\n\n  for (i = 0, n = coordinates.length; i < n; ++i) {\n    visitedByIndex[i] = leftByIndex[i] = rightByIndex[i] = -1;\n  }\n\n  for (i = 0, n = lines.length; i < n; ++i) {\n    var line = lines[i],\n        lineStart = line[0],\n        lineEnd = line[1];\n    currentIndex = indexes[lineStart];\n    nextIndex = indexes[++lineStart];\n    ++junctionCount, junctionByIndex[currentIndex] = 1; // start\n\n    while (++lineStart <= lineEnd) {\n      sequence(i, previousIndex = currentIndex, currentIndex = nextIndex, nextIndex = indexes[lineStart]);\n    }\n\n    ++junctionCount, junctionByIndex[nextIndex] = 1; // end\n  }\n\n  for (i = 0, n = coordinates.length; i < n; ++i) {\n    visitedByIndex[i] = -1;\n  }\n\n  for (i = 0, n = rings.length; i < n; ++i) {\n    var ring = rings[i],\n        ringStart = ring[0] + 1,\n        ringEnd = ring[1];\n    previousIndex = indexes[ringEnd - 1];\n    currentIndex = indexes[ringStart - 1];\n    nextIndex = indexes[ringStart];\n    sequence(i, previousIndex, currentIndex, nextIndex);\n\n    while (++ringStart <= ringEnd) {\n      sequence(i, previousIndex = currentIndex, currentIndex = nextIndex, nextIndex = indexes[ringStart]);\n    }\n  }\n\n  function sequence(i, previousIndex, currentIndex, nextIndex) {\n    if (visitedByIndex[currentIndex] === i) return; // ignore self-intersection\n\n    visitedByIndex[currentIndex] = i;\n    var leftIndex = leftByIndex[currentIndex];\n\n    if (leftIndex >= 0) {\n      var rightIndex = rightByIndex[currentIndex];\n\n      if ((leftIndex !== previousIndex || rightIndex !== nextIndex) && (leftIndex !== nextIndex || rightIndex !== previousIndex)) {\n        ++junctionCount, junctionByIndex[currentIndex] = 1;\n      }\n    } else {\n      leftByIndex[currentIndex] = previousIndex;\n      rightByIndex[currentIndex] = nextIndex;\n    }\n  }\n\n  function index() {\n    var indexByPoint = hashmap(coordinates.length * 1.4, hashIndex, equalIndex, Int32Array, -1, Int32Array),\n        indexes = new Int32Array(coordinates.length);\n\n    for (var i = 0, n = coordinates.length; i < n; ++i) {\n      indexes[i] = indexByPoint.maybeSet(i, i);\n    }\n\n    return indexes;\n  }\n\n  function hashIndex(i) {\n    return hashPoint(coordinates[i]);\n  }\n\n  function equalIndex(i, j) {\n    return equalPoint(coordinates[i], coordinates[j]);\n  }\n\n  visitedByIndex = leftByIndex = rightByIndex = null;\n  var junctionByPoint = hashset(junctionCount * 1.4, hashPoint, equalPoint),\n      j; // Convert back to a standard hashset by point for caller convenience.\n\n  for (i = 0, n = coordinates.length; i < n; ++i) {\n    if (junctionByIndex[j = indexes[i]]) {\n      junctionByPoint.add(coordinates[j]);\n    }\n  }\n\n  return junctionByPoint;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/topojson-server/src/join.js"],"names":["hashset","hashmap","equalPoint","hashPoint","topology","coordinates","lines","rings","indexes","index","visitedByIndex","Int32Array","length","leftByIndex","rightByIndex","junctionByIndex","Int8Array","junctionCount","i","n","previousIndex","currentIndex","nextIndex","line","lineStart","lineEnd","sequence","ring","ringStart","ringEnd","leftIndex","rightIndex","indexByPoint","hashIndex","equalIndex","maybeSet","j","junctionByPoint","add"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,gBAApB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,OAAOC,SAAP,MAAsB,mBAAtB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,UAASC,QAAT,EAAmB;AAChC,MAAIC,WAAW,GAAGD,QAAQ,CAACC,WAA3B;AAAA,MACIC,KAAK,GAAGF,QAAQ,CAACE,KADrB;AAAA,MAEIC,KAAK,GAAGH,QAAQ,CAACG,KAFrB;AAAA,MAGIC,OAAO,GAAGC,KAAK,EAHnB;AAAA,MAIIC,cAAc,GAAG,IAAIC,UAAJ,CAAeN,WAAW,CAACO,MAA3B,CAJrB;AAAA,MAKIC,WAAW,GAAG,IAAIF,UAAJ,CAAeN,WAAW,CAACO,MAA3B,CALlB;AAAA,MAMIE,YAAY,GAAG,IAAIH,UAAJ,CAAeN,WAAW,CAACO,MAA3B,CANnB;AAAA,MAOIG,eAAe,GAAG,IAAIC,SAAJ,CAAcX,WAAW,CAACO,MAA1B,CAPtB;AAAA,MAQIK,aAAa,GAAG,CARpB;AAAA,MAQuB;AACnBC,EAAAA,CATJ;AAAA,MASOC,CATP;AAAA,MAUIC,aAVJ;AAAA,MAWIC,YAXJ;AAAA,MAYIC,SAZJ;;AAcA,OAAKJ,CAAC,GAAG,CAAJ,EAAOC,CAAC,GAAGd,WAAW,CAACO,MAA5B,EAAoCM,CAAC,GAAGC,CAAxC,EAA2C,EAAED,CAA7C,EAAgD;AAC9CR,IAAAA,cAAc,CAACQ,CAAD,CAAd,GAAoBL,WAAW,CAACK,CAAD,CAAX,GAAiBJ,YAAY,CAACI,CAAD,CAAZ,GAAkB,CAAC,CAAxD;AACD;;AAED,OAAKA,CAAC,GAAG,CAAJ,EAAOC,CAAC,GAAGb,KAAK,CAACM,MAAtB,EAA8BM,CAAC,GAAGC,CAAlC,EAAqC,EAAED,CAAvC,EAA0C;AACxC,QAAIK,IAAI,GAAGjB,KAAK,CAACY,CAAD,CAAhB;AAAA,QACIM,SAAS,GAAGD,IAAI,CAAC,CAAD,CADpB;AAAA,QAEIE,OAAO,GAAGF,IAAI,CAAC,CAAD,CAFlB;AAGAF,IAAAA,YAAY,GAAGb,OAAO,CAACgB,SAAD,CAAtB;AACAF,IAAAA,SAAS,GAAGd,OAAO,CAAC,EAAEgB,SAAH,CAAnB;AACA,MAAEP,aAAF,EAAiBF,eAAe,CAACM,YAAD,CAAf,GAAgC,CAAjD,CANwC,CAMY;;AACpD,WAAO,EAAEG,SAAF,IAAeC,OAAtB,EAA+B;AAC7BC,MAAAA,QAAQ,CAACR,CAAD,EAAIE,aAAa,GAAGC,YAApB,EAAkCA,YAAY,GAAGC,SAAjD,EAA4DA,SAAS,GAAGd,OAAO,CAACgB,SAAD,CAA/E,CAAR;AACD;;AACD,MAAEP,aAAF,EAAiBF,eAAe,CAACO,SAAD,CAAf,GAA6B,CAA9C,CAVwC,CAUS;AAClD;;AAED,OAAKJ,CAAC,GAAG,CAAJ,EAAOC,CAAC,GAAGd,WAAW,CAACO,MAA5B,EAAoCM,CAAC,GAAGC,CAAxC,EAA2C,EAAED,CAA7C,EAAgD;AAC9CR,IAAAA,cAAc,CAACQ,CAAD,CAAd,GAAoB,CAAC,CAArB;AACD;;AAED,OAAKA,CAAC,GAAG,CAAJ,EAAOC,CAAC,GAAGZ,KAAK,CAACK,MAAtB,EAA8BM,CAAC,GAAGC,CAAlC,EAAqC,EAAED,CAAvC,EAA0C;AACxC,QAAIS,IAAI,GAAGpB,KAAK,CAACW,CAAD,CAAhB;AAAA,QACIU,SAAS,GAAGD,IAAI,CAAC,CAAD,CAAJ,GAAU,CAD1B;AAAA,QAEIE,OAAO,GAAGF,IAAI,CAAC,CAAD,CAFlB;AAGAP,IAAAA,aAAa,GAAGZ,OAAO,CAACqB,OAAO,GAAG,CAAX,CAAvB;AACAR,IAAAA,YAAY,GAAGb,OAAO,CAACoB,SAAS,GAAG,CAAb,CAAtB;AACAN,IAAAA,SAAS,GAAGd,OAAO,CAACoB,SAAD,CAAnB;AACAF,IAAAA,QAAQ,CAACR,CAAD,EAAIE,aAAJ,EAAmBC,YAAnB,EAAiCC,SAAjC,CAAR;;AACA,WAAO,EAAEM,SAAF,IAAeC,OAAtB,EAA+B;AAC7BH,MAAAA,QAAQ,CAACR,CAAD,EAAIE,aAAa,GAAGC,YAApB,EAAkCA,YAAY,GAAGC,SAAjD,EAA4DA,SAAS,GAAGd,OAAO,CAACoB,SAAD,CAA/E,CAAR;AACD;AACF;;AAED,WAASF,QAAT,CAAkBR,CAAlB,EAAqBE,aAArB,EAAoCC,YAApC,EAAkDC,SAAlD,EAA6D;AAC3D,QAAIZ,cAAc,CAACW,YAAD,CAAd,KAAiCH,CAArC,EAAwC,OADmB,CACX;;AAChDR,IAAAA,cAAc,CAACW,YAAD,CAAd,GAA+BH,CAA/B;AACA,QAAIY,SAAS,GAAGjB,WAAW,CAACQ,YAAD,CAA3B;;AACA,QAAIS,SAAS,IAAI,CAAjB,EAAoB;AAClB,UAAIC,UAAU,GAAGjB,YAAY,CAACO,YAAD,CAA7B;;AACA,UAAI,CAACS,SAAS,KAAKV,aAAd,IAA+BW,UAAU,KAAKT,SAA/C,MACEQ,SAAS,KAAKR,SAAd,IAA2BS,UAAU,KAAKX,aAD5C,CAAJ,EACgE;AAC9D,UAAEH,aAAF,EAAiBF,eAAe,CAACM,YAAD,CAAf,GAAgC,CAAjD;AACD;AACF,KAND,MAMO;AACLR,MAAAA,WAAW,CAACQ,YAAD,CAAX,GAA4BD,aAA5B;AACAN,MAAAA,YAAY,CAACO,YAAD,CAAZ,GAA6BC,SAA7B;AACD;AACF;;AAED,WAASb,KAAT,GAAiB;AACf,QAAIuB,YAAY,GAAG/B,OAAO,CAACI,WAAW,CAACO,MAAZ,GAAqB,GAAtB,EAA2BqB,SAA3B,EAAsCC,UAAtC,EAAkDvB,UAAlD,EAA8D,CAAC,CAA/D,EAAkEA,UAAlE,CAA1B;AAAA,QACIH,OAAO,GAAG,IAAIG,UAAJ,CAAeN,WAAW,CAACO,MAA3B,CADd;;AAGA,SAAK,IAAIM,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGd,WAAW,CAACO,MAAhC,EAAwCM,CAAC,GAAGC,CAA5C,EAA+C,EAAED,CAAjD,EAAoD;AAClDV,MAAAA,OAAO,CAACU,CAAD,CAAP,GAAac,YAAY,CAACG,QAAb,CAAsBjB,CAAtB,EAAyBA,CAAzB,CAAb;AACD;;AAED,WAAOV,OAAP;AACD;;AAED,WAASyB,SAAT,CAAmBf,CAAnB,EAAsB;AACpB,WAAOf,SAAS,CAACE,WAAW,CAACa,CAAD,CAAZ,CAAhB;AACD;;AAED,WAASgB,UAAT,CAAoBhB,CAApB,EAAuBkB,CAAvB,EAA0B;AACxB,WAAOlC,UAAU,CAACG,WAAW,CAACa,CAAD,CAAZ,EAAiBb,WAAW,CAAC+B,CAAD,CAA5B,CAAjB;AACD;;AAED1B,EAAAA,cAAc,GAAGG,WAAW,GAAGC,YAAY,GAAG,IAA9C;AAEA,MAAIuB,eAAe,GAAGrC,OAAO,CAACiB,aAAa,GAAG,GAAjB,EAAsBd,SAAtB,EAAiCD,UAAjC,CAA7B;AAAA,MAA2EkC,CAA3E,CAtFgC,CAwFhC;;AACA,OAAKlB,CAAC,GAAG,CAAJ,EAAOC,CAAC,GAAGd,WAAW,CAACO,MAA5B,EAAoCM,CAAC,GAAGC,CAAxC,EAA2C,EAAED,CAA7C,EAAgD;AAC9C,QAAIH,eAAe,CAACqB,CAAC,GAAG5B,OAAO,CAACU,CAAD,CAAZ,CAAnB,EAAqC;AACnCmB,MAAAA,eAAe,CAACC,GAAhB,CAAoBjC,WAAW,CAAC+B,CAAD,CAA/B;AACD;AACF;;AAED,SAAOC,eAAP;AACD","sourcesContent":["import hashset from \"./hash/hashset\";\nimport hashmap from \"./hash/hashmap\";\nimport equalPoint from \"./hash/point-equal\";\nimport hashPoint from \"./hash/point-hash\";\n\n// Given an extracted (pre-)topology, identifies all of the junctions. These are\n// the points at which arcs (lines or rings) will need to be cut so that each\n// arc is represented uniquely.\n//\n// A junction is a point where at least one arc deviates from another arc going\n// through the same point. For example, consider the point B. If there is a arc\n// through ABC and another arc through CBA, then B is not a junction because in\n// both cases the adjacent point pairs are {A,C}. However, if there is an\n// additional arc ABD, then {A,D} != {A,C}, and thus B becomes a junction.\n//\n// For a closed ring ABCA, the first point A’s adjacent points are the second\n// and last point {B,C}. For a line, the first and last point are always\n// considered junctions, even if the line is closed; this ensures that a closed\n// line is never rotated.\nexport default function(topology) {\n  var coordinates = topology.coordinates,\n      lines = topology.lines,\n      rings = topology.rings,\n      indexes = index(),\n      visitedByIndex = new Int32Array(coordinates.length),\n      leftByIndex = new Int32Array(coordinates.length),\n      rightByIndex = new Int32Array(coordinates.length),\n      junctionByIndex = new Int8Array(coordinates.length),\n      junctionCount = 0, // upper bound on number of junctions\n      i, n,\n      previousIndex,\n      currentIndex,\n      nextIndex;\n\n  for (i = 0, n = coordinates.length; i < n; ++i) {\n    visitedByIndex[i] = leftByIndex[i] = rightByIndex[i] = -1;\n  }\n\n  for (i = 0, n = lines.length; i < n; ++i) {\n    var line = lines[i],\n        lineStart = line[0],\n        lineEnd = line[1];\n    currentIndex = indexes[lineStart];\n    nextIndex = indexes[++lineStart];\n    ++junctionCount, junctionByIndex[currentIndex] = 1; // start\n    while (++lineStart <= lineEnd) {\n      sequence(i, previousIndex = currentIndex, currentIndex = nextIndex, nextIndex = indexes[lineStart]);\n    }\n    ++junctionCount, junctionByIndex[nextIndex] = 1; // end\n  }\n\n  for (i = 0, n = coordinates.length; i < n; ++i) {\n    visitedByIndex[i] = -1;\n  }\n\n  for (i = 0, n = rings.length; i < n; ++i) {\n    var ring = rings[i],\n        ringStart = ring[0] + 1,\n        ringEnd = ring[1];\n    previousIndex = indexes[ringEnd - 1];\n    currentIndex = indexes[ringStart - 1];\n    nextIndex = indexes[ringStart];\n    sequence(i, previousIndex, currentIndex, nextIndex);\n    while (++ringStart <= ringEnd) {\n      sequence(i, previousIndex = currentIndex, currentIndex = nextIndex, nextIndex = indexes[ringStart]);\n    }\n  }\n\n  function sequence(i, previousIndex, currentIndex, nextIndex) {\n    if (visitedByIndex[currentIndex] === i) return; // ignore self-intersection\n    visitedByIndex[currentIndex] = i;\n    var leftIndex = leftByIndex[currentIndex];\n    if (leftIndex >= 0) {\n      var rightIndex = rightByIndex[currentIndex];\n      if ((leftIndex !== previousIndex || rightIndex !== nextIndex)\n        && (leftIndex !== nextIndex || rightIndex !== previousIndex)) {\n        ++junctionCount, junctionByIndex[currentIndex] = 1;\n      }\n    } else {\n      leftByIndex[currentIndex] = previousIndex;\n      rightByIndex[currentIndex] = nextIndex;\n    }\n  }\n\n  function index() {\n    var indexByPoint = hashmap(coordinates.length * 1.4, hashIndex, equalIndex, Int32Array, -1, Int32Array),\n        indexes = new Int32Array(coordinates.length);\n\n    for (var i = 0, n = coordinates.length; i < n; ++i) {\n      indexes[i] = indexByPoint.maybeSet(i, i);\n    }\n\n    return indexes;\n  }\n\n  function hashIndex(i) {\n    return hashPoint(coordinates[i]);\n  }\n\n  function equalIndex(i, j) {\n    return equalPoint(coordinates[i], coordinates[j]);\n  }\n\n  visitedByIndex = leftByIndex = rightByIndex = null;\n\n  var junctionByPoint = hashset(junctionCount * 1.4, hashPoint, equalPoint), j;\n\n  // Convert back to a standard hashset by point for caller convenience.\n  for (i = 0, n = coordinates.length; i < n; ++i) {\n    if (junctionByIndex[j = indexes[i]]) {\n      junctionByPoint.add(coordinates[j]);\n    }\n  }\n\n  return junctionByPoint;\n}\n"]},"metadata":{},"sourceType":"module"}