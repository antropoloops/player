{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createOscillatorNodeRendererFactory = (connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeOscillatorNodes = new WeakMap();\n    let periodicWave = null;\n    let start = null;\n    let stop = null;\n\n    const createOscillatorNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeOscillatorNode = getNativeAudioNode(proxy); // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n\n      if (!nativeOscillatorNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeOscillatorNode.channelCount,\n          channelCountMode: nativeOscillatorNode.channelCountMode,\n          channelInterpretation: nativeOscillatorNode.channelInterpretation,\n          detune: nativeOscillatorNode.detune.value,\n          frequency: nativeOscillatorNode.frequency.value,\n          periodicWave: periodicWave === null ? undefined : periodicWave,\n          type: nativeOscillatorNode.type\n        };\n        nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n\n        if (start !== null) {\n          nativeOscillatorNode.start(start);\n        }\n\n        if (stop !== null) {\n          nativeOscillatorNode.stop(stop);\n        }\n      }\n\n      renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n\n      if (!nativeOscillatorNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency, trace);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency, trace);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode, trace);\n      return nativeOscillatorNode;\n    };\n\n    return {\n      set periodicWave(value) {\n        periodicWave = value;\n      },\n\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeOscillatorNode !== undefined) {\n          return Promise.resolve(renderedNativeOscillatorNode);\n        }\n\n        return createOscillatorNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/oscillator-node-renderer-factory.js"],"names":["isOwnedByContext","createOscillatorNodeRendererFactory","connectAudioParam","createNativeOscillatorNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeOscillatorNodes","WeakMap","periodicWave","start","stop","createOscillatorNode","proxy","nativeOfflineAudioContext","trace","nativeOscillatorNode","nativeOscillatorNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","detune","value","frequency","undefined","type","set","render","renderedNativeOscillatorNode","get","Promise","resolve"],"mappings":"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","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createOscillatorNodeRendererFactory = (connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeOscillatorNodes = new WeakMap();\n        let periodicWave = null;\n        let start = null;\n        let stop = null;\n        const createOscillatorNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeOscillatorNode = getNativeAudioNode(proxy);\n            // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeOscillatorNode.channelCount,\n                    channelCountMode: nativeOscillatorNode.channelCountMode,\n                    channelInterpretation: nativeOscillatorNode.channelInterpretation,\n                    detune: nativeOscillatorNode.detune.value,\n                    frequency: nativeOscillatorNode.frequency.value,\n                    periodicWave: (periodicWave === null) ? undefined : periodicWave,\n                    type: nativeOscillatorNode.type\n                };\n                nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeOscillatorNode.start(start);\n                }\n                if (stop !== null) {\n                    nativeOscillatorNode.stop(stop);\n                }\n            }\n            renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode, trace);\n            return nativeOscillatorNode;\n        };\n        return {\n            set periodicWave(value) {\n                periodicWave = value;\n            },\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeOscillatorNode !== undefined) {\n                    return Promise.resolve(renderedNativeOscillatorNode);\n                }\n                return createOscillatorNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/oscillator-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}