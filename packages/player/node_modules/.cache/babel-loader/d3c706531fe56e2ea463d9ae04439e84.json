{"ast":null,"code":"var _jsxFileName = \"/Users/dani/Antropoloops/atpls-player/src/ui/Player/Player.tsx\";\nimport React, { useEffect } from \"react\";\nimport Collapse from \"react-css-collapse\";\nimport { autoUnlockAudio } from \"../../active-audio-context\";\nimport { BundleHeader } from \"../shared/Header\";\nimport { ArrowDown } from \"../shared/Icons\";\nimport { Spinner } from \"../shared/Spinner\";\nimport { useDeviceType } from \"../useDeviceType\";\nimport { Controller } from \"./Controller\";\nimport { Session } from \"./Session\";\nimport { Sidebar } from \"./Sidebar\";\nimport { useFullscreen } from \"./useFullscreen\";\nimport { useKeyboardListener } from \"./useKeyboardListener\";\nimport { usePlayer } from \"./usePlayer\";\nimport { useSession } from \"./useSession\";\n\nconst SessionHeader = ({\n  meta,\n  session\n}) => React.createElement(\"div\", {\n  className: \"Header\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26\n  },\n  __self: this\n}, React.createElement(\"button\", {\n  className: \"navigation btn-link\",\n  onClick: session.toggle,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27\n  },\n  __self: this\n}, React.createElement(ArrowDown, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 28\n  },\n  __self: this\n}), meta.title));\n\nexport const Player = ({\n  audioset\n}) => {\n  var _player$control;\n\n  const session = useSession(audioset);\n  const player = usePlayer(audioset, session.loader);\n\n  const _useFullscreen = useFullscreen(),\n        isFullscreen = _useFullscreen.isFullscreen,\n        toggleFullscreen = _useFullscreen.toggleFullscreen;\n\n  const _useDeviceType = useDeviceType(),\n        isMobile = _useDeviceType.isMobile;\n\n  useKeyboardListener((_player$control = player.control) === null || _player$control === void 0 ? void 0 : _player$control.keyboard);\n  useEffect(() => {\n    autoUnlockAudio();\n  }, []);\n  const isSidebarVisible = !isFullscreen;\n  const areVisualsHidden = isMobile && session.visible;\n  const showControl = true;\n\n  const Header = () => session.started && !session.visible ? React.createElement(SessionHeader, {\n    meta: audioset.meta,\n    session: session,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }) : React.createElement(BundleHeader, {\n    meta: audioset.meta,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  });\n\n  return React.createElement(\"div\", {\n    className: \"App Player\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, isSidebarVisible && React.createElement(Sidebar, {\n    header: Header,\n    audioset: audioset,\n    onFullscreen: toggleFullscreen,\n    onStopAll: () => {\n      var _player$control2;\n\n      return player === null || player === void 0 ? void 0 : (_player$control2 = player.control) === null || _player$control2 === void 0 ? void 0 : _player$control2.stopAll(0);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(Collapse, {\n    isOpen: session.loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(Spinner, {\n    center: \"horizontal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  })), React.createElement(Collapse, {\n    isOpen: session.visible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(Session, {\n    audioset: audioset,\n    isStarted: session.started,\n    onStart: () => session.start(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"visuals-display\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"hola\"), React.createElement(Collapse, {\n    isOpen: showControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(Controller, {\n    audioset: audioset,\n    state: player.state,\n    control: !session.visible ? player.control : undefined,\n    onResume: session.start,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"visuals\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: areVisualsHidden ? \"hidden\" : \"visible\",\n    id: \"visuals\",\n    ref: player.visualsRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })));\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/Player.tsx"],"names":["React","useEffect","Collapse","autoUnlockAudio","BundleHeader","ArrowDown","Spinner","useDeviceType","Controller","Session","Sidebar","useFullscreen","useKeyboardListener","usePlayer","useSession","SessionHeader","meta","session","toggle","title","Player","audioset","player","loader","isFullscreen","toggleFullscreen","isMobile","control","keyboard","isSidebarVisible","areVisualsHidden","visible","showControl","Header","started","stopAll","loading","start","state","undefined","visualsRef"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport Collapse from \"react-css-collapse\";\nimport { autoUnlockAudio } from \"../../active-audio-context\";\nimport { Audioset, BundleMetadata } from \"../../audioset\";\nimport { BundleHeader } from \"../shared/Header\";\nimport { ArrowDown } from \"../shared/Icons\";\nimport { Spinner } from \"../shared/Spinner\";\nimport { useDeviceType } from \"../useDeviceType\";\nimport { Controller } from \"./Controller\";\nimport { Session } from \"./Session\";\nimport { Sidebar } from \"./Sidebar\";\nimport { useFullscreen } from \"./useFullscreen\";\nimport { useKeyboardListener } from \"./useKeyboardListener\";\nimport { usePlayer } from \"./usePlayer\";\nimport { useSession } from \"./useSession\";\n\nexport interface PlayerProps {\n  audioset: Audioset;\n}\n\ninterface SessionHeaderProps {\n  meta: BundleMetadata;\n  session: any;\n}\nconst SessionHeader = ({ meta, session }: SessionHeaderProps) => (\n  <div className=\"Header\">\n    <button className=\"navigation btn-link\" onClick={session.toggle}>\n      <ArrowDown />\n      {meta.title}\n    </button>\n  </div>\n);\nexport const Player = ({ audioset }: PlayerProps) => {\n  const session = useSession(audioset);\n  const player = usePlayer(audioset, session.loader);\n  const { isFullscreen, toggleFullscreen } = useFullscreen();\n  const { isMobile } = useDeviceType();\n  useKeyboardListener(player.control?.keyboard);\n\n  useEffect(() => {\n    autoUnlockAudio();\n  }, []);\n\n  const isSidebarVisible = !isFullscreen;\n  const areVisualsHidden = isMobile && session.visible;\n  const showControl = true;\n\n  const Header = () =>\n    session.started && !session.visible ? (\n      <SessionHeader meta={audioset.meta} session={session} />\n    ) : (\n      <BundleHeader meta={audioset.meta} />\n    );\n\n  return (\n    <div className=\"App Player\">\n      {isSidebarVisible && (\n        <Sidebar\n          header={Header}\n          audioset={audioset}\n          onFullscreen={toggleFullscreen}\n          onStopAll={() => player?.control?.stopAll(0)}\n        >\n          <Collapse isOpen={session.loading}>\n            <Spinner center=\"horizontal\" />\n          </Collapse>\n          <Collapse isOpen={session.visible}>\n            <Session\n              audioset={audioset}\n              isStarted={session.started}\n              onStart={() => session.start()}\n            />\n          </Collapse>\n          <div className=\"visuals-display\">hola</div>\n          <Collapse isOpen={showControl}>\n            <Controller\n              audioset={audioset}\n              state={player.state}\n              control={!session.visible ? player.control : undefined}\n              onResume={session.start}\n            />\n          </Collapse>\n        </Sidebar>\n      )}\n      <div className=\"visuals\">\n        <div\n          className={areVisualsHidden ? \"hidden\" : \"visible\"}\n          id=\"visuals\"\n          ref={player.visualsRef}\n        />\n      </div>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}