{"ast":null,"code":"import _objectSpread from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { createAudioEngine } from \"./AudioEngine\";\n/**\n * Sampler: the audio player\n */\n\nexport function createSampler(buffers, ctx) {\n  const audio = createAudioEngine(ctx);\n  return new AudioSampler(buffers, audio);\n}\n\nclass AudioSampler {\n  constructor(buffers, audio) {\n    this.buffers = buffers;\n    this.audio = audio;\n    this.master = void 0;\n    this.tracks = {};\n    this.audioSources = {};\n    const volume = 1;\n    this.master = this.audio.createTrack({\n      volume,\n      output: audio.output\n    });\n  }\n\n  createTrack(track) {\n    const audioTrack = this.audio.createTrack(_objectSpread({\n      volume: 1,\n      output: this.master.input\n    }, track));\n    this.tracks[track.id] = audioTrack;\n    return track.id;\n  }\n\n  connect() {// nothing to do?\n  }\n\n  disconnect() {\n    Object.keys(this.tracks).forEach(trackId => {\n      this.tracks[trackId].disconnect();\n    });\n    this.master.disconnect();\n  }\n\n  start(clipId, trackId, time) {\n    if (this.audioSources[clipId]) {\n      return;\n    }\n\n    const buffer = this.buffers.getBuffer(clipId);\n    const track = this.tracks[trackId];\n    const source = this.audio.createAudioSource({\n      output: track.input,\n      buffer\n    });\n    this.audioSources[clipId] = source;\n    source.start(time);\n  }\n\n  stop(clipId, time) {\n    const source = this.audioSources[clipId];\n\n    if (source !== undefined) {\n      source.stop(time);\n    }\n\n    this.audioSources[clipId] = undefined;\n  }\n\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/sampler/index.ts"],"names":["createAudioEngine","createSampler","buffers","ctx","audio","AudioSampler","constructor","master","tracks","audioSources","volume","createTrack","output","track","audioTrack","input","id","connect","disconnect","Object","keys","forEach","trackId","start","clipId","time","buffer","getBuffer","source","createAudioSource","stop","undefined"],"mappings":";AACA,SAIEA,iBAJF,QAKO,eALP;AAOA;;;;AAeA,OAAO,SAASC,aAAT,CACLC,OADK,EAELC,GAFK,EAGI;AACT,QAAMC,KAAK,GAAGJ,iBAAiB,CAACG,GAAD,CAA/B;AACA,SAAO,IAAIE,YAAJ,CAAiBH,OAAjB,EAA0BE,KAA1B,CAAP;AACD;;AAQD,MAAMC,YAAN,CAAsC;AAKpCC,EAAAA,WAAW,CAASJ,OAAT,EAAyCE,KAAzC,EAA6D;AAAA,SAApDF,OAAoD,GAApDA,OAAoD;AAAA,SAApBE,KAAoB,GAApBA,KAAoB;AAAA,SAJjEG,MAIiE;AAAA,SAHhEC,MAGgE,GAH3B,EAG2B;AAAA,SAFhEC,YAEgE,GAFR,EAEQ;AACtE,UAAMC,MAAM,GAAG,CAAf;AACA,SAAKH,MAAL,GAAc,KAAKH,KAAL,CAAWO,WAAX,CAAuB;AACnCD,MAAAA,MADmC;AAEnCE,MAAAA,MAAM,EAAER,KAAK,CAACQ;AAFqB,KAAvB,CAAd;AAID;;AAEMD,EAAAA,WAAP,CAAmBE,KAAnB,EAAwC;AACtC,UAAMC,UAAU,GAAG,KAAKV,KAAL,CAAWO,WAAX;AACjBD,MAAAA,MAAM,EAAE,CADS;AAEjBE,MAAAA,MAAM,EAAE,KAAKL,MAAL,CAAYQ;AAFH,OAGdF,KAHc,EAAnB;AAKA,SAAKL,MAAL,CAAYK,KAAK,CAACG,EAAlB,IAAwBF,UAAxB;AACA,WAAOD,KAAK,CAACG,EAAb;AACD;;AAEMC,EAAAA,OAAP,GAAiB,CACf;AACD;;AAEMC,EAAAA,UAAP,GAAoB;AAClBC,IAAAA,MAAM,CAACC,IAAP,CAAY,KAAKZ,MAAjB,EAAyBa,OAAzB,CAAiCC,OAAO,IAAI;AAC1C,WAAKd,MAAL,CAAYc,OAAZ,EAAqBJ,UAArB;AACD,KAFD;AAGA,SAAKX,MAAL,CAAYW,UAAZ;AACD;;AAEMK,EAAAA,KAAP,CAAaC,MAAb,EAA6BF,OAA7B,EAA8CG,IAA9C,EAA4D;AAC1D,QAAI,KAAKhB,YAAL,CAAkBe,MAAlB,CAAJ,EAA+B;AAC7B;AACD;;AACD,UAAME,MAAM,GAAG,KAAKxB,OAAL,CAAayB,SAAb,CAAuBH,MAAvB,CAAf;AACA,UAAMX,KAAK,GAAG,KAAKL,MAAL,CAAYc,OAAZ,CAAd;AACA,UAAMM,MAAM,GAAG,KAAKxB,KAAL,CAAWyB,iBAAX,CAA6B;AAC1CjB,MAAAA,MAAM,EAAEC,KAAK,CAACE,KAD4B;AAE1CW,MAAAA;AAF0C,KAA7B,CAAf;AAIA,SAAKjB,YAAL,CAAkBe,MAAlB,IAA4BI,MAA5B;AACAA,IAAAA,MAAM,CAACL,KAAP,CAAaE,IAAb;AACD;;AAEMK,EAAAA,IAAP,CAAYN,MAAZ,EAA4BC,IAA5B,EAA0C;AACxC,UAAMG,MAAM,GAAG,KAAKnB,YAAL,CAAkBe,MAAlB,CAAf;;AACA,QAAII,MAAM,KAAKG,SAAf,EAA0B;AACxBH,MAAAA,MAAM,CAACE,IAAP,CAAYL,IAAZ;AACD;;AACD,SAAKhB,YAAL,CAAkBe,MAAlB,IAA4BO,SAA5B;AACD;;AAtDmC","sourcesContent":["import { IAudioContext } from \"standardized-audio-context\";\nimport {\n  AudioEngine,\n  AudioSource,\n  AudioTrack,\n  createAudioEngine,\n} from \"./AudioEngine\";\n\n/**\n * Sampler: the audio player\n */\nexport interface Sampler {\n  connect(): void;\n  disconnect(): void;\n  createTrack(track: SamplerTrack): void;\n  start(clipId: string, trackId: string, time: number): void;\n  stop(clipId: string, time: number): void;\n}\n\nexport interface SampleBuffers {\n  getBuffer(clipId: string): any;\n}\n\nexport function createSampler(\n  buffers: SampleBuffers,\n  ctx: IAudioContext,\n): Sampler {\n  const audio = createAudioEngine(ctx);\n  return new AudioSampler(buffers, audio);\n}\n\nexport interface SamplerTrack {\n  id: string;\n  name: string;\n  volume?: number;\n}\n\nclass AudioSampler implements Sampler {\n  public master: AudioTrack;\n  private tracks: Record<string, AudioTrack> = {};\n  private audioSources: Record<string, AudioSource | undefined> = {};\n\n  constructor(private buffers: SampleBuffers, private audio: AudioEngine) {\n    const volume = 1;\n    this.master = this.audio.createTrack({\n      volume,\n      output: audio.output,\n    });\n  }\n\n  public createTrack(track: SamplerTrack) {\n    const audioTrack = this.audio.createTrack({\n      volume: 1,\n      output: this.master.input,\n      ...track,\n    });\n    this.tracks[track.id] = audioTrack;\n    return track.id;\n  }\n\n  public connect() {\n    // nothing to do?\n  }\n\n  public disconnect() {\n    Object.keys(this.tracks).forEach(trackId => {\n      this.tracks[trackId].disconnect();\n    });\n    this.master.disconnect();\n  }\n\n  public start(clipId: string, trackId: string, time: number) {\n    if (this.audioSources[clipId]) {\n      return;\n    }\n    const buffer = this.buffers.getBuffer(clipId);\n    const track = this.tracks[trackId];\n    const source = this.audio.createAudioSource({\n      output: track.input,\n      buffer,\n    });\n    this.audioSources[clipId] = source;\n    source.start(time);\n  }\n\n  public stop(clipId: string, time: number) {\n    const source = this.audioSources[clipId];\n    if (source !== undefined) {\n      source.stop(time);\n    }\n    this.audioSources[clipId] = undefined;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}