{"ast":null,"code":"import debug from \"debug\";\nimport { AudioContext } from \"standardized-audio-context\";\nconst log = debug(\"atpls:context\");\nconst activeListeners = [];\nconst context = new AudioContext();\ncontext.onstatechange = handleStateChange;\nhandleStateChange();\n\nfunction handleStateChange() {\n  const state = context.state;\n  log(\"state %s\", state);\n\n  if (state === \"running\") {\n    const listeners = activeListeners.slice();\n    activeListeners.length = 0;\n    listeners.forEach(listener => listener(context));\n  }\n}\n\nexport function autoUnlockAudio() {\n  function unlock() {\n    context.resume().then(detach);\n  }\n\n  function detach() {\n    // Remove the touch start listener.\n    log(\"detach auto unlock\", context.state);\n    document.removeEventListener(\"touchstart\", unlock, true);\n    document.removeEventListener(\"touchend\", unlock, true);\n    document.removeEventListener(\"click\", unlock, true);\n  } // Setup a touch start listener to attempt an unlock in.\n\n\n  log(\"attach auto unlock\");\n  document.addEventListener(\"touchstart\", unlock, true);\n  document.addEventListener(\"touchend\", unlock, true);\n  document.addEventListener(\"click\", unlock, true);\n}\n/**\n * @see https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio\n */\n\nexport function getActiveAudioContext() {\n  if (context.state === \"running\") {\n    return Promise.resolve(context);\n  } else {\n    return new Promise(resolve => {\n      activeListeners.push(resolve);\n    });\n  }\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/AudioContext.ts"],"names":["debug","AudioContext","log","activeListeners","context","onstatechange","handleStateChange","state","listeners","slice","length","forEach","listener","autoUnlockAudio","unlock","resume","then","detach","document","removeEventListener","addEventListener","getActiveAudioContext","Promise","resolve","push"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,4BAA7B;AAEA,MAAMC,GAAG,GAAGF,KAAK,CAAC,eAAD,CAAjB;AAGA,MAAMG,eAAiC,GAAG,EAA1C;AACA,MAAMC,OAAO,GAAG,IAAIH,YAAJ,EAAhB;AACAG,OAAO,CAACC,aAAR,GAAwBC,iBAAxB;AAEAA,iBAAiB;;AAEjB,SAASA,iBAAT,GAA6B;AAC3B,QAAMC,KAAK,GAAGH,OAAO,CAACG,KAAtB;AACAL,EAAAA,GAAG,CAAC,UAAD,EAAaK,KAAb,CAAH;;AACA,MAAIA,KAAK,KAAK,SAAd,EAAyB;AACvB,UAAMC,SAAS,GAAGL,eAAe,CAACM,KAAhB,EAAlB;AACAN,IAAAA,eAAe,CAACO,MAAhB,GAAyB,CAAzB;AACAF,IAAAA,SAAS,CAACG,OAAV,CAAkBC,QAAQ,IAAIA,QAAQ,CAACR,OAAD,CAAtC;AACD;AACF;;AAED,OAAO,SAASS,eAAT,GAA2B;AAChC,WAASC,MAAT,GAAkB;AAChBV,IAAAA,OAAO,CAACW,MAAR,GAAiBC,IAAjB,CAAsBC,MAAtB;AACD;;AAED,WAASA,MAAT,GAAkB;AAChB;AACAf,IAAAA,GAAG,CAAC,oBAAD,EAAuBE,OAAO,CAACG,KAA/B,CAAH;AACAW,IAAAA,QAAQ,CAACC,mBAAT,CAA6B,YAA7B,EAA2CL,MAA3C,EAAmD,IAAnD;AACAI,IAAAA,QAAQ,CAACC,mBAAT,CAA6B,UAA7B,EAAyCL,MAAzC,EAAiD,IAAjD;AACAI,IAAAA,QAAQ,CAACC,mBAAT,CAA6B,OAA7B,EAAsCL,MAAtC,EAA8C,IAA9C;AACD,GAX+B,CAahC;;;AACAZ,EAAAA,GAAG,CAAC,oBAAD,CAAH;AACAgB,EAAAA,QAAQ,CAACE,gBAAT,CAA0B,YAA1B,EAAwCN,MAAxC,EAAgD,IAAhD;AACAI,EAAAA,QAAQ,CAACE,gBAAT,CAA0B,UAA1B,EAAsCN,MAAtC,EAA8C,IAA9C;AACAI,EAAAA,QAAQ,CAACE,gBAAT,CAA0B,OAA1B,EAAmCN,MAAnC,EAA2C,IAA3C;AACD;AAED;;;;AAGA,OAAO,SAASO,qBAAT,GAAwD;AAC7D,MAAIjB,OAAO,CAACG,KAAR,KAAkB,SAAtB,EAAiC;AAC/B,WAAOe,OAAO,CAACC,OAAR,CAAgBnB,OAAhB,CAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAIkB,OAAJ,CAA0BC,OAAO,IAAI;AAC1CpB,MAAAA,eAAe,CAACqB,IAAhB,CAAqBD,OAArB;AACD,KAFM,CAAP;AAGD;AACF","sourcesContent":["import debug from \"debug\";\nimport { AudioContext } from \"standardized-audio-context\";\n\nconst log = debug(\"atpls:context\");\n\ntype ResolveContext = (value: AudioContext) => void;\nconst activeListeners: ResolveContext[] = [];\nconst context = new AudioContext();\ncontext.onstatechange = handleStateChange;\n\nhandleStateChange();\n\nfunction handleStateChange() {\n  const state = context.state;\n  log(\"state %s\", state);\n  if (state === \"running\") {\n    const listeners = activeListeners.slice();\n    activeListeners.length = 0;\n    listeners.forEach(listener => listener(context));\n  }\n}\n\nexport function autoUnlockAudio() {\n  function unlock() {\n    context.resume().then(detach);\n  }\n\n  function detach() {\n    // Remove the touch start listener.\n    log(\"detach auto unlock\", context.state);\n    document.removeEventListener(\"touchstart\", unlock, true);\n    document.removeEventListener(\"touchend\", unlock, true);\n    document.removeEventListener(\"click\", unlock, true);\n  }\n\n  // Setup a touch start listener to attempt an unlock in.\n  log(\"attach auto unlock\");\n  document.addEventListener(\"touchstart\", unlock, true);\n  document.addEventListener(\"touchend\", unlock, true);\n  document.addEventListener(\"click\", unlock, true);\n}\n\n/**\n * @see https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio\n */\nexport function getActiveAudioContext(): Promise<AudioContext> {\n  if (context.state === \"running\") {\n    return Promise.resolve(context);\n  } else {\n    return new Promise<AudioContext>(resolve => {\n      activeListeners.push(resolve);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}