{"ast":null,"code":"import _defineProperty from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar DEFAULT_OPTIONS = {\n  attack: 0.003,\n  channelCount: 2,\n  channelCountMode: 'clamped-max',\n  channelInterpretation: 'speakers',\n  knee: 30,\n  ratio: 12,\n  release: 0.25,\n  threshold: -24\n};\nexport var createDynamicsCompressorNodeConstructor = function createDynamicsCompressorNodeConstructor(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext) {\n  return (\n    /*#__PURE__*/\n    function (_audioNodeConstructor) {\n      _inherits(DynamicsCompressorNode, _audioNodeConstructor);\n\n      function DynamicsCompressorNode(context) {\n        var _this;\n\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_OPTIONS;\n\n        _classCallCheck(this, DynamicsCompressorNode);\n\n        var nativeContext = getNativeContext(context);\n\n        var mergedOptions = _objectSpread({}, DEFAULT_OPTIONS, {}, options);\n\n        var nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);\n        var isOffline = isNativeOfflineAudioContext(nativeContext);\n        var dynamicsCompressorNodeRenderer = isOffline ? createDynamicsCompressorNodeRenderer() : null;\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(DynamicsCompressorNode).call(this, context, false, nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer)); // Bug #110: Edge does not export the correct values for maxValue and minValue.\n\n        _this._attack = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDynamicsCompressorNode.attack, 1, 0);\n        _this._knee = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDynamicsCompressorNode.knee, 40, 0);\n        _this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;\n        _this._ratio = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDynamicsCompressorNode.ratio, 20, 1);\n        _this._release = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDynamicsCompressorNode.release, 1, 0);\n        _this._threshold = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDynamicsCompressorNode.threshold, 0, -100);\n        return _this;\n      }\n\n      _createClass(DynamicsCompressorNode, [{\n        key: \"attack\",\n        get: function get() {\n          return this._attack;\n        }\n        /*\n         * Bug #108: Only Chrome, Firefox and Opera disallow a channelCount of three and above yet which is why the getter and setter needs\n         * to be overwritten here.\n         */\n\n      }, {\n        key: \"channelCount\",\n        get: function get() {\n          return this._nativeDynamicsCompressorNode.channelCount;\n        },\n        set: function set(value) {\n          var previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;\n          this._nativeDynamicsCompressorNode.channelCount = value;\n\n          if (value > 2) {\n            this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;\n            throw createNotSupportedError();\n          }\n        }\n        /*\n         * Bug #109: Only Chrome, Firefox and Opera disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be\n         * overwritten here.\n         */\n\n      }, {\n        key: \"channelCountMode\",\n        get: function get() {\n          return this._nativeDynamicsCompressorNode.channelCountMode;\n        },\n        set: function set(value) {\n          var previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;\n          this._nativeDynamicsCompressorNode.channelCountMode = value;\n\n          if (value === 'max') {\n            this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;\n            throw createNotSupportedError();\n          }\n        }\n      }, {\n        key: \"knee\",\n        get: function get() {\n          return this._knee;\n        }\n      }, {\n        key: \"ratio\",\n        get: function get() {\n          return this._ratio;\n        }\n      }, {\n        key: \"reduction\",\n        get: function get() {\n          // Bug #111: Safari returns an AudioParam instead of a number.\n          if (typeof this._nativeDynamicsCompressorNode.reduction.value === 'number') {\n            return this._nativeDynamicsCompressorNode.reduction.value;\n          }\n\n          return this._nativeDynamicsCompressorNode.reduction;\n        }\n      }, {\n        key: \"release\",\n        get: function get() {\n          return this._release;\n        }\n      }, {\n        key: \"threshold\",\n        get: function get() {\n          return this._threshold;\n        }\n      }]);\n\n      return DynamicsCompressorNode;\n    }(audioNodeConstructor)\n  );\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/dynamics-compressor-node-constructor.js"],"names":["DEFAULT_OPTIONS","attack","channelCount","channelCountMode","channelInterpretation","knee","ratio","release","threshold","createDynamicsCompressorNodeConstructor","audioNodeConstructor","createAudioParam","createDynamicsCompressorNodeRenderer","createNativeDynamicsCompressorNode","createNotSupportedError","getNativeContext","isNativeOfflineAudioContext","context","options","nativeContext","mergedOptions","nativeDynamicsCompressorNode","isOffline","dynamicsCompressorNodeRenderer","_attack","_knee","_nativeDynamicsCompressorNode","_ratio","_release","_threshold","value","previousChannelCount","reduction"],"mappings":"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","sourcesContent":["const DEFAULT_OPTIONS = {\n    attack: 0.003,\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    knee: 30,\n    ratio: 12,\n    release: 0.25,\n    threshold: -24\n};\nexport const createDynamicsCompressorNodeConstructor = (audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext) => {\n    return class DynamicsCompressorNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const dynamicsCompressorNodeRenderer = ((isOffline)\n                ? createDynamicsCompressorNodeRenderer()\n                : null);\n            super(context, false, nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer);\n            // Bug #110: Edge does not export the correct values for maxValue and minValue.\n            this._attack = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.attack, 1, 0);\n            this._knee = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.knee, 40, 0);\n            this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;\n            this._ratio = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.ratio, 20, 1);\n            this._release = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.release, 1, 0);\n            this._threshold = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.threshold, 0, -100);\n        }\n        get attack() {\n            return this._attack;\n        }\n        /*\n         * Bug #108: Only Chrome, Firefox and Opera disallow a channelCount of three and above yet which is why the getter and setter needs\n         * to be overwritten here.\n         */\n        get channelCount() {\n            return this._nativeDynamicsCompressorNode.channelCount;\n        }\n        set channelCount(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;\n            this._nativeDynamicsCompressorNode.channelCount = value;\n            if (value > 2) {\n                this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;\n                throw createNotSupportedError();\n            }\n        }\n        /*\n         * Bug #109: Only Chrome, Firefox and Opera disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be\n         * overwritten here.\n         */\n        get channelCountMode() {\n            return this._nativeDynamicsCompressorNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;\n            this._nativeDynamicsCompressorNode.channelCountMode = value;\n            if (value === 'max') {\n                this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;\n                throw createNotSupportedError();\n            }\n        }\n        get knee() {\n            return this._knee;\n        }\n        get ratio() {\n            return this._ratio;\n        }\n        get reduction() {\n            // Bug #111: Safari returns an AudioParam instead of a number.\n            if (typeof this._nativeDynamicsCompressorNode.reduction.value === 'number') {\n                return this._nativeDynamicsCompressorNode.reduction.value;\n            }\n            return this._nativeDynamicsCompressorNode.reduction;\n        }\n        get release() {\n            return this._release;\n        }\n        get threshold() {\n            return this._threshold;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/dynamics-compressor-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}