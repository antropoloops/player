{"ast":null,"code":"import _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/dani/Antropoloops/atpls-player/src/ui/App/Bundle.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { isAudioset } from \"../../audioset\";\nimport { fetchAudioset } from \"../../player/fetchAudioset\";\nimport { Player } from \"../Player\";\nimport { Project as ProjectView } from \"../Project\";\nimport \"./App.css\";\nimport Loading from \"./Loading\";\nimport NotFound from \"./NotFound\";\nimport { useBundleLoadStatus } from \"./useBundleLoadStatus\";\nexport const Bundle = ({\n  idOrUrl\n}) => {\n  const _useFetchAudioset = useFetchAudioset(idOrUrl),\n        bundle = _useFetchAudioset.bundle,\n        loading = _useFetchAudioset.loading;\n\n  if (loading) {\n    return React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    });\n  } else if (bundle) {\n    return isAudioset(bundle) ? React.createElement(Player, {\n      audioset: bundle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }) : React.createElement(ProjectView, {\n      project: bundle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    });\n  } else {\n    return React.createElement(NotFound, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    });\n  }\n};\n\nfunction useFetchAudioset(idOrUrl) {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        bundle = _useState2[0],\n        setBundle = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        loading = _useState4[0],\n        setLoading = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        error = _useState6[0],\n        setError = _useState6[1];\n\n  useEffect(() => {\n    let didCancel = false;\n    setLoading(true);\n    fetchAudioset(idOrUrl).then(result => {\n      if (!didCancel) {\n        setLoading(false);\n        setBundle(result);\n      }\n    }).catch(setError);\n    return () => {\n      didCancel = true;\n    };\n  }, [idOrUrl]);\n  return {\n    bundle,\n    loading,\n    error\n  };\n}\n\nexport const BundleOld = ({\n  idOrUrl\n}) => {\n  const loadStatus = useBundleLoadStatus(idOrUrl);\n\n  switch (loadStatus.stage) {\n    case \"loading\":\n      return React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      });\n\n    case \"ready\":\n      const bundle = loadStatus.payload;\n      return isAudioset(bundle) ? React.createElement(Player, {\n        audioset: bundle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }) : React.createElement(ProjectView, {\n        project: bundle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      });\n\n    case \"error\":\n      return React.createElement(NotFound, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      });\n\n    default:\n      return React.createElement(\"pre\", {\n        style: {\n          color: \"white\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, JSON.stringify(loadStatus, null, 2));\n  }\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/App/Bundle.tsx"],"names":["React","useEffect","useState","isAudioset","fetchAudioset","Player","Project","ProjectView","Loading","NotFound","useBundleLoadStatus","Bundle","idOrUrl","useFetchAudioset","bundle","loading","setBundle","setLoading","error","setError","didCancel","then","result","catch","BundleOld","loadStatus","stage","payload","color","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Bundle as BundleData, isAudioset, Project } from \"../../audioset\";\nimport { fetchAudioset } from \"../../player/fetchAudioset\";\nimport { Player } from \"../Player\";\nimport { Project as ProjectView } from \"../Project\";\nimport \"./App.css\";\nimport Loading from \"./Loading\";\nimport NotFound from \"./NotFound\";\nimport { useBundleLoadStatus } from \"./useBundleLoadStatus\";\n\ninterface BundleProps {\n  idOrUrl: string;\n}\nexport const Bundle = ({ idOrUrl }: BundleProps) => {\n  const { bundle, loading } = useFetchAudioset(idOrUrl);\n  if (loading) {\n    return <Loading />;\n  } else if (bundle) {\n    return isAudioset(bundle) ? (\n      <Player audioset={bundle} />\n    ) : (\n      <ProjectView project={bundle as Project} />\n    );\n  } else {\n    return <NotFound />;\n  }\n};\n\nfunction useFetchAudioset(idOrUrl: string) {\n  const [bundle, setBundle] = useState<BundleData | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<any>(null);\n\n  useEffect(() => {\n    let didCancel = false;\n    setLoading(true);\n    fetchAudioset(idOrUrl)\n      .then(result => {\n        if (!didCancel) {\n          setLoading(false);\n          setBundle(result);\n        }\n      })\n      .catch(setError);\n    return () => {\n      didCancel = true;\n    };\n  }, [idOrUrl]);\n\n  return { bundle, loading, error };\n}\n\nexport const BundleOld = ({ idOrUrl }: BundleProps) => {\n  const loadStatus = useBundleLoadStatus(idOrUrl);\n\n  switch (loadStatus.stage) {\n    case \"loading\":\n      return <Loading />;\n    case \"ready\":\n      const bundle = loadStatus.payload;\n      return isAudioset(bundle) ? (\n        <Player audioset={bundle} />\n      ) : (\n        <ProjectView project={bundle as Project} />\n      );\n    case \"error\":\n      return <NotFound />;\n    default:\n      return (\n        <pre style={{ color: \"white\" }}>\n          {JSON.stringify(loadStatus, null, 2)}\n        </pre>\n      );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}