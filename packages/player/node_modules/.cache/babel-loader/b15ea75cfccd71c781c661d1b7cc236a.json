{"ast":null,"code":"import _objectSpread from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'clamped-max',\n  channelInterpretation: 'speakers',\n  coneInnerAngle: 360,\n  coneOuterAngle: 360,\n  coneOuterGain: 0,\n  distanceModel: 'inverse',\n  maxDistance: 10000,\n  orientationX: 1,\n  orientationY: 0,\n  orientationZ: 0,\n  panningModel: 'equalpower',\n  positionX: 0,\n  positionY: 0,\n  positionZ: 0,\n  refDistance: 1,\n  rolloffFactor: 1\n};\nexport var createPannerNodeConstructor = function createPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(PannerNode, _audioNodeConstructor);\n\n    var _super = _createSuper(PannerNode);\n\n    function PannerNode(context) {\n      var _this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_OPTIONS;\n\n      _classCallCheck(this, PannerNode);\n\n      var nativeContext = getNativeContext(context);\n\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n      var nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var pannerNodeRenderer = isOffline ? createPannerNodeRenderer() : null;\n      _this = _super.call(this, context, false, nativePannerNode, pannerNodeRenderer);\n      _this._nativePannerNode = nativePannerNode; // Bug #74: Edge & Safari do not export the correct values for maxValue and minValue for GainNodes.\n\n      _this._orientationX = createAudioParam(_assertThisInitialized(_this), isOffline, nativePannerNode.orientationX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      _this._orientationY = createAudioParam(_assertThisInitialized(_this), isOffline, nativePannerNode.orientationY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      _this._orientationZ = createAudioParam(_assertThisInitialized(_this), isOffline, nativePannerNode.orientationZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      _this._positionX = createAudioParam(_assertThisInitialized(_this), isOffline, nativePannerNode.positionX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      _this._positionY = createAudioParam(_assertThisInitialized(_this), isOffline, nativePannerNode.positionY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      _this._positionZ = createAudioParam(_assertThisInitialized(_this), isOffline, nativePannerNode.positionZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      return _this;\n    }\n\n    _createClass(PannerNode, [{\n      key: \"coneInnerAngle\",\n      get: function get() {\n        return this._nativePannerNode.coneInnerAngle;\n      },\n      set: function set(value) {\n        this._nativePannerNode.coneInnerAngle = value;\n      }\n    }, {\n      key: \"coneOuterAngle\",\n      get: function get() {\n        return this._nativePannerNode.coneOuterAngle;\n      },\n      set: function set(value) {\n        this._nativePannerNode.coneOuterAngle = value;\n      }\n    }, {\n      key: \"coneOuterGain\",\n      get: function get() {\n        return this._nativePannerNode.coneOuterGain;\n      },\n      set: function set(value) {\n        this._nativePannerNode.coneOuterGain = value;\n      }\n    }, {\n      key: \"distanceModel\",\n      get: function get() {\n        return this._nativePannerNode.distanceModel;\n      },\n      set: function set(value) {\n        this._nativePannerNode.distanceModel = value;\n      }\n    }, {\n      key: \"maxDistance\",\n      get: function get() {\n        return this._nativePannerNode.maxDistance;\n      },\n      set: function set(value) {\n        this._nativePannerNode.maxDistance = value;\n      }\n    }, {\n      key: \"orientationX\",\n      get: function get() {\n        return this._orientationX;\n      }\n    }, {\n      key: \"orientationY\",\n      get: function get() {\n        return this._orientationY;\n      }\n    }, {\n      key: \"orientationZ\",\n      get: function get() {\n        return this._orientationZ;\n      }\n    }, {\n      key: \"panningModel\",\n      get: function get() {\n        return this._nativePannerNode.panningModel;\n      },\n      set: function set(value) {\n        this._nativePannerNode.panningModel = value;\n      }\n    }, {\n      key: \"positionX\",\n      get: function get() {\n        return this._positionX;\n      }\n    }, {\n      key: \"positionY\",\n      get: function get() {\n        return this._positionY;\n      }\n    }, {\n      key: \"positionZ\",\n      get: function get() {\n        return this._positionZ;\n      }\n    }, {\n      key: \"refDistance\",\n      get: function get() {\n        return this._nativePannerNode.refDistance;\n      },\n      set: function set(value) {\n        this._nativePannerNode.refDistance = value;\n      }\n    }, {\n      key: \"rolloffFactor\",\n      get: function get() {\n        return this._nativePannerNode.rolloffFactor;\n      },\n      set: function set(value) {\n        this._nativePannerNode.rolloffFactor = value;\n      }\n    }]);\n\n    return PannerNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/panner-node-constructor.js"],"names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","orientationX","orientationY","orientationZ","panningModel","positionX","positionY","positionZ","refDistance","rolloffFactor","createPannerNodeConstructor","audioNodeConstructor","createAudioParam","createNativePannerNode","createPannerNodeRenderer","getNativeContext","isNativeOfflineAudioContext","context","options","nativeContext","mergedOptions","nativePannerNode","isOffline","pannerNodeRenderer","_nativePannerNode","_orientationX","_orientationY","_orientationZ","_positionX","_positionY","_positionZ","value"],"mappings":"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","sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    coneInnerAngle: 360,\n    coneOuterAngle: 360,\n    coneOuterGain: 0,\n    distanceModel: 'inverse',\n    maxDistance: 10000,\n    orientationX: 1,\n    orientationY: 0,\n    orientationZ: 0,\n    panningModel: 'equalpower',\n    positionX: 0,\n    positionY: 0,\n    positionZ: 0,\n    refDistance: 1,\n    rolloffFactor: 1\n};\nexport const createPannerNodeConstructor = (audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {\n    return class PannerNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const pannerNodeRenderer = ((isOffline) ? createPannerNodeRenderer() : null);\n            super(context, false, nativePannerNode, pannerNodeRenderer);\n            this._nativePannerNode = nativePannerNode;\n            // Bug #74: Edge & Safari do not export the correct values for maxValue and minValue for GainNodes.\n            this._orientationX = createAudioParam(this, isOffline, nativePannerNode.orientationX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._orientationY = createAudioParam(this, isOffline, nativePannerNode.orientationY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._orientationZ = createAudioParam(this, isOffline, nativePannerNode.orientationZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._positionX = createAudioParam(this, isOffline, nativePannerNode.positionX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._positionY = createAudioParam(this, isOffline, nativePannerNode.positionY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._positionZ = createAudioParam(this, isOffline, nativePannerNode.positionZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n        get coneInnerAngle() {\n            return this._nativePannerNode.coneInnerAngle;\n        }\n        set coneInnerAngle(value) {\n            this._nativePannerNode.coneInnerAngle = value;\n        }\n        get coneOuterAngle() {\n            return this._nativePannerNode.coneOuterAngle;\n        }\n        set coneOuterAngle(value) {\n            this._nativePannerNode.coneOuterAngle = value;\n        }\n        get coneOuterGain() {\n            return this._nativePannerNode.coneOuterGain;\n        }\n        set coneOuterGain(value) {\n            this._nativePannerNode.coneOuterGain = value;\n        }\n        get distanceModel() {\n            return this._nativePannerNode.distanceModel;\n        }\n        set distanceModel(value) {\n            this._nativePannerNode.distanceModel = value;\n        }\n        get maxDistance() {\n            return this._nativePannerNode.maxDistance;\n        }\n        set maxDistance(value) {\n            this._nativePannerNode.maxDistance = value;\n        }\n        get orientationX() {\n            return this._orientationX;\n        }\n        get orientationY() {\n            return this._orientationY;\n        }\n        get orientationZ() {\n            return this._orientationZ;\n        }\n        get panningModel() {\n            return this._nativePannerNode.panningModel;\n        }\n        set panningModel(value) {\n            this._nativePannerNode.panningModel = value;\n        }\n        get positionX() {\n            return this._positionX;\n        }\n        get positionY() {\n            return this._positionY;\n        }\n        get positionZ() {\n            return this._positionZ;\n        }\n        get refDistance() {\n            return this._nativePannerNode.refDistance;\n        }\n        set refDistance(value) {\n            this._nativePannerNode.refDistance = value;\n        }\n        get rolloffFactor() {\n            return this._nativePannerNode.rolloffFactor;\n        }\n        set rolloffFactor(value) {\n            this._nativePannerNode.rolloffFactor = value;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/panner-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}