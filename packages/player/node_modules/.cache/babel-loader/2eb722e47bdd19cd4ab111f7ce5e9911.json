{"ast":null,"code":"import { geoProjection as projection, geoRotation as rotation } from \"d3-geo\";\nimport { abs, asin, atan, atan2, cos, epsilon, sin, sqrt } from \"./math.js\";\nexport function modifiedStereographicRaw(C) {\n  var m = C.length - 1;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = 2 / (1 + cosPhi * cos(lambda)),\n        zr = k * cosPhi * sin(lambda),\n        zi = k * sin(phi),\n        i = m,\n        w = C[i],\n        ar = w[0],\n        ai = w[1],\n        t;\n\n    while (--i >= 0) {\n      w = C[i];\n      ar = w[0] + zr * (t = ar) - zi * ai;\n      ai = w[1] + zr * ai + zi * t;\n    }\n\n    ar = zr * (t = ar) - zi * ai;\n    ai = zr * ai + zi * t;\n    return [ar, ai];\n  }\n\n  forward.invert = function (x, y) {\n    var i = 20,\n        zr = x,\n        zi = y;\n\n    do {\n      var j = m,\n          w = C[j],\n          ar = w[0],\n          ai = w[1],\n          br = 0,\n          bi = 0,\n          t;\n\n      while (--j >= 0) {\n        w = C[j];\n        br = ar + zr * (t = br) - zi * bi;\n        bi = ai + zr * bi + zi * t;\n        ar = w[0] + zr * (t = ar) - zi * ai;\n        ai = w[1] + zr * ai + zi * t;\n      }\n\n      br = ar + zr * (t = br) - zi * bi;\n      bi = ai + zr * bi + zi * t;\n      ar = zr * (t = ar) - zi * ai - x;\n      ai = zr * ai + zi * t - y;\n      var denominator = br * br + bi * bi,\n          deltar,\n          deltai;\n      zr -= deltar = (ar * br + ai * bi) / denominator;\n      zi -= deltai = (ai * br - ar * bi) / denominator;\n    } while (abs(deltar) + abs(deltai) > epsilon * epsilon && --i > 0);\n\n    if (i) {\n      var rho = sqrt(zr * zr + zi * zi),\n          c = 2 * atan(rho * 0.5),\n          sinc = sin(c);\n      return [atan2(zr * sinc, rho * cos(c)), rho ? asin(zi * sinc / rho) : 0];\n    }\n  };\n\n  return forward;\n}\nvar alaska = [[0.9972523, 0], [0.0052513, -0.0041175], [0.0074606, 0.0048125], [-0.0153783, -0.1968253], [0.0636871, -0.1408027], [0.3660976, -0.2937382]],\n    gs48 = [[0.98879, 0], [0, 0], [-0.050909, 0], [0, 0], [0.075528, 0]],\n    gs50 = [[0.9842990, 0], [0.0211642, 0.0037608], [-0.1036018, -0.0575102], [-0.0329095, -0.0320119], [0.0499471, 0.1223335], [0.0260460, 0.0899805], [0.0007388, -0.1435792], [0.0075848, -0.1334108], [-0.0216473, 0.0776645], [-0.0225161, 0.0853673]],\n    miller = [[0.9245, 0], [0, 0], [0.01943, 0]],\n    lee = [[0.721316, 0], [0, 0], [-0.00881625, -0.00617325]];\nexport function modifiedStereographicAlaska() {\n  return modifiedStereographic(alaska, [152, -64]).scale(1400).center([-160.908, 62.4864]).clipAngle(30).angle(7.8);\n}\nexport function modifiedStereographicGs48() {\n  return modifiedStereographic(gs48, [95, -38]).scale(1000).clipAngle(55).center([-96.5563, 38.8675]);\n}\nexport function modifiedStereographicGs50() {\n  return modifiedStereographic(gs50, [120, -45]).scale(359.513).clipAngle(55).center([-117.474, 53.0628]);\n}\nexport function modifiedStereographicMiller() {\n  return modifiedStereographic(miller, [-20, -18]).scale(209.091).center([20, 16.7214]).clipAngle(82);\n}\nexport function modifiedStereographicLee() {\n  return modifiedStereographic(lee, [165, 10]).scale(250).clipAngle(130).center([-165, -10]);\n}\nexport default function modifiedStereographic(coefficients, rotate) {\n  var p = projection(modifiedStereographicRaw(coefficients)).rotate(rotate).clipAngle(90),\n      r = rotation(rotate),\n      center = p.center;\n  delete p.rotate;\n\n  p.center = function (_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/modifiedStereographic.js"],"names":["geoProjection","projection","geoRotation","rotation","abs","asin","atan","atan2","cos","epsilon","sin","sqrt","modifiedStereographicRaw","C","m","length","forward","lambda","phi","cosPhi","k","zr","zi","i","w","ar","ai","t","invert","x","y","j","br","bi","denominator","deltar","deltai","rho","c","sinc","alaska","gs48","gs50","miller","lee","modifiedStereographicAlaska","modifiedStereographic","scale","center","clipAngle","angle","modifiedStereographicGs48","modifiedStereographicGs50","modifiedStereographicMiller","modifiedStereographicLee","coefficients","rotate","p","r","_","arguments"],"mappings":"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","sourcesContent":["import {geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {abs, asin, atan, atan2, cos, epsilon, sin, sqrt} from \"./math.js\";\n\nexport function modifiedStereographicRaw(C) {\n  var m = C.length - 1;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = 2 / (1 + cosPhi * cos(lambda)),\n        zr = k * cosPhi * sin(lambda),\n        zi = k * sin(phi),\n        i = m,\n        w = C[i],\n        ar = w[0],\n        ai = w[1],\n        t;\n    while (--i >= 0) {\n      w = C[i];\n      ar = w[0] + zr * (t = ar) - zi * ai;\n      ai = w[1] + zr * ai + zi * t;\n    }\n    ar = zr * (t = ar) - zi * ai;\n    ai = zr * ai + zi * t;\n    return [ar, ai];\n  }\n\n  forward.invert = function(x, y) {\n    var i = 20,\n        zr = x,\n        zi = y;\n    do {\n      var j = m,\n          w = C[j],\n          ar = w[0],\n          ai = w[1],\n          br = 0,\n          bi = 0,\n          t;\n\n      while (--j >= 0) {\n        w = C[j];\n        br = ar + zr * (t = br) - zi * bi;\n        bi = ai + zr * bi + zi * t;\n        ar = w[0] + zr * (t = ar) - zi * ai;\n        ai = w[1] + zr * ai + zi * t;\n      }\n      br = ar + zr * (t = br) - zi * bi;\n      bi = ai + zr * bi + zi * t;\n      ar = zr * (t = ar) - zi * ai - x;\n      ai = zr * ai + zi * t - y;\n\n      var denominator = br * br + bi * bi, deltar, deltai;\n      zr -= deltar = (ar * br + ai * bi) / denominator;\n      zi -= deltai = (ai * br - ar * bi) / denominator;\n    } while (abs(deltar) + abs(deltai) > epsilon * epsilon && --i > 0);\n\n    if (i) {\n      var rho = sqrt(zr * zr + zi * zi),\n          c = 2 * atan(rho * 0.5),\n          sinc = sin(c);\n      return [atan2(zr * sinc, rho * cos(c)), rho ? asin(zi * sinc / rho) : 0];\n    }\n  };\n\n  return forward;\n}\n\nvar alaska = [[0.9972523, 0], [0.0052513, -0.0041175], [0.0074606, 0.0048125], [-0.0153783, -0.1968253], [0.0636871, -0.1408027], [0.3660976, -0.2937382]],\n    gs48 = [[0.98879, 0], [0, 0], [-0.050909, 0], [0, 0], [0.075528, 0]],\n    gs50 = [[0.9842990, 0], [0.0211642, 0.0037608], [-0.1036018, -0.0575102], [-0.0329095, -0.0320119], [0.0499471, 0.1223335], [0.0260460, 0.0899805], [0.0007388, -0.1435792], [0.0075848, -0.1334108], [-0.0216473, 0.0776645], [-0.0225161, 0.0853673]],\n    miller = [[0.9245, 0], [0, 0], [0.01943, 0]],\n    lee = [[0.721316, 0], [0, 0], [-0.00881625, -0.00617325]];\n\nexport function modifiedStereographicAlaska() {\n  return modifiedStereographic(alaska, [152, -64])\n      .scale(1400)\n      .center([-160.908, 62.4864])\n      .clipAngle(30)\n      .angle(7.8);\n}\n\nexport function modifiedStereographicGs48() {\n  return modifiedStereographic(gs48, [95, -38])\n      .scale(1000)\n      .clipAngle(55)\n      .center([-96.5563, 38.8675]);\n}\n\nexport function modifiedStereographicGs50() {\n  return modifiedStereographic(gs50, [120, -45])\n      .scale(359.513)\n      .clipAngle(55)\n      .center([-117.474, 53.0628]);\n}\n\nexport function modifiedStereographicMiller() {\n  return modifiedStereographic(miller, [-20, -18])\n      .scale(209.091)\n      .center([20, 16.7214])\n      .clipAngle(82);\n}\n\nexport function modifiedStereographicLee() {\n  return modifiedStereographic(lee, [165, 10])\n      .scale(250)\n      .clipAngle(130)\n      .center([-165, -10]);\n}\n\nexport default function modifiedStereographic(coefficients, rotate) {\n  var p = projection(modifiedStereographicRaw(coefficients)).rotate(rotate).clipAngle(90),\n      r = rotation(rotate),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p;\n}\n"]},"metadata":{},"sourceType":"module"}