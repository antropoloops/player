{"ast":null,"code":"var _jsxFileName = \"/Users/dani/Antropoloops/atpls-player/src/ui/Player/Controller/Track.tsx\";\nimport React from \"react\";\nimport { Clip } from \"./Clip\";\nimport \"./Track.css\";\nexport function Track({\n  audioset,\n  track,\n  state,\n  control\n}) {\n  return React.createElement(\"div\", {\n    key: track.id,\n    className: \"Track\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"background\",\n    style: {\n      backgroundColor: track.color\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }), React.createElement(TrackHeader, {\n    track: track,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"clips\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, track.clipIds.map((clipId, index) => {\n    var _state$clips$clipId;\n\n    return React.createElement(Clip, {\n      key: clipId,\n      clip: audioset.index.clipById[clipId],\n      isActive: ((_state$clips$clipId = state.clips[clipId]) === null || _state$clips$clipId === void 0 ? void 0 : _state$clips$clipId.status) === \"playing\",\n      control: control,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    });\n  })));\n}\n\nconst TrackHeader = ({\n  track\n}) => React.createElement(\"div\", {\n  className: \"TrackHeader\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43\n  },\n  __self: this\n}, React.createElement(\"span\", {\n  className: \"title\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 44\n  },\n  __self: this\n}, track.name));","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/Controller/Track.tsx"],"names":["React","Clip","Track","audioset","track","state","control","id","backgroundColor","color","clipIds","map","clipId","index","clipById","clips","status","TrackHeader","name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAASC,IAAT,QAAqB,QAArB;AACA,OAAO,aAAP;AASA,OAAO,SAASC,KAAT,CAAe;AACpBC,EAAAA,QADoB;AAEpBC,EAAAA,KAFoB;AAGpBC,EAAAA,KAHoB;AAIpBC,EAAAA;AAJoB,CAAf,EAKqB;AAC1B,SACE;AAAK,IAAA,GAAG,EAAEF,KAAK,CAACG,EAAhB;AAAoB,IAAA,SAAS,EAAC,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAA4B,IAAA,KAAK,EAAE;AAAEC,MAAAA,eAAe,EAAEJ,KAAK,CAACK;AAAzB,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAEL,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,KAAK,CAACM,OAAN,CAAcC,GAAd,CAAkB,CAACC,MAAD,EAASC,KAAT;AAAA;;AAAA,WACjB,oBAAC,IAAD;AACE,MAAA,GAAG,EAAED,MADP;AAEE,MAAA,IAAI,EAAET,QAAQ,CAACU,KAAT,CAAeC,QAAf,CAAwBF,MAAxB,CAFR;AAGE,MAAA,QAAQ,EAAE,wBAAAP,KAAK,CAACU,KAAN,CAAYH,MAAZ,6EAAqBI,MAArB,MAAgC,SAH5C;AAIE,MAAA,OAAO,EAAEV,OAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADiB;AAAA,GAAlB,CADH,CAHF,CADF;AAgBD;;AAMD,MAAMW,WAAW,GAAG,CAAC;AAAEb,EAAAA;AAAF,CAAD,KAClB;AAAK,EAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAM,EAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAyBA,KAAK,CAACc,IAA/B,CADF,CADF","sourcesContent":["import React from \"react\";\nimport { Audioset, Track as TrackModel } from \"../../../audioset\";\nimport { ControlState, PlayerControl } from \"../../../player/Control\";\nimport { Clip } from \"./Clip\";\nimport \"./Track.css\";\n\ninterface TrackProps {\n  audioset: Audioset;\n  track: TrackModel;\n  state: ControlState;\n  control?: PlayerControl;\n}\n\nexport function Track({\n  audioset,\n  track,\n  state,\n  control,\n}: TrackProps): JSX.Element {\n  return (\n    <div key={track.id} className=\"Track\">\n      <div className=\"background\" style={{ backgroundColor: track.color }} />\n      <TrackHeader track={track} />\n      <div className=\"clips\">\n        {track.clipIds.map((clipId, index) => (\n          <Clip\n            key={clipId}\n            clip={audioset.index.clipById[clipId]}\n            isActive={state.clips[clipId]?.status === \"playing\"}\n            control={control}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\ninterface TrackHeaderProps {\n  track: TrackModel;\n}\n\nconst TrackHeader = ({ track }: TrackHeaderProps) => (\n  <div className=\"TrackHeader\">\n    <span className=\"title\">{track.name}</span>\n  </div>\n);\n"]},"metadata":{},"sourceType":"module"}