{"ast":null,"code":"import debug from\"debug\";import{AudioContext}from\"standardized-audio-context\";var log=debug(\"atpls:context\");var activeListeners=[];var context=new AudioContext();context.onstatechange=handleStateChange;/**\n * Waits until the AudioContext is in \"running\" state\n *\n * @see https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio\n */export function getActiveAudioContext(){if(context.state===\"running\"){return Promise.resolve(context);}else{return new Promise(function(resolve){activeListeners.push(resolve);});}}export function autoUnlockAudio(){function unlock(){context.resume().then(detach);}function detach(){// Remove the touch start listener.\nlog(\"detach auto unlock\",context.state);document.removeEventListener(\"touchstart\",unlock,true);document.removeEventListener(\"touchend\",unlock,true);document.removeEventListener(\"click\",unlock,true);}// Setup a touch start listener to attempt an unlock in.\nlog(\"attach auto unlock\");document.addEventListener(\"touchstart\",unlock,true);document.addEventListener(\"touchend\",unlock,true);document.addEventListener(\"click\",unlock,true);}function handleStateChange(){var state=context.state;log(\"state %s\",state);if(state===\"running\"){var listeners=activeListeners.slice();activeListeners.length=0;listeners.forEach(function(listener){return listener(context);});}}handleStateChange();","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/active-audio-context/index.ts"],"names":["debug","AudioContext","log","activeListeners","context","onstatechange","handleStateChange","getActiveAudioContext","state","Promise","resolve","push","autoUnlockAudio","unlock","resume","then","detach","document","removeEventListener","addEventListener","listeners","slice","length","forEach","listener"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,YAAT,KAA6B,4BAA7B,CAEA,GAAMC,CAAAA,GAAG,CAAGF,KAAK,CAAC,eAAD,CAAjB,CAGA,GAAMG,CAAAA,eAAiC,CAAG,EAA1C,CACA,GAAMC,CAAAA,OAAO,CAAG,GAAIH,CAAAA,YAAJ,EAAhB,CACAG,OAAO,CAACC,aAAR,CAAwBC,iBAAxB,CAEA;;;;GAKA,MAAO,SAASC,CAAAA,qBAAT,EAAwD,CAC7D,GAAIH,OAAO,CAACI,KAAR,GAAkB,SAAtB,CAAiC,CAC/B,MAAOC,CAAAA,OAAO,CAACC,OAAR,CAAgBN,OAAhB,CAAP,CACD,CAFD,IAEO,CACL,MAAO,IAAIK,CAAAA,OAAJ,CAA0B,SAAAC,OAAO,CAAI,CAC1CP,eAAe,CAACQ,IAAhB,CAAqBD,OAArB,EACD,CAFM,CAAP,CAGD,CACF,CAED,MAAO,SAASE,CAAAA,eAAT,EAA2B,CAChC,QAASC,CAAAA,MAAT,EAAkB,CAChBT,OAAO,CAACU,MAAR,GAAiBC,IAAjB,CAAsBC,MAAtB,EACD,CAED,QAASA,CAAAA,MAAT,EAAkB,CAChB;AACAd,GAAG,CAAC,oBAAD,CAAuBE,OAAO,CAACI,KAA/B,CAAH,CACAS,QAAQ,CAACC,mBAAT,CAA6B,YAA7B,CAA2CL,MAA3C,CAAmD,IAAnD,EACAI,QAAQ,CAACC,mBAAT,CAA6B,UAA7B,CAAyCL,MAAzC,CAAiD,IAAjD,EACAI,QAAQ,CAACC,mBAAT,CAA6B,OAA7B,CAAsCL,MAAtC,CAA8C,IAA9C,EACD,CAED;AACAX,GAAG,CAAC,oBAAD,CAAH,CACAe,QAAQ,CAACE,gBAAT,CAA0B,YAA1B,CAAwCN,MAAxC,CAAgD,IAAhD,EACAI,QAAQ,CAACE,gBAAT,CAA0B,UAA1B,CAAsCN,MAAtC,CAA8C,IAA9C,EACAI,QAAQ,CAACE,gBAAT,CAA0B,OAA1B,CAAmCN,MAAnC,CAA2C,IAA3C,EACD,CAED,QAASP,CAAAA,iBAAT,EAA6B,CAC3B,GAAME,CAAAA,KAAK,CAAGJ,OAAO,CAACI,KAAtB,CACAN,GAAG,CAAC,UAAD,CAAaM,KAAb,CAAH,CACA,GAAIA,KAAK,GAAK,SAAd,CAAyB,CACvB,GAAMY,CAAAA,SAAS,CAAGjB,eAAe,CAACkB,KAAhB,EAAlB,CACAlB,eAAe,CAACmB,MAAhB,CAAyB,CAAzB,CACAF,SAAS,CAACG,OAAV,CAAkB,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACpB,OAAD,CAAZ,EAA1B,EACD,CACF,CAEDE,iBAAiB","sourcesContent":["import debug from \"debug\";\nimport { AudioContext } from \"standardized-audio-context\";\n\nconst log = debug(\"atpls:context\");\n\ntype ResolveContext = (value: AudioContext) => void;\nconst activeListeners: ResolveContext[] = [];\nconst context = new AudioContext();\ncontext.onstatechange = handleStateChange;\n\n/**\n * Waits until the AudioContext is in \"running\" state\n *\n * @see https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio\n */\nexport function getActiveAudioContext(): Promise<AudioContext> {\n  if (context.state === \"running\") {\n    return Promise.resolve(context);\n  } else {\n    return new Promise<AudioContext>(resolve => {\n      activeListeners.push(resolve);\n    });\n  }\n}\n\nexport function autoUnlockAudio() {\n  function unlock() {\n    context.resume().then(detach);\n  }\n\n  function detach() {\n    // Remove the touch start listener.\n    log(\"detach auto unlock\", context.state);\n    document.removeEventListener(\"touchstart\", unlock, true);\n    document.removeEventListener(\"touchend\", unlock, true);\n    document.removeEventListener(\"click\", unlock, true);\n  }\n\n  // Setup a touch start listener to attempt an unlock in.\n  log(\"attach auto unlock\");\n  document.addEventListener(\"touchstart\", unlock, true);\n  document.addEventListener(\"touchend\", unlock, true);\n  document.addEventListener(\"click\", unlock, true);\n}\n\nfunction handleStateChange() {\n  const state = context.state;\n  log(\"state %s\", state);\n  if (state === \"running\") {\n    const listeners = activeListeners.slice();\n    activeListeners.length = 0;\n    listeners.forEach(listener => listener(context));\n  }\n}\n\nhandleStateChange();\n"]},"metadata":{},"sourceType":"module"}