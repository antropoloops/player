{"ast":null,"code":"import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { testAnalyserNodeGetFloatTimeDomainDataMethodSupport } from '../helpers/test-analyser-node-get-float-time-domain-data-method-support';\nimport { wrapAnalyserNodeGetFloatTimeDomainDataMethod } from '../helpers/wrap-analyser-node-get-float-time-domain-data-method';\nexport var createNativeAnalyserNodeFactory = function createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError, createNativeAudioNode) {\n  return function (nativeContext, options) {\n    var nativeAnalyserNode = createNativeAudioNode(nativeContext, function (ntvCntxt) {\n      return ntvCntxt.createAnalyser();\n    }); // Bug #37: Firefox does not create an AnalyserNode with the default properties.\n\n    assignNativeAudioNodeOptions(nativeAnalyserNode, options); // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n\n    if (!(options.maxDecibels > options.minDecibels)) {\n      throw createIndexSizeError();\n    }\n\n    assignNativeAudioNodeOption(nativeAnalyserNode, options, 'fftSize');\n    assignNativeAudioNodeOption(nativeAnalyserNode, options, 'maxDecibels');\n    assignNativeAudioNodeOption(nativeAnalyserNode, options, 'minDecibels');\n    assignNativeAudioNodeOption(nativeAnalyserNode, options, 'smoothingTimeConstant'); // Bug #36: Safari does not support getFloatTimeDomainData() yet.\n\n    if (!cacheTestResult(testAnalyserNodeGetFloatTimeDomainDataMethodSupport, function () {\n      return testAnalyserNodeGetFloatTimeDomainDataMethodSupport(nativeAnalyserNode);\n    })) {\n      wrapAnalyserNodeGetFloatTimeDomainDataMethod(nativeAnalyserNode);\n    }\n\n    return nativeAnalyserNode;\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/native-analyser-node-factory.js"],"names":["assignNativeAudioNodeOption","assignNativeAudioNodeOptions","testAnalyserNodeGetFloatTimeDomainDataMethodSupport","wrapAnalyserNodeGetFloatTimeDomainDataMethod","createNativeAnalyserNodeFactory","cacheTestResult","createIndexSizeError","createNativeAudioNode","nativeContext","options","nativeAnalyserNode","ntvCntxt","createAnalyser","maxDecibels","minDecibels"],"mappings":"AAAA,SAASA,2BAAT,QAA4C,4CAA5C;AACA,SAASC,4BAAT,QAA6C,6CAA7C;AACA,SAASC,mDAAT,QAAoE,yEAApE;AACA,SAASC,4CAAT,QAA6D,iEAA7D;AACA,OAAO,IAAMC,+BAA+B,GAAG,SAAlCA,+BAAkC,CAACC,eAAD,EAAkBC,oBAAlB,EAAwCC,qBAAxC,EAAkE;AAC7G,SAAO,UAACC,aAAD,EAAgBC,OAAhB,EAA4B;AAC/B,QAAMC,kBAAkB,GAAGH,qBAAqB,CAACC,aAAD,EAAgB,UAACG,QAAD;AAAA,aAAcA,QAAQ,CAACC,cAAT,EAAd;AAAA,KAAhB,CAAhD,CAD+B,CAE/B;;AACAX,IAAAA,4BAA4B,CAACS,kBAAD,EAAqBD,OAArB,CAA5B,CAH+B,CAI/B;;AACA,QAAI,EAAEA,OAAO,CAACI,WAAR,GAAsBJ,OAAO,CAACK,WAAhC,CAAJ,EAAkD;AAC9C,YAAMR,oBAAoB,EAA1B;AACH;;AACDN,IAAAA,2BAA2B,CAACU,kBAAD,EAAqBD,OAArB,EAA8B,SAA9B,CAA3B;AACAT,IAAAA,2BAA2B,CAACU,kBAAD,EAAqBD,OAArB,EAA8B,aAA9B,CAA3B;AACAT,IAAAA,2BAA2B,CAACU,kBAAD,EAAqBD,OAArB,EAA8B,aAA9B,CAA3B;AACAT,IAAAA,2BAA2B,CAACU,kBAAD,EAAqBD,OAArB,EAA8B,uBAA9B,CAA3B,CAX+B,CAY/B;;AACA,QAAI,CAACJ,eAAe,CAACH,mDAAD,EAAsD;AAAA,aAAMA,mDAAmD,CAACQ,kBAAD,CAAzD;AAAA,KAAtD,CAApB,EAA0J;AACtJP,MAAAA,4CAA4C,CAACO,kBAAD,CAA5C;AACH;;AACD,WAAOA,kBAAP;AACH,GAjBD;AAkBH,CAnBM","sourcesContent":["import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { testAnalyserNodeGetFloatTimeDomainDataMethodSupport } from '../helpers/test-analyser-node-get-float-time-domain-data-method-support';\nimport { wrapAnalyserNodeGetFloatTimeDomainDataMethod } from '../helpers/wrap-analyser-node-get-float-time-domain-data-method';\nexport const createNativeAnalyserNodeFactory = (cacheTestResult, createIndexSizeError, createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeAnalyserNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createAnalyser());\n        // Bug #37: Firefox does not create an AnalyserNode with the default properties.\n        assignNativeAudioNodeOptions(nativeAnalyserNode, options);\n        // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n        if (!(options.maxDecibels > options.minDecibels)) {\n            throw createIndexSizeError();\n        }\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'fftSize');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'maxDecibels');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'minDecibels');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'smoothingTimeConstant');\n        // Bug #36: Safari does not support getFloatTimeDomainData() yet.\n        if (!cacheTestResult(testAnalyserNodeGetFloatTimeDomainDataMethodSupport, () => testAnalyserNodeGetFloatTimeDomainDataMethodSupport(nativeAnalyserNode))) {\n            wrapAnalyserNodeGetFloatTimeDomainDataMethod(nativeAnalyserNode);\n        }\n        return nativeAnalyserNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-analyser-node-factory.js.map"]},"metadata":{},"sourceType":"module"}