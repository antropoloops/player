{"ast":null,"code":"import debug from \"debug\";\nimport { TimeManager } from \"../TimeManager\";\nimport { ControlStateManager } from \"./ControlStateManager\";\nimport { KeyboardControler } from \"./KeyboardControler\";\nconst log = debug(\"atpls:control\");\n\n/**\n * Controls the playing state of clips and tracks\n *\n * It uses a listener for side effects (using commands) and state changees\n */\nexport class AudiosetControl {\n  constructor(audioset, listener) {\n    this.listener = listener;\n    this.keyboard = void 0;\n    this.commands = [];\n    this.manager = new ControlStateManager();\n    log(\"create control\");\n    this.time = new TimeManager(audioset.audio);\n    this.keyboard = new KeyboardControler(audioset, this);\n    audioset.clips.forEach(clip => this.manager.addClip(clip));\n    audioset.tracks.forEach(track => this.manager.addTrack(track));\n  }\n\n  toggleClip(clipId, time) {\n    const clipState = this.manager.getClipState(clipId);\n\n    if (!clipState) {\n      return;\n    } else if (clipState.state === \"stopped\") {\n      this.startClip(clipId, time);\n    } else if (clipState.state === \"playing\") {\n      this.stopClip(clipId, time);\n    }\n  }\n  /**\n   * Start a clip\n   * @param clipId\n   */\n\n\n  startClip(clipId, time) {\n    const clipState = this.manager.getClipState(clipId);\n\n    if (!clipState || clipState.state === \"playing\") {\n      return;\n    }\n\n    time = this.time.startTime(time);\n    log(\"start clip %s %o\", clipId, time);\n    const trackId = this.manager.getTrackIdOfClip(clipId);\n    const sameTrackClipIds = this.manager.getClipIdsOfTrack(trackId);\n    sameTrackClipIds.forEach(trackClipId => this.stopClipCommand(trackClipId, time));\n    this.startTrackCommand(trackId, time);\n    this.startClipCommand(clipId, time);\n    this.sendCommandsAndFireStateChange();\n  }\n  /**\n   * Stops a clip\n   */\n\n\n  stopClip(clipId, time) {\n    const clipState = this.manager.getClipState(clipId);\n\n    if (!clipState || clipState.state === \"stopped\") {\n      return;\n    }\n\n    time = this.time.stopTime(time);\n    log(\"stop clip %s %o\", clipId, time);\n    const trackId = this.manager.getTrackIdOfClip(clipId);\n    this.stopClipCommand(clipId, time);\n    this.stopTrackCommand(trackId, time);\n    this.sendCommandsAndFireStateChange();\n  }\n  /**\n   * Stops all clips\n   */\n\n\n  stopAll(time) {\n    this.manager.getAllClipIds().forEach(clipId => this.stopClipCommand(clipId, time));\n    this.manager.getAllTrackIds().forEach(trackId => this.stopTrackCommand(trackId, time));\n    this.sendCommandsAndFireStateChange();\n  }\n\n  getState() {\n    return this.manager.getState();\n  } //// PRIVATE ////\n\n\n  sendCommandsAndFireStateChange() {\n    this.commands.forEach(command => {\n      this.listener.onControlCommand(command);\n    });\n    this.commands = [];\n    this.listener.onControlStateChanged(this.getState());\n  }\n\n  startClipCommand(clipId, time) {\n    const clipState = this.manager.getClipState(clipId);\n\n    if (clipState.state === \"playing\") {\n      return;\n    }\n\n    this.manager.setClipState(clipId, {\n      state: \"playing\"\n    });\n    this.commands.push({\n      command: \"startClip\",\n      clipId,\n      time\n    });\n  }\n\n  stopClipCommand(clipId, time) {\n    const clipState = this.manager.getClipState(clipId);\n\n    if (clipState.state === \"stopped\") {\n      return;\n    }\n\n    this.manager.setClipState(clipId, {\n      state: \"stopped\"\n    });\n    this.commands.push({\n      command: \"stopClip\",\n      clipId,\n      time\n    });\n  }\n\n  startTrackCommand(trackId, time) {\n    const trackState = this.manager.getTrackState(trackId);\n\n    if (trackState.state === \"playing\") {\n      return;\n    }\n\n    this.manager.setTrackState(trackId, {\n      state: \"playing\",\n      volume: trackState.volume\n    });\n    this.commands.push({\n      command: \"startTrack\",\n      trackId,\n      time\n    });\n  }\n\n  stopTrackCommand(trackId, time) {\n    const trackState = this.manager.getTrackState(trackId);\n\n    if (trackState.state === \"stopped\") {\n      return;\n    }\n\n    this.manager.setTrackState(trackId, {\n      state: \"stopped\",\n      volume: trackState.volume\n    });\n    this.commands.push({\n      command: \"stopTrack\",\n      trackId,\n      time\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/Control/AudiosetControl.ts"],"names":["debug","TimeManager","ControlStateManager","KeyboardControler","log","AudiosetControl","constructor","audioset","listener","keyboard","commands","manager","time","audio","clips","forEach","clip","addClip","tracks","track","addTrack","toggleClip","clipId","clipState","getClipState","state","startClip","stopClip","startTime","trackId","getTrackIdOfClip","sameTrackClipIds","getClipIdsOfTrack","trackClipId","stopClipCommand","startTrackCommand","startClipCommand","sendCommandsAndFireStateChange","stopTime","stopTrackCommand","stopAll","getAllClipIds","getAllTrackIds","getState","command","onControlCommand","onControlStateChanged","setClipState","push","trackState","getTrackState","setTrackState","volume"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,WAAT,QAA4B,gBAA5B;AAGA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA,MAAMC,GAAG,GAAGJ,KAAK,CAAC,eAAD,CAAjB;;AAgBA;;;;;AAKA,OAAO,MAAMK,eAAN,CAA+C;AAKpDC,EAAAA,WAAW,CAACC,QAAD,EAA6BC,QAA7B,EAAwD;AAAA,SAA3BA,QAA2B,GAA3BA,QAA2B;AAAA,SAJnDC,QAImD;AAAA,SAH3DC,QAG2D,GAH9B,EAG8B;AAAA,SAF3DC,OAE2D,GAFjD,IAAIT,mBAAJ,EAEiD;AACjEE,IAAAA,GAAG,CAAC,gBAAD,CAAH;AACA,SAAKQ,IAAL,GAAY,IAAIX,WAAJ,CAAgBM,QAAQ,CAACM,KAAzB,CAAZ;AACA,SAAKJ,QAAL,GAAgB,IAAIN,iBAAJ,CAAsBI,QAAtB,EAAgC,IAAhC,CAAhB;AACAA,IAAAA,QAAQ,CAACO,KAAT,CAAeC,OAAf,CAAwBC,IAAD,IAAgB,KAAKL,OAAL,CAAaM,OAAb,CAAqBD,IAArB,CAAvC;AACAT,IAAAA,QAAQ,CAACW,MAAT,CAAgBH,OAAhB,CAAwBI,KAAK,IAAI,KAAKR,OAAL,CAAaS,QAAb,CAAsBD,KAAtB,CAAjC;AACD;;AAEME,EAAAA,UAAP,CAAkBC,MAAlB,EAAkCV,IAAlC,EAAgD;AAC9C,UAAMW,SAAS,GAAG,KAAKZ,OAAL,CAAaa,YAAb,CAA0BF,MAA1B,CAAlB;;AACA,QAAI,CAACC,SAAL,EAAgB;AACd;AACD,KAFD,MAEO,IAAIA,SAAS,CAACE,KAAV,KAAoB,SAAxB,EAAmC;AACxC,WAAKC,SAAL,CAAeJ,MAAf,EAAuBV,IAAvB;AACD,KAFM,MAEA,IAAIW,SAAS,CAACE,KAAV,KAAoB,SAAxB,EAAmC;AACxC,WAAKE,QAAL,CAAcL,MAAd,EAAsBV,IAAtB;AACD;AACF;AAED;;;;;;AAIOc,EAAAA,SAAP,CAAiBJ,MAAjB,EAAiCV,IAAjC,EAA+C;AAC7C,UAAMW,SAAS,GAAG,KAAKZ,OAAL,CAAaa,YAAb,CAA0BF,MAA1B,CAAlB;;AACA,QAAI,CAACC,SAAD,IAAcA,SAAS,CAACE,KAAV,KAAoB,SAAtC,EAAiD;AAC/C;AACD;;AAEDb,IAAAA,IAAI,GAAG,KAAKA,IAAL,CAAUgB,SAAV,CAAoBhB,IAApB,CAAP;AACAR,IAAAA,GAAG,CAAC,kBAAD,EAAqBkB,MAArB,EAA6BV,IAA7B,CAAH;AAEA,UAAMiB,OAAO,GAAG,KAAKlB,OAAL,CAAamB,gBAAb,CAA8BR,MAA9B,CAAhB;AACA,UAAMS,gBAAgB,GAAG,KAAKpB,OAAL,CAAaqB,iBAAb,CAA+BH,OAA/B,CAAzB;AACAE,IAAAA,gBAAgB,CAAChB,OAAjB,CAAyBkB,WAAW,IAClC,KAAKC,eAAL,CAAqBD,WAArB,EAAkCrB,IAAlC,CADF;AAGA,SAAKuB,iBAAL,CAAuBN,OAAvB,EAAgCjB,IAAhC;AACA,SAAKwB,gBAAL,CAAsBd,MAAtB,EAA8BV,IAA9B;AACA,SAAKyB,8BAAL;AACD;AAED;;;;;AAGOV,EAAAA,QAAP,CAAgBL,MAAhB,EAAgCV,IAAhC,EAA8C;AAC5C,UAAMW,SAAS,GAAG,KAAKZ,OAAL,CAAaa,YAAb,CAA0BF,MAA1B,CAAlB;;AACA,QAAI,CAACC,SAAD,IAAcA,SAAS,CAACE,KAAV,KAAoB,SAAtC,EAAiD;AAC/C;AACD;;AAEDb,IAAAA,IAAI,GAAG,KAAKA,IAAL,CAAU0B,QAAV,CAAmB1B,IAAnB,CAAP;AACAR,IAAAA,GAAG,CAAC,iBAAD,EAAoBkB,MAApB,EAA4BV,IAA5B,CAAH;AAEA,UAAMiB,OAAO,GAAG,KAAKlB,OAAL,CAAamB,gBAAb,CAA8BR,MAA9B,CAAhB;AAEA,SAAKY,eAAL,CAAqBZ,MAArB,EAA6BV,IAA7B;AACA,SAAK2B,gBAAL,CAAsBV,OAAtB,EAA+BjB,IAA/B;AACA,SAAKyB,8BAAL;AACD;AAED;;;;;AAGOG,EAAAA,OAAP,CAAe5B,IAAf,EAA6B;AAC3B,SAAKD,OAAL,CACG8B,aADH,GAEG1B,OAFH,CAEWO,MAAM,IAAI,KAAKY,eAAL,CAAqBZ,MAArB,EAA6BV,IAA7B,CAFrB;AAGA,SAAKD,OAAL,CACG+B,cADH,GAEG3B,OAFH,CAEWc,OAAO,IAAI,KAAKU,gBAAL,CAAsBV,OAAtB,EAA+BjB,IAA/B,CAFtB;AAGA,SAAKyB,8BAAL;AACD;;AAEMM,EAAAA,QAAP,GAAkB;AAChB,WAAO,KAAKhC,OAAL,CAAagC,QAAb,EAAP;AACD,GAjFmD,CAmFpD;;;AACQN,EAAAA,8BAAR,GAAyC;AACvC,SAAK3B,QAAL,CAAcK,OAAd,CAAsB6B,OAAO,IAAI;AAC/B,WAAKpC,QAAL,CAAcqC,gBAAd,CAA+BD,OAA/B;AACD,KAFD;AAGA,SAAKlC,QAAL,GAAgB,EAAhB;AAEA,SAAKF,QAAL,CAAcsC,qBAAd,CAAoC,KAAKH,QAAL,EAApC;AACD;;AAEOP,EAAAA,gBAAR,CAAyBd,MAAzB,EAAyCV,IAAzC,EAAuD;AACrD,UAAMW,SAAS,GAAG,KAAKZ,OAAL,CAAaa,YAAb,CAA0BF,MAA1B,CAAlB;;AACA,QAAIC,SAAS,CAACE,KAAV,KAAoB,SAAxB,EAAmC;AACjC;AACD;;AAED,SAAKd,OAAL,CAAaoC,YAAb,CAA0BzB,MAA1B,EAAkC;AAAEG,MAAAA,KAAK,EAAE;AAAT,KAAlC;AACA,SAAKf,QAAL,CAAcsC,IAAd,CAAmB;AAAEJ,MAAAA,OAAO,EAAE,WAAX;AAAwBtB,MAAAA,MAAxB;AAAgCV,MAAAA;AAAhC,KAAnB;AACD;;AAEOsB,EAAAA,eAAR,CAAwBZ,MAAxB,EAAwCV,IAAxC,EAAsD;AACpD,UAAMW,SAAS,GAAG,KAAKZ,OAAL,CAAaa,YAAb,CAA0BF,MAA1B,CAAlB;;AACA,QAAIC,SAAS,CAACE,KAAV,KAAoB,SAAxB,EAAmC;AACjC;AACD;;AAED,SAAKd,OAAL,CAAaoC,YAAb,CAA0BzB,MAA1B,EAAkC;AAAEG,MAAAA,KAAK,EAAE;AAAT,KAAlC;AACA,SAAKf,QAAL,CAAcsC,IAAd,CAAmB;AAAEJ,MAAAA,OAAO,EAAE,UAAX;AAAuBtB,MAAAA,MAAvB;AAA+BV,MAAAA;AAA/B,KAAnB;AACD;;AAEOuB,EAAAA,iBAAR,CAA0BN,OAA1B,EAA2CjB,IAA3C,EAAyD;AACvD,UAAMqC,UAAU,GAAG,KAAKtC,OAAL,CAAauC,aAAb,CAA2BrB,OAA3B,CAAnB;;AACA,QAAIoB,UAAU,CAACxB,KAAX,KAAqB,SAAzB,EAAoC;AAClC;AACD;;AAED,SAAKd,OAAL,CAAawC,aAAb,CAA2BtB,OAA3B,EAAoC;AAClCJ,MAAAA,KAAK,EAAE,SAD2B;AAElC2B,MAAAA,MAAM,EAAEH,UAAU,CAACG;AAFe,KAApC;AAIA,SAAK1C,QAAL,CAAcsC,IAAd,CAAmB;AAAEJ,MAAAA,OAAO,EAAE,YAAX;AAAyBf,MAAAA,OAAzB;AAAkCjB,MAAAA;AAAlC,KAAnB;AACD;;AAEO2B,EAAAA,gBAAR,CAAyBV,OAAzB,EAA0CjB,IAA1C,EAAwD;AACtD,UAAMqC,UAAU,GAAG,KAAKtC,OAAL,CAAauC,aAAb,CAA2BrB,OAA3B,CAAnB;;AACA,QAAIoB,UAAU,CAACxB,KAAX,KAAqB,SAAzB,EAAoC;AAClC;AACD;;AAED,SAAKd,OAAL,CAAawC,aAAb,CAA2BtB,OAA3B,EAAoC;AAClCJ,MAAAA,KAAK,EAAE,SAD2B;AAElC2B,MAAAA,MAAM,EAAEH,UAAU,CAACG;AAFe,KAApC;AAIA,SAAK1C,QAAL,CAAcsC,IAAd,CAAmB;AAAEJ,MAAAA,OAAO,EAAE,WAAX;AAAwBf,MAAAA,OAAxB;AAAiCjB,MAAAA;AAAjC,KAAnB;AACD;;AAzImD","sourcesContent":["import debug from \"debug\";\nimport { Audioset, Clip } from \"../../audioset\";\nimport { TimeManager } from \"../TimeManager\";\nimport { ControlCommand } from \"./ControlCommand\";\nimport { ControlState } from \"./ControlState\";\nimport { ControlStateManager } from \"./ControlStateManager\";\nimport { KeyboardControler } from \"./KeyboardControler\";\n\nconst log = debug(\"atpls:control\");\n\nexport interface ControlListener {\n  onControlStateChanged: (state: ControlState) => void;\n  onControlCommand: (command: ControlCommand) => void;\n}\n\nexport interface PlayerControl {\n  readonly keyboard: KeyboardControler;\n  getState(): ControlState;\n  toggleClip(clipId: string, time: number): void;\n  stopClip(clipId: string, time: number): void;\n  startClip(clipId: string, time: number): void;\n  stopAll(time: number): void;\n}\n\n/**\n * Controls the playing state of clips and tracks\n *\n * It uses a listener for side effects (using commands) and state changees\n */\nexport class AudiosetControl implements PlayerControl {\n  public readonly keyboard: KeyboardControler;\n  private commands: ControlCommand[] = [];\n  private manager = new ControlStateManager();\n\n  constructor(audioset: Audioset, private listener: ControlListener) {\n    log(\"create control\");\n    this.time = new TimeManager(audioset.audio);\n    this.keyboard = new KeyboardControler(audioset, this);\n    audioset.clips.forEach((clip: Clip) => this.manager.addClip(clip));\n    audioset.tracks.forEach(track => this.manager.addTrack(track));\n  }\n\n  public toggleClip(clipId: string, time: number) {\n    const clipState = this.manager.getClipState(clipId);\n    if (!clipState) {\n      return;\n    } else if (clipState.state === \"stopped\") {\n      this.startClip(clipId, time);\n    } else if (clipState.state === \"playing\") {\n      this.stopClip(clipId, time);\n    }\n  }\n\n  /**\n   * Start a clip\n   * @param clipId\n   */\n  public startClip(clipId: string, time: number) {\n    const clipState = this.manager.getClipState(clipId);\n    if (!clipState || clipState.state === \"playing\") {\n      return;\n    }\n\n    time = this.time.startTime(time);\n    log(\"start clip %s %o\", clipId, time);\n\n    const trackId = this.manager.getTrackIdOfClip(clipId);\n    const sameTrackClipIds = this.manager.getClipIdsOfTrack(trackId);\n    sameTrackClipIds.forEach(trackClipId =>\n      this.stopClipCommand(trackClipId, time),\n    );\n    this.startTrackCommand(trackId, time);\n    this.startClipCommand(clipId, time);\n    this.sendCommandsAndFireStateChange();\n  }\n\n  /**\n   * Stops a clip\n   */\n  public stopClip(clipId: string, time: number) {\n    const clipState = this.manager.getClipState(clipId);\n    if (!clipState || clipState.state === \"stopped\") {\n      return;\n    }\n\n    time = this.time.stopTime(time);\n    log(\"stop clip %s %o\", clipId, time);\n\n    const trackId = this.manager.getTrackIdOfClip(clipId);\n\n    this.stopClipCommand(clipId, time);\n    this.stopTrackCommand(trackId, time);\n    this.sendCommandsAndFireStateChange();\n  }\n\n  /**\n   * Stops all clips\n   */\n  public stopAll(time: number) {\n    this.manager\n      .getAllClipIds()\n      .forEach(clipId => this.stopClipCommand(clipId, time));\n    this.manager\n      .getAllTrackIds()\n      .forEach(trackId => this.stopTrackCommand(trackId, time));\n    this.sendCommandsAndFireStateChange();\n  }\n\n  public getState() {\n    return this.manager.getState();\n  }\n\n  //// PRIVATE ////\n  private sendCommandsAndFireStateChange() {\n    this.commands.forEach(command => {\n      this.listener.onControlCommand(command);\n    });\n    this.commands = [];\n\n    this.listener.onControlStateChanged(this.getState());\n  }\n\n  private startClipCommand(clipId: string, time: number) {\n    const clipState = this.manager.getClipState(clipId);\n    if (clipState.state === \"playing\") {\n      return;\n    }\n\n    this.manager.setClipState(clipId, { state: \"playing\" });\n    this.commands.push({ command: \"startClip\", clipId, time });\n  }\n\n  private stopClipCommand(clipId: string, time: number) {\n    const clipState = this.manager.getClipState(clipId);\n    if (clipState.state === \"stopped\") {\n      return;\n    }\n\n    this.manager.setClipState(clipId, { state: \"stopped\" });\n    this.commands.push({ command: \"stopClip\", clipId, time });\n  }\n\n  private startTrackCommand(trackId: string, time: number) {\n    const trackState = this.manager.getTrackState(trackId);\n    if (trackState.state === \"playing\") {\n      return;\n    }\n\n    this.manager.setTrackState(trackId, {\n      state: \"playing\",\n      volume: trackState.volume,\n    });\n    this.commands.push({ command: \"startTrack\", trackId, time });\n  }\n\n  private stopTrackCommand(trackId: string, time: number) {\n    const trackState = this.manager.getTrackState(trackId);\n    if (trackState.state === \"stopped\") {\n      return;\n    }\n\n    this.manager.setTrackState(trackId, {\n      state: \"stopped\",\n      volume: trackState.volume,\n    });\n    this.commands.push({ command: \"stopTrack\", trackId, time });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}