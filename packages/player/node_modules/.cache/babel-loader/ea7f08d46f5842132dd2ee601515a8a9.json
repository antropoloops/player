{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { asin, cos, sin, sqrt } from \"./math.js\";\nvar sqrt6 = sqrt(6),\n    sqrt7 = sqrt(7);\nexport function mtFlatPolarParabolicRaw(lambda, phi) {\n  var theta = asin(7 * sin(phi) / (3 * sqrt6));\n  return [sqrt6 * lambda * (2 * cos(2 * theta / 3) - 1) / sqrt7, 9 * sin(theta / 3) / sqrt7];\n}\n\nmtFlatPolarParabolicRaw.invert = function (x, y) {\n  var theta = 3 * asin(y * sqrt7 / 9);\n  return [x * sqrt7 / (sqrt6 * (2 * cos(2 * theta / 3) - 1)), asin(sin(theta) * 3 * sqrt6 / 7)];\n};\n\nexport default function () {\n  return projection(mtFlatPolarParabolicRaw).scale(164.859);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/mtFlatPolarParabolic.js"],"names":["geoProjection","projection","asin","cos","sin","sqrt","sqrt6","sqrt7","mtFlatPolarParabolicRaw","lambda","phi","theta","invert","x","y","scale"],"mappings":"AAAA,SAAQA,aAAa,IAAIC,UAAzB,QAA0C,QAA1C;AACA,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,GAAnB,EAAwBC,IAAxB,QAAmC,WAAnC;AAEA,IAAIC,KAAK,GAAGD,IAAI,CAAC,CAAD,CAAhB;AAAA,IACIE,KAAK,GAAGF,IAAI,CAAC,CAAD,CADhB;AAGA,OAAO,SAASG,uBAAT,CAAiCC,MAAjC,EAAyCC,GAAzC,EAA8C;AACnD,MAAIC,KAAK,GAAGT,IAAI,CAAC,IAAIE,GAAG,CAACM,GAAD,CAAP,IAAgB,IAAIJ,KAApB,CAAD,CAAhB;AACA,SAAO,CACLA,KAAK,GAAGG,MAAR,IAAkB,IAAIN,GAAG,CAAC,IAAIQ,KAAJ,GAAY,CAAb,CAAP,GAAyB,CAA3C,IAAgDJ,KAD3C,EAEL,IAAIH,GAAG,CAACO,KAAK,GAAG,CAAT,CAAP,GAAqBJ,KAFhB,CAAP;AAID;;AAEDC,uBAAuB,CAACI,MAAxB,GAAiC,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC9C,MAAIH,KAAK,GAAG,IAAIT,IAAI,CAACY,CAAC,GAAGP,KAAJ,GAAY,CAAb,CAApB;AACA,SAAO,CACLM,CAAC,GAAGN,KAAJ,IAAaD,KAAK,IAAI,IAAIH,GAAG,CAAC,IAAIQ,KAAJ,GAAY,CAAb,CAAP,GAAyB,CAA7B,CAAlB,CADK,EAELT,IAAI,CAACE,GAAG,CAACO,KAAD,CAAH,GAAa,CAAb,GAAiBL,KAAjB,GAAyB,CAA1B,CAFC,CAAP;AAID,CAND;;AAQA,eAAe,YAAW;AACxB,SAAOL,UAAU,CAACO,uBAAD,CAAV,CACFO,KADE,CACI,OADJ,CAAP;AAED","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {asin, cos, sin, sqrt} from \"./math.js\";\n\nvar sqrt6 = sqrt(6),\n    sqrt7 = sqrt(7);\n\nexport function mtFlatPolarParabolicRaw(lambda, phi) {\n  var theta = asin(7 * sin(phi) / (3 * sqrt6));\n  return [\n    sqrt6 * lambda * (2 * cos(2 * theta / 3) - 1) / sqrt7,\n    9 * sin(theta / 3) / sqrt7\n  ];\n}\n\nmtFlatPolarParabolicRaw.invert = function(x, y) {\n  var theta = 3 * asin(y * sqrt7 / 9);\n  return [\n    x * sqrt7 / (sqrt6 * (2 * cos(2 * theta / 3) - 1)),\n    asin(sin(theta) * 3 * sqrt6 / 7)\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarParabolicRaw)\n      .scale(164.859);\n}\n"]},"metadata":{},"sourceType":"module"}