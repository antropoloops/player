{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, cos, epsilon, sin, sqrt, sqrt1_2, sqrt2 } from \"./math.js\";\nexport function mtFlatPolarQuarticRaw(lambda, phi) {\n  var k = (1 + sqrt1_2) * sin(phi),\n      theta = phi;\n\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (sin(theta / 2) + sin(theta) - k) / (0.5 * cos(theta / 2) + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n\n  return [lambda * (1 + 2 * cos(theta) / cos(theta / 2)) / (3 * sqrt2), 2 * sqrt(3) * sin(theta / 2) / sqrt(2 + sqrt2)];\n}\n\nmtFlatPolarQuarticRaw.invert = function (x, y) {\n  var sinTheta_2 = y * sqrt(2 + sqrt2) / (2 * sqrt(3)),\n      theta = 2 * asin(sinTheta_2);\n  return [3 * sqrt2 * x / (1 + 2 * cos(theta) / cos(theta / 2)), asin((sinTheta_2 + sin(theta)) / (1 + sqrt1_2))];\n};\n\nexport default function () {\n  return projection(mtFlatPolarQuarticRaw).scale(188.209);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/mtFlatPolarQuartic.js"],"names":["geoProjection","projection","abs","asin","cos","epsilon","sin","sqrt","sqrt1_2","sqrt2","mtFlatPolarQuarticRaw","lambda","phi","k","theta","i","delta","invert","x","y","sinTheta_2","scale"],"mappings":"AAAA,SAAQA,aAAa,IAAIC,UAAzB,QAA0C,QAA1C;AACA,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,OAAxB,EAAiCC,GAAjC,EAAsCC,IAAtC,EAA4CC,OAA5C,EAAqDC,KAArD,QAAiE,WAAjE;AAEA,OAAO,SAASC,qBAAT,CAA+BC,MAA/B,EAAuCC,GAAvC,EAA4C;AACjD,MAAIC,CAAC,GAAG,CAAC,IAAIL,OAAL,IAAgBF,GAAG,CAACM,GAAD,CAA3B;AAAA,MACIE,KAAK,GAAGF,GADZ;;AAEA,OAAK,IAAIG,CAAC,GAAG,CAAR,EAAWC,KAAhB,EAAuBD,CAAC,GAAG,EAA3B,EAA+BA,CAAC,EAAhC,EAAoC;AAClCD,IAAAA,KAAK,IAAIE,KAAK,GAAG,CAACV,GAAG,CAACQ,KAAK,GAAG,CAAT,CAAH,GAAiBR,GAAG,CAACQ,KAAD,CAApB,GAA8BD,CAA/B,KAAqC,MAAMT,GAAG,CAACU,KAAK,GAAG,CAAT,CAAT,GAAuBV,GAAG,CAACU,KAAD,CAA/D,CAAjB;AACA,QAAIZ,GAAG,CAACc,KAAD,CAAH,GAAaX,OAAjB,EAA0B;AAC3B;;AACD,SAAO,CACLM,MAAM,IAAI,IAAI,IAAIP,GAAG,CAACU,KAAD,CAAP,GAAiBV,GAAG,CAACU,KAAK,GAAG,CAAT,CAA5B,CAAN,IAAkD,IAAIL,KAAtD,CADK,EAEL,IAAIF,IAAI,CAAC,CAAD,CAAR,GAAcD,GAAG,CAACQ,KAAK,GAAG,CAAT,CAAjB,GAA+BP,IAAI,CAAC,IAAIE,KAAL,CAF9B,CAAP;AAID;;AAEDC,qBAAqB,CAACO,MAAtB,GAA+B,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC5C,MAAIC,UAAU,GAAGD,CAAC,GAAGZ,IAAI,CAAC,IAAIE,KAAL,CAAR,IAAuB,IAAIF,IAAI,CAAC,CAAD,CAA/B,CAAjB;AAAA,MACIO,KAAK,GAAG,IAAIX,IAAI,CAACiB,UAAD,CADpB;AAEA,SAAO,CACL,IAAIX,KAAJ,GAAYS,CAAZ,IAAiB,IAAI,IAAId,GAAG,CAACU,KAAD,CAAP,GAAiBV,GAAG,CAACU,KAAK,GAAG,CAAT,CAAzC,CADK,EAELX,IAAI,CAAC,CAACiB,UAAU,GAAGd,GAAG,CAACQ,KAAD,CAAjB,KAA6B,IAAIN,OAAjC,CAAD,CAFC,CAAP;AAID,CAPD;;AASA,eAAe,YAAW;AACxB,SAAOP,UAAU,CAACS,qBAAD,CAAV,CACFW,KADE,CACI,OADJ,CAAP;AAED","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, sin, sqrt, sqrt1_2, sqrt2} from \"./math.js\";\n\nexport function mtFlatPolarQuarticRaw(lambda, phi) {\n  var k = (1 + sqrt1_2) * sin(phi),\n      theta = phi;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (sin(theta / 2) + sin(theta) - k) / (0.5 * cos(theta / 2) + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [\n    lambda * (1 + 2 * cos(theta) / cos(theta / 2)) / (3 * sqrt2),\n    2 * sqrt(3) * sin(theta / 2) / sqrt(2 + sqrt2)\n  ];\n}\n\nmtFlatPolarQuarticRaw.invert = function(x, y) {\n  var sinTheta_2 = y * sqrt(2 + sqrt2) / (2 * sqrt(3)),\n      theta = 2 * asin(sinTheta_2);\n  return [\n    3 * sqrt2 * x / (1 + 2 * cos(theta) / cos(theta / 2)),\n    asin((sinTheta_2 + sin(theta)) / (1 + sqrt1_2))\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarQuarticRaw)\n      .scale(188.209);\n}\n"]},"metadata":{},"sourceType":"module"}