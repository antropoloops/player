{"ast":null,"code":"// Computes the bounding box of the specified hash of GeoJSON objects.\nexport default function (objects) {\n  var x0 = Infinity,\n      y0 = Infinity,\n      x1 = -Infinity,\n      y1 = -Infinity;\n\n  function boundGeometry(geometry) {\n    if (geometry != null && boundGeometryType.hasOwnProperty(geometry.type)) boundGeometryType[geometry.type](geometry);\n  }\n\n  var boundGeometryType = {\n    GeometryCollection: function GeometryCollection(o) {\n      o.geometries.forEach(boundGeometry);\n    },\n    Point: function Point(o) {\n      boundPoint(o.coordinates);\n    },\n    MultiPoint: function MultiPoint(o) {\n      o.coordinates.forEach(boundPoint);\n    },\n    LineString: function LineString(o) {\n      boundLine(o.arcs);\n    },\n    MultiLineString: function MultiLineString(o) {\n      o.arcs.forEach(boundLine);\n    },\n    Polygon: function Polygon(o) {\n      o.arcs.forEach(boundLine);\n    },\n    MultiPolygon: function MultiPolygon(o) {\n      o.arcs.forEach(boundMultiLine);\n    }\n  };\n\n  function boundPoint(coordinates) {\n    var x = coordinates[0],\n        y = coordinates[1];\n    if (x < x0) x0 = x;\n    if (x > x1) x1 = x;\n    if (y < y0) y0 = y;\n    if (y > y1) y1 = y;\n  }\n\n  function boundLine(coordinates) {\n    coordinates.forEach(boundPoint);\n  }\n\n  function boundMultiLine(coordinates) {\n    coordinates.forEach(boundLine);\n  }\n\n  for (var key in objects) {\n    boundGeometry(objects[key]);\n  }\n\n  return x1 >= x0 && y1 >= y0 ? [x0, y0, x1, y1] : undefined;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/topojson/node_modules/topojson-server/src/bounds.js"],"names":["objects","x0","Infinity","y0","x1","y1","boundGeometry","geometry","boundGeometryType","hasOwnProperty","type","GeometryCollection","o","geometries","forEach","Point","boundPoint","coordinates","MultiPoint","LineString","boundLine","arcs","MultiLineString","Polygon","MultiPolygon","boundMultiLine","x","y","key","undefined"],"mappings":"AAAA;AACA,eAAe,UAASA,OAAT,EAAkB;AAC/B,MAAIC,EAAE,GAAGC,QAAT;AAAA,MACIC,EAAE,GAAGD,QADT;AAAA,MAEIE,EAAE,GAAG,CAACF,QAFV;AAAA,MAGIG,EAAE,GAAG,CAACH,QAHV;;AAKA,WAASI,aAAT,CAAuBC,QAAvB,EAAiC;AAC/B,QAAIA,QAAQ,IAAI,IAAZ,IAAoBC,iBAAiB,CAACC,cAAlB,CAAiCF,QAAQ,CAACG,IAA1C,CAAxB,EAAyEF,iBAAiB,CAACD,QAAQ,CAACG,IAAV,CAAjB,CAAiCH,QAAjC;AAC1E;;AAED,MAAIC,iBAAiB,GAAG;AACtBG,IAAAA,kBAAkB,EAAE,4BAASC,CAAT,EAAY;AAAEA,MAAAA,CAAC,CAACC,UAAF,CAAaC,OAAb,CAAqBR,aAArB;AAAsC,KADlD;AAEtBS,IAAAA,KAAK,EAAE,eAASH,CAAT,EAAY;AAAEI,MAAAA,UAAU,CAACJ,CAAC,CAACK,WAAH,CAAV;AAA4B,KAF3B;AAGtBC,IAAAA,UAAU,EAAE,oBAASN,CAAT,EAAY;AAAEA,MAAAA,CAAC,CAACK,WAAF,CAAcH,OAAd,CAAsBE,UAAtB;AAAoC,KAHxC;AAItBG,IAAAA,UAAU,EAAE,oBAASP,CAAT,EAAY;AAAEQ,MAAAA,SAAS,CAACR,CAAC,CAACS,IAAH,CAAT;AAAoB,KAJxB;AAKtBC,IAAAA,eAAe,EAAE,yBAASV,CAAT,EAAY;AAAEA,MAAAA,CAAC,CAACS,IAAF,CAAOP,OAAP,CAAeM,SAAf;AAA4B,KALrC;AAMtBG,IAAAA,OAAO,EAAE,iBAASX,CAAT,EAAY;AAAEA,MAAAA,CAAC,CAACS,IAAF,CAAOP,OAAP,CAAeM,SAAf;AAA4B,KAN7B;AAOtBI,IAAAA,YAAY,EAAE,sBAASZ,CAAT,EAAY;AAAEA,MAAAA,CAAC,CAACS,IAAF,CAAOP,OAAP,CAAeW,cAAf;AAAiC;AAPvC,GAAxB;;AAUA,WAAST,UAAT,CAAoBC,WAApB,EAAiC;AAC/B,QAAIS,CAAC,GAAGT,WAAW,CAAC,CAAD,CAAnB;AAAA,QACIU,CAAC,GAAGV,WAAW,CAAC,CAAD,CADnB;AAEA,QAAIS,CAAC,GAAGzB,EAAR,EAAYA,EAAE,GAAGyB,CAAL;AACZ,QAAIA,CAAC,GAAGtB,EAAR,EAAYA,EAAE,GAAGsB,CAAL;AACZ,QAAIC,CAAC,GAAGxB,EAAR,EAAYA,EAAE,GAAGwB,CAAL;AACZ,QAAIA,CAAC,GAAGtB,EAAR,EAAYA,EAAE,GAAGsB,CAAL;AACb;;AAED,WAASP,SAAT,CAAmBH,WAAnB,EAAgC;AAC9BA,IAAAA,WAAW,CAACH,OAAZ,CAAoBE,UAApB;AACD;;AAED,WAASS,cAAT,CAAwBR,WAAxB,EAAqC;AACnCA,IAAAA,WAAW,CAACH,OAAZ,CAAoBM,SAApB;AACD;;AAED,OAAK,IAAIQ,GAAT,IAAgB5B,OAAhB,EAAyB;AACvBM,IAAAA,aAAa,CAACN,OAAO,CAAC4B,GAAD,CAAR,CAAb;AACD;;AAED,SAAOxB,EAAE,IAAIH,EAAN,IAAYI,EAAE,IAAIF,EAAlB,GAAuB,CAACF,EAAD,EAAKE,EAAL,EAASC,EAAT,EAAaC,EAAb,CAAvB,GAA0CwB,SAAjD;AACD","sourcesContent":["// Computes the bounding box of the specified hash of GeoJSON objects.\nexport default function(objects) {\n  var x0 = Infinity,\n      y0 = Infinity,\n      x1 = -Infinity,\n      y1 = -Infinity;\n\n  function boundGeometry(geometry) {\n    if (geometry != null && boundGeometryType.hasOwnProperty(geometry.type)) boundGeometryType[geometry.type](geometry);\n  }\n\n  var boundGeometryType = {\n    GeometryCollection: function(o) { o.geometries.forEach(boundGeometry); },\n    Point: function(o) { boundPoint(o.coordinates); },\n    MultiPoint: function(o) { o.coordinates.forEach(boundPoint); },\n    LineString: function(o) { boundLine(o.arcs); },\n    MultiLineString: function(o) { o.arcs.forEach(boundLine); },\n    Polygon: function(o) { o.arcs.forEach(boundLine); },\n    MultiPolygon: function(o) { o.arcs.forEach(boundMultiLine); }\n  };\n\n  function boundPoint(coordinates) {\n    var x = coordinates[0],\n        y = coordinates[1];\n    if (x < x0) x0 = x;\n    if (x > x1) x1 = x;\n    if (y < y0) y0 = y;\n    if (y > y1) y1 = y;\n  }\n\n  function boundLine(coordinates) {\n    coordinates.forEach(boundPoint);\n  }\n\n  function boundMultiLine(coordinates) {\n    coordinates.forEach(boundLine);\n  }\n\n  for (var key in objects) {\n    boundGeometry(objects[key]);\n  }\n\n  return x1 >= x0 && y1 >= y0 ? [x0, y0, x1, y1] : undefined;\n}\n"]},"metadata":{},"sourceType":"module"}