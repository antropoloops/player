{"ast":null,"code":"import _objectSpread from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport var createNativePannerNodeFakerFactory = function createNativePannerNodeFakerFactory(connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeAudioNode, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, monitorConnections) {\n  return function (nativeContext, _ref) {\n    var coneInnerAngle = _ref.coneInnerAngle,\n        coneOuterAngle = _ref.coneOuterAngle,\n        coneOuterGain = _ref.coneOuterGain,\n        distanceModel = _ref.distanceModel,\n        maxDistance = _ref.maxDistance,\n        orientationX = _ref.orientationX,\n        orientationY = _ref.orientationY,\n        orientationZ = _ref.orientationZ,\n        panningModel = _ref.panningModel,\n        positionX = _ref.positionX,\n        positionY = _ref.positionY,\n        positionZ = _ref.positionZ,\n        refDistance = _ref.refDistance,\n        rolloffFactor = _ref.rolloffFactor,\n        audioNodeOptions = _objectWithoutProperties(_ref, [\"coneInnerAngle\", \"coneOuterAngle\", \"coneOuterGain\", \"distanceModel\", \"maxDistance\", \"orientationX\", \"orientationY\", \"orientationZ\", \"panningModel\", \"positionX\", \"positionY\", \"positionZ\", \"refDistance\", \"rolloffFactor\"]);\n\n    var pannerNode = createNativeAudioNode(nativeContext, function (ntvCntxt) {\n      return ntvCntxt.createPanner();\n    }); // Bug #125: Safari does not throw an error yet.\n\n    if (audioNodeOptions.channelCount > 2) {\n      throw createNotSupportedError();\n    } // Bug #126: Safari does not throw an error yet.\n\n\n    if (audioNodeOptions.channelCountMode === 'max') {\n      throw createNotSupportedError();\n    }\n\n    assignNativeAudioNodeOptions(pannerNode, audioNodeOptions);\n    var SINGLE_CHANNEL_OPTIONS = {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete'\n    };\n    var channelMergerNode = createNativeChannelMergerNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n      channelInterpretation: 'speakers',\n      numberOfInputs: 6\n    }));\n    var inputGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, audioNodeOptions), {}, {\n      gain: 1\n    }));\n    var orientationXGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n      gain: 1\n    }));\n    var orientationYGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n      gain: 0\n    }));\n    var orientationZGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n      gain: 0\n    }));\n    var positionXGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n      gain: 0\n    }));\n    var positionYGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n      gain: 0\n    }));\n    var positionZGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n      gain: 0\n    }));\n    var scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 6, 0);\n    var waveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n      curve: new Float32Array([1, 1]),\n      oversample: 'none'\n    }));\n    var lastOrientation = [1, 0, 0];\n    var lastPosition = [0, 0, 0];\n\n    scriptProcessorNode.onaudioprocess = function (_ref2) {\n      var inputBuffer = _ref2.inputBuffer;\n      var orientation = [inputBuffer.getChannelData(0)[0], inputBuffer.getChannelData(1)[0], inputBuffer.getChannelData(2)[0]];\n\n      if (orientation.some(function (value, index) {\n        return value !== lastOrientation[index];\n      })) {\n        pannerNode.setOrientation.apply(pannerNode, orientation); // tslint:disable-line:deprecation\n\n        lastOrientation = orientation;\n      }\n\n      var positon = [inputBuffer.getChannelData(6)[0], inputBuffer.getChannelData(7)[0], inputBuffer.getChannelData(8)[0]];\n\n      if (positon.some(function (value, index) {\n        return value !== lastPosition[index];\n      })) {\n        pannerNode.setPosition.apply(pannerNode, positon); // tslint:disable-line:deprecation\n\n        lastPosition = positon;\n      }\n    };\n\n    Object.defineProperty(orientationYGainNode.gain, 'defaultValue', {\n      get: function get() {\n        return 0;\n      }\n    });\n    Object.defineProperty(orientationZGainNode.gain, 'defaultValue', {\n      get: function get() {\n        return 0;\n      }\n    });\n    Object.defineProperty(positionXGainNode.gain, 'defaultValue', {\n      get: function get() {\n        return 0;\n      }\n    });\n    Object.defineProperty(positionYGainNode.gain, 'defaultValue', {\n      get: function get() {\n        return 0;\n      }\n    });\n    Object.defineProperty(positionZGainNode.gain, 'defaultValue', {\n      get: function get() {\n        return 0;\n      }\n    });\n    var nativePannerNodeFaker = {\n      get bufferSize() {\n        return undefined;\n      },\n\n      get channelCount() {\n        return pannerNode.channelCount;\n      },\n\n      set channelCount(value) {\n        // Bug #125: Safari does not throw an error yet.\n        if (value > 2) {\n          throw createNotSupportedError();\n        }\n\n        inputGainNode.channelCount = value;\n        pannerNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return pannerNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        // Bug #126: Safari does not throw an error yet.\n        if (value === 'max') {\n          throw createNotSupportedError();\n        }\n\n        inputGainNode.channelCountMode = value;\n        pannerNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return pannerNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        inputGainNode.channelInterpretation = value;\n        pannerNode.channelInterpretation = value;\n      },\n\n      get coneInnerAngle() {\n        return pannerNode.coneInnerAngle;\n      },\n\n      set coneInnerAngle(value) {\n        pannerNode.coneInnerAngle = value;\n      },\n\n      get coneOuterAngle() {\n        return pannerNode.coneOuterAngle;\n      },\n\n      set coneOuterAngle(value) {\n        pannerNode.coneOuterAngle = value;\n      },\n\n      get coneOuterGain() {\n        return pannerNode.coneOuterGain;\n      },\n\n      set coneOuterGain(value) {\n        // Bug #127: Edge & Safari do not throw an InvalidStateError yet.\n        if (value < 0 || value > 1) {\n          throw createInvalidStateError();\n        }\n\n        pannerNode.coneOuterGain = value;\n      },\n\n      get context() {\n        return pannerNode.context;\n      },\n\n      get distanceModel() {\n        return pannerNode.distanceModel;\n      },\n\n      set distanceModel(value) {\n        pannerNode.distanceModel = value;\n      },\n\n      get inputs() {\n        return [inputGainNode];\n      },\n\n      get maxDistance() {\n        return pannerNode.maxDistance;\n      },\n\n      set maxDistance(value) {\n        // Bug #128: Edge & Safari do not throw an error yet.\n        if (value < 0) {\n          throw new RangeError();\n        }\n\n        pannerNode.maxDistance = value;\n      },\n\n      get numberOfInputs() {\n        return pannerNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return pannerNode.numberOfOutputs;\n      },\n\n      get orientationX() {\n        return orientationXGainNode.gain;\n      },\n\n      get orientationY() {\n        return orientationYGainNode.gain;\n      },\n\n      get orientationZ() {\n        return orientationZGainNode.gain;\n      },\n\n      get panningModel() {\n        return pannerNode.panningModel;\n      },\n\n      set panningModel(value) {\n        pannerNode.panningModel = value; // Bug #123: Edge does not support HRTF as panningModel.\n\n        if (pannerNode.panningModel !== value && value === 'HRTF') {\n          throw createNotSupportedError();\n        }\n      },\n\n      get positionX() {\n        return positionXGainNode.gain;\n      },\n\n      get positionY() {\n        return positionYGainNode.gain;\n      },\n\n      get positionZ() {\n        return positionZGainNode.gain;\n      },\n\n      get refDistance() {\n        return pannerNode.refDistance;\n      },\n\n      set refDistance(value) {\n        // Bug #129: Edge & Safari do not throw an error yet.\n        if (value < 0) {\n          throw new RangeError();\n        }\n\n        pannerNode.refDistance = value;\n      },\n\n      get rolloffFactor() {\n        return pannerNode.rolloffFactor;\n      },\n\n      set rolloffFactor(value) {\n        // Bug #130: Edge & Safari do not throw an error yet.\n        if (value < 0) {\n          throw new RangeError();\n        }\n\n        pannerNode.rolloffFactor = value;\n      },\n\n      addEventListener: function addEventListener() {\n        return inputGainNode.addEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      },\n      dispatchEvent: function dispatchEvent() {\n        return inputGainNode.dispatchEvent(arguments.length <= 0 ? undefined : arguments[0]);\n      },\n      removeEventListener: function removeEventListener() {\n        return inputGainNode.removeEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      }\n    };\n\n    if (coneInnerAngle !== nativePannerNodeFaker.coneInnerAngle) {\n      nativePannerNodeFaker.coneInnerAngle = coneInnerAngle;\n    }\n\n    if (coneOuterAngle !== nativePannerNodeFaker.coneOuterAngle) {\n      nativePannerNodeFaker.coneOuterAngle = coneOuterAngle;\n    }\n\n    if (coneOuterGain !== nativePannerNodeFaker.coneOuterGain) {\n      nativePannerNodeFaker.coneOuterGain = coneOuterGain;\n    }\n\n    if (distanceModel !== nativePannerNodeFaker.distanceModel) {\n      nativePannerNodeFaker.distanceModel = distanceModel;\n    }\n\n    if (maxDistance !== nativePannerNodeFaker.maxDistance) {\n      nativePannerNodeFaker.maxDistance = maxDistance;\n    }\n\n    if (orientationX !== nativePannerNodeFaker.orientationX.value) {\n      nativePannerNodeFaker.orientationX.value = orientationX;\n    }\n\n    if (orientationY !== nativePannerNodeFaker.orientationY.value) {\n      nativePannerNodeFaker.orientationY.value = orientationY;\n    }\n\n    if (orientationZ !== nativePannerNodeFaker.orientationZ.value) {\n      nativePannerNodeFaker.orientationZ.value = orientationZ;\n    }\n\n    if (panningModel !== nativePannerNodeFaker.panningModel) {\n      nativePannerNodeFaker.panningModel = panningModel;\n    }\n\n    if (positionX !== nativePannerNodeFaker.positionX.value) {\n      nativePannerNodeFaker.positionX.value = positionX;\n    }\n\n    if (positionY !== nativePannerNodeFaker.positionY.value) {\n      nativePannerNodeFaker.positionY.value = positionY;\n    }\n\n    if (positionZ !== nativePannerNodeFaker.positionZ.value) {\n      nativePannerNodeFaker.positionZ.value = positionZ;\n    }\n\n    if (refDistance !== nativePannerNodeFaker.refDistance) {\n      nativePannerNodeFaker.refDistance = refDistance;\n    }\n\n    if (rolloffFactor !== nativePannerNodeFaker.rolloffFactor) {\n      nativePannerNodeFaker.rolloffFactor = rolloffFactor;\n    }\n\n    var whenConnected = function whenConnected() {\n      inputGainNode.connect(pannerNode); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n      connectNativeAudioNodeToNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n      waveShaperNode.connect(orientationXGainNode).connect(channelMergerNode);\n      waveShaperNode.connect(orientationYGainNode).connect(channelMergerNode);\n      waveShaperNode.connect(orientationZGainNode).connect(channelMergerNode);\n      waveShaperNode.connect(positionXGainNode).connect(channelMergerNode);\n      waveShaperNode.connect(positionYGainNode).connect(channelMergerNode);\n      waveShaperNode.connect(positionZGainNode).connect(channelMergerNode);\n      channelMergerNode.connect(scriptProcessorNode);\n    };\n\n    var whenDisconnected = function whenDisconnected() {\n      inputGainNode.disconnect(pannerNode); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n      disconnectNativeAudioNodeFromNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n      waveShaperNode.disconnect(orientationXGainNode);\n      orientationXGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(orientationYGainNode);\n      orientationYGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(orientationZGainNode);\n      orientationZGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(positionXGainNode);\n      positionXGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(positionYGainNode);\n      positionYGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(positionZGainNode);\n      positionZGainNode.disconnect(channelMergerNode);\n      channelMergerNode.disconnect(scriptProcessorNode);\n    };\n\n    return monitorConnections(interceptConnections(nativePannerNodeFaker, pannerNode), whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/native-panner-node-faker-factory.js"],"names":["assignNativeAudioNodeOptions","interceptConnections","createNativePannerNodeFakerFactory","connectNativeAudioNodeToNativeAudioNode","createInvalidStateError","createNativeAudioNode","createNativeChannelMergerNode","createNativeGainNode","createNativeScriptProcessorNode","createNativeWaveShaperNode","createNotSupportedError","disconnectNativeAudioNodeFromNativeAudioNode","monitorConnections","nativeContext","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","orientationX","orientationY","orientationZ","panningModel","positionX","positionY","positionZ","refDistance","rolloffFactor","audioNodeOptions","pannerNode","ntvCntxt","createPanner","channelCount","channelCountMode","SINGLE_CHANNEL_OPTIONS","channelInterpretation","channelMergerNode","numberOfInputs","inputGainNode","gain","orientationXGainNode","orientationYGainNode","orientationZGainNode","positionXGainNode","positionYGainNode","positionZGainNode","scriptProcessorNode","waveShaperNode","curve","Float32Array","oversample","lastOrientation","lastPosition","onaudioprocess","inputBuffer","orientation","getChannelData","some","value","index","setOrientation","positon","setPosition","Object","defineProperty","get","nativePannerNodeFaker","bufferSize","undefined","context","inputs","RangeError","numberOfOutputs","addEventListener","dispatchEvent","removeEventListener","whenConnected","connect","whenDisconnected","disconnect"],"mappings":"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","sourcesContent":["import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativePannerNodeFakerFactory = (connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeAudioNode, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, monitorConnections) => {\n    return (nativeContext, { coneInnerAngle, coneOuterAngle, coneOuterGain, distanceModel, maxDistance, orientationX, orientationY, orientationZ, panningModel, positionX, positionY, positionZ, refDistance, rolloffFactor, ...audioNodeOptions }) => {\n        const pannerNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createPanner());\n        // Bug #125: Safari does not throw an error yet.\n        if (audioNodeOptions.channelCount > 2) {\n            throw createNotSupportedError();\n        }\n        // Bug #126: Safari does not throw an error yet.\n        if (audioNodeOptions.channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        assignNativeAudioNodeOptions(pannerNode, audioNodeOptions);\n        const SINGLE_CHANNEL_OPTIONS = {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete'\n        };\n        const channelMergerNode = createNativeChannelMergerNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, channelInterpretation: 'speakers', numberOfInputs: 6 });\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const orientationXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 1 });\n        const orientationYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const orientationZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 6, 0);\n        const waveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, curve: new Float32Array([1, 1]), oversample: 'none' });\n        let lastOrientation = [1, 0, 0];\n        let lastPosition = [0, 0, 0];\n        scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {\n            const orientation = [\n                inputBuffer.getChannelData(0)[0],\n                inputBuffer.getChannelData(1)[0],\n                inputBuffer.getChannelData(2)[0]\n            ];\n            if (orientation.some((value, index) => (value !== lastOrientation[index]))) {\n                pannerNode.setOrientation(...orientation); // tslint:disable-line:deprecation\n                lastOrientation = orientation;\n            }\n            const positon = [\n                inputBuffer.getChannelData(6)[0],\n                inputBuffer.getChannelData(7)[0],\n                inputBuffer.getChannelData(8)[0]\n            ];\n            if (positon.some((value, index) => (value !== lastPosition[index]))) {\n                pannerNode.setPosition(...positon); // tslint:disable-line:deprecation\n                lastPosition = positon;\n            }\n        };\n        Object.defineProperty(orientationYGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(orientationZGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionXGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionYGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionZGainNode.gain, 'defaultValue', { get: () => 0 });\n        const nativePannerNodeFaker = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return pannerNode.channelCount;\n            },\n            set channelCount(value) {\n                // Bug #125: Safari does not throw an error yet.\n                if (value > 2) {\n                    throw createNotSupportedError();\n                }\n                inputGainNode.channelCount = value;\n                pannerNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return pannerNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                // Bug #126: Safari does not throw an error yet.\n                if (value === 'max') {\n                    throw createNotSupportedError();\n                }\n                inputGainNode.channelCountMode = value;\n                pannerNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return pannerNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n                pannerNode.channelInterpretation = value;\n            },\n            get coneInnerAngle() {\n                return pannerNode.coneInnerAngle;\n            },\n            set coneInnerAngle(value) {\n                pannerNode.coneInnerAngle = value;\n            },\n            get coneOuterAngle() {\n                return pannerNode.coneOuterAngle;\n            },\n            set coneOuterAngle(value) {\n                pannerNode.coneOuterAngle = value;\n            },\n            get coneOuterGain() {\n                return pannerNode.coneOuterGain;\n            },\n            set coneOuterGain(value) {\n                // Bug #127: Edge & Safari do not throw an InvalidStateError yet.\n                if (value < 0 || value > 1) {\n                    throw createInvalidStateError();\n                }\n                pannerNode.coneOuterGain = value;\n            },\n            get context() {\n                return pannerNode.context;\n            },\n            get distanceModel() {\n                return pannerNode.distanceModel;\n            },\n            set distanceModel(value) {\n                pannerNode.distanceModel = value;\n            },\n            get inputs() {\n                return [inputGainNode];\n            },\n            get maxDistance() {\n                return pannerNode.maxDistance;\n            },\n            set maxDistance(value) {\n                // Bug #128: Edge & Safari do not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n                pannerNode.maxDistance = value;\n            },\n            get numberOfInputs() {\n                return pannerNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return pannerNode.numberOfOutputs;\n            },\n            get orientationX() {\n                return orientationXGainNode.gain;\n            },\n            get orientationY() {\n                return orientationYGainNode.gain;\n            },\n            get orientationZ() {\n                return orientationZGainNode.gain;\n            },\n            get panningModel() {\n                return pannerNode.panningModel;\n            },\n            set panningModel(value) {\n                pannerNode.panningModel = value;\n                // Bug #123: Edge does not support HRTF as panningModel.\n                if (pannerNode.panningModel !== value && value === 'HRTF') {\n                    throw createNotSupportedError();\n                }\n            },\n            get positionX() {\n                return positionXGainNode.gain;\n            },\n            get positionY() {\n                return positionYGainNode.gain;\n            },\n            get positionZ() {\n                return positionZGainNode.gain;\n            },\n            get refDistance() {\n                return pannerNode.refDistance;\n            },\n            set refDistance(value) {\n                // Bug #129: Edge & Safari do not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n                pannerNode.refDistance = value;\n            },\n            get rolloffFactor() {\n                return pannerNode.rolloffFactor;\n            },\n            set rolloffFactor(value) {\n                // Bug #130: Edge & Safari do not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n                pannerNode.rolloffFactor = value;\n            },\n            addEventListener(...args) {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        if (coneInnerAngle !== nativePannerNodeFaker.coneInnerAngle) {\n            nativePannerNodeFaker.coneInnerAngle = coneInnerAngle;\n        }\n        if (coneOuterAngle !== nativePannerNodeFaker.coneOuterAngle) {\n            nativePannerNodeFaker.coneOuterAngle = coneOuterAngle;\n        }\n        if (coneOuterGain !== nativePannerNodeFaker.coneOuterGain) {\n            nativePannerNodeFaker.coneOuterGain = coneOuterGain;\n        }\n        if (distanceModel !== nativePannerNodeFaker.distanceModel) {\n            nativePannerNodeFaker.distanceModel = distanceModel;\n        }\n        if (maxDistance !== nativePannerNodeFaker.maxDistance) {\n            nativePannerNodeFaker.maxDistance = maxDistance;\n        }\n        if (orientationX !== nativePannerNodeFaker.orientationX.value) {\n            nativePannerNodeFaker.orientationX.value = orientationX;\n        }\n        if (orientationY !== nativePannerNodeFaker.orientationY.value) {\n            nativePannerNodeFaker.orientationY.value = orientationY;\n        }\n        if (orientationZ !== nativePannerNodeFaker.orientationZ.value) {\n            nativePannerNodeFaker.orientationZ.value = orientationZ;\n        }\n        if (panningModel !== nativePannerNodeFaker.panningModel) {\n            nativePannerNodeFaker.panningModel = panningModel;\n        }\n        if (positionX !== nativePannerNodeFaker.positionX.value) {\n            nativePannerNodeFaker.positionX.value = positionX;\n        }\n        if (positionY !== nativePannerNodeFaker.positionY.value) {\n            nativePannerNodeFaker.positionY.value = positionY;\n        }\n        if (positionZ !== nativePannerNodeFaker.positionZ.value) {\n            nativePannerNodeFaker.positionZ.value = positionZ;\n        }\n        if (refDistance !== nativePannerNodeFaker.refDistance) {\n            nativePannerNodeFaker.refDistance = refDistance;\n        }\n        if (rolloffFactor !== nativePannerNodeFaker.rolloffFactor) {\n            nativePannerNodeFaker.rolloffFactor = rolloffFactor;\n        }\n        const whenConnected = () => {\n            inputGainNode.connect(pannerNode);\n            // Bug #119: Safari does not fully support the WaveShaperNode.\n            connectNativeAudioNodeToNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n            waveShaperNode\n                .connect(orientationXGainNode)\n                .connect(channelMergerNode);\n            waveShaperNode\n                .connect(orientationYGainNode)\n                .connect(channelMergerNode);\n            waveShaperNode\n                .connect(orientationZGainNode)\n                .connect(channelMergerNode);\n            waveShaperNode\n                .connect(positionXGainNode)\n                .connect(channelMergerNode);\n            waveShaperNode\n                .connect(positionYGainNode)\n                .connect(channelMergerNode);\n            waveShaperNode\n                .connect(positionZGainNode)\n                .connect(channelMergerNode);\n            channelMergerNode.connect(scriptProcessorNode);\n        };\n        const whenDisconnected = () => {\n            inputGainNode.disconnect(pannerNode);\n            // Bug #119: Safari does not fully support the WaveShaperNode.\n            disconnectNativeAudioNodeFromNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n            waveShaperNode.disconnect(orientationXGainNode);\n            orientationXGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(orientationYGainNode);\n            orientationYGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(orientationZGainNode);\n            orientationZGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(positionXGainNode);\n            positionXGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(positionYGainNode);\n            positionYGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(positionZGainNode);\n            positionZGainNode.disconnect(channelMergerNode);\n            channelMergerNode.disconnect(scriptProcessorNode);\n        };\n        return monitorConnections(interceptConnections(nativePannerNodeFaker, pannerNode), whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-panner-node-faker-factory.js.map"]},"metadata":{},"sourceType":"module"}