{"ast":null,"code":"import _regeneratorRuntime from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";/**\n * Fetch an AudioBuffer from a fetch response\n */export function decodeAudioBuffer(_x,_x2){return _decodeAudioBuffer.apply(this,arguments);}function _decodeAudioBuffer(){_decodeAudioBuffer=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(response,context){var arrayBuffer;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return response.arrayBuffer();case 2:arrayBuffer=_context.sent;return _context.abrupt(\"return\",decodeArrayBuffer(context,arrayBuffer));case 4:case\"end\":return _context.stop();}}},_callee);}));return _decodeAudioBuffer.apply(this,arguments);}function decodeArrayBuffer(ctx,buffer){return new Promise(function(resolve,reject){ctx.decodeAudioData(buffer,resolve,reject);});}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/packages/player/src/player/Loader/decodeAudioBuffer.ts"],"names":["decodeAudioBuffer","response","context","arrayBuffer","decodeArrayBuffer","ctx","buffer","Promise","resolve","reject","decodeAudioData"],"mappings":"qTAEA;;GAGA,eAAsBA,CAAAA,iBAAtB,0D,yGAAO,iBACLC,QADK,CAELC,OAFK,wJAIqBD,CAAAA,QAAQ,CAACE,WAAT,EAJrB,QAICA,WAJD,+CAKEC,iBAAiB,CAACF,OAAD,CAAUC,WAAV,CALnB,wD,oDAQP,QAASC,CAAAA,iBAAT,CACEC,GADF,CAEEC,MAFF,CAGwB,CACtB,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtCJ,GAAG,CAACK,eAAJ,CAAoBJ,MAApB,CAA4BE,OAA5B,CAAqCC,MAArC,EACD,CAFM,CAAP,CAGD","sourcesContent":["import { IAudioContext } from \"standardized-audio-context\";\n\n/**\n * Fetch an AudioBuffer from a fetch response\n */\nexport async function decodeAudioBuffer(\n  response: Response,\n  context: IAudioContext\n) {\n  const arrayBuffer = await response.arrayBuffer();\n  return decodeArrayBuffer(context, arrayBuffer);\n}\n\nfunction decodeArrayBuffer(\n  ctx: IAudioContext,\n  buffer: ArrayBuffer\n): Promise<AudioBuffer> {\n  return new Promise((resolve, reject) => {\n    ctx.decodeAudioData(buffer, resolve, reject);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}