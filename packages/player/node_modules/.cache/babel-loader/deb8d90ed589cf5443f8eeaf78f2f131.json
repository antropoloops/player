{"ast":null,"code":"export default function (topology) {\n  var oldObjects = topology.objects,\n      newObjects = {},\n      oldArcs = topology.arcs,\n      oldArcsLength = oldArcs.length,\n      oldIndex = -1,\n      newIndexByOldIndex = new Array(oldArcsLength),\n      newArcsLength = 0,\n      newArcs,\n      newIndex = -1,\n      key;\n\n  function scanGeometry(input) {\n    switch (input.type) {\n      case \"GeometryCollection\":\n        input.geometries.forEach(scanGeometry);\n        break;\n\n      case \"LineString\":\n        scanArcs(input.arcs);\n        break;\n\n      case \"MultiLineString\":\n        input.arcs.forEach(scanArcs);\n        break;\n\n      case \"Polygon\":\n        input.arcs.forEach(scanArcs);\n        break;\n\n      case \"MultiPolygon\":\n        input.arcs.forEach(scanMultiArcs);\n        break;\n    }\n  }\n\n  function scanArc(index) {\n    if (index < 0) index = ~index;\n    if (!newIndexByOldIndex[index]) newIndexByOldIndex[index] = 1, ++newArcsLength;\n  }\n\n  function scanArcs(arcs) {\n    arcs.forEach(scanArc);\n  }\n\n  function scanMultiArcs(arcs) {\n    arcs.forEach(scanArcs);\n  }\n\n  function reindexGeometry(input) {\n    var output;\n\n    switch (input.type) {\n      case \"GeometryCollection\":\n        output = {\n          type: \"GeometryCollection\",\n          geometries: input.geometries.map(reindexGeometry)\n        };\n        break;\n\n      case \"LineString\":\n        output = {\n          type: \"LineString\",\n          arcs: reindexArcs(input.arcs)\n        };\n        break;\n\n      case \"MultiLineString\":\n        output = {\n          type: \"MultiLineString\",\n          arcs: input.arcs.map(reindexArcs)\n        };\n        break;\n\n      case \"Polygon\":\n        output = {\n          type: \"Polygon\",\n          arcs: input.arcs.map(reindexArcs)\n        };\n        break;\n\n      case \"MultiPolygon\":\n        output = {\n          type: \"MultiPolygon\",\n          arcs: input.arcs.map(reindexMultiArcs)\n        };\n        break;\n\n      default:\n        return input;\n    }\n\n    if (input.id != null) output.id = input.id;\n    if (input.bbox != null) output.bbox = input.bbox;\n    if (input.properties != null) output.properties = input.properties;\n    return output;\n  }\n\n  function reindexArc(oldIndex) {\n    return oldIndex < 0 ? ~newIndexByOldIndex[~oldIndex] : newIndexByOldIndex[oldIndex];\n  }\n\n  function reindexArcs(arcs) {\n    return arcs.map(reindexArc);\n  }\n\n  function reindexMultiArcs(arcs) {\n    return arcs.map(reindexArcs);\n  }\n\n  for (key in oldObjects) {\n    scanGeometry(oldObjects[key]);\n  }\n\n  newArcs = new Array(newArcsLength);\n\n  while (++oldIndex < oldArcsLength) {\n    if (newIndexByOldIndex[oldIndex]) {\n      newIndexByOldIndex[oldIndex] = ++newIndex;\n      newArcs[newIndex] = oldArcs[oldIndex];\n    }\n  }\n\n  for (key in oldObjects) {\n    newObjects[key] = reindexGeometry(oldObjects[key]);\n  }\n\n  return {\n    type: \"Topology\",\n    bbox: topology.bbox,\n    transform: topology.transform,\n    objects: newObjects,\n    arcs: newArcs\n  };\n}","map":null,"metadata":{},"sourceType":"module"}