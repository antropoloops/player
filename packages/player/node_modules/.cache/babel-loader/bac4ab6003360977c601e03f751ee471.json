{"ast":null,"code":"import debug from \"debug\";\nimport { ControlStateManager } from \"./ControlStateManager\";\nimport { KeyboardControler } from \"./KeyboardControler\";\nimport { TimeManager } from \"./TimeManager\";\nconst log = debug(\"atpls:control\");\n\n/**\n * Controls the playing state of clips and tracks\n *\n * It uses a listener for side effects (using commands) and state changees\n */\nexport class AudiosetControl {\n  constructor(audioset, listener) {\n    this.listener = listener;\n    this.keyboard = void 0;\n    this.commands = [];\n    this.manager = new ControlStateManager();\n    this.time = new TimeManager();\n    log(\"create control\");\n    this.keyboard = new KeyboardControler(audioset, this);\n    audioset.clips.forEach(clip => this.manager.addClip(clip));\n    audioset.tracks.forEach(track => this.manager.addTrack(track));\n  }\n\n  toggleClip(clipId, time) {\n    const clipState = this.manager.getClipState(clipId);\n\n    if (!clipState) {\n      return;\n    } else if (clipState.state === \"stopped\") {\n      this.startClip(clipId, time);\n    } else if (clipState.state === \"playing\") {\n      this.stopClip(clipId, time);\n    }\n  }\n  /**\n   * Start a clip\n   * @param clipId\n   */\n\n\n  startClip(clipId, time) {\n    log(\"start clip %s %o\", clipId, time);\n    const clipState = this.manager.getClipState(clipId);\n\n    if (!clipState || clipState.state === \"playing\") {\n      return;\n    }\n\n    const trackId = this.manager.getTrackIdOfClip(clipId);\n    const sameTrackClipIds = this.manager.getClipIdsOfTrack(trackId);\n    sameTrackClipIds.forEach(trackClipId => this.stopClipCommand(trackClipId, time));\n    this.startTrackCommand(trackId, time);\n    this.startClipCommand(clipId, time);\n    this.sendCommandsAndFireStateChange();\n  }\n  /**\n   * Stops a clip\n   */\n\n\n  stopClip(clipId, time) {\n    const clipState = this.manager.getClipState(clipId);\n\n    if (!clipState || clipState.state === \"stopped\") {\n      return;\n    }\n\n    const trackId = this.manager.getTrackIdOfClip(clipId);\n    this.stopClipCommand(clipId, time);\n    this.stopTrackCommand(trackId, time);\n    this.sendCommandsAndFireStateChange();\n  }\n  /**\n   * Stops all clips\n   */\n\n\n  stopAll(time) {\n    this.manager.getAllClipIds().forEach(clipId => this.stopClipCommand(clipId, time));\n    this.manager.getAllTrackIds().forEach(trackId => this.stopTrackCommand(trackId, time));\n    this.sendCommandsAndFireStateChange();\n  }\n\n  getState() {\n    return this.manager.getState();\n  } //// PRIVATE ////\n\n\n  sendCommandsAndFireStateChange() {\n    this.commands.forEach(command => {\n      this.listener.onControlCommand(command);\n    });\n    this.commands = [];\n    this.listener.onControlStateChanged(this.getState());\n  }\n\n  startClipCommand(clipId, time) {\n    const clipState = this.manager.getClipState(clipId);\n\n    if (clipState.state === \"playing\") {\n      return;\n    }\n\n    this.manager.setClipState(clipId, {\n      state: \"playing\"\n    });\n    this.commands.push({\n      command: \"startClip\",\n      clipId,\n      time\n    });\n  }\n\n  stopClipCommand(clipId, time) {\n    const clipState = this.manager.getClipState(clipId);\n\n    if (clipState.state === \"stopped\") {\n      return;\n    }\n\n    this.manager.setClipState(clipId, {\n      state: \"stopped\"\n    });\n    this.commands.push({\n      command: \"stopClip\",\n      clipId,\n      time\n    });\n  }\n\n  startTrackCommand(trackId, time) {\n    const trackState = this.manager.getTrackState(trackId);\n\n    if (trackState.state === \"playing\") {\n      return;\n    }\n\n    this.manager.setTrackState(trackId, {\n      state: \"playing\",\n      volume: trackState.volume\n    });\n    this.commands.push({\n      command: \"startTrack\",\n      trackId,\n      time\n    });\n  }\n\n  stopTrackCommand(trackId, time) {\n    const trackState = this.manager.getTrackState(trackId);\n\n    if (trackState.state === \"stopped\") {\n      return;\n    }\n\n    this.manager.setTrackState(trackId, {\n      state: \"stopped\",\n      volume: trackState.volume\n    });\n    this.commands.push({\n      command: \"stopTrack\",\n      trackId,\n      time\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/Control/AudiosetControl.ts"],"names":["debug","ControlStateManager","KeyboardControler","TimeManager","log","AudiosetControl","constructor","audioset","listener","keyboard","commands","manager","time","clips","forEach","clip","addClip","tracks","track","addTrack","toggleClip","clipId","clipState","getClipState","state","startClip","stopClip","trackId","getTrackIdOfClip","sameTrackClipIds","getClipIdsOfTrack","trackClipId","stopClipCommand","startTrackCommand","startClipCommand","sendCommandsAndFireStateChange","stopTrackCommand","stopAll","getAllClipIds","getAllTrackIds","getState","command","onControlCommand","onControlStateChanged","setClipState","push","trackState","getTrackState","setTrackState","volume"],"mappings":"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","sourcesContent":["import debug from \"debug\";\nimport { Audioset, Clip } from \"../../audioset\";\nimport { ControlCommand } from \"./ControlCommand\";\nimport { ControlState } from \"./ControlState\";\nimport { ControlStateManager } from \"./ControlStateManager\";\nimport { KeyboardControler } from \"./KeyboardControler\";\nimport { TimeManager } from \"./TimeManager\";\n\nconst log = debug(\"atpls:control\");\n\nexport interface ControlListener {\n  onControlStateChanged: (state: ControlState) => void;\n  onControlCommand: (command: ControlCommand) => void;\n}\n\nexport interface PlayerControl {\n  readonly keyboard: KeyboardControler;\n  getState(): ControlState;\n  toggleClip(clipId: string, time: number): void;\n  stopClip(clipId: string, time: number): void;\n  startClip(clipId: string, time: number): void;\n  stopAll(time: number): void;\n}\n\n/**\n * Controls the playing state of clips and tracks\n *\n * It uses a listener for side effects (using commands) and state changees\n */\nexport class AudiosetControl implements PlayerControl {\n  public readonly keyboard: KeyboardControler;\n  private commands: ControlCommand[] = [];\n  private manager = new ControlStateManager();\n  private time = new TimeManager();\n\n  constructor(audioset: Audioset, private listener: ControlListener) {\n    log(\"create control\");\n    this.keyboard = new KeyboardControler(audioset, this);\n    audioset.clips.forEach((clip: Clip) => this.manager.addClip(clip));\n    audioset.tracks.forEach(track => this.manager.addTrack(track));\n  }\n\n  public toggleClip(clipId: string, time: number) {\n    const clipState = this.manager.getClipState(clipId);\n    if (!clipState) {\n      return;\n    } else if (clipState.state === \"stopped\") {\n      this.startClip(clipId, time);\n    } else if (clipState.state === \"playing\") {\n      this.stopClip(clipId, time);\n    }\n  }\n\n  /**\n   * Start a clip\n   * @param clipId\n   */\n  public startClip(clipId: string, time: number) {\n    log(\"start clip %s %o\", clipId, time);\n    const clipState = this.manager.getClipState(clipId);\n    if (!clipState || clipState.state === \"playing\") {\n      return;\n    }\n\n    const trackId = this.manager.getTrackIdOfClip(clipId);\n    const sameTrackClipIds = this.manager.getClipIdsOfTrack(trackId);\n    sameTrackClipIds.forEach(trackClipId =>\n      this.stopClipCommand(trackClipId, time),\n    );\n    this.startTrackCommand(trackId, time);\n    this.startClipCommand(clipId, time);\n    this.sendCommandsAndFireStateChange();\n  }\n\n  /**\n   * Stops a clip\n   */\n  public stopClip(clipId: string, time: number) {\n    const clipState = this.manager.getClipState(clipId);\n    if (!clipState || clipState.state === \"stopped\") {\n      return;\n    }\n\n    const trackId = this.manager.getTrackIdOfClip(clipId);\n\n    this.stopClipCommand(clipId, time);\n    this.stopTrackCommand(trackId, time);\n    this.sendCommandsAndFireStateChange();\n  }\n\n  /**\n   * Stops all clips\n   */\n  public stopAll(time: number) {\n    this.manager\n      .getAllClipIds()\n      .forEach(clipId => this.stopClipCommand(clipId, time));\n    this.manager\n      .getAllTrackIds()\n      .forEach(trackId => this.stopTrackCommand(trackId, time));\n    this.sendCommandsAndFireStateChange();\n  }\n\n  public getState() {\n    return this.manager.getState();\n  }\n\n  //// PRIVATE ////\n  private sendCommandsAndFireStateChange() {\n    this.commands.forEach(command => {\n      this.listener.onControlCommand(command);\n    });\n    this.commands = [];\n\n    this.listener.onControlStateChanged(this.getState());\n  }\n\n  private startClipCommand(clipId: string, time: number) {\n    const clipState = this.manager.getClipState(clipId);\n    if (clipState.state === \"playing\") {\n      return;\n    }\n\n    this.manager.setClipState(clipId, { state: \"playing\" });\n    this.commands.push({ command: \"startClip\", clipId, time });\n  }\n\n  private stopClipCommand(clipId: string, time: number) {\n    const clipState = this.manager.getClipState(clipId);\n    if (clipState.state === \"stopped\") {\n      return;\n    }\n\n    this.manager.setClipState(clipId, { state: \"stopped\" });\n    this.commands.push({ command: \"stopClip\", clipId, time });\n  }\n\n  private startTrackCommand(trackId: string, time: number) {\n    const trackState = this.manager.getTrackState(trackId);\n    if (trackState.state === \"playing\") {\n      return;\n    }\n\n    this.manager.setTrackState(trackId, {\n      state: \"playing\",\n      volume: trackState.volume,\n    });\n    this.commands.push({ command: \"startTrack\", trackId, time });\n  }\n\n  private stopTrackCommand(trackId: string, time: number) {\n    const trackState = this.manager.getTrackState(trackId);\n    if (trackState.state === \"stopped\") {\n      return;\n    }\n\n    this.manager.setTrackState(trackId, {\n      state: \"stopped\",\n      volume: trackState.volume,\n    });\n    this.commands.push({ command: \"stopTrack\", trackId, time });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}