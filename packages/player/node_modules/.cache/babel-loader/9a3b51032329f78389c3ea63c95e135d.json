{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createAnalyserNodeRendererFactory = function createAnalyserNodeRendererFactory(createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeAnalyserNodes = new WeakMap();\n\n    var createAnalyserNode = function createAnalyserNode(proxy, nativeOfflineAudioContext, trace) {\n      var nativeAnalyserNode, nativeAnalyserNodeIsOwnedByContext, options;\n      return _regeneratorRuntime.async(function createAnalyserNode$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              nativeAnalyserNode = getNativeAudioNode(proxy); // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n              nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);\n\n              if (!nativeAnalyserNodeIsOwnedByContext) {\n                options = {\n                  channelCount: nativeAnalyserNode.channelCount,\n                  channelCountMode: nativeAnalyserNode.channelCountMode,\n                  channelInterpretation: nativeAnalyserNode.channelInterpretation,\n                  fftSize: nativeAnalyserNode.fftSize,\n                  maxDecibels: nativeAnalyserNode.maxDecibels,\n                  minDecibels: nativeAnalyserNode.minDecibels,\n                  smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant\n                };\n                nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);\n              }\n\n              renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode, trace));\n\n            case 6:\n              return _context.abrupt(\"return\", nativeAnalyserNode);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext, trace) {\n        var renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAnalyserNode !== undefined) {\n          return Promise.resolve(renderedNativeAnalyserNode);\n        }\n\n        return createAnalyserNode(proxy, nativeOfflineAudioContext, trace);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/analyser-node-renderer-factory.js"],"names":["isOwnedByContext","createAnalyserNodeRendererFactory","createNativeAnalyserNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeAnalyserNodes","WeakMap","createAnalyserNode","proxy","nativeOfflineAudioContext","trace","nativeAnalyserNode","nativeAnalyserNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","fftSize","maxDecibels","minDecibels","smoothingTimeConstant","set","render","renderedNativeAnalyserNode","get","undefined","Promise","resolve"],"mappings":";AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AACA,OAAO,IAAMC,iCAAiC,GAAG,SAApCA,iCAAoC,CAACC,wBAAD,EAA2BC,kBAA3B,EAA+CC,uBAA/C,EAA2E;AACxH,SAAO,YAAM;AACT,QAAMC,2BAA2B,GAAG,IAAIC,OAAJ,EAApC;;AACA,QAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAOC,KAAP,EAAcC,yBAAd,EAAyCC,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBC,cAAAA,kBADmB,GACER,kBAAkB,CAACK,KAAD,CADpB,EAEvB;;AACMI,cAAAA,kCAHiB,GAGoBZ,gBAAgB,CAACW,kBAAD,EAAqBF,yBAArB,CAHpC;;AAIvB,kBAAI,CAACG,kCAAL,EAAyC;AAC/BC,gBAAAA,OAD+B,GACrB;AACZC,kBAAAA,YAAY,EAAEH,kBAAkB,CAACG,YADrB;AAEZC,kBAAAA,gBAAgB,EAAEJ,kBAAkB,CAACI,gBAFzB;AAGZC,kBAAAA,qBAAqB,EAAEL,kBAAkB,CAACK,qBAH9B;AAIZC,kBAAAA,OAAO,EAAEN,kBAAkB,CAACM,OAJhB;AAKZC,kBAAAA,WAAW,EAAEP,kBAAkB,CAACO,WALpB;AAMZC,kBAAAA,WAAW,EAAER,kBAAkB,CAACQ,WANpB;AAOZC,kBAAAA,qBAAqB,EAAET,kBAAkB,CAACS;AAP9B,iBADqB;AAUrCT,gBAAAA,kBAAkB,GAAGT,wBAAwB,CAACO,yBAAD,EAA4BI,OAA5B,CAA7C;AACH;;AACDR,cAAAA,2BAA2B,CAACgB,GAA5B,CAAgCZ,yBAAhC,EAA2DE,kBAA3D;AAhBuB;AAAA,+CAiBjBP,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCE,kBAAnC,EAAuDD,KAAvD,CAjBN;;AAAA;AAAA,+CAkBhBC,kBAlBgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA3B;;AAoBA,WAAO;AACHW,MAAAA,MADG,kBACId,KADJ,EACWC,yBADX,EACsCC,KADtC,EAC6C;AAC5C,YAAMa,0BAA0B,GAAGlB,2BAA2B,CAACmB,GAA5B,CAAgCf,yBAAhC,CAAnC;;AACA,YAAIc,0BAA0B,KAAKE,SAAnC,EAA8C;AAC1C,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,0BAAhB,CAAP;AACH;;AACD,eAAOhB,kBAAkB,CAACC,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,CAAzB;AACH;AAPE,KAAP;AASH,GA/BD;AAgCH,CAjCM","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAnalyserNodeRendererFactory = (createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeAnalyserNodes = new WeakMap();\n        const createAnalyserNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeAnalyserNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);\n            if (!nativeAnalyserNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAnalyserNode.channelCount,\n                    channelCountMode: nativeAnalyserNode.channelCountMode,\n                    channelInterpretation: nativeAnalyserNode.channelInterpretation,\n                    fftSize: nativeAnalyserNode.fftSize,\n                    maxDecibels: nativeAnalyserNode.maxDecibels,\n                    minDecibels: nativeAnalyserNode.minDecibels,\n                    smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant\n                };\n                nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode, trace);\n            return nativeAnalyserNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAnalyserNode !== undefined) {\n                    return Promise.resolve(renderedNativeAnalyserNode);\n                }\n                return createAnalyserNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/analyser-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}