{"ast":null,"code":"import React,{useEffect}from\"react\";import{getAudioContext,player}from\"../../player\";import{Header}from\"../shared/Header\";import{Scroll}from\"../shared/Scroll\";import{useDeviceType}from\"../useDeviceType\";import{Controller}from\"./Controller\";import{Footer}from\"./Footer\";import Preview from\"./Preview\";import{useResourceLoadingStatus}from\"./useResourceLoadingStatus\";import{Visuals}from\"./Visuals\";export var Player=function Player(_ref){var audioset=_ref.audioset;var resourceStatus=useResourceLoadingStatus();var isReady=resourceStatus.status===\"ready\";var _useDeviceType=useDeviceType(),isDesktop=_useDeviceType.isDesktop;var isVisual=isDesktop||isReady;var handleStart=function handleStart(){return getAudioContext().then(function(){return player.resources.load();}).then(function(){return player.control.keyboard.setActive(true);});};// useAutoStartAudio(isReady, audioset, handleStart);\nreturn React.createElement(\"div\",{className:\"App Player\"},React.createElement(Header,{meta:audioset.meta}),React.createElement(Scroll,null,React.createElement(\"div\",{className:\"content\"},isReady?React.createElement(Controller,{audioset:audioset}):React.createElement(Preview,{audioset:audioset,resourceStatus:resourceStatus,onStart:handleStart}))),isReady&&React.createElement(Footer,null),isVisual&&React.createElement(\"div\",{className:\"visuals\"},React.createElement(Visuals,{audioset:audioset})));};/**\n * Start audio when clicking in window\n */export function useAutoStartAudio(isReady,audioset,startAudio){useEffect(function(){if(!isReady&&audioset.id){var onClick=function onClick(){startAudio();removeListener();};var removeListener=function removeListener(){window.removeEventListener(\"click\",onClick);};window.addEventListener(\"click\",onClick);return removeListener;}},[audioset.id,isReady,startAudio]);return startAudio;}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/Player.tsx"],"names":["React","useEffect","getAudioContext","player","Header","Scroll","useDeviceType","Controller","Footer","Preview","useResourceLoadingStatus","Visuals","Player","audioset","resourceStatus","isReady","status","isDesktop","isVisual","handleStart","then","resources","load","control","keyboard","setActive","meta","useAutoStartAudio","startAudio","id","onClick","removeListener","window","removeEventListener","addEventListener"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CAEA,OAASC,eAAT,CAA0BC,MAA1B,KAAwC,cAAxC,CACA,OAASC,MAAT,KAAuB,kBAAvB,CACA,OAASC,MAAT,KAAuB,kBAAvB,CACA,OAASC,aAAT,KAA8B,kBAA9B,CACA,OAASC,UAAT,KAA2B,cAA3B,CACA,OAASC,MAAT,KAAuB,UAAvB,CACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CACA,OAASC,wBAAT,KAAyC,4BAAzC,CACA,OAASC,OAAT,KAAwB,WAAxB,CAMA,MAAO,IAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,MAA+B,IAA5BC,CAAAA,QAA4B,MAA5BA,QAA4B,CACnD,GAAMC,CAAAA,cAAc,CAAGJ,wBAAwB,EAA/C,CACA,GAAMK,CAAAA,OAAO,CAAGD,cAAc,CAACE,MAAf,GAA0B,OAA1C,CAFmD,mBAG7BV,aAAa,EAHgB,CAG3CW,SAH2C,gBAG3CA,SAH2C,CAKnD,GAAMC,CAAAA,QAAQ,CAAGD,SAAS,EAAIF,OAA9B,CAEA,GAAMI,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,SAClBjB,CAAAA,eAAe,GACZkB,IADH,CACQ,iBAAMjB,CAAAA,MAAM,CAACkB,SAAP,CAAiBC,IAAjB,EAAN,EADR,EAEGF,IAFH,CAEQ,iBAAMjB,CAAAA,MAAM,CAACoB,OAAP,CAAeC,QAAf,CAAwBC,SAAxB,CAAkC,IAAlC,CAAN,EAFR,CADkB,EAApB,CAKA;AAEA,MACE,4BAAK,SAAS,CAAC,YAAf,EACE,oBAAC,MAAD,EAAQ,IAAI,CAAEZ,QAAQ,CAACa,IAAvB,EADF,CAEE,oBAAC,MAAD,MACE,2BAAK,SAAS,CAAC,SAAf,EACGX,OAAO,CACN,oBAAC,UAAD,EAAY,QAAQ,CAAEF,QAAtB,EADM,CAGN,oBAAC,OAAD,EACE,QAAQ,CAAEA,QADZ,CAEE,cAAc,CAAEC,cAFlB,CAGE,OAAO,CAAEK,WAHX,EAJJ,CADF,CAFF,CAeGJ,OAAO,EAAI,oBAAC,MAAD,MAfd,CAgBGG,QAAQ,EACP,2BAAK,SAAS,CAAC,SAAf,EAA0B,oBAAC,OAAD,EAAS,QAAQ,CAAEL,QAAnB,EAA1B,CAjBJ,CADF,CAsBD,CApCM,CAsCP;;GAGA,MAAO,SAASc,CAAAA,iBAAT,CACLZ,OADK,CAELF,QAFK,CAGLe,UAHK,CAIL,CACA3B,SAAS,CAAC,UAAM,CACd,GAAI,CAACc,OAAD,EAAYF,QAAQ,CAACgB,EAAzB,CAA6B,CAC3B,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CACpBF,UAAU,GACVG,cAAc,GACf,CAHD,CAIA,GAAMA,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAC3BC,MAAM,CAACC,mBAAP,CAA2B,OAA3B,CAAoCH,OAApC,EACD,CAFD,CAGAE,MAAM,CAACE,gBAAP,CAAwB,OAAxB,CAAiCJ,OAAjC,EACA,MAAOC,CAAAA,cAAP,CACD,CACF,CAZQ,CAYN,CAAClB,QAAQ,CAACgB,EAAV,CAAcd,OAAd,CAAuBa,UAAvB,CAZM,CAAT,CAcA,MAAOA,CAAAA,UAAP,CACD","sourcesContent":["import React, { useEffect } from \"react\";\nimport { Audioset } from \"../../audioset\";\nimport { getAudioContext, player } from \"../../player\";\nimport { Header } from \"../shared/Header\";\nimport { Scroll } from \"../shared/Scroll\";\nimport { useDeviceType } from \"../useDeviceType\";\nimport { Controller } from \"./Controller\";\nimport { Footer } from \"./Footer\";\nimport Preview from \"./Preview\";\nimport { useResourceLoadingStatus } from \"./useResourceLoadingStatus\";\nimport { Visuals } from \"./Visuals\";\n\nexport interface PlayerProps {\n  audioset: Audioset;\n}\n\nexport const Player = ({ audioset }: PlayerProps) => {\n  const resourceStatus = useResourceLoadingStatus();\n  const isReady = resourceStatus.status === \"ready\";\n  const { isDesktop } = useDeviceType();\n\n  const isVisual = isDesktop || isReady;\n\n  const handleStart = () =>\n    getAudioContext()\n      .then(() => player.resources.load())\n      .then(() => player.control.keyboard.setActive(true));\n\n  // useAutoStartAudio(isReady, audioset, handleStart);\n\n  return (\n    <div className=\"App Player\">\n      <Header meta={audioset.meta} />\n      <Scroll>\n        <div className=\"content\">\n          {isReady ? (\n            <Controller audioset={audioset} />\n          ) : (\n            <Preview\n              audioset={audioset}\n              resourceStatus={resourceStatus}\n              onStart={handleStart}\n            />\n          )}\n        </div>\n      </Scroll>\n      {isReady && <Footer />}\n      {isVisual && (\n        <div className=\"visuals\">{<Visuals audioset={audioset} />}</div>\n      )}\n    </div>\n  );\n};\n\n/**\n * Start audio when clicking in window\n */\nexport function useAutoStartAudio(\n  isReady: boolean,\n  audioset: Audioset,\n  startAudio: () => void,\n) {\n  useEffect(() => {\n    if (!isReady && audioset.id) {\n      const onClick = () => {\n        startAudio();\n        removeListener();\n      };\n      const removeListener = () => {\n        window.removeEventListener(\"click\", onClick);\n      };\n      window.addEventListener(\"click\", onClick);\n      return removeListener;\n    }\n  }, [audioset.id, isReady, startAudio]);\n\n  return startAudio;\n}\n"]},"metadata":{},"sourceType":"module"}