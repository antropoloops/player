{"ast":null,"code":"import { getCoverSize, getHorizontalPadding, getVerticalPadding, getInfoHeight } from \"./dimensions\";\nexport default function drawAlbum(el, width, clip) {\n  const trackNumber = clip.trackNum;\n  const imageUrl = clip.resources.cover.small;\n  const country = clip.country;\n  const trackColor = clip.color;\n  const album = el.append(\"g\");\n  const coverSize = getCoverSize(width);\n  const horizontalPadding = getHorizontalPadding(width);\n  const verticalPadding = getVerticalPadding(width);\n  const infoHeight = getInfoHeight(width);\n  const fontSize = \"1.1vw\";\n  album.append(\"svg:image\").attr(\"width\", coverSize).attr(\"height\", coverSize).attr(\"x\", trackNumber * coverSize).attr(\"y\", 0).style(\"stroke\", \"white\").attr(\"xlink:href\", imageUrl); // Draw country rectangle\n\n  album.append(\"rect\").attr(\"width\", coverSize).attr(\"height\", infoHeight).attr(\"x\", trackNumber * coverSize).attr(\"y\", coverSize + verticalPadding).style(\"fill\", trackColor); // Draw country text\n\n  const countryTextId = \"countryText\" + trackNumber;\n  const countryText = album.append(\"text\").attr(\"id\", countryTextId).attr(\"x\", trackNumber * coverSize + horizontalPadding).attr(\"y\", coverSize + verticalPadding + infoHeight / 2).attr(\"dy\", \"0.35em\").style(\"font-size\", fontSize).text(country); // Trucate text larger than coverSize\n\n  wrap(countryText, countryTextId, coverSize, horizontalPadding);\n  return album;\n}\n\nfunction wrap(textElement, textId, coverSize, horizontalPadding) {\n  // FIXME: don't use document\n  const el = document.getElementById(textId);\n  if (!el) return;\n  const danger = el;\n  let textLength = danger.getBBox().width;\n  let text = textElement.text();\n\n  while (textLength > coverSize - horizontalPadding * 2 && text.length > 0) {\n    text = text.slice(0, -1);\n    textElement.text(text + \"...\");\n    textLength = danger.getBBox().width;\n  }\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/visuals/drawAlbum.ts"],"names":["getCoverSize","getHorizontalPadding","getVerticalPadding","getInfoHeight","drawAlbum","el","width","clip","trackNumber","trackNum","imageUrl","resources","cover","small","country","trackColor","color","album","append","coverSize","horizontalPadding","verticalPadding","infoHeight","fontSize","attr","style","countryTextId","countryText","text","wrap","textElement","textId","document","getElementById","danger","textLength","getBBox","length","slice"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,oBAAvB,EAA6CC,kBAA7C,EAAiEC,aAAjE,QAAsF,cAAtF;AAKA,eAAe,SAASC,SAAT,CAAmBC,EAAnB,EAAoCC,KAApC,EAAmDC,IAAnD,EAA+D;AAC5E,QAAMC,WAAW,GAAGD,IAAI,CAACE,QAAzB;AACA,QAAMC,QAAQ,GAAGH,IAAI,CAACI,SAAL,CAAeC,KAAf,CAAqBC,KAAtC;AACA,QAAMC,OAAO,GAAGP,IAAI,CAACO,OAArB;AACA,QAAMC,UAAU,GAAGR,IAAI,CAACS,KAAxB;AACA,QAAMC,KAAK,GAAGZ,EAAE,CAACa,MAAH,CAAU,GAAV,CAAd;AACA,QAAMC,SAAS,GAAGnB,YAAY,CAACM,KAAD,CAA9B;AACA,QAAMc,iBAAiB,GAAGnB,oBAAoB,CAACK,KAAD,CAA9C;AACA,QAAMe,eAAe,GAAGnB,kBAAkB,CAACI,KAAD,CAA1C;AACA,QAAMgB,UAAU,GAAGnB,aAAa,CAACG,KAAD,CAAhC;AACA,QAAMiB,QAAQ,GAAG,OAAjB;AAEAN,EAAAA,KAAK,CACFC,MADH,CACU,WADV,EAEGM,IAFH,CAEQ,OAFR,EAEiBL,SAFjB,EAGGK,IAHH,CAGQ,QAHR,EAGkBL,SAHlB,EAIGK,IAJH,CAIQ,GAJR,EAIahB,WAAW,GAAGW,SAJ3B,EAKGK,IALH,CAKQ,GALR,EAKa,CALb,EAMGC,KANH,CAMS,QANT,EAMmB,OANnB,EAOGD,IAPH,CAOQ,YAPR,EAOsBd,QAPtB,EAZ4E,CAqB5E;;AACAO,EAAAA,KAAK,CACFC,MADH,CACU,MADV,EAEGM,IAFH,CAEQ,OAFR,EAEiBL,SAFjB,EAGGK,IAHH,CAGQ,QAHR,EAGkBF,UAHlB,EAIGE,IAJH,CAIQ,GAJR,EAIahB,WAAW,GAAGW,SAJ3B,EAKGK,IALH,CAKQ,GALR,EAKaL,SAAS,GAAGE,eALzB,EAMGI,KANH,CAMS,MANT,EAMiBV,UANjB,EAtB4E,CA8B5E;;AACA,QAAMW,aAAa,GAAG,gBAAgBlB,WAAtC;AACA,QAAMmB,WAAgE,GAAGV,KAAK,CAC3EC,MADsE,CAC/D,MAD+D,EAEtEM,IAFsE,CAEjE,IAFiE,EAE3DE,aAF2D,EAGtEF,IAHsE,CAGjE,GAHiE,EAG5DhB,WAAW,GAAGW,SAAd,GAA0BC,iBAHkC,EAItEI,IAJsE,CAIjE,GAJiE,EAI5DL,SAAS,GAAGE,eAAZ,GAA8BC,UAAU,GAAG,CAJiB,EAKtEE,IALsE,CAKjE,IALiE,EAK3D,QAL2D,EAMtEC,KANsE,CAMhE,WANgE,EAMnDF,QANmD,EAOtEK,IAPsE,CAOjEd,OAPiE,CAAzE,CAhC4E,CAyC5E;;AACAe,EAAAA,IAAI,CAACF,WAAD,EAAcD,aAAd,EAA6BP,SAA7B,EAAwCC,iBAAxC,CAAJ;AAEA,SAAOH,KAAP;AACD;;AACD,SAASY,IAAT,CACEC,WADF,EAEEC,MAFF,EAGEZ,SAHF,EAIEC,iBAJF,EAKE;AACA;AACA,QAAMf,EAAE,GAAG2B,QAAQ,CAACC,cAAT,CAAwBF,MAAxB,CAAX;AACA,MAAI,CAAC1B,EAAL,EAAS;AACT,QAAM6B,MAAM,GAAI7B,EAAhB;AAEA,MAAI8B,UAAU,GAAGD,MAAM,CAACE,OAAP,GAAiB9B,KAAlC;AACA,MAAIsB,IAAI,GAAGE,WAAW,CAACF,IAAZ,EAAX;;AAEA,SAAOO,UAAU,GAAGhB,SAAS,GAAGC,iBAAiB,GAAG,CAA7C,IAAkDQ,IAAI,CAACS,MAAL,GAAc,CAAvE,EAA0E;AACxET,IAAAA,IAAI,GAAGA,IAAI,CAACU,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP;AACAR,IAAAA,WAAW,CAACF,IAAZ,CAAiBA,IAAI,GAAG,KAAxB;AACAO,IAAAA,UAAU,GAAGD,MAAM,CAACE,OAAP,GAAiB9B,KAA9B;AACD;AACF","sourcesContent":["import { getCoverSize, getHorizontalPadding, getVerticalPadding, getInfoHeight } from \"./dimensions\";\nimport { D3Selection } from \"./visuals\";\nimport { Clip } from \"../Audioset\";\nimport { Selection } from \"d3\";\n\nexport default function drawAlbum(el: D3Selection, width: number, clip: Clip) {\n  const trackNumber = clip.trackNum;\n  const imageUrl = clip.resources.cover.small;\n  const country = clip.country;\n  const trackColor = clip.color;\n  const album = el.append(\"g\");\n  const coverSize = getCoverSize(width);\n  const horizontalPadding = getHorizontalPadding(width);\n  const verticalPadding = getVerticalPadding(width);\n  const infoHeight = getInfoHeight(width);\n  const fontSize = \"1.1vw\";\n\n  album\n    .append(\"svg:image\")\n    .attr(\"width\", coverSize)\n    .attr(\"height\", coverSize)\n    .attr(\"x\", trackNumber * coverSize)\n    .attr(\"y\", 0)\n    .style(\"stroke\", \"white\")\n    .attr(\"xlink:href\", imageUrl);\n\n  // Draw country rectangle\n  album\n    .append(\"rect\")\n    .attr(\"width\", coverSize)\n    .attr(\"height\", infoHeight)\n    .attr(\"x\", trackNumber * coverSize)\n    .attr(\"y\", coverSize + verticalPadding)\n    .style(\"fill\", trackColor);\n\n  // Draw country text\n  const countryTextId = \"countryText\" + trackNumber;\n  const countryText: Selection<SVGTextElement, unknown, null, undefined> = album\n    .append(\"text\")\n    .attr(\"id\", countryTextId)\n    .attr(\"x\", trackNumber * coverSize + horizontalPadding)\n    .attr(\"y\", coverSize + verticalPadding + infoHeight / 2)\n    .attr(\"dy\", \"0.35em\")\n    .style(\"font-size\", fontSize)\n    .text(country);\n\n  // Trucate text larger than coverSize\n  wrap(countryText, countryTextId, coverSize, horizontalPadding);\n\n  return album;\n}\nfunction wrap(\n  textElement: Selection<SVGTextElement, unknown, null, undefined>,\n  textId: string,\n  coverSize: number,\n  horizontalPadding: number,\n) {\n  // FIXME: don't use document\n  const el = document.getElementById(textId);\n  if (!el) return;\n  const danger = (el as unknown) as SVGGraphicsElement;\n\n  let textLength = danger.getBBox().width;\n  let text = textElement.text();\n\n  while (textLength > coverSize - horizontalPadding * 2 && text.length > 0) {\n    text = text.slice(0, -1);\n    textElement.text(text + \"...\");\n    textLength = danger.getBBox().width;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}