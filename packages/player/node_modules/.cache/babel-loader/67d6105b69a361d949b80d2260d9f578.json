{"ast":null,"code":"import { atan2, cos, sin, sqrt } from \"../math.js\"; // Note: 6-element arrays are used to denote the 3x3 affine transform matrix:\n// [a, b, c,\n//  d, e, f,\n//  0, 0, 1] - this redundant row is left out.\n// Transform matrix for [a0, a1] -> [b0, b1].\n\nexport default function (a, b) {\n  var u = subtract(a[1], a[0]),\n      v = subtract(b[1], b[0]),\n      phi = angle(u, v),\n      s = length(u) / length(v);\n  return multiply([1, 0, a[0][0], 0, 1, a[0][1]], multiply([s, 0, 0, 0, s, 0], multiply([cos(phi), sin(phi), 0, -sin(phi), cos(phi), 0], [1, 0, -b[0][0], 0, 1, -b[0][1]])));\n} // Inverts a transform matrix.\n\nexport function inverse(m) {\n  var k = 1 / (m[0] * m[4] - m[1] * m[3]);\n  return [k * m[4], -k * m[1], k * (m[1] * m[5] - m[2] * m[4]), -k * m[3], k * m[0], k * (m[2] * m[3] - m[0] * m[5])];\n} // Multiplies two 3x2 matrices.\n\nexport function multiply(a, b) {\n  return [a[0] * b[0] + a[1] * b[3], a[0] * b[1] + a[1] * b[4], a[0] * b[2] + a[1] * b[5] + a[2], a[3] * b[0] + a[4] * b[3], a[3] * b[1] + a[4] * b[4], a[3] * b[2] + a[4] * b[5] + a[5]];\n} // Subtracts 2D vectors.\n\nfunction subtract(a, b) {\n  return [a[0] - b[0], a[1] - b[1]];\n} // Magnitude of a 2D vector.\n\n\nfunction length(v) {\n  return sqrt(v[0] * v[0] + v[1] * v[1]);\n} // Angle between two 2D vectors.\n\n\nfunction angle(a, b) {\n  return atan2(a[0] * b[1] - a[1] * b[0], a[0] * b[0] + a[1] * b[1]);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/polyhedral/matrix.js"],"names":["atan2","cos","sin","sqrt","a","b","u","subtract","v","phi","angle","s","length","multiply","inverse","m","k"],"mappings":"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","sourcesContent":["import {atan2, cos, sin, sqrt} from \"../math.js\";\n\n// Note: 6-element arrays are used to denote the 3x3 affine transform matrix:\n// [a, b, c,\n//  d, e, f,\n//  0, 0, 1] - this redundant row is left out.\n\n// Transform matrix for [a0, a1] -> [b0, b1].\nexport default function(a, b) {\n  var u = subtract(a[1], a[0]),\n      v = subtract(b[1], b[0]),\n      phi = angle(u, v),\n      s = length(u) / length(v);\n\n  return multiply([\n    1, 0, a[0][0],\n    0, 1, a[0][1]\n  ], multiply([\n    s, 0, 0,\n    0, s, 0\n  ], multiply([\n    cos(phi), sin(phi), 0,\n    -sin(phi), cos(phi), 0\n  ], [\n    1, 0, -b[0][0],\n    0, 1, -b[0][1]\n  ])));\n}\n\n// Inverts a transform matrix.\nexport function inverse(m) {\n  var k = 1 / (m[0] * m[4] - m[1] * m[3]);\n  return [\n    k * m[4], -k * m[1], k * (m[1] * m[5] - m[2] * m[4]),\n    -k * m[3], k * m[0], k * (m[2] * m[3] - m[0] * m[5])\n  ];\n}\n\n// Multiplies two 3x2 matrices.\nexport function multiply(a, b) {\n  return [\n    a[0] * b[0] + a[1] * b[3],\n    a[0] * b[1] + a[1] * b[4],\n    a[0] * b[2] + a[1] * b[5] + a[2],\n    a[3] * b[0] + a[4] * b[3],\n    a[3] * b[1] + a[4] * b[4],\n    a[3] * b[2] + a[4] * b[5] + a[5]\n  ];\n}\n\n// Subtracts 2D vectors.\nfunction subtract(a, b) {\n  return [a[0] - b[0], a[1] - b[1]];\n}\n\n// Magnitude of a 2D vector.\nfunction length(v) {\n  return sqrt(v[0] * v[0] + v[1] * v[1]);\n}\n\n// Angle between two 2D vectors.\nfunction angle(a, b) {\n  return atan2(a[0] * b[1] - a[1] * b[0], a[0] * b[0] + a[1] * b[1]);\n}\n"]},"metadata":{},"sourceType":"module"}