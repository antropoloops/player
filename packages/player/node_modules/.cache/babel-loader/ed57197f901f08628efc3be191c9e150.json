{"ast":null,"code":"var _jsxFileName = \"/Users/dani/Antropoloops/atpls-player/src/ui/Player/Player.tsx\";\nimport React, { useEffect } from \"react\";\nimport { getAudioContext, player } from \"../../player\";\nimport { Header } from \"../shared/Header\";\nimport { Scroll } from \"../shared/Scroll\";\nimport { useDeviceType } from \"../useDeviceType\";\nimport { Controller } from \"./Controller\";\nimport { Footer } from \"./Footer\";\nimport Preview from \"./Preview\";\nimport { useFullscreen } from \"./useFullscreen\";\nimport { useResourceLoader } from \"./useResourceLoader\";\nimport { Visuals } from \"./Visuals\";\n\nconst handleStart = () => getAudioContext().then(() => player.resources.load()).then(() => player.control.keyboard.setActive(true));\n\nexport const Player = ({\n  audioset\n}) => {\n  const _useResourceLoader = useResourceLoader(),\n        status = _useResourceLoader.status;\n\n  const fullscreen = useFullscreen();\n  const isReady = status.stage === \"ready\";\n\n  const _useDeviceType = useDeviceType(),\n        isDesktop = _useDeviceType.isDesktop;\n\n  const isVisual = isDesktop || isReady;\n\n  const handleFullScreen = () => {\n    fullscreen.toggle();\n\n    if (!isReady) {\n      handleStart();\n    }\n  }; // useAutoStartAudio(isReady, audioset, handleStart);\n\n\n  return React.createElement(\"div\", {\n    className: \"App Player\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(Header, {\n    meta: audioset.meta,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), React.createElement(Scroll, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, isReady ? React.createElement(Controller, {\n    audioset: audioset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }) : React.createElement(Preview, {\n    audioset: audioset,\n    resourceStatus: status,\n    onStart: handleStart,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }))), React.createElement(Footer, {\n    fullscreen: fullscreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), isVisual && React.createElement(\"div\", {\n    className: \"visuals\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(Visuals, {\n    audioset: audioset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  })));\n};\n/**\n * Start audio when clicking in window\n */\n\nexport function useAutoStartAudio(isReady, audioset, startAudio) {\n  useEffect(() => {\n    if (!isReady && audioset.id) {\n      const onClick = () => {\n        startAudio();\n        removeListener();\n      };\n\n      const removeListener = () => {\n        window.removeEventListener(\"click\", onClick);\n      };\n\n      window.addEventListener(\"click\", onClick);\n      return removeListener;\n    }\n  }, [audioset.id, isReady, startAudio]);\n  return startAudio;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/Player.tsx"],"names":["React","useEffect","getAudioContext","player","Header","Scroll","useDeviceType","Controller","Footer","Preview","useFullscreen","useResourceLoader","Visuals","handleStart","then","resources","load","control","keyboard","setActive","Player","audioset","status","fullscreen","isReady","stage","isDesktop","isVisual","handleFullScreen","toggle","meta","useAutoStartAudio","startAudio","id","onClick","removeListener","window","removeEventListener","addEventListener"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { Audioset } from \"../../audioset\";\nimport { getAudioContext, player } from \"../../player\";\nimport { Header } from \"../shared/Header\";\nimport { Scroll } from \"../shared/Scroll\";\nimport { useDeviceType } from \"../useDeviceType\";\nimport { Controller } from \"./Controller\";\nimport { Footer } from \"./Footer\";\nimport Preview from \"./Preview\";\nimport { useFullscreen } from \"./useFullscreen\";\nimport { useResourceLoader } from \"./useResourceLoader\";\nimport { Visuals } from \"./Visuals\";\n\nexport interface PlayerProps {\n  audioset: Audioset;\n}\nconst handleStart = () =>\n  getAudioContext()\n    .then(() => player.resources.load())\n    .then(() => player.control.keyboard.setActive(true));\n\nexport const Player = ({ audioset }: PlayerProps) => {\n  const { status } = useResourceLoader();\n  const fullscreen = useFullscreen();\n  const isReady = status.stage === \"ready\";\n  const { isDesktop } = useDeviceType();\n\n  const isVisual = isDesktop || isReady;\n\n  const handleFullScreen = () => {\n    fullscreen.toggle();\n    if (!isReady) { handleStart() }\n  };\n\n  // useAutoStartAudio(isReady, audioset, handleStart);\n\n  return (\n    <div className=\"App Player\">\n      <Header meta={audioset.meta} />\n      <Scroll>\n        <div className=\"content\">\n          {isReady ? (\n            <Controller audioset={audioset} />\n          ) : (\n            <Preview\n              audioset={audioset}\n              resourceStatus={status}\n              onStart={handleStart}\n            />\n          )}\n        </div>\n      </Scroll>\n      {<Footer fullscreen={fullscreen} />}\n      {isVisual && (\n        <div className=\"visuals\">{<Visuals audioset={audioset} />}</div>\n      )}\n    </div>\n  );\n};\n\n/**\n * Start audio when clicking in window\n */\nexport function useAutoStartAudio(\n  isReady: boolean,\n  audioset: Audioset,\n  startAudio: () => void,\n) {\n  useEffect(() => {\n    if (!isReady && audioset.id) {\n      const onClick = () => {\n        startAudio();\n        removeListener();\n      };\n      const removeListener = () => {\n        window.removeEventListener(\"click\", onClick);\n      };\n      window.addEventListener(\"click\", onClick);\n      return removeListener;\n    }\n  }, [audioset.id, isReady, startAudio]);\n\n  return startAudio;\n}\n"]},"metadata":{},"sourceType":"module"}