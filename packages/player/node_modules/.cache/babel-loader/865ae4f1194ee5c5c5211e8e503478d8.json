{"ast":null,"code":"import { halfPi, pi } from \"./math.js\";\nexport default function (project) {\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\n\n  function projectSquare(lambda, phi) {\n    var s = lambda > 0 ? -0.5 : 0.5,\n        point = project(lambda + s * pi, phi);\n    point[0] -= s * dx;\n    return point;\n  }\n\n  if (project.invert) projectSquare.invert = function (x, y) {\n    var s = x > 0 ? -0.5 : 0.5,\n        location = project.invert(x + s * dx, y),\n        lambda = location[0] - s * pi;\n    if (lambda < -pi) lambda += 2 * pi;else if (lambda > pi) lambda -= 2 * pi;\n    location[0] = lambda;\n    return location;\n  };\n  return projectSquare;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/square.js"],"names":["halfPi","pi","project","dx","projectSquare","lambda","phi","s","point","invert","x","y","location"],"mappings":"AAAA,SAAQA,MAAR,EAAgBC,EAAhB,QAAyB,WAAzB;AAEA,eAAe,UAASC,OAAT,EAAkB;AAC/B,MAAIC,EAAE,GAAGD,OAAO,CAACF,MAAD,EAAS,CAAT,CAAP,CAAmB,CAAnB,IAAwBE,OAAO,CAAC,CAACF,MAAF,EAAU,CAAV,CAAP,CAAoB,CAApB,CAAjC;;AAEA,WAASI,aAAT,CAAuBC,MAAvB,EAA+BC,GAA/B,EAAoC;AAClC,QAAIC,CAAC,GAAGF,MAAM,GAAG,CAAT,GAAa,CAAC,GAAd,GAAoB,GAA5B;AAAA,QACIG,KAAK,GAAGN,OAAO,CAACG,MAAM,GAAGE,CAAC,GAAGN,EAAd,EAAkBK,GAAlB,CADnB;AAEAE,IAAAA,KAAK,CAAC,CAAD,CAAL,IAAYD,CAAC,GAAGJ,EAAhB;AACA,WAAOK,KAAP;AACD;;AAED,MAAIN,OAAO,CAACO,MAAZ,EAAoBL,aAAa,CAACK,MAAd,GAAuB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACxD,QAAIJ,CAAC,GAAGG,CAAC,GAAG,CAAJ,GAAQ,CAAC,GAAT,GAAe,GAAvB;AAAA,QACIE,QAAQ,GAAGV,OAAO,CAACO,MAAR,CAAeC,CAAC,GAAGH,CAAC,GAAGJ,EAAvB,EAA2BQ,CAA3B,CADf;AAAA,QAEIN,MAAM,GAAGO,QAAQ,CAAC,CAAD,CAAR,GAAcL,CAAC,GAAGN,EAF/B;AAGA,QAAII,MAAM,GAAG,CAACJ,EAAd,EAAkBI,MAAM,IAAI,IAAIJ,EAAd,CAAlB,KACK,IAAII,MAAM,GAAGJ,EAAb,EAAiBI,MAAM,IAAI,IAAIJ,EAAd;AACtBW,IAAAA,QAAQ,CAAC,CAAD,CAAR,GAAcP,MAAd;AACA,WAAOO,QAAP;AACD,GARmB;AAUpB,SAAOR,aAAP;AACD","sourcesContent":["import {halfPi, pi} from \"./math.js\";\n\nexport default function(project) {\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\n\n  function projectSquare(lambda, phi) {\n    var s = lambda > 0 ? -0.5 : 0.5,\n        point = project(lambda + s * pi, phi);\n    point[0] -= s * dx;\n    return point;\n  }\n\n  if (project.invert) projectSquare.invert = function(x, y) {\n    var s = x > 0 ? -0.5 : 0.5,\n        location = project.invert(x + s * dx, y),\n        lambda = location[0] - s * pi;\n    if (lambda < -pi) lambda += 2 * pi;\n    else if (lambda > pi) lambda -= 2 * pi;\n    location[0] = lambda;\n    return location;\n  };\n\n  return projectSquare;\n}\n"]},"metadata":{},"sourceType":"module"}