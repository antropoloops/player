{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, atan, atan2, cos, halfPi, epsilon, pi, sign, sin, sqrt, tan } from \"./math.js\";\nexport function vanDerGrinten2Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      x1 = cosTheta * (sqrt(1 + A2) - A * cosTheta) / (1 + A2 * sinTheta * sinTheta);\n  return [sign(lambda) * pi * x1, sign(phi) * pi * sqrt(1 - x1 * (2 * A + x1))];\n}\n\nvanDerGrinten2Raw.invert = function (x, y) {\n  if (!x) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x1 = abs(x / pi),\n      A = (1 - x1 * x1 - (y /= pi) * y) / (2 * x1),\n      A2 = A * A,\n      B = sqrt(A2 + 1);\n  return [sign(x) * pi * (B - A), sign(y) * halfPi * sin(2 * atan2(sqrt((1 - 2 * A * x1) * (A + B) - x1), sqrt(B + A + x1)))];\n};\n\nexport default function () {\n  return projection(vanDerGrinten2Raw).scale(79.4183);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/vanDerGrinten2.js"],"names":["geoProjection","projection","abs","asin","atan","atan2","cos","halfPi","epsilon","pi","sign","sin","sqrt","tan","vanDerGrinten2Raw","lambda","phi","sinTheta","theta","cosTheta","A","A2","x1","invert","x","y","B","scale"],"mappings":"AAAA,SAAQA,aAAa,IAAIC,UAAzB,QAA0C,QAA1C;AACA,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,KAAzB,EAAgCC,GAAhC,EAAqCC,MAArC,EAA6CC,OAA7C,EAAsDC,EAAtD,EAA0DC,IAA1D,EAAgEC,GAAhE,EAAqEC,IAArE,EAA2EC,GAA3E,QAAqF,WAArF;AAEA,OAAO,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,GAAnC,EAAwC;AAC7C,MAAId,GAAG,CAACc,GAAD,CAAH,GAAWR,OAAf,EAAwB,OAAO,CAACO,MAAD,EAAS,CAAT,CAAP;AACxB,MAAIE,QAAQ,GAAGf,GAAG,CAACc,GAAG,GAAGT,MAAP,CAAlB;AAAA,MACIW,KAAK,GAAGf,IAAI,CAACc,QAAD,CADhB;AAEA,MAAIf,GAAG,CAACa,MAAD,CAAH,GAAcP,OAAd,IAAyBN,GAAG,CAACA,GAAG,CAACc,GAAD,CAAH,GAAWT,MAAZ,CAAH,GAAyBC,OAAtD,EAA+D,OAAO,CAAC,CAAD,EAAIE,IAAI,CAACM,GAAD,CAAJ,GAAYP,EAAZ,GAAiBI,GAAG,CAACK,KAAK,GAAG,CAAT,CAAxB,CAAP;AAC/D,MAAIC,QAAQ,GAAGb,GAAG,CAACY,KAAD,CAAlB;AAAA,MACIE,CAAC,GAAGlB,GAAG,CAACO,EAAE,GAAGM,MAAL,GAAcA,MAAM,GAAGN,EAAxB,CAAH,GAAiC,CADzC;AAAA,MAEIY,EAAE,GAAGD,CAAC,GAAGA,CAFb;AAAA,MAGIE,EAAE,GAAGH,QAAQ,IAAIP,IAAI,CAAC,IAAIS,EAAL,CAAJ,GAAeD,CAAC,GAAGD,QAAvB,CAAR,IAA4C,IAAIE,EAAE,GAAGJ,QAAL,GAAgBA,QAAhE,CAHT;AAIA,SAAO,CACLP,IAAI,CAACK,MAAD,CAAJ,GAAeN,EAAf,GAAoBa,EADf,EAELZ,IAAI,CAACM,GAAD,CAAJ,GAAYP,EAAZ,GAAiBG,IAAI,CAAC,IAAIU,EAAE,IAAI,IAAIF,CAAJ,GAAQE,EAAZ,CAAP,CAFhB,CAAP;AAID;;AAEDR,iBAAiB,CAACS,MAAlB,GAA2B,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACxC,MAAI,CAACD,CAAL,EAAQ,OAAO,CAAC,CAAD,EAAIjB,MAAM,GAAGI,GAAG,CAAC,IAAIP,IAAI,CAACqB,CAAC,GAAGhB,EAAL,CAAT,CAAhB,CAAP;AACR,MAAIa,EAAE,GAAGpB,GAAG,CAACsB,CAAC,GAAGf,EAAL,CAAZ;AAAA,MACIW,CAAC,GAAG,CAAC,IAAIE,EAAE,GAAGA,EAAT,GAAc,CAACG,CAAC,IAAIhB,EAAN,IAAYgB,CAA3B,KAAiC,IAAIH,EAArC,CADR;AAAA,MAEID,EAAE,GAAGD,CAAC,GAAGA,CAFb;AAAA,MAGIM,CAAC,GAAGd,IAAI,CAACS,EAAE,GAAG,CAAN,CAHZ;AAIA,SAAO,CACLX,IAAI,CAACc,CAAD,CAAJ,GAAUf,EAAV,IAAgBiB,CAAC,GAAGN,CAApB,CADK,EAELV,IAAI,CAACe,CAAD,CAAJ,GAAUlB,MAAV,GAAmBI,GAAG,CAAC,IAAIN,KAAK,CAACO,IAAI,CAAC,CAAC,IAAI,IAAIQ,CAAJ,GAAQE,EAAb,KAAoBF,CAAC,GAAGM,CAAxB,IAA6BJ,EAA9B,CAAL,EAAwCV,IAAI,CAACc,CAAC,GAAGN,CAAJ,GAAQE,EAAT,CAA5C,CAAV,CAFjB,CAAP;AAID,CAVD;;AAYA,eAAe,YAAW;AACxB,SAAOrB,UAAU,CAACa,iBAAD,CAAV,CACFa,KADE,CACI,OADJ,CAAP;AAED","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan, atan2, cos, halfPi, epsilon, pi, sign, sin, sqrt, tan} from \"./math.js\";\n\nexport function vanDerGrinten2Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      x1 = cosTheta * (sqrt(1 + A2) - A * cosTheta) / (1 + A2 * sinTheta * sinTheta);\n  return [\n    sign(lambda) * pi * x1,\n    sign(phi) * pi * sqrt(1 - x1 * (2 * A + x1))\n  ];\n}\n\nvanDerGrinten2Raw.invert = function(x, y) {\n  if (!x) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x1 = abs(x / pi),\n      A = (1 - x1 * x1 - (y /= pi) * y) / (2 * x1),\n      A2 = A * A,\n      B = sqrt(A2 + 1);\n  return [\n    sign(x) * pi * (B - A),\n    sign(y) * halfPi * sin(2 * atan2(sqrt((1 - 2 * A * x1) * (A + B) - x1), sqrt(B + A + x1)))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten2Raw)\n      .scale(79.4183);\n}\n"]},"metadata":{},"sourceType":"module"}