{"ast":null,"code":"import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  offset: 1\n};\nexport const createConstantSourceNodeConstructor = (audioNodeConstructor, createAudioParam, createConstantSourceNodeRendererFactory, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n  return class ConstantSourceNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const constantSourceNodeRenderer = isOffline ? createConstantSourceNodeRendererFactory() : null;\n      super(context, false, nativeConstantSourceNode, constantSourceNodeRenderer);\n      this._constantSourceNodeRenderer = constantSourceNodeRenderer;\n      this._nativeConstantSourceNode = nativeConstantSourceNode;\n      /*\n       * Bug #62 & #74: Edge & Safari do not support ConstantSourceNodes and do not export the correct values for maxValue and\n       * minValue for GainNodes.\n       */\n\n      this._offset = createAudioParam(this, isOffline, nativeConstantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._onended = null;\n    }\n\n    get offset() {\n      return this._offset;\n    }\n\n    get onended() {\n      return this._onended;\n    }\n\n    set onended(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeConstantSourceNode.onended = wrappedListener;\n      const nativeOnEnded = this._nativeConstantSourceNode.onended;\n      this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n    }\n\n    start(when = 0) {\n      this._nativeConstantSourceNode.start(when);\n\n      if (this._constantSourceNodeRenderer !== null) {\n        this._constantSourceNodeRenderer.start = when;\n      } else {\n        setInternalStateToActive(this);\n\n        const resetInternalStateToPassive = () => {\n          this._nativeConstantSourceNode.removeEventListener('ended', resetInternalStateToPassive); // @todo Determine a meaningful delay instead of just using one second.\n\n\n          setTimeout(() => setInternalStateToPassive(this), 1000);\n        };\n\n        this._nativeConstantSourceNode.addEventListener('ended', resetInternalStateToPassive);\n      }\n    }\n\n    stop(when = 0) {\n      this._nativeConstantSourceNode.stop(when);\n\n      if (this._constantSourceNodeRenderer !== null) {\n        this._constantSourceNodeRenderer.stop = when;\n      }\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/constant-source-node-constructor.js"],"names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","setInternalStateToActive","setInternalStateToPassive","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","offset","createConstantSourceNodeConstructor","audioNodeConstructor","createAudioParam","createConstantSourceNodeRendererFactory","createNativeConstantSourceNode","getNativeContext","isNativeOfflineAudioContext","wrapEventListener","ConstantSourceNode","constructor","context","options","nativeContext","mergedOptions","nativeConstantSourceNode","isOffline","constantSourceNodeRenderer","_constantSourceNodeRenderer","_nativeConstantSourceNode","_offset","_onended","onended","value","wrappedListener","nativeOnEnded","start","when","resetInternalStateToPassive","removeEventListener","setTimeout","addEventListener","stop"],"mappings":"AAAA,SAASA,0BAAT,EAAqCC,0BAArC,QAAuE,cAAvE;AACA,SAASC,wBAAT,QAAyC,yCAAzC;AACA,SAASC,yBAAT,QAA0C,0CAA1C;AACA,MAAMC,eAAe,GAAG;AACpBC,EAAAA,YAAY,EAAE,CADM;AAEpBC,EAAAA,gBAAgB,EAAE,KAFE;AAGpBC,EAAAA,qBAAqB,EAAE,UAHH;AAIpBC,EAAAA,MAAM,EAAE;AAJY,CAAxB;AAMA,OAAO,MAAMC,mCAAmC,GAAG,CAACC,oBAAD,EAAuBC,gBAAvB,EAAyCC,uCAAzC,EAAkFC,8BAAlF,EAAkHC,gBAAlH,EAAoIC,2BAApI,EAAiKC,iBAAjK,KAAuL;AACtO,SAAO,MAAMC,kBAAN,SAAiCP,oBAAjC,CAAsD;AACzDQ,IAAAA,WAAW,CAACC,OAAD,EAAUC,OAAO,GAAGhB,eAApB,EAAqC;AAC5C,YAAMiB,aAAa,GAAGP,gBAAgB,CAACK,OAAD,CAAtC;AACA,YAAMG,aAAa,GAAG,EAAE,GAAGlB,eAAL;AAAsB,WAAGgB;AAAzB,OAAtB;AACA,YAAMG,wBAAwB,GAAGV,8BAA8B,CAACQ,aAAD,EAAgBC,aAAhB,CAA/D;AACA,YAAME,SAAS,GAAGT,2BAA2B,CAACM,aAAD,CAA7C;AACA,YAAMI,0BAA0B,GAAKD,SAAD,GAC9BZ,uCAAuC,EADT,GAE9B,IAFN;AAGA,YAAMO,OAAN,EAAe,KAAf,EAAsBI,wBAAtB,EAAgDE,0BAAhD;AACA,WAAKC,2BAAL,GAAmCD,0BAAnC;AACA,WAAKE,yBAAL,GAAiCJ,wBAAjC;AACA;;;;;AAIA,WAAKK,OAAL,GAAejB,gBAAgB,CAAC,IAAD,EAAOa,SAAP,EAAkBD,wBAAwB,CAACf,MAA3C,EAAmDP,0BAAnD,EAA+ED,0BAA/E,CAA/B;AACA,WAAK6B,QAAL,GAAgB,IAAhB;AACH;;AACD,QAAIrB,MAAJ,GAAa;AACT,aAAO,KAAKoB,OAAZ;AACH;;AACD,QAAIE,OAAJ,GAAc;AACV,aAAO,KAAKD,QAAZ;AACH;;AACD,QAAIC,OAAJ,CAAYC,KAAZ,EAAmB;AACf,YAAMC,eAAe,GAAI,OAAOD,KAAP,KAAiB,UAAlB,GAAgCf,iBAAiB,CAAC,IAAD,EAAOe,KAAP,CAAjD,GAAiE,IAAzF;AACA,WAAKJ,yBAAL,CAA+BG,OAA/B,GAAyCE,eAAzC;AACA,YAAMC,aAAa,GAAG,KAAKN,yBAAL,CAA+BG,OAArD;AACA,WAAKD,QAAL,GAAiBI,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAKD,eAA7C,GAAgED,KAAhE,GAAwEE,aAAxF;AACH;;AACDC,IAAAA,KAAK,CAACC,IAAI,GAAG,CAAR,EAAW;AACZ,WAAKR,yBAAL,CAA+BO,KAA/B,CAAqCC,IAArC;;AACA,UAAI,KAAKT,2BAAL,KAAqC,IAAzC,EAA+C;AAC3C,aAAKA,2BAAL,CAAiCQ,KAAjC,GAAyCC,IAAzC;AACH,OAFD,MAGK;AACDjC,QAAAA,wBAAwB,CAAC,IAAD,CAAxB;;AACA,cAAMkC,2BAA2B,GAAG,MAAM;AACtC,eAAKT,yBAAL,CAA+BU,mBAA/B,CAAmD,OAAnD,EAA4DD,2BAA5D,EADsC,CAEtC;;;AACAE,UAAAA,UAAU,CAAC,MAAMnC,yBAAyB,CAAC,IAAD,CAAhC,EAAwC,IAAxC,CAAV;AACH,SAJD;;AAKA,aAAKwB,yBAAL,CAA+BY,gBAA/B,CAAgD,OAAhD,EAAyDH,2BAAzD;AACH;AACJ;;AACDI,IAAAA,IAAI,CAACL,IAAI,GAAG,CAAR,EAAW;AACX,WAAKR,yBAAL,CAA+Ba,IAA/B,CAAoCL,IAApC;;AACA,UAAI,KAAKT,2BAAL,KAAqC,IAAzC,EAA+C;AAC3C,aAAKA,2BAAL,CAAiCc,IAAjC,GAAwCL,IAAxC;AACH;AACJ;;AAnDwD,GAA7D;AAqDH,CAtDM","sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    offset: 1\n};\nexport const createConstantSourceNodeConstructor = (audioNodeConstructor, createAudioParam, createConstantSourceNodeRendererFactory, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n    return class ConstantSourceNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const constantSourceNodeRenderer = ((isOffline)\n                ? createConstantSourceNodeRendererFactory()\n                : null);\n            super(context, false, nativeConstantSourceNode, constantSourceNodeRenderer);\n            this._constantSourceNodeRenderer = constantSourceNodeRenderer;\n            this._nativeConstantSourceNode = nativeConstantSourceNode;\n            /*\n             * Bug #62 & #74: Edge & Safari do not support ConstantSourceNodes and do not export the correct values for maxValue and\n             * minValue for GainNodes.\n             */\n            this._offset = createAudioParam(this, isOffline, nativeConstantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._onended = null;\n        }\n        get offset() {\n            return this._offset;\n        }\n        get onended() {\n            return this._onended;\n        }\n        set onended(value) {\n            const wrappedListener = (typeof value === 'function') ? wrapEventListener(this, value) : null;\n            this._nativeConstantSourceNode.onended = wrappedListener;\n            const nativeOnEnded = this._nativeConstantSourceNode.onended;\n            this._onended = (nativeOnEnded !== null && nativeOnEnded === wrappedListener) ? value : nativeOnEnded;\n        }\n        start(when = 0) {\n            this._nativeConstantSourceNode.start(when);\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.start = when;\n            }\n            else {\n                setInternalStateToActive(this);\n                const resetInternalStateToPassive = () => {\n                    this._nativeConstantSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n                    // @todo Determine a meaningful delay instead of just using one second.\n                    setTimeout(() => setInternalStateToPassive(this), 1000);\n                };\n                this._nativeConstantSourceNode.addEventListener('ended', resetInternalStateToPassive);\n            }\n        }\n        stop(when = 0) {\n            this._nativeConstantSourceNode.stop(when);\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/constant-source-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}