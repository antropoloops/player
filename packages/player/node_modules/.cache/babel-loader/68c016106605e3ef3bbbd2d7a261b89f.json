{"ast":null,"code":"/**\n * Chrome version 66 and 67 did not call the process() function of an AudioWorkletProcessor if it had no outputs. AudioWorklet support was\n * enabled by default in version 66.\n */\nexport const createTestAudioWorkletProcessorNoOutputsSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {\n  return async () => {\n    // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n    if (nativeAudioWorkletNodeConstructor === null) {\n      return true;\n    }\n\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n\n    const blob = new Blob(['class A extends AudioWorkletProcessor{process(){this.port.postMessage(0)}}registerProcessor(\"a\",A)'], {\n      type: 'application/javascript; charset=utf-8'\n    });\n    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 3200);\n    const url = URL.createObjectURL(blob);\n    let isCallingProcess = false;\n\n    try {\n      await offlineAudioContext.audioWorklet.addModule(url);\n      const gainNode = offlineAudioContext.createGain();\n      const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', {\n        numberOfOutputs: 0\n      });\n\n      audioWorkletNode.port.onmessage = () => isCallingProcess = true;\n\n      gainNode.connect(audioWorkletNode);\n      await offlineAudioContext.startRendering();\n    } catch (_a) {// Ignore errors.\n    } finally {\n      URL.revokeObjectURL(url);\n    }\n\n    return isCallingProcess;\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/test-audio-worklet-processor-no-outputs-support.js"],"names":["createTestAudioWorkletProcessorNoOutputsSupport","nativeAudioWorkletNodeConstructor","nativeOfflineAudioContextConstructor","blob","Blob","type","offlineAudioContext","url","URL","createObjectURL","isCallingProcess","audioWorklet","addModule","gainNode","createGain","audioWorkletNode","numberOfOutputs","port","onmessage","connect","startRendering","_a","revokeObjectURL"],"mappings":"AAAA;;;;AAIA,OAAO,MAAMA,+CAA+C,GAAG,CAACC,iCAAD,EAAoCC,oCAApC,KAA6E;AACxI,SAAO,YAAY;AACf;AACA,QAAID,iCAAiC,KAAK,IAA1C,EAAgD;AAC5C,aAAO,IAAP;AACH;;AACD,QAAIC,oCAAoC,KAAK,IAA7C,EAAmD;AAC/C,aAAO,KAAP;AACH;;AACD,UAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAAC,oGAAD,CAAT,EAAiH;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAjH,CAAb;AACA,UAAMC,mBAAmB,GAAG,IAAIJ,oCAAJ,CAAyC,CAAzC,EAA4C,GAA5C,EAAiD,IAAjD,CAA5B;AACA,UAAMK,GAAG,GAAGC,GAAG,CAACC,eAAJ,CAAoBN,IAApB,CAAZ;AACA,QAAIO,gBAAgB,GAAG,KAAvB;;AACA,QAAI;AACA,YAAMJ,mBAAmB,CAACK,YAApB,CAAiCC,SAAjC,CAA2CL,GAA3C,CAAN;AACA,YAAMM,QAAQ,GAAGP,mBAAmB,CAACQ,UAApB,EAAjB;AACA,YAAMC,gBAAgB,GAAG,IAAId,iCAAJ,CAAsCK,mBAAtC,EAA2D,GAA3D,EAAgE;AAAEU,QAAAA,eAAe,EAAE;AAAnB,OAAhE,CAAzB;;AACAD,MAAAA,gBAAgB,CAACE,IAAjB,CAAsBC,SAAtB,GAAkC,MAAMR,gBAAgB,GAAG,IAA3D;;AACAG,MAAAA,QAAQ,CAACM,OAAT,CAAiBJ,gBAAjB;AACA,YAAMT,mBAAmB,CAACc,cAApB,EAAN;AACH,KAPD,CAQA,OAAOC,EAAP,EAAW,CACP;AACH,KAVD,SAWQ;AACJb,MAAAA,GAAG,CAACc,eAAJ,CAAoBf,GAApB;AACH;;AACD,WAAOG,gBAAP;AACH,GA3BD;AA4BH,CA7BM","sourcesContent":["/**\n * Chrome version 66 and 67 did not call the process() function of an AudioWorkletProcessor if it had no outputs. AudioWorklet support was\n * enabled by default in version 66.\n */\nexport const createTestAudioWorkletProcessorNoOutputsSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {\n    return async () => {\n        // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n        if (nativeAudioWorkletNodeConstructor === null) {\n            return true;\n        }\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n        const blob = new Blob(['class A extends AudioWorkletProcessor{process(){this.port.postMessage(0)}}registerProcessor(\"a\",A)'], { type: 'application/javascript; charset=utf-8' });\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 3200);\n        const url = URL.createObjectURL(blob);\n        let isCallingProcess = false;\n        try {\n            await offlineAudioContext.audioWorklet.addModule(url);\n            const gainNode = offlineAudioContext.createGain();\n            const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', { numberOfOutputs: 0 });\n            audioWorkletNode.port.onmessage = () => isCallingProcess = true;\n            gainNode.connect(audioWorkletNode);\n            await offlineAudioContext.startRendering();\n        }\n        catch (_a) {\n            // Ignore errors.\n        }\n        finally {\n            URL.revokeObjectURL(url);\n        }\n        return isCallingProcess;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-worklet-processor-no-outputs-support.js.map"]},"metadata":{},"sourceType":"module"}