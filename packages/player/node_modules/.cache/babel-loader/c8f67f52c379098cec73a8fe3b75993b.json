{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDelayNodeRendererFactory = (connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return maxDelayTime => {\n    const renderedNativeDelayNodes = new WeakMap();\n\n    const createDelayNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeDelayNode = getNativeAudioNode(proxy); // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n\n      if (!nativeDelayNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeDelayNode.channelCount,\n          channelCountMode: nativeDelayNode.channelCountMode,\n          channelInterpretation: nativeDelayNode.channelInterpretation,\n          delayTime: nativeDelayNode.delayTime.value,\n          maxDelayTime\n        };\n        nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n\n      if (!nativeDelayNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime, trace);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime, trace);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode, trace);\n      return nativeDelayNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeDelayNode !== undefined) {\n          return Promise.resolve(renderedNativeDelayNode);\n        }\n\n        return createDelayNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/delay-node-renderer-factory.js"],"names":["isOwnedByContext","createDelayNodeRendererFactory","connectAudioParam","createNativeDelayNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","maxDelayTime","renderedNativeDelayNodes","WeakMap","createDelayNode","proxy","nativeOfflineAudioContext","trace","nativeDelayNode","nativeDelayNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","delayTime","value","set","render","renderedNativeDelayNode","get","undefined","Promise","resolve"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AACA,OAAO,MAAMC,8BAA8B,GAAG,CAACC,iBAAD,EAAoBC,qBAApB,EAA2CC,kBAA3C,EAA+DC,gBAA/D,EAAiFC,uBAAjF,KAA6G;AACvJ,SAAQC,YAAD,IAAkB;AACrB,UAAMC,wBAAwB,GAAG,IAAIC,OAAJ,EAAjC;;AACA,UAAMC,eAAe,GAAG,OAAOC,KAAP,EAAcC,yBAAd,EAAyCC,KAAzC,KAAmD;AACvE,UAAIC,eAAe,GAAGV,kBAAkB,CAACO,KAAD,CAAxC,CADuE,CAEvE;;AACA,YAAMI,+BAA+B,GAAGf,gBAAgB,CAACc,eAAD,EAAkBF,yBAAlB,CAAxD;;AACA,UAAI,CAACG,+BAAL,EAAsC;AAClC,cAAMC,OAAO,GAAG;AACZC,UAAAA,YAAY,EAAEH,eAAe,CAACG,YADlB;AAEZC,UAAAA,gBAAgB,EAAEJ,eAAe,CAACI,gBAFtB;AAGZC,UAAAA,qBAAqB,EAAEL,eAAe,CAACK,qBAH3B;AAIZC,UAAAA,SAAS,EAAEN,eAAe,CAACM,SAAhB,CAA0BC,KAJzB;AAKZd,UAAAA;AALY,SAAhB;AAOAO,QAAAA,eAAe,GAAGX,qBAAqB,CAACS,yBAAD,EAA4BI,OAA5B,CAAvC;AACH;;AACDR,MAAAA,wBAAwB,CAACc,GAAzB,CAA6BV,yBAA7B,EAAwDE,eAAxD;;AACA,UAAI,CAACC,+BAAL,EAAsC;AAClC,cAAMV,gBAAgB,CAACO,yBAAD,EAA4BD,KAAK,CAACS,SAAlC,EAA6CN,eAAe,CAACM,SAA7D,EAAwEP,KAAxE,CAAtB;AACH,OAFD,MAGK;AACD,cAAMX,iBAAiB,CAACU,yBAAD,EAA4BD,KAAK,CAACS,SAAlC,EAA6CN,eAAe,CAACM,SAA7D,EAAwEP,KAAxE,CAAvB;AACH;;AACD,YAAMP,uBAAuB,CAACK,KAAD,EAAQC,yBAAR,EAAmCE,eAAnC,EAAoDD,KAApD,CAA7B;AACA,aAAOC,eAAP;AACH,KAvBD;;AAwBA,WAAO;AACHS,MAAAA,MAAM,CAACZ,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,EAA0C;AAC5C,cAAMW,uBAAuB,GAAGhB,wBAAwB,CAACiB,GAAzB,CAA6Bb,yBAA7B,CAAhC;;AACA,YAAIY,uBAAuB,KAAKE,SAAhC,EAA2C;AACvC,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,uBAAhB,CAAP;AACH;;AACD,eAAOd,eAAe,CAACC,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,CAAtB;AACH;;AAPE,KAAP;AASH,GAnCD;AAoCH,CArCM","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDelayNodeRendererFactory = (connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return (maxDelayTime) => {\n        const renderedNativeDelayNodes = new WeakMap();\n        const createDelayNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeDelayNode = getNativeAudioNode(proxy);\n            // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n            if (!nativeDelayNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeDelayNode.channelCount,\n                    channelCountMode: nativeDelayNode.channelCountMode,\n                    channelInterpretation: nativeDelayNode.channelInterpretation,\n                    delayTime: nativeDelayNode.delayTime.value,\n                    maxDelayTime\n                };\n                nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n            if (!nativeDelayNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode, trace);\n            return nativeDelayNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeDelayNode !== undefined) {\n                    return Promise.resolve(renderedNativeDelayNode);\n                }\n                return createDelayNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/delay-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}