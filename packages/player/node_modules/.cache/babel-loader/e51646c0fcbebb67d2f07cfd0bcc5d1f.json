{"ast":null,"code":"/*\n * This massive regex tries to cover all the following cases.\n *\n * import './path';\n * import defaultImport from './path';\n * import { namedImport } from './path';\n * import { namedImport as renamendImport } from './path';\n * import * as namespaceImport from './path';\n * import defaultImport, { namedImport } from './path';\n * import defaultImport, { namedImport as renamendImport } from './path';\n * import defaultImport, * as namespaceImport from './path';\n */\nconst IMPORT_STATEMENT_REGEX = /^import(?:(?:[\\s]+[\\w]+|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\{[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?(?:[\\s]*,[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?)*[\\s]*}|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\*[\\s]+as[\\s]+[\\w]+)[\\s]+from)?(?:[\\s]*)(\"([^\"\\\\]|\\\\.)+\"|'([^'\\\\]|\\\\.)+')(?:[\\s]*);?/; // tslint:disable-line:max-line-length\n\nexport const splitImportStatements = (source, url) => {\n  const importStatements = [];\n  let sourceWithoutImportStatements = source.replace(/^[\\s]+/, '');\n  let result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n\n  while (result !== null) {\n    const unresolvedUrl = result[1].slice(1, -1);\n    const importStatementWithResolvedUrl = result[0].replace(/([\\s]+)?;?$/, '').replace(unresolvedUrl, new URL(unresolvedUrl, url).toString());\n    importStatements.push(importStatementWithResolvedUrl);\n    sourceWithoutImportStatements = sourceWithoutImportStatements.slice(result[0].length).replace(/^[\\s]+/, '');\n    result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n  }\n\n  return [importStatements.join(';'), sourceWithoutImportStatements];\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/helpers/split-import-statements.js"],"names":["IMPORT_STATEMENT_REGEX","splitImportStatements","source","url","importStatements","sourceWithoutImportStatements","replace","result","match","unresolvedUrl","slice","importStatementWithResolvedUrl","URL","toString","push","length","join"],"mappings":"AAAA;;;;;;;;;;;;AAYA,MAAMA,sBAAsB,GAAG,sPAA/B,C,CAAuR;;AACvR,OAAO,MAAMC,qBAAqB,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AAClD,QAAMC,gBAAgB,GAAG,EAAzB;AACA,MAAIC,6BAA6B,GAAGH,MAAM,CAACI,OAAP,CAAe,QAAf,EAAyB,EAAzB,CAApC;AACA,MAAIC,MAAM,GAAGF,6BAA6B,CAACG,KAA9B,CAAoCR,sBAApC,CAAb;;AACA,SAAOO,MAAM,KAAK,IAAlB,EAAwB;AACpB,UAAME,aAAa,GAAGF,MAAM,CAAC,CAAD,CAAN,CAAUG,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAApB,CAAtB;AACA,UAAMC,8BAA8B,GAAGJ,MAAM,CAAC,CAAD,CAAN,CAClCD,OADkC,CAC1B,aAD0B,EACX,EADW,EAElCA,OAFkC,CAE1BG,aAF0B,EAEV,IAAIG,GAAJ,CAAQH,aAAR,EAAuBN,GAAvB,CAAD,CAA8BU,QAA9B,EAFW,CAAvC;AAGAT,IAAAA,gBAAgB,CAACU,IAAjB,CAAsBH,8BAAtB;AACAN,IAAAA,6BAA6B,GAAGA,6BAA6B,CACxDK,KAD2B,CACrBH,MAAM,CAAC,CAAD,CAAN,CAAUQ,MADW,EAE3BT,OAF2B,CAEnB,QAFmB,EAET,EAFS,CAAhC;AAGAC,IAAAA,MAAM,GAAGF,6BAA6B,CAACG,KAA9B,CAAoCR,sBAApC,CAAT;AACH;;AACD,SAAO,CAACI,gBAAgB,CAACY,IAAjB,CAAsB,GAAtB,CAAD,EAA6BX,6BAA7B,CAAP;AACH,CAhBM","sourcesContent":["/*\n * This massive regex tries to cover all the following cases.\n *\n * import './path';\n * import defaultImport from './path';\n * import { namedImport } from './path';\n * import { namedImport as renamendImport } from './path';\n * import * as namespaceImport from './path';\n * import defaultImport, { namedImport } from './path';\n * import defaultImport, { namedImport as renamendImport } from './path';\n * import defaultImport, * as namespaceImport from './path';\n */\nconst IMPORT_STATEMENT_REGEX = /^import(?:(?:[\\s]+[\\w]+|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\{[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?(?:[\\s]*,[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?)*[\\s]*}|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\*[\\s]+as[\\s]+[\\w]+)[\\s]+from)?(?:[\\s]*)(\"([^\"\\\\]|\\\\.)+\"|'([^'\\\\]|\\\\.)+')(?:[\\s]*);?/; // tslint:disable-line:max-line-length\nexport const splitImportStatements = (source, url) => {\n    const importStatements = [];\n    let sourceWithoutImportStatements = source.replace(/^[\\s]+/, '');\n    let result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n    while (result !== null) {\n        const unresolvedUrl = result[1].slice(1, -1);\n        const importStatementWithResolvedUrl = result[0]\n            .replace(/([\\s]+)?;?$/, '')\n            .replace(unresolvedUrl, (new URL(unresolvedUrl, url)).toString());\n        importStatements.push(importStatementWithResolvedUrl);\n        sourceWithoutImportStatements = sourceWithoutImportStatements\n            .slice(result[0].length)\n            .replace(/^[\\s]+/, '');\n        result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n    }\n    return [importStatements.join(';'), sourceWithoutImportStatements];\n};\n//# sourceMappingURL=/build/es2018/helpers/split-import-statements.js.map"]},"metadata":{},"sourceType":"module"}