{"ast":null,"code":"import { geoAzimuthalEqualAreaRaw as azimuthalEqualAreaRaw, geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { asin, cos, sin } from \"./math.js\";\nexport function hammerRaw(A, B) {\n  if (arguments.length < 2) B = A;\n  if (B === 1) return azimuthalEqualAreaRaw;\n  if (B === Infinity) return hammerQuarticAuthalicRaw;\n\n  function forward(lambda, phi) {\n    var coordinates = azimuthalEqualAreaRaw(lambda / B, phi);\n    coordinates[0] *= A;\n    return coordinates;\n  }\n\n  forward.invert = function (x, y) {\n    var coordinates = azimuthalEqualAreaRaw.invert(x / A, y);\n    coordinates[0] *= B;\n    return coordinates;\n  };\n\n  return forward;\n}\n\nfunction hammerQuarticAuthalicRaw(lambda, phi) {\n  return [lambda * cos(phi) / cos(phi /= 2), 2 * sin(phi)];\n}\n\nhammerQuarticAuthalicRaw.invert = function (x, y) {\n  var phi = 2 * asin(y / 2);\n  return [x * cos(phi / 2) / cos(phi), phi];\n};\n\nexport default function () {\n  var B = 2,\n      m = projectionMutator(hammerRaw),\n      p = m(B);\n\n  p.coefficient = function (_) {\n    if (!arguments.length) return B;\n    return m(B = +_);\n  };\n\n  return p.scale(169.529);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/hammer.js"],"names":["geoAzimuthalEqualAreaRaw","azimuthalEqualAreaRaw","geoProjectionMutator","projectionMutator","asin","cos","sin","hammerRaw","A","B","arguments","length","Infinity","hammerQuarticAuthalicRaw","forward","lambda","phi","coordinates","invert","x","y","m","p","coefficient","_","scale"],"mappings":"AAAA,SAAQA,wBAAwB,IAAIC,qBAApC,EAA2DC,oBAAoB,IAAIC,iBAAnF,QAA2G,QAA3G;AACA,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,GAAnB,QAA6B,WAA7B;AAEA,OAAO,SAASC,SAAT,CAAmBC,CAAnB,EAAsBC,CAAtB,EAAyB;AAC9B,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0BF,CAAC,GAAGD,CAAJ;AAC1B,MAAIC,CAAC,KAAK,CAAV,EAAa,OAAOR,qBAAP;AACb,MAAIQ,CAAC,KAAKG,QAAV,EAAoB,OAAOC,wBAAP;;AAEpB,WAASC,OAAT,CAAiBC,MAAjB,EAAyBC,GAAzB,EAA8B;AAC5B,QAAIC,WAAW,GAAGhB,qBAAqB,CAACc,MAAM,GAAGN,CAAV,EAAaO,GAAb,CAAvC;AACAC,IAAAA,WAAW,CAAC,CAAD,CAAX,IAAkBT,CAAlB;AACA,WAAOS,WAAP;AACD;;AAEDH,EAAAA,OAAO,CAACI,MAAR,GAAiB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC9B,QAAIH,WAAW,GAAGhB,qBAAqB,CAACiB,MAAtB,CAA6BC,CAAC,GAAGX,CAAjC,EAAoCY,CAApC,CAAlB;AACAH,IAAAA,WAAW,CAAC,CAAD,CAAX,IAAkBR,CAAlB;AACA,WAAOQ,WAAP;AACD,GAJD;;AAMA,SAAOH,OAAP;AACD;;AAED,SAASD,wBAAT,CAAkCE,MAAlC,EAA0CC,GAA1C,EAA+C;AAC7C,SAAO,CACLD,MAAM,GAAGV,GAAG,CAACW,GAAD,CAAZ,GAAoBX,GAAG,CAACW,GAAG,IAAI,CAAR,CADlB,EAEL,IAAIV,GAAG,CAACU,GAAD,CAFF,CAAP;AAID;;AAEDH,wBAAwB,CAACK,MAAzB,GAAkC,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC/C,MAAIJ,GAAG,GAAG,IAAIZ,IAAI,CAACgB,CAAC,GAAG,CAAL,CAAlB;AACA,SAAO,CACLD,CAAC,GAAGd,GAAG,CAACW,GAAG,GAAG,CAAP,CAAP,GAAmBX,GAAG,CAACW,GAAD,CADjB,EAELA,GAFK,CAAP;AAID,CAND;;AAQA,eAAe,YAAW;AACxB,MAAIP,CAAC,GAAG,CAAR;AAAA,MACIY,CAAC,GAAGlB,iBAAiB,CAACI,SAAD,CADzB;AAAA,MAEIe,CAAC,GAAGD,CAAC,CAACZ,CAAD,CAFT;;AAIAa,EAAAA,CAAC,CAACC,WAAF,GAAgB,UAASC,CAAT,EAAY;AAC1B,QAAI,CAACd,SAAS,CAACC,MAAf,EAAuB,OAAOF,CAAP;AACvB,WAAOY,CAAC,CAACZ,CAAC,GAAG,CAACe,CAAN,CAAR;AACD,GAHD;;AAKA,SAAOF,CAAC,CACLG,KADI,CACE,OADF,CAAP;AAED","sourcesContent":["import {geoAzimuthalEqualAreaRaw as azimuthalEqualAreaRaw, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {asin, cos, sin} from \"./math.js\";\n\nexport function hammerRaw(A, B) {\n  if (arguments.length < 2) B = A;\n  if (B === 1) return azimuthalEqualAreaRaw;\n  if (B === Infinity) return hammerQuarticAuthalicRaw;\n\n  function forward(lambda, phi) {\n    var coordinates = azimuthalEqualAreaRaw(lambda / B, phi);\n    coordinates[0] *= A;\n    return coordinates;\n  }\n\n  forward.invert = function(x, y) {\n    var coordinates = azimuthalEqualAreaRaw.invert(x / A, y);\n    coordinates[0] *= B;\n    return coordinates;\n  };\n\n  return forward;\n}\n\nfunction hammerQuarticAuthalicRaw(lambda, phi) {\n  return [\n    lambda * cos(phi) / cos(phi /= 2),\n    2 * sin(phi)\n  ];\n}\n\nhammerQuarticAuthalicRaw.invert = function(x, y) {\n  var phi = 2 * asin(y / 2);\n  return [\n    x * cos(phi / 2) / cos(phi),\n    phi\n  ];\n};\n\nexport default function() {\n  var B = 2,\n      m = projectionMutator(hammerRaw),\n      p = m(B);\n\n  p.coefficient = function(_) {\n    if (!arguments.length) return B;\n    return m(B = +_);\n  };\n\n  return p\n    .scale(169.529);\n}\n"]},"metadata":{},"sourceType":"module"}