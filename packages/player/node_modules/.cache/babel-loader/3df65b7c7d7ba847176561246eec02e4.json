{"ast":null,"code":"import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n  buffer: null,\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  // Bug #149: Safari does not yet support the detune AudioParam.\n  loop: false,\n  loopEnd: 0,\n  loopStart: 0,\n  playbackRate: 1\n};\nexport const createAudioBufferSourceNodeConstructor = (audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n  return class AudioBufferSourceNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const audioBufferSourceNodeRenderer = isOffline ? createAudioBufferSourceNodeRenderer() : null;\n      super(context, false, nativeAudioBufferSourceNode, audioBufferSourceNodeRenderer);\n      this._audioBufferSourceNodeRenderer = audioBufferSourceNodeRenderer;\n      this._isBufferNullified = false;\n      this._isBufferSet = options.buffer !== null && options.buffer !== undefined;\n      this._nativeAudioBufferSourceNode = nativeAudioBufferSourceNode;\n      this._onended = null; // Bug #73: Edge & Safari do not export the correct values for maxValue and minValue.\n\n      this._playbackRate = createAudioParam(this, isOffline, nativeAudioBufferSourceNode.playbackRate, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n    }\n\n    get buffer() {\n      if (this._isBufferNullified) {\n        return null;\n      }\n\n      return this._nativeAudioBufferSourceNode.buffer;\n    }\n\n    set buffer(value) {\n      // Bug #71: Edge does not allow to set the buffer to null.\n      try {\n        this._nativeAudioBufferSourceNode.buffer = value;\n      } catch (err) {\n        if (value !== null || err.code !== 17) {\n          throw err; // tslint:disable-line:rxjs-throw-error\n        } // This will modify the buffer in place. Luckily that works in Edge and has the same effect as setting the buffer to null.\n\n\n        if (this._nativeAudioBufferSourceNode.buffer !== null) {\n          const buffer = this._nativeAudioBufferSourceNode.buffer;\n          const numberOfChannels = buffer.numberOfChannels;\n\n          for (let i = 0; i < numberOfChannels; i += 1) {\n            buffer.getChannelData(i).fill(0);\n          }\n\n          this._isBufferNullified = true;\n        }\n      } // Bug #72: Only Chrome, Edge & Opera do not allow to reassign the buffer yet.\n\n\n      if (value !== null) {\n        if (this._isBufferSet) {\n          throw createInvalidStateError();\n        }\n\n        this._isBufferSet = true;\n      }\n    }\n\n    get onended() {\n      return this._onended;\n    }\n\n    set onended(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeAudioBufferSourceNode.onended = wrappedListener;\n      const nativeOnEnded = this._nativeAudioBufferSourceNode.onended;\n      this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n    }\n\n    get loop() {\n      return this._nativeAudioBufferSourceNode.loop;\n    }\n\n    set loop(value) {\n      this._nativeAudioBufferSourceNode.loop = value;\n    }\n\n    get loopEnd() {\n      return this._nativeAudioBufferSourceNode.loopEnd;\n    }\n\n    set loopEnd(value) {\n      this._nativeAudioBufferSourceNode.loopEnd = value;\n    }\n\n    get loopStart() {\n      return this._nativeAudioBufferSourceNode.loopStart;\n    }\n\n    set loopStart(value) {\n      this._nativeAudioBufferSourceNode.loopStart = value;\n    }\n\n    get playbackRate() {\n      return this._playbackRate;\n    }\n\n    start(when = 0, offset = 0, duration) {\n      this._nativeAudioBufferSourceNode.start(when, offset, duration);\n\n      if (this._audioBufferSourceNodeRenderer !== null) {\n        this._audioBufferSourceNodeRenderer.start = duration === undefined ? [when, offset] : [when, offset, duration];\n      } else {\n        setInternalStateToActive(this);\n\n        const resetInternalStateToPassive = () => {\n          this._nativeAudioBufferSourceNode.removeEventListener('ended', resetInternalStateToPassive); // @todo Determine a meaningful delay instead of just using one second.\n\n\n          setTimeout(() => setInternalStateToPassive(this), 1000);\n        };\n\n        this._nativeAudioBufferSourceNode.addEventListener('ended', resetInternalStateToPassive);\n      }\n    }\n\n    stop(when = 0) {\n      this._nativeAudioBufferSourceNode.stop(when);\n\n      if (this._audioBufferSourceNodeRenderer !== null) {\n        this._audioBufferSourceNodeRenderer.stop = when;\n      }\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/audio-buffer-source-node-constructor.js"],"names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","setInternalStateToActive","setInternalStateToPassive","DEFAULT_OPTIONS","buffer","channelCount","channelCountMode","channelInterpretation","loop","loopEnd","loopStart","playbackRate","createAudioBufferSourceNodeConstructor","audioNodeConstructor","createAudioBufferSourceNodeRenderer","createAudioParam","createInvalidStateError","createNativeAudioBufferSourceNode","getNativeContext","isNativeOfflineAudioContext","wrapEventListener","AudioBufferSourceNode","constructor","context","options","nativeContext","mergedOptions","nativeAudioBufferSourceNode","isOffline","audioBufferSourceNodeRenderer","_audioBufferSourceNodeRenderer","_isBufferNullified","_isBufferSet","undefined","_nativeAudioBufferSourceNode","_onended","_playbackRate","value","err","code","numberOfChannels","i","getChannelData","fill","onended","wrappedListener","nativeOnEnded","start","when","offset","duration","resetInternalStateToPassive","removeEventListener","setTimeout","addEventListener","stop"],"mappings":"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","sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n    buffer: null,\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    // Bug #149: Safari does not yet support the detune AudioParam.\n    loop: false,\n    loopEnd: 0,\n    loopStart: 0,\n    playbackRate: 1\n};\nexport const createAudioBufferSourceNodeConstructor = (audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n    return class AudioBufferSourceNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const audioBufferSourceNodeRenderer = ((isOffline)\n                ? createAudioBufferSourceNodeRenderer()\n                : null);\n            super(context, false, nativeAudioBufferSourceNode, audioBufferSourceNodeRenderer);\n            this._audioBufferSourceNodeRenderer = audioBufferSourceNodeRenderer;\n            this._isBufferNullified = false;\n            this._isBufferSet = (options.buffer !== null && options.buffer !== undefined);\n            this._nativeAudioBufferSourceNode = nativeAudioBufferSourceNode;\n            this._onended = null;\n            // Bug #73: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._playbackRate = createAudioParam(this, isOffline, nativeAudioBufferSourceNode.playbackRate, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n        get buffer() {\n            if (this._isBufferNullified) {\n                return null;\n            }\n            return this._nativeAudioBufferSourceNode.buffer;\n        }\n        set buffer(value) {\n            // Bug #71: Edge does not allow to set the buffer to null.\n            try {\n                this._nativeAudioBufferSourceNode.buffer = value;\n            }\n            catch (err) {\n                if (value !== null || err.code !== 17) {\n                    throw err; // tslint:disable-line:rxjs-throw-error\n                }\n                // This will modify the buffer in place. Luckily that works in Edge and has the same effect as setting the buffer to null.\n                if (this._nativeAudioBufferSourceNode.buffer !== null) {\n                    const buffer = this._nativeAudioBufferSourceNode.buffer;\n                    const numberOfChannels = buffer.numberOfChannels;\n                    for (let i = 0; i < numberOfChannels; i += 1) {\n                        buffer\n                            .getChannelData(i)\n                            .fill(0);\n                    }\n                    this._isBufferNullified = true;\n                }\n            }\n            // Bug #72: Only Chrome, Edge & Opera do not allow to reassign the buffer yet.\n            if (value !== null) {\n                if (this._isBufferSet) {\n                    throw createInvalidStateError();\n                }\n                this._isBufferSet = true;\n            }\n        }\n        get onended() {\n            return this._onended;\n        }\n        set onended(value) {\n            const wrappedListener = (typeof value === 'function') ? wrapEventListener(this, value) : null;\n            this._nativeAudioBufferSourceNode.onended = wrappedListener;\n            const nativeOnEnded = this._nativeAudioBufferSourceNode.onended;\n            this._onended = (nativeOnEnded !== null && nativeOnEnded === wrappedListener) ? value : nativeOnEnded;\n        }\n        get loop() {\n            return this._nativeAudioBufferSourceNode.loop;\n        }\n        set loop(value) {\n            this._nativeAudioBufferSourceNode.loop = value;\n        }\n        get loopEnd() {\n            return this._nativeAudioBufferSourceNode.loopEnd;\n        }\n        set loopEnd(value) {\n            this._nativeAudioBufferSourceNode.loopEnd = value;\n        }\n        get loopStart() {\n            return this._nativeAudioBufferSourceNode.loopStart;\n        }\n        set loopStart(value) {\n            this._nativeAudioBufferSourceNode.loopStart = value;\n        }\n        get playbackRate() {\n            return this._playbackRate;\n        }\n        start(when = 0, offset = 0, duration) {\n            this._nativeAudioBufferSourceNode.start(when, offset, duration);\n            if (this._audioBufferSourceNodeRenderer !== null) {\n                this._audioBufferSourceNodeRenderer.start = (duration === undefined) ? [when, offset] : [when, offset, duration];\n            }\n            else {\n                setInternalStateToActive(this);\n                const resetInternalStateToPassive = () => {\n                    this._nativeAudioBufferSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n                    // @todo Determine a meaningful delay instead of just using one second.\n                    setTimeout(() => setInternalStateToPassive(this), 1000);\n                };\n                this._nativeAudioBufferSourceNode.addEventListener('ended', resetInternalStateToPassive);\n            }\n        }\n        stop(when = 0) {\n            this._nativeAudioBufferSourceNode.stop(when);\n            if (this._audioBufferSourceNodeRenderer !== null) {\n                this._audioBufferSourceNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-buffer-source-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}