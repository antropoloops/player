{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createWaveShaperNodeRendererFactory = function createWaveShaperNodeRendererFactory(createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeWaveShaperNodes = new WeakMap();\n\n    var createWaveShaperNode = function createWaveShaperNode(proxy, nativeOfflineAudioContext, trace) {\n      var nativeWaveShaperNode, nativeWaveShaperNodeIsOwnedByContext, options;\n      return _regeneratorRuntime.async(function createWaveShaperNode$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              nativeWaveShaperNode = getNativeAudioNode(proxy); // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n              nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);\n\n              if (!nativeWaveShaperNodeIsOwnedByContext) {\n                options = {\n                  channelCount: nativeWaveShaperNode.channelCount,\n                  channelCountMode: nativeWaveShaperNode.channelCountMode,\n                  channelInterpretation: nativeWaveShaperNode.channelInterpretation,\n                  curve: nativeWaveShaperNode.curve,\n                  oversample: nativeWaveShaperNode.oversample\n                };\n                nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);\n              }\n\n              renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);\n\n              if (!isNativeAudioNodeFaker(nativeWaveShaperNode)) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0], trace));\n\n            case 7:\n              _context.next = 11;\n              break;\n\n            case 9:\n              _context.next = 11;\n              return _regeneratorRuntime.awrap(renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode, trace));\n\n            case 11:\n              return _context.abrupt(\"return\", nativeWaveShaperNode);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext, trace) {\n        var renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeWaveShaperNode !== undefined) {\n          return Promise.resolve(renderedNativeWaveShaperNode);\n        }\n\n        return createWaveShaperNode(proxy, nativeOfflineAudioContext, trace);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/wave-shaper-node-renderer-factory.js"],"names":["isNativeAudioNodeFaker","isOwnedByContext","createWaveShaperNodeRendererFactory","createNativeWaveShaperNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeWaveShaperNodes","WeakMap","createWaveShaperNode","proxy","nativeOfflineAudioContext","trace","nativeWaveShaperNode","nativeWaveShaperNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","curve","oversample","set","inputs","render","renderedNativeWaveShaperNode","get","undefined","Promise","resolve"],"mappings":";AAAA,SAASA,sBAAT,QAAuC,mCAAvC;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,OAAO,IAAMC,mCAAmC,GAAG,SAAtCA,mCAAsC,CAACC,0BAAD,EAA6BC,kBAA7B,EAAiDC,uBAAjD,EAA6E;AAC5H,SAAO,YAAM;AACT,QAAMC,6BAA6B,GAAG,IAAIC,OAAJ,EAAtC;;AACA,QAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAOC,KAAP,EAAcC,yBAAd,EAAyCC,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AACrBC,cAAAA,oBADqB,GACER,kBAAkB,CAACK,KAAD,CADpB,EAEzB;;AACMI,cAAAA,oCAHmB,GAGoBZ,gBAAgB,CAACW,oBAAD,EAAuBF,yBAAvB,CAHpC;;AAIzB,kBAAI,CAACG,oCAAL,EAA2C;AACjCC,gBAAAA,OADiC,GACvB;AACZC,kBAAAA,YAAY,EAAEH,oBAAoB,CAACG,YADvB;AAEZC,kBAAAA,gBAAgB,EAAEJ,oBAAoB,CAACI,gBAF3B;AAGZC,kBAAAA,qBAAqB,EAAEL,oBAAoB,CAACK,qBAHhC;AAIZC,kBAAAA,KAAK,EAAEN,oBAAoB,CAACM,KAJhB;AAKZC,kBAAAA,UAAU,EAAEP,oBAAoB,CAACO;AALrB,iBADuB;AAQvCP,gBAAAA,oBAAoB,GAAGT,0BAA0B,CAACO,yBAAD,EAA4BI,OAA5B,CAAjD;AACH;;AACDR,cAAAA,6BAA6B,CAACc,GAA9B,CAAkCV,yBAAlC,EAA6DE,oBAA7D;;AAdyB,mBAerBZ,sBAAsB,CAACY,oBAAD,CAfD;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAgBfP,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCE,oBAAoB,CAACS,MAArB,CAA4B,CAA5B,CAAnC,EAAmEV,KAAnE,CAhBR;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,+CAmBfN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCE,oBAAnC,EAAyDD,KAAzD,CAnBR;;AAAA;AAAA,+CAqBlBC,oBArBkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA7B;;AAuBA,WAAO;AACHU,MAAAA,MADG,kBACIb,KADJ,EACWC,yBADX,EACsCC,KADtC,EAC6C;AAC5C,YAAMY,4BAA4B,GAAGjB,6BAA6B,CAACkB,GAA9B,CAAkCd,yBAAlC,CAArC;;AACA,YAAIa,4BAA4B,KAAKE,SAArC,EAAgD;AAC5C,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,4BAAhB,CAAP;AACH;;AACD,eAAOf,oBAAoB,CAACC,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,CAA3B;AACH;AAPE,KAAP;AASH,GAlCD;AAmCH,CApCM","sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createWaveShaperNodeRendererFactory = (createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeWaveShaperNodes = new WeakMap();\n        const createWaveShaperNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeWaveShaperNode = getNativeAudioNode(proxy);\n            // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);\n            if (!nativeWaveShaperNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeWaveShaperNode.channelCount,\n                    channelCountMode: nativeWaveShaperNode.channelCountMode,\n                    channelInterpretation: nativeWaveShaperNode.channelInterpretation,\n                    curve: nativeWaveShaperNode.curve,\n                    oversample: nativeWaveShaperNode.oversample\n                };\n                nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);\n            if (isNativeAudioNodeFaker(nativeWaveShaperNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0], trace);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode, trace);\n            }\n            return nativeWaveShaperNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeWaveShaperNode !== undefined) {\n                    return Promise.resolve(renderedNativeWaveShaperNode);\n                }\n                return createWaveShaperNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wave-shaper-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}