{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { abs, atan, cos, epsilon2, exp, halfPi, log, quarterPi, sign, sin, sqrt, sqrt2, tan } from \"./math.js\";\nvar sqrt8 = sqrt(8),\n    phi0 = log(1 + sqrt2);\nexport function bakerRaw(lambda, phi) {\n  var phi0 = abs(phi);\n  return phi0 < quarterPi ? [lambda, log(tan(quarterPi + phi / 2))] : [lambda * cos(phi0) * (2 * sqrt2 - 1 / sin(phi0)), sign(phi) * (2 * sqrt2 * (phi0 - quarterPi) - log(tan(phi0 / 2)))];\n}\n\nbakerRaw.invert = function (x, y) {\n  if ((y0 = abs(y)) < phi0) return [x, 2 * atan(exp(y)) - halfPi];\n  var phi = quarterPi,\n      i = 25,\n      delta,\n      y0;\n\n  do {\n    var cosPhi_2 = cos(phi / 2),\n        tanPhi_2 = tan(phi / 2);\n    phi -= delta = (sqrt8 * (phi - quarterPi) - log(tanPhi_2) - y0) / (sqrt8 - cosPhi_2 * cosPhi_2 / (2 * tanPhi_2));\n  } while (abs(delta) > epsilon2 && --i > 0);\n\n  return [x / (cos(phi) * (sqrt8 - 1 / sin(phi))), sign(y) * phi];\n};\n\nexport default function () {\n  return projection(bakerRaw).scale(112.314);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/baker.js"],"names":["geoProjection","projection","abs","atan","cos","epsilon2","exp","halfPi","log","quarterPi","sign","sin","sqrt","sqrt2","tan","sqrt8","phi0","bakerRaw","lambda","phi","invert","x","y","y0","i","delta","cosPhi_2","tanPhi_2","scale"],"mappings":"AAAA,SAAQA,aAAa,IAAIC,UAAzB,QAA0C,QAA1C;AACA,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,QAAxB,EAAkCC,GAAlC,EAAuCC,MAAvC,EAA+CC,GAA/C,EAAoDC,SAApD,EAA+DC,IAA/D,EAAqEC,GAArE,EAA0EC,IAA1E,EAAgFC,KAAhF,EAAuFC,GAAvF,QAAiG,WAAjG;AAEA,IAAIC,KAAK,GAAGH,IAAI,CAAC,CAAD,CAAhB;AAAA,IACII,IAAI,GAAGR,GAAG,CAAC,IAAIK,KAAL,CADd;AAGA,OAAO,SAASI,QAAT,CAAkBC,MAAlB,EAA0BC,GAA1B,EAA+B;AACpC,MAAIH,IAAI,GAAGd,GAAG,CAACiB,GAAD,CAAd;AACA,SAAOH,IAAI,GAAGP,SAAP,GACD,CAACS,MAAD,EAASV,GAAG,CAACM,GAAG,CAACL,SAAS,GAAGU,GAAG,GAAG,CAAnB,CAAJ,CAAZ,CADC,GAED,CAACD,MAAM,GAAGd,GAAG,CAACY,IAAD,CAAZ,IAAsB,IAAIH,KAAJ,GAAY,IAAIF,GAAG,CAACK,IAAD,CAAzC,CAAD,EAAmDN,IAAI,CAACS,GAAD,CAAJ,IAAa,IAAIN,KAAJ,IAAaG,IAAI,GAAGP,SAApB,IAAiCD,GAAG,CAACM,GAAG,CAACE,IAAI,GAAG,CAAR,CAAJ,CAAjD,CAAnD,CAFN;AAGD;;AAEDC,QAAQ,CAACG,MAAT,GAAkB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC/B,MAAI,CAACC,EAAE,GAAGrB,GAAG,CAACoB,CAAD,CAAT,IAAgBN,IAApB,EAA0B,OAAO,CAACK,CAAD,EAAI,IAAIlB,IAAI,CAACG,GAAG,CAACgB,CAAD,CAAJ,CAAR,GAAmBf,MAAvB,CAAP;AAC1B,MAAIY,GAAG,GAAGV,SAAV;AAAA,MAAqBe,CAAC,GAAG,EAAzB;AAAA,MAA6BC,KAA7B;AAAA,MAAoCF,EAApC;;AACA,KAAG;AACD,QAAIG,QAAQ,GAAGtB,GAAG,CAACe,GAAG,GAAG,CAAP,CAAlB;AAAA,QAA6BQ,QAAQ,GAAGb,GAAG,CAACK,GAAG,GAAG,CAAP,CAA3C;AACAA,IAAAA,GAAG,IAAIM,KAAK,GAAG,CAACV,KAAK,IAAII,GAAG,GAAGV,SAAV,CAAL,GAA4BD,GAAG,CAACmB,QAAD,CAA/B,GAA4CJ,EAA7C,KAAoDR,KAAK,GAAGW,QAAQ,GAAGA,QAAX,IAAuB,IAAIC,QAA3B,CAA5D,CAAf;AACD,GAHD,QAGSzB,GAAG,CAACuB,KAAD,CAAH,GAAapB,QAAb,IAAyB,EAAEmB,CAAF,GAAM,CAHxC;;AAIA,SAAO,CAACH,CAAC,IAAIjB,GAAG,CAACe,GAAD,CAAH,IAAYJ,KAAK,GAAG,IAAIJ,GAAG,CAACQ,GAAD,CAA3B,CAAJ,CAAF,EAA0CT,IAAI,CAACY,CAAD,CAAJ,GAAUH,GAApD,CAAP;AACD,CARD;;AAUA,eAAe,YAAW;AACxB,SAAOlB,UAAU,CAACgB,QAAD,CAAV,CACFW,KADE,CACI,OADJ,CAAP;AAED","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, atan, cos, epsilon2, exp, halfPi, log, quarterPi, sign, sin, sqrt, sqrt2, tan} from \"./math.js\";\n\nvar sqrt8 = sqrt(8),\n    phi0 = log(1 + sqrt2);\n\nexport function bakerRaw(lambda, phi) {\n  var phi0 = abs(phi);\n  return phi0 < quarterPi\n      ? [lambda, log(tan(quarterPi + phi / 2))]\n      : [lambda * cos(phi0) * (2 * sqrt2 - 1 / sin(phi0)), sign(phi) * (2 * sqrt2 * (phi0 - quarterPi) - log(tan(phi0 / 2)))];\n}\n\nbakerRaw.invert = function(x, y) {\n  if ((y0 = abs(y)) < phi0) return [x, 2 * atan(exp(y)) - halfPi];\n  var phi = quarterPi, i = 25, delta, y0;\n  do {\n    var cosPhi_2 = cos(phi / 2), tanPhi_2 = tan(phi / 2);\n    phi -= delta = (sqrt8 * (phi - quarterPi) - log(tanPhi_2) - y0) / (sqrt8 - cosPhi_2 * cosPhi_2 / (2 * tanPhi_2));\n  } while (abs(delta) > epsilon2 && --i > 0);\n  return [x / (cos(phi) * (sqrt8 - 1 / sin(phi))), sign(y) * phi];\n};\n\nexport default function() {\n  return projection(bakerRaw)\n      .scale(112.314);\n}\n"]},"metadata":{},"sourceType":"module"}