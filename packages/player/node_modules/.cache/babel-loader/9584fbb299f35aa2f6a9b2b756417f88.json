{"ast":null,"code":"import debug from \"debug\";\nimport { AudioContext } from \"standardized-audio-context\";\nconst log = debug(\"atpls:context\");\nconst activeListeners = [];\nconst context = new AudioContext();\ncontext.onstatechange = handleStateChange;\n/**\n * @see https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio\n */\n\nexport function getActiveAudioContext() {\n  if (context.state === \"running\") {\n    return Promise.resolve(context);\n  } else {\n    return new Promise(resolve => {\n      activeListeners.push(resolve);\n    });\n  }\n}\nexport function autoUnlockAudio() {\n  function unlock() {\n    context.resume().then(detach);\n  }\n\n  function detach() {\n    // Remove the touch start listener.\n    log(\"detach auto unlock\", context.state);\n    document.removeEventListener(\"touchstart\", unlock, true);\n    document.removeEventListener(\"touchend\", unlock, true);\n    document.removeEventListener(\"click\", unlock, true);\n  } // Setup a touch start listener to attempt an unlock in.\n\n\n  log(\"attach auto unlock\");\n  document.addEventListener(\"touchstart\", unlock, true);\n  document.addEventListener(\"touchend\", unlock, true);\n  document.addEventListener(\"click\", unlock, true);\n}\n\nfunction handleStateChange() {\n  const state = context.state;\n  log(\"state %s\", state);\n\n  if (state === \"running\") {\n    const listeners = activeListeners.slice();\n    activeListeners.length = 0;\n    listeners.forEach(listener => listener(context));\n  }\n}\n\nhandleStateChange();","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/Audio/AudioContext.ts"],"names":["debug","AudioContext","log","activeListeners","context","onstatechange","handleStateChange","getActiveAudioContext","state","Promise","resolve","push","autoUnlockAudio","unlock","resume","then","detach","document","removeEventListener","addEventListener","listeners","slice","length","forEach","listener"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,4BAA7B;AAEA,MAAMC,GAAG,GAAGF,KAAK,CAAC,eAAD,CAAjB;AAGA,MAAMG,eAAiC,GAAG,EAA1C;AACA,MAAMC,OAAO,GAAG,IAAIH,YAAJ,EAAhB;AACAG,OAAO,CAACC,aAAR,GAAwBC,iBAAxB;AAEA;;;;AAGA,OAAO,SAASC,qBAAT,GAAwD;AAC7D,MAAIH,OAAO,CAACI,KAAR,KAAkB,SAAtB,EAAiC;AAC/B,WAAOC,OAAO,CAACC,OAAR,CAAgBN,OAAhB,CAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAIK,OAAJ,CAA0BC,OAAO,IAAI;AAC1CP,MAAAA,eAAe,CAACQ,IAAhB,CAAqBD,OAArB;AACD,KAFM,CAAP;AAGD;AACF;AAED,OAAO,SAASE,eAAT,GAA2B;AAChC,WAASC,MAAT,GAAkB;AAChBT,IAAAA,OAAO,CAACU,MAAR,GAAiBC,IAAjB,CAAsBC,MAAtB;AACD;;AAED,WAASA,MAAT,GAAkB;AAChB;AACAd,IAAAA,GAAG,CAAC,oBAAD,EAAuBE,OAAO,CAACI,KAA/B,CAAH;AACAS,IAAAA,QAAQ,CAACC,mBAAT,CAA6B,YAA7B,EAA2CL,MAA3C,EAAmD,IAAnD;AACAI,IAAAA,QAAQ,CAACC,mBAAT,CAA6B,UAA7B,EAAyCL,MAAzC,EAAiD,IAAjD;AACAI,IAAAA,QAAQ,CAACC,mBAAT,CAA6B,OAA7B,EAAsCL,MAAtC,EAA8C,IAA9C;AACD,GAX+B,CAahC;;;AACAX,EAAAA,GAAG,CAAC,oBAAD,CAAH;AACAe,EAAAA,QAAQ,CAACE,gBAAT,CAA0B,YAA1B,EAAwCN,MAAxC,EAAgD,IAAhD;AACAI,EAAAA,QAAQ,CAACE,gBAAT,CAA0B,UAA1B,EAAsCN,MAAtC,EAA8C,IAA9C;AACAI,EAAAA,QAAQ,CAACE,gBAAT,CAA0B,OAA1B,EAAmCN,MAAnC,EAA2C,IAA3C;AACD;;AAED,SAASP,iBAAT,GAA6B;AAC3B,QAAME,KAAK,GAAGJ,OAAO,CAACI,KAAtB;AACAN,EAAAA,GAAG,CAAC,UAAD,EAAaM,KAAb,CAAH;;AACA,MAAIA,KAAK,KAAK,SAAd,EAAyB;AACvB,UAAMY,SAAS,GAAGjB,eAAe,CAACkB,KAAhB,EAAlB;AACAlB,IAAAA,eAAe,CAACmB,MAAhB,GAAyB,CAAzB;AACAF,IAAAA,SAAS,CAACG,OAAV,CAAkBC,QAAQ,IAAIA,QAAQ,CAACpB,OAAD,CAAtC;AACD;AACF;;AAEDE,iBAAiB","sourcesContent":["import debug from \"debug\";\nimport { AudioContext } from \"standardized-audio-context\";\n\nconst log = debug(\"atpls:context\");\n\ntype ResolveContext = (value: AudioContext) => void;\nconst activeListeners: ResolveContext[] = [];\nconst context = new AudioContext();\ncontext.onstatechange = handleStateChange;\n\n/**\n * @see https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio\n */\nexport function getActiveAudioContext(): Promise<AudioContext> {\n  if (context.state === \"running\") {\n    return Promise.resolve(context);\n  } else {\n    return new Promise<AudioContext>(resolve => {\n      activeListeners.push(resolve);\n    });\n  }\n}\n\nexport function autoUnlockAudio() {\n  function unlock() {\n    context.resume().then(detach);\n  }\n\n  function detach() {\n    // Remove the touch start listener.\n    log(\"detach auto unlock\", context.state);\n    document.removeEventListener(\"touchstart\", unlock, true);\n    document.removeEventListener(\"touchend\", unlock, true);\n    document.removeEventListener(\"click\", unlock, true);\n  }\n\n  // Setup a touch start listener to attempt an unlock in.\n  log(\"attach auto unlock\");\n  document.addEventListener(\"touchstart\", unlock, true);\n  document.addEventListener(\"touchend\", unlock, true);\n  document.addEventListener(\"click\", unlock, true);\n}\n\nfunction handleStateChange() {\n  const state = context.state;\n  log(\"state %s\", state);\n  if (state === \"running\") {\n    const listeners = activeListeners.slice();\n    activeListeners.length = 0;\n    listeners.forEach(listener => listener(context));\n  }\n}\n\nhandleStateChange();\n"]},"metadata":{},"sourceType":"module"}