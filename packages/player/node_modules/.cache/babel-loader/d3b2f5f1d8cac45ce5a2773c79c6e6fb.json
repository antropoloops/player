{"ast":null,"code":"import _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from \"react\";\nimport * as screen from \"screenfull\";\nexport function useFullscreen(onChange) {\n  let request = () => undefined;\n\n  let exit = () => undefined;\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        isOpen = _useState2[0],\n        setIsOpen = _useState2[1];\n\n  useEffect(() => {\n    if (screen.isEnabled) {\n      screen.on(\"change\", setIsOpen);\n      request = screen.request;\n      exit = screen.exit;\n    }\n  }, []);\n  return {\n    isOpen,\n    request,\n    exit\n  };\n}\nexport function useFullscreenOld(onChange) {\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        fullscreen = _useState4[0],\n        setFullscreen = _useState4[1];\n\n  const open = () => setFullscreen(Date.now());\n\n  if (screen.isEnabled) {\n    screen.on(\"change\", () => onChange(screen.isEnabled));\n  }\n\n  useEffect(() => {\n    if (!screen.isEnabled) {\n      return;\n    }\n\n    if (fullscreen) {\n      screen.request();\n    } else {\n      screen.exit();\n    }\n  }, [fullscreen]);\n  return {\n    open\n  };\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/useFullscreen.ts"],"names":["useEffect","useState","screen","useFullscreen","onChange","request","undefined","exit","isOpen","setIsOpen","isEnabled","on","useFullscreenOld","fullscreen","setFullscreen","open","Date","now"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAO,KAAKC,MAAZ,MAAwB,YAAxB;AAGA,OAAO,SAASC,aAAT,CAAuBC,QAAvB,EAA4D;AACjE,MAAIC,OAAO,GAAG,MAAMC,SAApB;;AACA,MAAIC,IAAI,GAAG,MAAMD,SAAjB;;AAFiE,oBAGrCL,QAAQ,EAH6B;AAAA;AAAA,QAG1DO,MAH0D;AAAA,QAGlDC,SAHkD;;AAIjET,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIE,MAAM,CAACQ,SAAX,EAAsB;AACpBR,MAAAA,MAAM,CAACS,EAAP,CAAU,QAAV,EAAoBF,SAApB;AACAJ,MAAAA,OAAO,GAAGH,MAAM,CAACG,OAAjB;AACAE,MAAAA,IAAI,GAAGL,MAAM,CAACK,IAAd;AACD;AACF,GANQ,EAMN,EANM,CAAT;AAOA,SAAO;AAAEC,IAAAA,MAAF;AAAUH,IAAAA,OAAV;AAAmBE,IAAAA;AAAnB,GAAP;AACD;AAED,OAAO,SAASK,gBAAT,CAA0BR,QAA1B,EAA+D;AAAA,qBAChCH,QAAQ,EADwB;AAAA;AAAA,QAC7DY,UAD6D;AAAA,QACjDC,aADiD;;AAEpE,QAAMC,IAAI,GAAG,MAAMD,aAAa,CAACE,IAAI,CAACC,GAAL,EAAD,CAAhC;;AAEA,MAAIf,MAAM,CAACQ,SAAX,EAAsB;AACpBR,IAAAA,MAAM,CAACS,EAAP,CAAU,QAAV,EAAoB,MAAMP,QAAQ,CAACF,MAAM,CAACQ,SAAR,CAAlC;AACD;;AAEDV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACE,MAAM,CAACQ,SAAZ,EAAuB;AACrB;AACD;;AACD,QAAIG,UAAJ,EAAgB;AACdX,MAAAA,MAAM,CAACG,OAAP;AACD,KAFD,MAEO;AACLH,MAAAA,MAAM,CAACK,IAAP;AACD;AACF,GATQ,EASN,CAACM,UAAD,CATM,CAAT;AAWA,SAAO;AAAEE,IAAAA;AAAF,GAAP;AACD","sourcesContent":["import { useEffect, useState } from \"react\";\nimport * as screen from \"screenfull\";\n\n\nexport function useFullscreen(onChange: (isOpen: boolean) => void) {\n  let request = () => undefined;\n  let exit = () => undefined;\n  const [isOpen, setIsOpen] = useState();\n  useEffect(() => {\n    if (screen.isEnabled) {\n      screen.on(\"change\", setIsOpen);\n      request = screen.request;\n      exit = screen.exit;\n    }\n  }, []);\n  return { isOpen, request, exit };\n}\n\nexport function useFullscreenOld(onChange: (isOpen: boolean) => void) {\n  const [fullscreen, setFullscreen] = useState();\n  const open = () => setFullscreen(Date.now());\n\n  if (screen.isEnabled) {\n    screen.on(\"change\", () => onChange(screen.isEnabled));\n  }\n\n  useEffect(() => {\n    if (!screen.isEnabled) {\n      return;\n    }\n    if (fullscreen) {\n      screen.request();\n    } else {\n      screen.exit();\n    }\n  }, [fullscreen]);\n\n  return { open };\n}\n"]},"metadata":{},"sourceType":"module"}