{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, atan2, cos, sign, epsilon, epsilon2, halfPi, pi, sin, sqrt } from \"./math.js\";\nimport squareRaw from \"./square.js\";\nexport function gringortenRaw(lambda, phi) {\n  var sLambda = sign(lambda),\n      sPhi = sign(phi),\n      cosPhi = cos(phi),\n      x = cos(lambda) * cosPhi,\n      y = sin(lambda) * cosPhi,\n      z = sin(sPhi * phi);\n  lambda = abs(atan2(y, z));\n  phi = asin(x);\n  if (abs(lambda - halfPi) > epsilon) lambda %= halfPi;\n  var point = gringortenHexadecant(lambda > pi / 4 ? halfPi - lambda : lambda, phi);\n  if (lambda > pi / 4) z = point[0], point[0] = -point[1], point[1] = -z;\n  return point[0] *= sLambda, point[1] *= -sPhi, point;\n}\n\ngringortenRaw.invert = function (x, y) {\n  if (abs(x) > 1) x = sign(x) * 2 - x;\n  if (abs(y) > 1) y = sign(y) * 2 - y;\n  var sx = sign(x),\n      sy = sign(y),\n      x0 = -sx * x,\n      y0 = -sy * y,\n      t = y0 / x0 < 1,\n      p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0),\n      lambda = p[0],\n      phi = p[1],\n      cosPhi = cos(phi);\n  if (t) lambda = -halfPi - lambda;\n  return [sx * (atan2(sin(lambda) * cosPhi, -sin(phi)) + pi), sy * asin(cos(lambda) * cosPhi)];\n};\n\nfunction gringortenHexadecant(lambda, phi) {\n  if (phi === halfPi) return [0, 0];\n  var sinPhi = sin(phi),\n      r = sinPhi * sinPhi,\n      r2 = r * r,\n      j = 1 + r2,\n      k = 1 + 3 * r2,\n      q = 1 - r2,\n      z = asin(1 / sqrt(j)),\n      v = q + r * j * z,\n      p2 = (1 - sinPhi) / v,\n      p = sqrt(p2),\n      a2 = p2 * j,\n      a = sqrt(a2),\n      h = p * q,\n      x,\n      i;\n  if (lambda === 0) return [0, -(h + r * a)];\n  var cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * k) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = 0.5 * dp2dPhi / p,\n      dhdPhi = q * dpdPhi - 2 * r * p * drdPhi,\n      dra2dPhi = r * j * dp2dPhi + p2 * k * drdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * dra2dPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      lambda1 = 4 * lambda / pi,\n      delta; // Slower but accurate bisection method.\n\n  if (lambda > 0.222 * pi || phi < pi / 4 && lambda > 0.175 * pi) {\n    x = (h + r * sqrt(a2 * (1 + r2) - h * h)) / (1 + r2);\n    if (lambda > pi / 4) return [x, x];\n    var x1 = x,\n        x0 = 0.5 * x;\n    x = 0.5 * (x0 + x1), i = 50;\n\n    do {\n      var g = sqrt(a2 - x * x),\n          f = x * (zeta + mu * g) + nu * asin(x / a) - lambda1;\n      if (!f) break;\n      if (f < 0) x0 = x;else x1 = x;\n      x = 0.5 * (x0 + x1);\n    } while (abs(x1 - x0) > epsilon && --i > 0);\n  } // Newton-Raphson.\n  else {\n      x = epsilon, i = 25;\n\n      do {\n        var x2 = x * x,\n            g2 = sqrt(a2 - x2),\n            zetaMug = zeta + mu * g2,\n            f2 = x * zetaMug + nu * asin(x / a) - lambda1,\n            df = zetaMug + (nu - mu * x2) / g2;\n        x -= delta = g2 ? f2 / df : 0;\n      } while (abs(delta) > epsilon && --i > 0);\n    }\n\n  return [x, -h - r * sqrt(a2 - x * x)];\n}\n\nfunction gringortenHexadecantInvert(x, y) {\n  var x0 = 0,\n      x1 = 1,\n      r = 0.5,\n      i = 50;\n\n  while (true) {\n    var r2 = r * r,\n        sinPhi = sqrt(r),\n        z = asin(1 / sqrt(1 + r2)),\n        v = 1 - r2 + r * (1 + r2) * z,\n        p2 = (1 - sinPhi) / v,\n        p = sqrt(p2),\n        a2 = p2 * (1 + r2),\n        h = p * (1 - r2),\n        g2 = a2 - x * x,\n        g = sqrt(g2),\n        y0 = y + h + r * g;\n    if (abs(x1 - x0) < epsilon2 || --i === 0 || y0 === 0) break;\n    if (y0 > 0) x0 = r;else x1 = r;\n    r = 0.5 * (x0 + x1);\n  }\n\n  if (!i) return null;\n  var phi = asin(sinPhi),\n      cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * (1 + 3 * r2)) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = 0.5 * dp2dPhi / p,\n      dhdPhi = (1 - r2) * dpdPhi - 2 * r * p * drdPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * (r * (1 + r2) * dp2dPhi + p2 * (1 + 3 * r2) * drdPhi);\n  return [pi / 4 * (x * (zeta + mu * g) + nu * asin(x / sqrt(a2))), phi];\n}\n\nexport default function () {\n  return projection(squareRaw(gringortenRaw)).scale(239.75);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/gringorten.js"],"names":["geoProjection","projection","abs","asin","atan2","cos","sign","epsilon","epsilon2","halfPi","pi","sin","sqrt","squareRaw","gringortenRaw","lambda","phi","sLambda","sPhi","cosPhi","x","y","z","point","gringortenHexadecant","invert","sx","sy","x0","y0","t","p","gringortenHexadecantInvert","sinPhi","r","r2","j","k","q","v","p2","a2","a","h","i","secPhi","drdPhi","dvdPhi","dp2dPhi","dpdPhi","dhdPhi","dra2dPhi","mu","nu","zeta","lambda1","delta","x1","g","f","x2","g2","zetaMug","f2","df","scale"],"mappings":"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","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan2, cos, sign, epsilon, epsilon2, halfPi, pi, sin, sqrt} from \"./math.js\";\nimport squareRaw from \"./square.js\";\n\nexport function gringortenRaw(lambda, phi) {\n  var sLambda = sign(lambda),\n      sPhi = sign(phi),\n      cosPhi = cos(phi),\n      x = cos(lambda) * cosPhi,\n      y = sin(lambda) * cosPhi,\n      z = sin(sPhi * phi);\n  lambda = abs(atan2(y, z));\n  phi = asin(x);\n  if (abs(lambda - halfPi) > epsilon) lambda %= halfPi;\n  var point = gringortenHexadecant(lambda > pi / 4 ? halfPi - lambda : lambda, phi);\n  if (lambda > pi / 4) z = point[0], point[0] = -point[1], point[1] = -z;\n  return (point[0] *= sLambda, point[1] *= -sPhi, point);\n}\n\ngringortenRaw.invert = function(x, y) {\n  if (abs(x) > 1) x = sign(x) * 2 - x;\n  if (abs(y) > 1) y = sign(y) * 2 - y;\n  var sx = sign(x),\n      sy = sign(y),\n      x0 = -sx * x,\n      y0 = -sy * y,\n      t = y0 / x0 < 1,\n      p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0),\n      lambda = p[0],\n      phi = p[1],\n      cosPhi = cos(phi);\n  if (t) lambda = -halfPi - lambda;\n  return [sx * (atan2(sin(lambda) * cosPhi, -sin(phi)) + pi), sy * asin(cos(lambda) * cosPhi)];\n};\n\nfunction gringortenHexadecant(lambda, phi) {\n  if (phi === halfPi) return [0, 0];\n\n  var sinPhi = sin(phi),\n      r = sinPhi * sinPhi,\n      r2 = r * r,\n      j = 1 + r2,\n      k = 1 + 3 * r2,\n      q = 1 - r2,\n      z = asin(1 / sqrt(j)),\n      v = q + r * j * z,\n      p2 = (1 - sinPhi) / v,\n      p = sqrt(p2),\n      a2 = p2 * j,\n      a = sqrt(a2),\n      h = p * q,\n      x,\n      i;\n\n  if (lambda === 0) return [0, -(h + r * a)];\n\n  var cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * k) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = (0.5 * dp2dPhi) / p,\n      dhdPhi = q * dpdPhi - 2 * r * p * drdPhi,\n      dra2dPhi = r * j * dp2dPhi + p2 * k * drdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * dra2dPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      lambda1 = 4 * lambda / pi,\n      delta;\n\n  // Slower but accurate bisection method.\n  if (lambda > 0.222 * pi || phi < pi / 4 && lambda > 0.175 * pi) {\n    x = (h + r * sqrt(a2 * (1 + r2) - h * h)) / (1 + r2);\n    if (lambda > pi / 4) return [x, x];\n    var x1 = x, x0 = 0.5 * x;\n    x = 0.5 * (x0 + x1), i = 50;\n    do {\n      var g = sqrt(a2 - x * x),\n          f = (x * (zeta + mu * g) + nu * asin(x / a)) - lambda1;\n      if (!f) break;\n      if (f < 0) x0 = x;\n      else x1 = x;\n      x = 0.5 * (x0 + x1);\n    } while (abs(x1 - x0) > epsilon && --i > 0);\n  }\n\n  // Newton-Raphson.\n  else {\n    x = epsilon, i = 25;\n    do {\n      var x2 = x * x,\n          g2 = sqrt(a2 - x2),\n          zetaMug = zeta + mu * g2,\n          f2 = x * zetaMug + nu * asin(x / a) - lambda1,\n          df = zetaMug + (nu - mu * x2) / g2;\n      x -= delta = g2 ? f2 / df : 0;\n    } while (abs(delta) > epsilon && --i > 0);\n  }\n\n  return [x, -h - r * sqrt(a2 - x * x)];\n}\n\nfunction gringortenHexadecantInvert(x, y) {\n  var x0 = 0,\n      x1 = 1,\n      r = 0.5,\n      i = 50;\n\n  while (true) {\n    var r2 = r * r,\n        sinPhi = sqrt(r),\n        z = asin(1 / sqrt(1 + r2)),\n        v = (1 - r2) + r * (1 + r2) * z,\n        p2 = (1 - sinPhi) / v,\n        p = sqrt(p2),\n        a2 = p2 * (1 + r2),\n        h = p * (1 - r2),\n        g2 = a2 - x * x,\n        g = sqrt(g2),\n        y0 = y + h + r * g;\n    if (abs(x1 - x0) < epsilon2 || --i === 0 || y0 === 0) break;\n    if (y0 > 0) x0 = r;\n    else x1 = r;\n    r = 0.5 * (x0 + x1);\n  }\n\n  if (!i) return null;\n\n  var phi = asin(sinPhi),\n      cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * (1 + 3 * r2)) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = 0.5 * dp2dPhi / p,\n      dhdPhi = (1 - r2) * dpdPhi - 2 * r * p * drdPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * (r * (1 + r2) * dp2dPhi + p2 * (1 + 3 * r2) * drdPhi);\n\n  return [pi / 4 * (x * (zeta + mu * g) + nu * asin(x / sqrt(a2))), phi];\n}\n\nexport default function() {\n  return projection(squareRaw(gringortenRaw))\n      .scale(239.75);\n}\n"]},"metadata":{},"sourceType":"module"}