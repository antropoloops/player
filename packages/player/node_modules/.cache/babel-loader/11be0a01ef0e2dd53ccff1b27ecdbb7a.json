{"ast":null,"code":"// TODO: abstract (LoadPending, LoadProgress, LoadReady, LoadError)\nexport class AudiosetLoader {\n  constructor(onAudiosetStatusChange) {\n    this.onAudiosetStatusChange = onAudiosetStatusChange;\n    this.status = {\n      status: \"pending\"\n    };\n\n    this.fetch = () => Promise.reject();\n  }\n\n  loadAudioset(audiosetId) {\n    this.setStatus({\n      status: \"loading\",\n      audiosetId\n    });\n    return this.fetch(audiosetId).then(audioset => this.setStatus({\n      status: \"ready\",\n      audioset\n    })).catch(error => this.setStatus({\n      status: \"error\",\n      error\n    }));\n  }\n\n  setStatus(status) {\n    this.status = status;\n    this.onAudiosetStatusChange(status);\n    return status;\n  }\n\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/Player/AudiosetLoader.ts"],"names":["AudiosetLoader","constructor","onAudiosetStatusChange","status","fetch","Promise","reject","loadAudioset","audiosetId","setStatus","then","audioset","catch","error"],"mappings":"AAEA;AAUA,OAAO,MAAMA,cAAN,CAAqB;AAI1BC,EAAAA,WAAW,CAASC,sBAAT,EAAuE;AAAA,SAA9DA,sBAA8D,GAA9DA,sBAA8D;AAAA,SAH1EC,MAG0E,GAH7C;AAAEA,MAAAA,MAAM,EAAE;AAAV,KAG6C;;AAAA,SAF3EC,KAE2E,GAFpD,MAAMC,OAAO,CAACC,MAAR,EAE8C;AAAE;;AAEpFC,EAAAA,YAAY,CAACC,UAAD,EAAkD;AAC5D,SAAKC,SAAL,CAAe;AAAEN,MAAAA,MAAM,EAAE,SAAV;AAAqBK,MAAAA;AAArB,KAAf;AACA,WAAO,KAAKJ,KAAL,CAAWI,UAAX,EACJE,IADI,CACEC,QAAD,IAAc,KAAKF,SAAL,CAAe;AAAEN,MAAAA,MAAM,EAAE,OAAV;AAAmBQ,MAAAA;AAAnB,KAAf,CADf,EAEJC,KAFI,CAEGC,KAAD,IAAW,KAAKJ,SAAL,CAAe;AAAEN,MAAAA,MAAM,EAAE,OAAV;AAAmBU,MAAAA;AAAnB,KAAf,CAFb,CAAP;AAGD;;AAEOJ,EAAAA,SAAR,CAAkBN,MAAlB,EAA8C;AAC5C,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKD,sBAAL,CAA4BC,MAA5B;AACA,WAAOA,MAAP;AACD;;AAjByB","sourcesContent":["import { AudiosetData } from \"../Audioset\";\n\n// TODO: abstract (LoadPending, LoadProgress, LoadReady, LoadError)\ntype LoadPending = { readonly status: \"pending\" };\ntype LoadingAudioset = { readonly status: \"loading\"; readonly audiosetId: string };\ntype AudiosetLoaded = { readonly status: \"ready\"; readonly audioset: AudiosetData };\ntype AudiosetLoadError = { readonly status: \"error\"; readonly error: any };\n\nexport type AudiosetLoadStatus = LoadPending | LoadingAudioset | AudiosetLoaded | AudiosetLoadError;\n\nexport type FetchAudioset = (id: string) => Promise<AudiosetData>;\n\nexport class AudiosetLoader {\n  private status: AudiosetLoadStatus = { status: \"pending\" };\n  public fetch: FetchAudioset = () => Promise.reject();\n\n  constructor(private onAudiosetStatusChange: (status: AudiosetLoadStatus) => void) {}\n\n  loadAudioset(audiosetId: string): Promise<AudiosetLoadStatus> {\n    this.setStatus({ status: \"loading\", audiosetId });\n    return this.fetch(audiosetId)\n      .then((audioset) => this.setStatus({ status: \"ready\", audioset }))\n      .catch((error) => this.setStatus({ status: \"error\", error }));\n  }\n\n  private setStatus(status: AudiosetLoadStatus) {\n    this.status = status;\n    this.onAudiosetStatusChange(status);\n    return status;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}