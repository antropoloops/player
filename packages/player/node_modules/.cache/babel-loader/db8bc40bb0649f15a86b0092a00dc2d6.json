{"ast":null,"code":"export var createMonitorConnections = function createMonitorConnections(insertElementInSet, isNativeAudioNode) {\n  return function (nativeAudioNode, whenConnected, whenDisconnected) {\n    var connections = new Set();\n\n    nativeAudioNode.connect = function (connect) {\n      return function (destination) {\n        var output = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var input = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        var wasDisconnected = connections.size === 0;\n\n        if (isNativeAudioNode(destination)) {\n          // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n          connect.call(nativeAudioNode, destination, output, input);\n          insertElementInSet(connections, [destination, output, input], function (connection) {\n            return connection[0] === destination && connection[1] === output && connection[2] === input;\n          }, true);\n\n          if (wasDisconnected) {\n            whenConnected();\n          }\n\n          return destination;\n        }\n\n        connect.call(nativeAudioNode, destination, output);\n        insertElementInSet(connections, [destination, output], function (connection) {\n          return connection[0] === destination && connection[1] === output;\n        }, true);\n\n        if (wasDisconnected) {\n          whenConnected();\n        }\n\n        return;\n      };\n    }(nativeAudioNode.connect);\n\n    nativeAudioNode.disconnect = function (disconnect) {\n      return function (destinationOrOutput, output, input) {\n        var wasConnected = connections.size > 0;\n\n        if (destinationOrOutput === undefined) {\n          disconnect.apply(nativeAudioNode);\n          connections.clear();\n        } else if (typeof destinationOrOutput === 'number') {\n          // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n          disconnect.call(nativeAudioNode, destinationOrOutput);\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = connections[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var connection = _step.value;\n\n              if (connection[1] === destinationOrOutput) {\n                connections.delete(connection);\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        } else {\n          if (isNativeAudioNode(destinationOrOutput)) {\n            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n            disconnect.call(nativeAudioNode, destinationOrOutput, output, input);\n          } else {\n            // @todo TypeScript cannot infer the overloaded signature with 2 arguments yet.\n            disconnect.call(nativeAudioNode, destinationOrOutput, output);\n          }\n\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = connections[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var _connection = _step2.value;\n\n              if (_connection[0] === destinationOrOutput && (output === undefined || _connection[1] === output) && (input === undefined || _connection[2] === input)) {\n                connections.delete(_connection);\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        }\n\n        var isDisconnected = connections.size === 0;\n\n        if (wasConnected && isDisconnected) {\n          whenDisconnected();\n        }\n      };\n    }(nativeAudioNode.disconnect);\n\n    return nativeAudioNode;\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/monitor-connections.js"],"names":["createMonitorConnections","insertElementInSet","isNativeAudioNode","nativeAudioNode","whenConnected","whenDisconnected","connections","Set","connect","destination","output","input","wasDisconnected","size","call","connection","disconnect","destinationOrOutput","wasConnected","undefined","apply","clear","delete","isDisconnected"],"mappings":"AAAA,OAAO,IAAMA,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACC,kBAAD,EAAqBC,iBAArB,EAA2C;AAC/E,SAAO,UAACC,eAAD,EAAkBC,aAAlB,EAAiCC,gBAAjC,EAAsD;AACzD,QAAMC,WAAW,GAAG,IAAIC,GAAJ,EAApB;;AACAJ,IAAAA,eAAe,CAACK,OAAhB,GAA2B,UAACA,OAAD,EAAa;AACpC,aAAO,UAACC,WAAD,EAAwC;AAAA,YAA1BC,MAA0B,uEAAjB,CAAiB;AAAA,YAAdC,KAAc,uEAAN,CAAM;AAC3C,YAAMC,eAAe,GAAGN,WAAW,CAACO,IAAZ,KAAqB,CAA7C;;AACA,YAAIX,iBAAiB,CAACO,WAAD,CAArB,EAAoC;AAChC;AACAD,UAAAA,OAAO,CAACM,IAAR,CAAaX,eAAb,EAA8BM,WAA9B,EAA2CC,MAA3C,EAAmDC,KAAnD;AACAV,UAAAA,kBAAkB,CAACK,WAAD,EAAc,CAACG,WAAD,EAAcC,MAAd,EAAsBC,KAAtB,CAAd,EAA4C,UAACI,UAAD;AAAA,mBAAiBA,UAAU,CAAC,CAAD,CAAV,KAAkBN,WAAlB,IAAiCM,UAAU,CAAC,CAAD,CAAV,KAAkBL,MAAnD,IAA6DK,UAAU,CAAC,CAAD,CAAV,KAAkBJ,KAAhG;AAAA,WAA5C,EAAoJ,IAApJ,CAAlB;;AACA,cAAIC,eAAJ,EAAqB;AACjBR,YAAAA,aAAa;AAChB;;AACD,iBAAOK,WAAP;AACH;;AACDD,QAAAA,OAAO,CAACM,IAAR,CAAaX,eAAb,EAA8BM,WAA9B,EAA2CC,MAA3C;AACAT,QAAAA,kBAAkB,CAACK,WAAD,EAAc,CAACG,WAAD,EAAcC,MAAd,CAAd,EAAqC,UAACK,UAAD;AAAA,iBAAiBA,UAAU,CAAC,CAAD,CAAV,KAAkBN,WAAlB,IAAiCM,UAAU,CAAC,CAAD,CAAV,KAAkBL,MAApE;AAAA,SAArC,EAAkH,IAAlH,CAAlB;;AACA,YAAIE,eAAJ,EAAqB;AACjBR,UAAAA,aAAa;AAChB;;AACD;AACH,OAjBD;AAkBH,KAnByB,CAmBvBD,eAAe,CAACK,OAnBO,CAA1B;;AAoBAL,IAAAA,eAAe,CAACa,UAAhB,GAA8B,UAACA,UAAD,EAAgB;AAC1C,aAAO,UAACC,mBAAD,EAAsBP,MAAtB,EAA8BC,KAA9B,EAAwC;AAC3C,YAAMO,YAAY,GAAGZ,WAAW,CAACO,IAAZ,GAAmB,CAAxC;;AACA,YAAII,mBAAmB,KAAKE,SAA5B,EAAuC;AACnCH,UAAAA,UAAU,CAACI,KAAX,CAAiBjB,eAAjB;AACAG,UAAAA,WAAW,CAACe,KAAZ;AACH,SAHD,MAIK,IAAI,OAAOJ,mBAAP,KAA+B,QAAnC,EAA6C;AAC9C;AACAD,UAAAA,UAAU,CAACF,IAAX,CAAgBX,eAAhB,EAAiCc,mBAAjC;AAF8C;AAAA;AAAA;;AAAA;AAG9C,iCAAyBX,WAAzB,8HAAsC;AAAA,kBAA3BS,UAA2B;;AAClC,kBAAIA,UAAU,CAAC,CAAD,CAAV,KAAkBE,mBAAtB,EAA2C;AACvCX,gBAAAA,WAAW,CAACgB,MAAZ,CAAmBP,UAAnB;AACH;AACJ;AAP6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQjD,SARI,MASA;AACD,cAAIb,iBAAiB,CAACe,mBAAD,CAArB,EAA4C;AACxC;AACAD,YAAAA,UAAU,CAACF,IAAX,CAAgBX,eAAhB,EAAiCc,mBAAjC,EAAsDP,MAAtD,EAA8DC,KAA9D;AACH,WAHD,MAIK;AACD;AACAK,YAAAA,UAAU,CAACF,IAAX,CAAgBX,eAAhB,EAAiCc,mBAAjC,EAAsDP,MAAtD;AACH;;AARA;AAAA;AAAA;;AAAA;AASD,kCAAyBJ,WAAzB,mIAAsC;AAAA,kBAA3BS,WAA2B;;AAClC,kBAAIA,WAAU,CAAC,CAAD,CAAV,KAAkBE,mBAAlB,KACIP,MAAM,KAAKS,SAAX,IAAwBJ,WAAU,CAAC,CAAD,CAAV,KAAkBL,MAD9C,MAEIC,KAAK,KAAKQ,SAAV,IAAuBJ,WAAU,CAAC,CAAD,CAAV,KAAkBJ,KAF7C,CAAJ,EAEyD;AACrDL,gBAAAA,WAAW,CAACgB,MAAZ,CAAmBP,WAAnB;AACH;AACJ;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBJ;;AACD,YAAMQ,cAAc,GAAGjB,WAAW,CAACO,IAAZ,KAAqB,CAA5C;;AACA,YAAIK,YAAY,IAAIK,cAApB,EAAoC;AAChClB,UAAAA,gBAAgB;AACnB;AACJ,OApCD;AAqCH,KAtC4B,CAsC1BF,eAAe,CAACa,UAtCU,CAA7B;;AAuCA,WAAOb,eAAP;AACH,GA9DD;AA+DH,CAhEM","sourcesContent":["export const createMonitorConnections = (insertElementInSet, isNativeAudioNode) => {\n    return (nativeAudioNode, whenConnected, whenDisconnected) => {\n        const connections = new Set();\n        nativeAudioNode.connect = ((connect) => {\n            return (destination, output = 0, input = 0) => {\n                const wasDisconnected = connections.size === 0;\n                if (isNativeAudioNode(destination)) {\n                    // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n                    connect.call(nativeAudioNode, destination, output, input);\n                    insertElementInSet(connections, [destination, output, input], (connection) => (connection[0] === destination && connection[1] === output && connection[2] === input), true);\n                    if (wasDisconnected) {\n                        whenConnected();\n                    }\n                    return destination;\n                }\n                connect.call(nativeAudioNode, destination, output);\n                insertElementInSet(connections, [destination, output], (connection) => (connection[0] === destination && connection[1] === output), true);\n                if (wasDisconnected) {\n                    whenConnected();\n                }\n                return;\n            };\n        })(nativeAudioNode.connect);\n        nativeAudioNode.disconnect = ((disconnect) => {\n            return (destinationOrOutput, output, input) => {\n                const wasConnected = connections.size > 0;\n                if (destinationOrOutput === undefined) {\n                    disconnect.apply(nativeAudioNode);\n                    connections.clear();\n                }\n                else if (typeof destinationOrOutput === 'number') {\n                    // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n                    disconnect.call(nativeAudioNode, destinationOrOutput);\n                    for (const connection of connections) {\n                        if (connection[1] === destinationOrOutput) {\n                            connections.delete(connection);\n                        }\n                    }\n                }\n                else {\n                    if (isNativeAudioNode(destinationOrOutput)) {\n                        // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n                        disconnect.call(nativeAudioNode, destinationOrOutput, output, input);\n                    }\n                    else {\n                        // @todo TypeScript cannot infer the overloaded signature with 2 arguments yet.\n                        disconnect.call(nativeAudioNode, destinationOrOutput, output);\n                    }\n                    for (const connection of connections) {\n                        if (connection[0] === destinationOrOutput\n                            && (output === undefined || connection[1] === output)\n                            && (input === undefined || connection[2] === input)) {\n                            connections.delete(connection);\n                        }\n                    }\n                }\n                const isDisconnected = connections.size === 0;\n                if (wasConnected && isDisconnected) {\n                    whenDisconnected();\n                }\n            };\n        })(nativeAudioNode.disconnect);\n        return nativeAudioNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/monitor-connections.js.map"]},"metadata":{},"sourceType":"module"}