{"ast":null,"code":"/**\n * Creates an AudioEngine instance\n * @param context\n */\nexport function createAudioEngine(context) {\n  return new AudioContextEngine(context);\n}\n\nclass AudioContextEngine {\n  constructor(context) {\n    this.context = context;\n    this.output = void 0;\n    this.output = context.destination;\n  }\n\n  createAudioSource(props) {\n    const source = this.context.createBufferSource();\n    source.buffer = props.buffer || this.context.createBuffer(2, 10, this.context.sampleRate);\n    source.loop = true;\n    source.connect(props.output);\n    return source;\n  }\n\n  createTrack(props) {\n    const track = this.context.createGain();\n    track.gain.value = props.volume || 0.7;\n    track.connect(props.output);\n    return {\n      input: track,\n      disconnect: () => track.disconnect()\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/sampler/AudioEngine.ts"],"names":["createAudioEngine","context","AudioContextEngine","constructor","output","destination","createAudioSource","props","source","createBufferSource","buffer","createBuffer","sampleRate","loop","connect","createTrack","track","createGain","gain","value","volume","input","disconnect"],"mappings":"AAGA;;;;AAIA,OAAO,SAASA,iBAAT,CAA2BC,OAA3B,EAAgE;AACrE,SAAO,IAAIC,kBAAJ,CAAuBD,OAAvB,CAAP;AACD;;AA0BD,MAAMC,kBAAN,CAAgD;AAE9CC,EAAAA,WAAW,CAASF,OAAT,EAAiC;AAAA,SAAxBA,OAAwB,GAAxBA,OAAwB;AAAA,SADrCG,MACqC;AAC1C,SAAKA,MAAL,GAAcH,OAAO,CAACI,WAAtB;AACD;;AAEMC,EAAAA,iBAAP,CAAyBC,KAAzB,EAAoE;AAClE,UAAMC,MAAM,GAAG,KAAKP,OAAL,CAAaQ,kBAAb,EAAf;AACAD,IAAAA,MAAM,CAACE,MAAP,GACEH,KAAK,CAACG,MAAN,IAAgB,KAAKT,OAAL,CAAaU,YAAb,CAA0B,CAA1B,EAA6B,EAA7B,EAAiC,KAAKV,OAAL,CAAaW,UAA9C,CADlB;AAEAJ,IAAAA,MAAM,CAACK,IAAP,GAAc,IAAd;AACAL,IAAAA,MAAM,CAACM,OAAP,CAAeP,KAAK,CAACH,MAArB;AACA,WAAOI,MAAP;AACD;;AACMO,EAAAA,WAAP,CAAmBR,KAAnB,EAAuD;AACrD,UAAMS,KAAK,GAAG,KAAKf,OAAL,CAAagB,UAAb,EAAd;AACAD,IAAAA,KAAK,CAACE,IAAN,CAAWC,KAAX,GAAmBZ,KAAK,CAACa,MAAN,IAAgB,GAAnC;AACAJ,IAAAA,KAAK,CAACF,OAAN,CAAcP,KAAK,CAACH,MAApB;AACA,WAAO;AAAEiB,MAAAA,KAAK,EAAEL,KAAT;AAAgBM,MAAAA,UAAU,EAAE,MAAMN,KAAK,CAACM,UAAN;AAAlC,KAAP;AACD;;AAnB6C","sourcesContent":["import { IAudioContext, IAudioNode } from \"standardized-audio-context\";\n\ntype AudioNode = IAudioNode<IAudioContext>;\n/**\n * Creates an AudioEngine instance\n * @param context\n */\nexport function createAudioEngine(context: IAudioContext): AudioEngine {\n  return new AudioContextEngine(context);\n}\nexport interface AudioEngine {\n  output: AudioNode;\n  createTrack: (props: AudioTrackProps) => AudioTrack;\n  createAudioSource: (props: AudioSourceProperties) => AudioSource;\n}\n\nexport interface AudioTrackProps {\n  output: AudioNode;\n  volume: number;\n}\nexport interface AudioSourceProperties {\n  output: AudioNode;\n  buffer: any;\n}\n\nexport interface AudioTrack {\n  input: AudioNode;\n  disconnect(): void;\n}\n\nexport interface AudioSource {\n  start: (time: number) => void;\n  stop: (time: number) => void;\n}\n\nclass AudioContextEngine implements AudioEngine {\n  public output: any;\n  constructor(private context: IAudioContext) {\n    this.output = context.destination;\n  }\n\n  public createAudioSource(props: AudioSourceProperties): AudioSource {\n    const source = this.context.createBufferSource();\n    source.buffer =\n      props.buffer || this.context.createBuffer(2, 10, this.context.sampleRate);\n    source.loop = true;\n    source.connect(props.output);\n    return source;\n  }\n  public createTrack(props: AudioTrackProps): AudioTrack {\n    const track = this.context.createGain();\n    track.gain.value = props.volume || 0.7;\n    track.connect(props.output);\n    return { input: track, disconnect: () => track.disconnect() };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}