{"ast":null,"code":"import { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from '../helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nconst DEFAULT_OPTIONS = {\n  numberOfChannels: 1\n};\nexport const createAudioBufferConstructor = (audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, testNativeAudioBufferConstructorSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n  let nativeOfflineAudioContext = null;\n  return class AudioBuffer {\n    constructor(options) {\n      if (nativeOfflineAudioContextConstructor === null) {\n        throw new Error('Missing the native OfflineAudioContext constructor.');\n      }\n\n      const {\n        length,\n        numberOfChannels,\n        sampleRate\n      } = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n\n      if (nativeOfflineAudioContext === null) {\n        nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n      }\n      /*\n       * Bug #99: Firefox does not throw a NotSupportedError when the numberOfChannels is zero. But it only does it when using the\n       * factory function. But since Firefox also supports the constructor everything should be fine.\n       */\n\n\n      const audioBuffer = nativeAudioBufferConstructor !== null && cacheTestResult(testNativeAudioBufferConstructorSupport, testNativeAudioBufferConstructorSupport) ? new nativeAudioBufferConstructor({\n        length,\n        numberOfChannels,\n        sampleRate\n      }) : nativeOfflineAudioContext.createBuffer(numberOfChannels, length, sampleRate); // Bug #99: Safari does not throw an error when the numberOfChannels is zero.\n\n      if (audioBuffer.numberOfChannels === 0) {\n        throw createNotSupportedError();\n      } // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n      // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n\n\n      if (typeof audioBuffer.copyFromChannel !== 'function') {\n        wrapAudioBufferCopyChannelMethods(audioBuffer);\n        wrapAudioBufferGetChannelDataMethod(audioBuffer); // Bug #157: Only Chrome & Opera do allow the bufferOffset to be out-of-bounds.\n      } else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n        wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n      }\n\n      audioBufferStore.add(audioBuffer);\n      /*\n       * This does violate all good pratices but it is necessary to allow this AudioBuffer to be used with native\n       * (Offline)AudioContexts.\n       */\n\n      return audioBuffer;\n    }\n\n    static [Symbol.hasInstance](instance) {\n      return instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === AudioBuffer.prototype || audioBufferStore.has(instance);\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/audio-buffer-constructor.js"],"names":["testAudioBufferCopyChannelMethodsOutOfBoundsSupport","wrapAudioBufferGetChannelDataMethod","DEFAULT_OPTIONS","numberOfChannels","createAudioBufferConstructor","audioBufferStore","cacheTestResult","createNotSupportedError","nativeAudioBufferConstructor","nativeOfflineAudioContextConstructor","testNativeAudioBufferConstructorSupport","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","nativeOfflineAudioContext","AudioBuffer","constructor","options","Error","length","sampleRate","audioBuffer","createBuffer","copyFromChannel","add","Symbol","hasInstance","instance","Object","getPrototypeOf","prototype","has"],"mappings":"AAAA,SAASA,mDAAT,QAAoE,yEAApE;AACA,SAASC,mCAAT,QAAoD,sDAApD;AACA,MAAMC,eAAe,GAAG;AACpBC,EAAAA,gBAAgB,EAAE;AADE,CAAxB;AAGA,OAAO,MAAMC,4BAA4B,GAAG,CAACC,gBAAD,EAAmBC,eAAnB,EAAoCC,uBAApC,EAA6DC,4BAA7D,EAA2FC,oCAA3F,EAAiIC,uCAAjI,EAA0KC,iCAA1K,EAA6MC,4CAA7M,KAA8P;AACtS,MAAIC,yBAAyB,GAAG,IAAhC;AACA,SAAO,MAAMC,WAAN,CAAkB;AACrBC,IAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,UAAIP,oCAAoC,KAAK,IAA7C,EAAmD;AAC/C,cAAM,IAAIQ,KAAJ,CAAU,qDAAV,CAAN;AACH;;AACD,YAAM;AAAEC,QAAAA,MAAF;AAAUf,QAAAA,gBAAV;AAA4BgB,QAAAA;AAA5B,UAA2C,EAAE,GAAGjB,eAAL;AAAsB,WAAGc;AAAzB,OAAjD;;AACA,UAAIH,yBAAyB,KAAK,IAAlC,EAAwC;AACpCA,QAAAA,yBAAyB,GAAG,IAAIJ,oCAAJ,CAAyC,CAAzC,EAA4C,CAA5C,EAA+C,KAA/C,CAA5B;AACH;AACD;;;;;;AAIA,YAAMW,WAAW,GAAIZ,4BAA4B,KAAK,IAAjC,IACjBF,eAAe,CAACI,uCAAD,EAA0CA,uCAA1C,CADC,GAEhB,IAAIF,4BAAJ,CAAiC;AAAEU,QAAAA,MAAF;AAAUf,QAAAA,gBAAV;AAA4BgB,QAAAA;AAA5B,OAAjC,CAFgB,GAGhBN,yBAAyB,CAACQ,YAA1B,CAAuClB,gBAAvC,EAAyDe,MAAzD,EAAiEC,UAAjE,CAHJ,CAZiB,CAgBjB;;AACA,UAAIC,WAAW,CAACjB,gBAAZ,KAAiC,CAArC,EAAwC;AACpC,cAAMI,uBAAuB,EAA7B;AACH,OAnBgB,CAoBjB;AACA;;;AACA,UAAI,OAAOa,WAAW,CAACE,eAAnB,KAAuC,UAA3C,EAAuD;AACnDX,QAAAA,iCAAiC,CAACS,WAAD,CAAjC;AACAnB,QAAAA,mCAAmC,CAACmB,WAAD,CAAnC,CAFmD,CAGnD;AACH,OAJD,MAKK,IAAI,CAACd,eAAe,CAACN,mDAAD,EAAsD,MAAMA,mDAAmD,CAACoB,WAAD,CAA/G,CAApB,EAAmJ;AACpJR,QAAAA,4CAA4C,CAACQ,WAAD,CAA5C;AACH;;AACDf,MAAAA,gBAAgB,CAACkB,GAAjB,CAAqBH,WAArB;AACA;;;;;AAIA,aAAOA,WAAP;AACH;;AACD,YAAQI,MAAM,CAACC,WAAf,EAA4BC,QAA5B,EAAsC;AAClC,aAAQA,QAAQ,KAAK,IAAb,IAAqB,OAAOA,QAAP,KAAoB,QAAzC,IAAqDC,MAAM,CAACC,cAAP,CAAsBF,QAAtB,MAAoCZ,WAAW,CAACe,SAAtG,IACCxB,gBAAgB,CAACyB,GAAjB,CAAqBJ,QAArB,CADR;AAEH;;AAzCoB,GAAzB;AA2CH,CA7CM","sourcesContent":["import { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from '../helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n};\nexport const createAudioBufferConstructor = (audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, testNativeAudioBufferConstructorSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n    let nativeOfflineAudioContext = null;\n    return class AudioBuffer {\n        constructor(options) {\n            if (nativeOfflineAudioContextConstructor === null) {\n                throw new Error('Missing the native OfflineAudioContext constructor.');\n            }\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n            if (nativeOfflineAudioContext === null) {\n                nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n            }\n            /*\n             * Bug #99: Firefox does not throw a NotSupportedError when the numberOfChannels is zero. But it only does it when using the\n             * factory function. But since Firefox also supports the constructor everything should be fine.\n             */\n            const audioBuffer = (nativeAudioBufferConstructor !== null &&\n                cacheTestResult(testNativeAudioBufferConstructorSupport, testNativeAudioBufferConstructorSupport)) ?\n                new nativeAudioBufferConstructor({ length, numberOfChannels, sampleRate }) :\n                nativeOfflineAudioContext.createBuffer(numberOfChannels, length, sampleRate);\n            // Bug #99: Safari does not throw an error when the numberOfChannels is zero.\n            if (audioBuffer.numberOfChannels === 0) {\n                throw createNotSupportedError();\n            }\n            // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n            // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n            if (typeof audioBuffer.copyFromChannel !== 'function') {\n                wrapAudioBufferCopyChannelMethods(audioBuffer);\n                wrapAudioBufferGetChannelDataMethod(audioBuffer);\n                // Bug #157: Only Chrome & Opera do allow the bufferOffset to be out-of-bounds.\n            }\n            else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n                wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n            }\n            audioBufferStore.add(audioBuffer);\n            /*\n             * This does violate all good pratices but it is necessary to allow this AudioBuffer to be used with native\n             * (Offline)AudioContexts.\n             */\n            return audioBuffer;\n        }\n        static [Symbol.hasInstance](instance) {\n            return (instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === AudioBuffer.prototype)\n                || (audioBufferStore.has(instance));\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-buffer-constructor.js.map"]},"metadata":{},"sourceType":"module"}