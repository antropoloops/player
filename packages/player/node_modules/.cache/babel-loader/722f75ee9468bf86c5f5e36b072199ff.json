{"ast":null,"code":"import _slicedToArray from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{useDeviceType}from\"../useDeviceType\";import{Controller}from\"./Controller\";import{Preview}from\"./Preview\";import{Sidebar}from\"./Sidebar\";import{useFullscreen}from\"./useFullscreen\";import{useKeyboardListener}from\"./useKeyboardListener\";import{usePlayer}from\"./usePlayer\";export var Player=function Player(_ref){var audioset=_ref.audioset;var player=usePlayer(audioset);var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isReady=_useState2[0],setReady=_useState2[1];var _useFullscreen=useFullscreen(),isFullscreen=_useFullscreen.isFullscreen,toggleFullscreen=_useFullscreen.toggleFullscreen;var _useDeviceType=useDeviceType(),isDesktop=_useDeviceType.isDesktop;useKeyboardListener();var isVisual=isDesktop||isReady;var isSidebarVisible=!isFullscreen;// useAutoStartAudio(isReady, audioset, handleStart);\nreturn React.createElement(\"div\",{className:\"App Player\"},isSidebarVisible&&React.createElement(Sidebar,{audioset:audioset,onFullscreen:toggleFullscreen,onStopAll:function onStopAll(){var _player$control;return player===null||player===void 0?void 0:(_player$control=player.control)===null||_player$control===void 0?void 0:_player$control.stopAll(0);}},isReady&&player.control?React.createElement(Controller,{audioset:audioset,state:player.state,control:player.control}):React.createElement(Preview,{audioset:audioset,isReady:isReady,onStart:function onStart(){return setReady(true);}})),isVisual&&React.createElement(\"div\",{className:\"visuals\"},React.createElement(\"div\",{id:\"visuals\",ref:player.visualsRef})));};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/Player.tsx"],"names":["React","useState","useDeviceType","Controller","Preview","Sidebar","useFullscreen","useKeyboardListener","usePlayer","Player","audioset","player","isReady","setReady","isFullscreen","toggleFullscreen","isDesktop","isVisual","isSidebarVisible","control","stopAll","state","visualsRef"],"mappings":"4JAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CAEA,OAASC,aAAT,KAA8B,kBAA9B,CACA,OAASC,UAAT,KAA2B,cAA3B,CACA,OAASC,OAAT,KAAwB,WAAxB,CACA,OAASC,OAAT,KAAwB,WAAxB,CACA,OAASC,aAAT,KAA8B,iBAA9B,CACA,OAASC,mBAAT,KAAoC,uBAApC,CACA,OAASC,SAAT,KAA0B,aAA1B,CAMA,MAAO,IAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,MAA+B,IAA5BC,CAAAA,QAA4B,MAA5BA,QAA4B,CACnD,GAAMC,CAAAA,MAAM,CAAGH,SAAS,CAACE,QAAD,CAAxB,CADmD,cAEvBT,QAAQ,CAAU,KAAV,CAFe,wCAE5CW,OAF4C,eAEnCC,QAFmC,kCAGRP,aAAa,EAHL,CAG3CQ,YAH2C,gBAG3CA,YAH2C,CAG7BC,gBAH6B,gBAG7BA,gBAH6B,oBAI7Bb,aAAa,EAJgB,CAI3Cc,SAJ2C,gBAI3CA,SAJ2C,CAKnDT,mBAAmB,GAEnB,GAAMU,CAAAA,QAAQ,CAAGD,SAAS,EAAIJ,OAA9B,CAEA,GAAMM,CAAAA,gBAAgB,CAAG,CAACJ,YAA1B,CACA;AAEA,MACE,4BAAK,SAAS,CAAC,YAAf,EACGI,gBAAgB,EACf,oBAAC,OAAD,EACE,QAAQ,CAAER,QADZ,CAEE,YAAY,CAAEK,gBAFhB,CAGE,SAAS,CAAE,+CAAMJ,CAAAA,MAAN,SAAMA,MAAN,kCAAMA,MAAM,CAAEQ,OAAd,0CAAM,gBAAiBC,OAAjB,CAAyB,CAAzB,CAAN,EAHb,EAKGR,OAAO,EAAID,MAAM,CAACQ,OAAlB,CACC,oBAAC,UAAD,EACE,QAAQ,CAAET,QADZ,CAEE,KAAK,CAAEC,MAAM,CAACU,KAFhB,CAGE,OAAO,CAAEV,MAAM,CAACQ,OAHlB,EADD,CAOC,oBAAC,OAAD,EACE,QAAQ,CAAET,QADZ,CAEE,OAAO,CAAEE,OAFX,CAGE,OAAO,CAAE,yBAAMC,CAAAA,QAAQ,CAAC,IAAD,CAAd,EAHX,EAZJ,CAFJ,CAsBGI,QAAQ,EACP,2BAAK,SAAS,CAAC,SAAf,EACE,2BAAK,EAAE,CAAC,SAAR,CAAkB,GAAG,CAAEN,MAAM,CAACW,UAA9B,EADF,CAvBJ,CADF,CA8BD,CA1CM","sourcesContent":["import React, { useState } from \"react\";\nimport { Audioset } from \"../../audioset\";\nimport { useDeviceType } from \"../useDeviceType\";\nimport { Controller } from \"./Controller\";\nimport { Preview } from \"./Preview\";\nimport { Sidebar } from \"./Sidebar\";\nimport { useFullscreen } from \"./useFullscreen\";\nimport { useKeyboardListener } from \"./useKeyboardListener\";\nimport { usePlayer } from \"./usePlayer\";\n\nexport interface PlayerProps {\n  audioset: Audioset;\n}\n\nexport const Player = ({ audioset }: PlayerProps) => {\n  const player = usePlayer(audioset);\n  const [isReady, setReady] = useState<boolean>(false);\n  const { isFullscreen, toggleFullscreen } = useFullscreen();\n  const { isDesktop } = useDeviceType();\n  useKeyboardListener();\n\n  const isVisual = isDesktop || isReady;\n\n  const isSidebarVisible = !isFullscreen;\n  // useAutoStartAudio(isReady, audioset, handleStart);\n\n  return (\n    <div className=\"App Player\">\n      {isSidebarVisible && (\n        <Sidebar\n          audioset={audioset}\n          onFullscreen={toggleFullscreen}\n          onStopAll={() => player?.control?.stopAll(0)}\n        >\n          {isReady && player.control ? (\n            <Controller\n              audioset={audioset}\n              state={player.state}\n              control={player.control}\n            />\n          ) : (\n            <Preview\n              audioset={audioset}\n              isReady={isReady}\n              onStart={() => setReady(true)}\n            />\n          )}\n        </Sidebar>\n      )}\n      {isVisual && (\n        <div className=\"visuals\">\n          <div id=\"visuals\" ref={player.visualsRef} />\n        </div>\n      )}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}