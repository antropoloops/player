{"ast":null,"code":"import _regeneratorRuntime from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useMemo,useState}from\"react\";import{getActiveAudioContext}from\"../../../active-audio-context\";import{ResourceLoader}from\"../../../player/Loader\";import{scrollToTop}from\"../../shared/useScroll\";export function useSession(audioset){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),started=_useState2[0],setStarted=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),loaded=_useState4[0],setLoaded=_useState4[1];var loader=useMemo(function(){return new ResourceLoader(audioset,function(status){if(status.stage===\"ready\"){setLoaded(true);}});},[audioset]);var loading=started&&!loaded;var _useState5=useState(true),_useState6=_slicedToArray(_useState5,2),visible=_useState6[0],setVisible=_useState6[1];useEffect(function(){if(visible){scrollToTop();}},[visible]);function start(){return _start.apply(this,arguments);}function _start(){_start=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var ctx;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setVisible(false);if(started){_context.next=8;break;}setStarted(true);_context.next=5;return getActiveAudioContext();case 5:ctx=_context.sent;_context.next=8;return loader.load(ctx);case 8:case\"end\":return _context.stop();}}},_callee);}));return _start.apply(this,arguments);}function toggle(){if(started){setVisible(!visible);}}return{visible:visible,loading:loading,loaded:loaded,started:started,start:start,loader:loader,toggle:toggle};}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/components/Player/useSession.tsx"],"names":["useEffect","useMemo","useState","getActiveAudioContext","ResourceLoader","scrollToTop","useSession","audioset","started","setStarted","loaded","setLoaded","loader","status","stage","loading","visible","setVisible","start","ctx","load","toggle"],"mappings":"idAAA,OAASA,SAAT,CAAoBC,OAApB,CAA6BC,QAA7B,KAA6C,OAA7C,CACA,OAASC,qBAAT,KAAsC,+BAAtC,CAEA,OAASC,cAAT,KAA+B,wBAA/B,CACA,OAASC,WAAT,KAA4B,wBAA5B,CAEA,MAAO,SAASC,CAAAA,UAAT,CAAoBC,QAApB,CAAwC,eACfL,QAAQ,CAAC,KAAD,CADO,wCACtCM,OADsC,eAC7BC,UAD6B,8BAEjBP,QAAQ,CAAC,KAAD,CAFS,yCAEtCQ,MAFsC,eAE9BC,SAF8B,eAG7C,GAAMC,CAAAA,MAAM,CAAGX,OAAO,CACpB,iBACE,IAAIG,CAAAA,cAAJ,CAAmBG,QAAnB,CAA6B,SAAAM,MAAM,CAAI,CACrC,GAAIA,MAAM,CAACC,KAAP,GAAiB,OAArB,CAA8B,CAC5BH,SAAS,CAAC,IAAD,CAAT,CACD,CACF,CAJD,CADF,EADoB,CAOpB,CAACJ,QAAD,CAPoB,CAAtB,CASA,GAAMQ,CAAAA,OAAO,CAAGP,OAAO,EAAI,CAACE,MAA5B,CAZ6C,eAcfR,QAAQ,CAAC,IAAD,CAdO,yCActCc,OAdsC,eAc7BC,UAd6B,eAe7CjB,SAAS,CAAC,UAAM,CACd,GAAIgB,OAAJ,CAAa,CACXX,WAAW,GACZ,CACF,CAJQ,CAIN,CAACW,OAAD,CAJM,CAAT,CAf6C,QAqB9BE,CAAAA,KArB8B,yHAqB7C,2IACED,UAAU,CAAC,KAAD,CAAV,CADF,GAEOT,OAFP,yBAGIC,UAAU,CAAC,IAAD,CAAV,CAHJ,sBAIsBN,CAAAA,qBAAqB,EAJ3C,QAIUgB,GAJV,qCAKUP,CAAAA,MAAM,CAACQ,IAAP,CAAYD,GAAZ,CALV,uDArB6C,wCA8B7C,QAASE,CAAAA,MAAT,EAAkB,CAChB,GAAIb,OAAJ,CAAa,CACXS,UAAU,CAAC,CAACD,OAAF,CAAV,CACD,CACF,CAED,MAAO,CAAEA,OAAO,CAAPA,OAAF,CAAWD,OAAO,CAAPA,OAAX,CAAoBL,MAAM,CAANA,MAApB,CAA4BF,OAAO,CAAPA,OAA5B,CAAqCU,KAAK,CAALA,KAArC,CAA4CN,MAAM,CAANA,MAA5C,CAAoDS,MAAM,CAANA,MAApD,CAAP,CACD","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport { getActiveAudioContext } from \"../../../active-audio-context\";\nimport { Audioset } from \"../../../audioset\";\nimport { ResourceLoader } from \"../../../player/Loader\";\nimport { scrollToTop } from \"../../shared/useScroll\";\n\nexport function useSession(audioset: Audioset) {\n  const [started, setStarted] = useState(false);\n  const [loaded, setLoaded] = useState(false);\n  const loader = useMemo<ResourceLoader>(\n    () =>\n      new ResourceLoader(audioset, status => {\n        if (status.stage === \"ready\") {\n          setLoaded(true);\n        }\n      }),\n    [audioset],\n  );\n  const loading = started && !loaded;\n\n  const [visible, setVisible] = useState(true);\n  useEffect(() => {\n    if (visible) {\n      scrollToTop();\n    }\n  }, [visible]);\n\n  async function start() {\n    setVisible(false);\n    if (!started) {\n      setStarted(true);\n      const ctx = await getActiveAudioContext();\n      await loader.load(ctx);\n    }\n  }\n\n  function toggle() {\n    if (started) {\n      setVisible(!visible);\n    }\n  }\n\n  return { visible, loading, loaded, started, start, loader, toggle };\n}\n"]},"metadata":{},"sourceType":"module"}