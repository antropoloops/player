{"ast":null,"code":"import { addResizeObserver } from \"../add-resize-observer\";\nimport { Visuals } from \"../visuals\";\nexport function createVisualEffects(audioset) {\n  return new VisualEffects(audioset);\n}\n\nclass VisualEffects {\n  constructor(audioset) {\n    this.audioset = audioset;\n    this.visuals = void 0;\n  }\n\n  attach(el) {\n    this.detach();\n    this.visuals = new Visuals(this.audioset, el);\n    setupVisuals(this.audioset, this.visuals);\n\n    const resize = (width, height) => {\n      if (this.visuals) {\n        this.visuals.resizeSvg(width, height);\n      }\n    };\n\n    this.detach = addResizeObserver(el, resize);\n  }\n\n  detach() {// Attach replaces this method\n  }\n\n  run(command) {\n    if (this.visuals) {\n      switch (command.command) {\n        case \"startClip\":\n          return this.visuals.show(command.clipId);\n\n        case \"stopClip\":\n          return this.visuals.hide(command.clipId);\n      }\n    }\n  }\n\n} // TODO: this should be part of resource loader\n\n\nfunction setupVisuals(audioset, visuals) {\n  if (audioset.visuals.mode === \"map\") {\n    // TODO: remove it when found a solution for mobile / desktop\n    let url = audioset.visuals.geomap.url;\n\n    if (url === \"https://unpkg.com/world-atlas@1.1.4/world/50m.json\") {\n      url = \"https://cdn.jsdelivr.net/npm/world-atlas@2/countries-10m.json\";\n    }\n\n    return fetch(url).then(response => response.json()).then(data => visuals.setGeodata(data)).then(() => visuals);\n  } else {\n    visuals.setup();\n    return Promise.resolve(visuals);\n  }\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/VisualEffects.ts"],"names":["addResizeObserver","Visuals","createVisualEffects","audioset","VisualEffects","constructor","visuals","attach","el","detach","setupVisuals","resize","width","height","resizeSvg","run","command","show","clipId","hide","mode","url","geomap","fetch","then","response","json","data","setGeodata","setup","Promise","resolve"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,wBAAlC;AAEA,SAASC,OAAT,QAAwB,YAAxB;AAIA,OAAO,SAASC,mBAAT,CAA6BC,QAA7B,EAA0D;AAC/D,SAAO,IAAIC,aAAJ,CAAkBD,QAAlB,CAAP;AACD;;AAED,MAAMC,aAAN,CAAuC;AAErCC,EAAAA,WAAW,CAAUF,QAAV,EAA8B;AAAA,SAApBA,QAAoB,GAApBA,QAAoB;AAAA,SADjCG,OACiC;AAAE;;AAEpCC,EAAAA,MAAP,CAAcC,EAAd,EAA6B;AAC3B,SAAKC,MAAL;AACA,SAAKH,OAAL,GAAe,IAAIL,OAAJ,CAAY,KAAKE,QAAjB,EAA2BK,EAA3B,CAAf;AACAE,IAAAA,YAAY,CAAC,KAAKP,QAAN,EAAgB,KAAKG,OAArB,CAAZ;;AACA,UAAMK,MAAM,GAAG,CAACC,KAAD,EAAgBC,MAAhB,KAAmC;AAChD,UAAI,KAAKP,OAAT,EAAkB;AAChB,aAAKA,OAAL,CAAaQ,SAAb,CAAuBF,KAAvB,EAA8BC,MAA9B;AACD;AACF,KAJD;;AAKA,SAAKJ,MAAL,GAAcT,iBAAiB,CAACQ,EAAD,EAAKG,MAAL,CAA/B;AACD;;AACMF,EAAAA,MAAP,GAAsB,CACpB;AACD;;AACMM,EAAAA,GAAP,CAAWC,OAAX,EAA0C;AACxC,QAAI,KAAKV,OAAT,EAAkB;AAChB,cAAQU,OAAO,CAACA,OAAhB;AACE,aAAK,WAAL;AACE,iBAAO,KAAKV,OAAL,CAAaW,IAAb,CAAkBD,OAAO,CAACE,MAA1B,CAAP;;AACF,aAAK,UAAL;AACE,iBAAO,KAAKZ,OAAL,CAAaa,IAAb,CAAkBH,OAAO,CAACE,MAA1B,CAAP;AAJJ;AAMD;AACF;;AA3BoC,C,CA8BvC;;;AACA,SAASR,YAAT,CAAsBP,QAAtB,EAA0CG,OAA1C,EAA8E;AAC5E,MAAIH,QAAQ,CAACG,OAAT,CAAiBc,IAAjB,KAA0B,KAA9B,EAAqC;AACnC;AACA,QAAIC,GAAG,GAAGlB,QAAQ,CAACG,OAAT,CAAiBgB,MAAjB,CAAwBD,GAAlC;;AACA,QAAIA,GAAG,KAAK,oDAAZ,EAAkE;AAChEA,MAAAA,GAAG,GAAG,+DAAN;AACD;;AAED,WAAOE,KAAK,CAACF,GAAD,CAAL,CACJG,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAEJF,IAFI,CAECG,IAAI,IAAIrB,OAAO,CAACsB,UAAR,CAAmBD,IAAnB,CAFT,EAGJH,IAHI,CAGC,MAAMlB,OAHP,CAAP;AAID,GAXD,MAWO;AACLA,IAAAA,OAAO,CAACuB,KAAR;AACA,WAAOC,OAAO,CAACC,OAAR,CAAgBzB,OAAhB,CAAP;AACD;AACF","sourcesContent":["import { addResizeObserver } from \"../add-resize-observer\";\nimport { Audioset } from \"../audioset\";\nimport { Visuals } from \"../visuals\";\nimport { ControlCommand } from \"./Control\";\nimport { Effects } from \"./Control\";\n\nexport function createVisualEffects(audioset: Audioset): Effects {\n  return new VisualEffects(audioset);\n}\n\nclass VisualEffects implements Effects {\n  private visuals?: Visuals;\n  constructor(readonly audioset: Audioset) {}\n\n  public attach(el: any): void {\n    this.detach();\n    this.visuals = new Visuals(this.audioset, el);\n    setupVisuals(this.audioset, this.visuals);\n    const resize = (width: number, height: number) => {\n      if (this.visuals) {\n        this.visuals.resizeSvg(width, height);\n      }\n    };\n    this.detach = addResizeObserver(el, resize);\n  }\n  public detach(): void {\n    // Attach replaces this method\n  }\n  public run(command: ControlCommand): void {\n    if (this.visuals) {\n      switch (command.command) {\n        case \"startClip\":\n          return this.visuals.show(command.clipId);\n        case \"stopClip\":\n          return this.visuals.hide(command.clipId);\n      }\n    }\n  }\n}\n\n// TODO: this should be part of resource loader\nfunction setupVisuals(audioset: Audioset, visuals: Visuals): Promise<Visuals> {\n  if (audioset.visuals.mode === \"map\") {\n    // TODO: remove it when found a solution for mobile / desktop\n    let url = audioset.visuals.geomap.url;\n    if (url === \"https://unpkg.com/world-atlas@1.1.4/world/50m.json\") {\n      url = \"https://cdn.jsdelivr.net/npm/world-atlas@2/countries-10m.json\";\n    }\n\n    return fetch(url)\n      .then(response => response.json())\n      .then(data => visuals.setGeodata(data))\n      .then(() => visuals);\n  } else {\n    visuals.setup();\n    return Promise.resolve(visuals);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}