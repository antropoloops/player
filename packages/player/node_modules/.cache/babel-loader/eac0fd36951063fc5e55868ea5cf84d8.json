{"ast":null,"code":"import _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from \"react\";\nimport * as screen from \"screenfull\";\nexport default function useFullscreen(onChange) {}\nexport default function useFullscreenOld(onChange) {\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        fullscreen = _useState2[0],\n        setFullscreen = _useState2[1];\n\n  const open = () => setFullscreen(Date.now());\n\n  if (screen.isEnabled) {\n    screen.on(\"change\", () => onChange(screen.isEnabled));\n  }\n\n  useEffect(() => {\n    if (!screen.isEnabled) {\n      return;\n    }\n\n    if (fullscreen) {\n      screen.request();\n    } else {\n      screen.exit();\n    }\n  }, [fullscreen]);\n  return {\n    open\n  };\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/useFullscreen.ts"],"names":["useEffect","useState","screen","useFullscreen","onChange","useFullscreenOld","fullscreen","setFullscreen","open","Date","now","isEnabled","on","request","exit"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAO,KAAKC,MAAZ,MAAwB,YAAxB;AAEA,eAAe,SAASC,aAAT,CAAuBC,QAAvB,EAA4D,CAAE;AAC7E,eAAe,SAASC,gBAAT,CAA0BD,QAA1B,EAA+D;AAAA,oBACxCH,QAAQ,EADgC;AAAA;AAAA,QACrEK,UADqE;AAAA,QACzDC,aADyD;;AAE5E,QAAMC,IAAI,GAAG,MAAMD,aAAa,CAACE,IAAI,CAACC,GAAL,EAAD,CAAhC;;AAEA,MAAIR,MAAM,CAACS,SAAX,EAAsB;AACpBT,IAAAA,MAAM,CAACU,EAAP,CAAU,QAAV,EAAoB,MAAMR,QAAQ,CAACF,MAAM,CAACS,SAAR,CAAlC;AACD;;AAEDX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACE,MAAM,CAACS,SAAZ,EAAuB;AACrB;AACD;;AACD,QAAIL,UAAJ,EAAgB;AACdJ,MAAAA,MAAM,CAACW,OAAP;AACD,KAFD,MAEO;AACLX,MAAAA,MAAM,CAACY,IAAP;AACD;AACF,GATQ,EASN,CAACR,UAAD,CATM,CAAT;AAWA,SAAO;AAAEE,IAAAA;AAAF,GAAP;AACD","sourcesContent":["import { useEffect, useState } from \"react\";\nimport * as screen from \"screenfull\";\n\nexport default function useFullscreen(onChange: (isOpen: boolean) => void) {}\nexport default function useFullscreenOld(onChange: (isOpen: boolean) => void) {\n  const [fullscreen, setFullscreen] = useState();\n  const open = () => setFullscreen(Date.now());\n\n  if (screen.isEnabled) {\n    screen.on(\"change\", () => onChange(screen.isEnabled));\n  }\n\n  useEffect(() => {\n    if (!screen.isEnabled) {\n      return;\n    }\n    if (fullscreen) {\n      screen.request();\n    } else {\n      screen.exit();\n    }\n  }, [fullscreen]);\n\n  return { open };\n}\n"]},"metadata":{},"sourceType":"module"}