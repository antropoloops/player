{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport { fetchAudioset } from \"../lib/fetchAudioset\";\nexport function useRemoteBundle(idOrUrl) {\n  const [bundle, setBundle] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    let didCancel = false;\n\n    function fetch() {\n      setLoading(true);\n      fetchAudioset(idOrUrl).then(result => {\n        if (!didCancel) {\n          setLoading(false);\n          setBundle(result);\n        }\n      }).catch(setError);\n    }\n\n    fetch();\n    return () => {\n      didCancel = true;\n    };\n  }, [idOrUrl]);\n  return {\n    bundle,\n    loading,\n    error\n  };\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/packages/player/src/ui/hooks/useRemoteBundle.tsx"],"names":["useEffect","useState","fetchAudioset","useRemoteBundle","idOrUrl","bundle","setBundle","loading","setLoading","error","setError","didCancel","fetch","then","result","catch"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,SAASC,aAAT,QAA8B,sBAA9B;AAEA,OAAO,SAASC,eAAT,CAAyBC,OAAzB,EAA0C;AAC/C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAoB,IAApB,CAApC;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAU,IAAV,CAAtC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAM,IAAN,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,SAAS,GAAG,KAAhB;;AAEA,aAASC,KAAT,GAAiB;AACfJ,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAN,MAAAA,aAAa,CAACE,OAAD,CAAb,CACGS,IADH,CACQC,MAAM,IAAI;AACd,YAAI,CAACH,SAAL,EAAgB;AACdH,UAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,UAAAA,SAAS,CAACQ,MAAD,CAAT;AACD;AACF,OANH,EAOGC,KAPH,CAOSL,QAPT;AAQD;;AAEDE,IAAAA,KAAK;AACL,WAAO,MAAM;AACXD,MAAAA,SAAS,GAAG,IAAZ;AACD,KAFD;AAGD,GAnBQ,EAmBN,CAACP,OAAD,CAnBM,CAAT;AAqBA,SAAO;AAAEC,IAAAA,MAAF;AAAUE,IAAAA,OAAV;AAAmBE,IAAAA;AAAnB,GAAP;AACD","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Bundle as BundleData } from \"../../audioset\";\nimport { fetchAudioset } from \"../lib/fetchAudioset\";\n\nexport function useRemoteBundle(idOrUrl: string) {\n  const [bundle, setBundle] = useState<BundleData | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<any>(null);\n\n  useEffect(() => {\n    let didCancel = false;\n\n    function fetch() {\n      setLoading(true);\n      fetchAudioset(idOrUrl)\n        .then(result => {\n          if (!didCancel) {\n            setLoading(false);\n            setBundle(result);\n          }\n        })\n        .catch(setError);\n    }\n\n    fetch();\n    return () => {\n      didCancel = true;\n    };\n  }, [idOrUrl]);\n\n  return { bundle, loading, error };\n}\n"]},"metadata":{},"sourceType":"module"}