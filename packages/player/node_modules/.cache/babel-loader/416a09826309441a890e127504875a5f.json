{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createConvolverNodeRendererFactory = function createConvolverNodeRendererFactory(createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeConvolverNodes = new WeakMap();\n\n    var createConvolverNode = function createConvolverNode(proxy, nativeOfflineAudioContext, trace) {\n      var nativeConvolverNode, nativeConvolverNodeIsOwnedByContext, options;\n      return _regeneratorRuntime.async(function createConvolverNode$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              nativeConvolverNode = getNativeAudioNode(proxy); // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n              nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n\n              if (!nativeConvolverNodeIsOwnedByContext) {\n                options = {\n                  buffer: nativeConvolverNode.buffer,\n                  channelCount: nativeConvolverNode.channelCount,\n                  channelCountMode: nativeConvolverNode.channelCountMode,\n                  channelInterpretation: nativeConvolverNode.channelInterpretation,\n                  disableNormalization: !nativeConvolverNode.normalize\n                };\n                nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n              }\n\n              renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n\n              if (!isNativeAudioNodeFaker(nativeConvolverNode)) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0], trace));\n\n            case 7:\n              _context.next = 11;\n              break;\n\n            case 9:\n              _context.next = 11;\n              return _regeneratorRuntime.awrap(renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode, trace));\n\n            case 11:\n              return _context.abrupt(\"return\", nativeConvolverNode);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext, trace) {\n        var renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeConvolverNode !== undefined) {\n          return Promise.resolve(renderedNativeConvolverNode);\n        }\n\n        return createConvolverNode(proxy, nativeOfflineAudioContext, trace);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/convolver-node-renderer-factory.js"],"names":["isNativeAudioNodeFaker","isOwnedByContext","createConvolverNodeRendererFactory","createNativeConvolverNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeConvolverNodes","WeakMap","createConvolverNode","proxy","nativeOfflineAudioContext","trace","nativeConvolverNode","nativeConvolverNodeIsOwnedByContext","options","buffer","channelCount","channelCountMode","channelInterpretation","disableNormalization","normalize","set","inputs","render","renderedNativeConvolverNode","get","undefined","Promise","resolve"],"mappings":";AAAA,SAASA,sBAAT,QAAuC,mCAAvC;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,OAAO,IAAMC,kCAAkC,GAAG,SAArCA,kCAAqC,CAACC,yBAAD,EAA4BC,kBAA5B,EAAgDC,uBAAhD,EAA4E;AAC1H,SAAO,YAAM;AACT,QAAMC,4BAA4B,GAAG,IAAIC,OAAJ,EAArC;;AACA,QAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAOC,KAAP,EAAcC,yBAAd,EAAyCC,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBC,cAAAA,mBADoB,GACER,kBAAkB,CAACK,KAAD,CADpB,EAExB;;AACMI,cAAAA,mCAHkB,GAGoBZ,gBAAgB,CAACW,mBAAD,EAAsBF,yBAAtB,CAHpC;;AAIxB,kBAAI,CAACG,mCAAL,EAA0C;AAChCC,gBAAAA,OADgC,GACtB;AACZC,kBAAAA,MAAM,EAAEH,mBAAmB,CAACG,MADhB;AAEZC,kBAAAA,YAAY,EAAEJ,mBAAmB,CAACI,YAFtB;AAGZC,kBAAAA,gBAAgB,EAAEL,mBAAmB,CAACK,gBAH1B;AAIZC,kBAAAA,qBAAqB,EAAEN,mBAAmB,CAACM,qBAJ/B;AAKZC,kBAAAA,oBAAoB,EAAE,CAACP,mBAAmB,CAACQ;AAL/B,iBADsB;AAQtCR,gBAAAA,mBAAmB,GAAGT,yBAAyB,CAACO,yBAAD,EAA4BI,OAA5B,CAA/C;AACH;;AACDR,cAAAA,4BAA4B,CAACe,GAA7B,CAAiCX,yBAAjC,EAA4DE,mBAA5D;;AAdwB,mBAepBZ,sBAAsB,CAACY,mBAAD,CAfF;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAgBdP,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCE,mBAAmB,CAACU,MAApB,CAA2B,CAA3B,CAAnC,EAAkEX,KAAlE,CAhBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,+CAmBdN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCE,mBAAnC,EAAwDD,KAAxD,CAnBT;;AAAA;AAAA,+CAqBjBC,mBArBiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA5B;;AAuBA,WAAO;AACHW,MAAAA,MADG,kBACId,KADJ,EACWC,yBADX,EACsCC,KADtC,EAC6C;AAC5C,YAAMa,2BAA2B,GAAGlB,4BAA4B,CAACmB,GAA7B,CAAiCf,yBAAjC,CAApC;;AACA,YAAIc,2BAA2B,KAAKE,SAApC,EAA+C;AAC3C,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,2BAAhB,CAAP;AACH;;AACD,eAAOhB,mBAAmB,CAACC,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,CAA1B;AACH;AAPE,KAAP;AASH,GAlCD;AAmCH,CApCM","sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConvolverNodeRendererFactory = (createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeConvolverNodes = new WeakMap();\n        const createConvolverNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeConvolverNode = getNativeAudioNode(proxy);\n            // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n            if (!nativeConvolverNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeConvolverNode.buffer,\n                    channelCount: nativeConvolverNode.channelCount,\n                    channelCountMode: nativeConvolverNode.channelCountMode,\n                    channelInterpretation: nativeConvolverNode.channelInterpretation,\n                    disableNormalization: !nativeConvolverNode.normalize\n                };\n                nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n            if (isNativeAudioNodeFaker(nativeConvolverNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0], trace);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode, trace);\n            }\n            return nativeConvolverNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeConvolverNode !== undefined) {\n                    return Promise.resolve(renderedNativeConvolverNode);\n                }\n                return createConvolverNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/convolver-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}