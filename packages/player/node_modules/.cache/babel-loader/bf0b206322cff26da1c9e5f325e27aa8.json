{"ast":null,"code":"import _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as topojson from \"topojson\";\nimport { getAlbumHeight } from \"./dimensions\";\nimport drawCircle from \"./drawCircle\";\nimport drawAlbum from \"./drawAlbum\";\nimport drawRefLine from \"./drawRefLine\";\nimport drawWave from \"./drawWave\";\nimport { drawMap, calculateMapScale, createMapProjector } from \"./drawMap\";\nimport { drawPanel, createPanelProjector } from \"./drawPanel\";\n\nconst remove = (name, group) => {\n  const value = group[name];\n\n  if (value) {\n    value.remove();\n    group[name] = null;\n  }\n};\n\nfunction createProjector(visuals, dimensions) {\n  const width = dimensions.width,\n        height = dimensions.height;\n  const albumsHeight = getAlbumHeight(width);\n  const scale = calculateMapScale(width, height - albumsHeight);\n\n  if (visuals.mode === \"map\") {\n    const _visuals$geomap = visuals.geomap,\n          scaleFactor = _visuals$geomap.scaleFactor,\n          center = _visuals$geomap.center;\n    return createMapProjector(width, height - albumsHeight, scaleFactor * scale, center);\n  } else {\n    return createPanelProjector(width, height - albumsHeight, visuals.image.size.width, visuals.image.size.height);\n  }\n}\n/**\n * It stores the state required to render visualizations\n */\n\n\nexport default class Visuals {\n  constructor(set, display) {\n    this.set = set;\n    this.display = display;\n    this.circles = void 0;\n    this.albums = void 0;\n    this.refLines = void 0;\n    this.countries = void 0;\n    this.backgroundContainer = void 0;\n    this.circlesContainer = void 0;\n    this.albumsContainer = void 0;\n    this.refLinesContainer = void 0;\n    this.wavesContainer = void 0;\n    this.circles = {};\n    this.albums = {};\n    this.refLines = {};\n  }\n\n  setGeodata(geodata) {\n    const collection = topojson.feature(geodata, geodata.objects.countries);\n    this.countries = collection.features.filter(country => country.id !== \"010\");\n    this.setup();\n  }\n\n  show(name) {\n    const clip = this.set.index.clipById[name];\n    if (!clip) return; // REVIEW: See if there is a better way to get this info (scale, projection)\n    // that is already calculated in drawMap\n\n    const _this$display$dimensi = this.display.dimensions,\n          width = _this$display$dimensi.width,\n          height = _this$display$dimensi.height;\n    const albumsHeight = getAlbumHeight(width);\n    const projector = createProjector(this.set.visuals, this.display.dimensions);\n\n    const _projector = projector(clip.position),\n          _projector2 = _slicedToArray(_projector, 2),\n          cx = _projector2[0],\n          cy = _projector2[1]; // REVIEW: fix width parameter to draw circles with the proper size\n\n\n    const circle = drawCircle(this.circlesContainer, width, cx, cy, clip);\n    this.circles[name] = circle;\n    const album = drawAlbum(this.albumsContainer, width, clip);\n    this.albums[name] = album;\n    const refLine = drawRefLine(this.refLinesContainer, width, cx, cy, clip);\n    this.refLines[name] = refLine;\n    drawWave(this.wavesContainer, width, cx, cy, clip);\n  }\n\n  hide(name) {\n    remove(name, this.circles);\n    remove(name, this.albums);\n    remove(name, this.refLines);\n  }\n\n  resizeSvg() {\n    // TODO: create a resize function that only changes the svg viewBox\n    this.setup();\n  }\n\n  setup() {\n    this.display.clear();\n    this.display.createSvg();\n    const backgroundWidth = this.display.dimensions.width;\n    const albumsHeight = getAlbumHeight(backgroundWidth);\n    const backgroundHeight = this.display.dimensions.height - albumsHeight;\n    const svg = this.display.svg;\n    this.backgroundContainer = createGroup(svg, \"background\", albumsHeight);\n    this.albumsContainer = createGroup(svg, \"albums\", 0);\n    this.refLinesContainer = createGroup(svg, \"refLines\", albumsHeight);\n    this.circlesContainer = createGroup(svg, \"circles\", albumsHeight);\n    this.wavesContainer = createGroup(svg, \"waves\", albumsHeight);\n\n    if (this.set.visuals.mode === \"map\") {\n      drawMap(this.backgroundContainer, this.countries, backgroundWidth, backgroundHeight, this.set.visuals);\n    } else {\n      drawPanel(this.backgroundContainer, backgroundWidth, backgroundHeight, this.set.visuals.image.url);\n    }\n  }\n\n}\n\nfunction createGroup(svg, id, height) {\n  return svg.append(\"g\").attr(\"id\", id).attr(\"transform\", \"translate(0, \".concat(height, \")\"));\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/visuals/visuals.ts"],"names":["topojson","getAlbumHeight","drawCircle","drawAlbum","drawRefLine","drawWave","drawMap","calculateMapScale","createMapProjector","drawPanel","createPanelProjector","remove","name","group","value","createProjector","visuals","dimensions","width","height","albumsHeight","scale","mode","geomap","scaleFactor","center","image","size","Visuals","constructor","set","display","circles","albums","refLines","countries","backgroundContainer","circlesContainer","albumsContainer","refLinesContainer","wavesContainer","setGeodata","geodata","collection","feature","objects","features","filter","country","id","setup","show","clip","index","clipById","projector","position","cx","cy","circle","album","refLine","hide","resizeSvg","clear","createSvg","backgroundWidth","backgroundHeight","svg","createGroup","url","append","attr"],"mappings":"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","sourcesContent":["import * as topojson from \"topojson\";\n\nimport { getAlbumHeight } from \"./dimensions\";\n\nimport drawCircle from \"./drawCircle\";\nimport drawAlbum from \"./drawAlbum\";\nimport drawRefLine from \"./drawRefLine\";\nimport drawWave from \"./drawWave\";\nimport { drawMap, calculateMapScale, createMapProjector } from \"./drawMap\";\nimport { drawPanel, createPanelProjector } from \"./drawPanel\";\nimport { Audioset, AudiosetVisuals } from \"../Audioset\";\nimport Display, { Dimension } from \"./display\";\n\nconst remove = (name:string, group:any) => {\n  const value = group[name];\n  if (value) {\n    value.remove();\n    group[name] = null;\n  }\n};\n\nfunction createProjector(visuals: AudiosetVisuals, dimensions: Dimension) {\n  const { width, height } = dimensions;\n  const albumsHeight = getAlbumHeight(width);\n  const scale = calculateMapScale(width, height - albumsHeight);\n  if (visuals.mode === \"map\") {\n    const { scaleFactor, center } = visuals.geomap;\n    return createMapProjector(width, height - albumsHeight, scaleFactor * scale, center);\n  } else {\n    return createPanelProjector(width, height - albumsHeight, visuals.image.size.width, visuals.image.size.height);\n  }\n}\n\n/**\n * It stores the state required to render visualizations\n */\nexport default class Visuals {\n  circles: Record<string, any>;\n  albums: Record<string, any>;\n  refLines: Record<string, any>;\n  countries: any;\n  backgroundContainer: any;\n  circlesContainer!: Record<string, any>;\n  albumsContainer!: Record<string, any>;\n  refLinesContainer!: Record<string, any>;\n  wavesContainer!: Record<string, any>;\n\n  constructor(private set: Audioset, private display: Display) {\n    this.circles = {};\n    this.albums = {};\n    this.refLines = {};\n  }\n\n  setGeodata(geodata: any) {\n    const collection = topojson.feature(geodata, geodata.objects.countries) as any;\n    this.countries = collection.features.filter((country: any) => country.id !== \"010\");\n    this.setup();\n  }\n\n  show(name: string) {\n    const clip = this.set.index.clipById[name];\n    if (!clip) return;\n\n    // REVIEW: See if there is a better way to get this info (scale, projection)\n    // that is already calculated in drawMap\n    const { width, height } = this.display.dimensions;\n    const albumsHeight = getAlbumHeight(width);\n\n    const projector = createProjector(this.set.visuals, this.display.dimensions);\n    const [cx, cy] = projector(clip.position);\n\n    // REVIEW: fix width parameter to draw circles with the proper size\n    const circle = drawCircle(this.circlesContainer, width, cx, cy, clip);\n    this.circles[name] = circle;\n\n    const album = drawAlbum(this.albumsContainer, width, clip);\n    this.albums[name] = album;\n\n    const refLine = drawRefLine(this.refLinesContainer, width, cx, cy, clip);\n    this.refLines[name] = refLine;\n\n    drawWave(this.wavesContainer, width, cx, cy, clip);\n  }\n\n  hide(name: string) {\n    remove(name, this.circles);\n    remove(name, this.albums);\n    remove(name, this.refLines);\n  }\n\n  resizeSvg() {\n    // TODO: create a resize function that only changes the svg viewBox\n    this.setup();\n  }\n\n  setup() {\n    this.display.clear();\n    this.display.createSvg();\n\n    const backgroundWidth = this.display.dimensions.width;\n    const albumsHeight = getAlbumHeight(backgroundWidth);\n    const backgroundHeight = this.display.dimensions.height - albumsHeight;\n\n    const svg = this.display.svg;\n\n    this.backgroundContainer = createGroup(svg, \"background\", albumsHeight);\n    this.albumsContainer = createGroup(svg, \"albums\", 0);\n    this.refLinesContainer = createGroup(svg, \"refLines\", albumsHeight);\n    this.circlesContainer = createGroup(svg, \"circles\", albumsHeight);\n    this.wavesContainer = createGroup(svg, \"waves\", albumsHeight);\n\n    if (this.set.visuals.mode === \"map\") {\n      drawMap(this.backgroundContainer, this.countries, backgroundWidth, backgroundHeight, this.set.visuals);\n    } else {\n      drawPanel(this.backgroundContainer, backgroundWidth, backgroundHeight, this.set.visuals.image.url);\n    }\n  }\n\n\n}\n\nfunction createGroup(svg:any, id:string, height:number) {\n  return svg.append(\"g\").attr(\"id\", id).attr(\"transform\", `translate(0, ${height})`);\n}\n"]},"metadata":{},"sourceType":"module"}