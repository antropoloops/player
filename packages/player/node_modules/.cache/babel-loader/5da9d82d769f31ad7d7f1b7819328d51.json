{"ast":null,"code":"import debug from\"debug\";import{isAudiosetData,isAudiosetPack}from\"./Audioset\";var log=debug(\"atpls:audioset\");var capitalize=function capitalize(str){return str.charAt(0).toUpperCase()+str.slice(1);};export function createAudioset(data){if(!isAudiosetData(data)){log(\"Invalid format %o\",data);throw Error(\"Invalida Audioset format\");}if(isAudiosetPack(data)){migrateOrDerive(data);createIndices(data);}return data;}function migrateOrDerive(audioset){var bpm=audioset.meta.bpm||120;audioset.clips.forEach(function(clip){clip.name=clip.name||capitalize(clip.id);clip.artist=clip.artist||\"\";clip.place=clip.place||\"\";clip.country=clip.country||\"\";clip.audio.volume=clip.audio.volume||0.7;clip.audio.durationSeconds=60*clip.audio.beats/bpm;});}function createIndices(audioset){var index={clipById:{},trackById:{},clipIdsOfTrack:{},trackIdOfClip:{}};audioset.clips.forEach(function(clip){index.clipById[clip.id]=clip;index.trackIdOfClip[clip.id]=clip.trackId;});audioset.tracks.forEach(function(track){index.trackById[track.id]=track;index.clipIdsOfTrack[track.id]=track.clipIds;});audioset.index=index;}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/audioset/createAudioset.ts"],"names":["debug","isAudiosetData","isAudiosetPack","log","capitalize","str","charAt","toUpperCase","slice","createAudioset","data","Error","migrateOrDerive","createIndices","audioset","bpm","meta","clips","forEach","clip","name","id","artist","place","country","audio","volume","durationSeconds","beats","index","clipById","trackById","clipIdsOfTrack","trackIdOfClip","trackId","tracks","track","clipIds"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAIEC,cAJF,CAKEC,cALF,KAMO,YANP,CAQA,GAAMC,CAAAA,GAAG,CAAGH,KAAK,CAAC,gBAAD,CAAjB,CACA,GAAMI,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,GAAD,QAAiBA,CAAAA,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAcC,WAAd,GAA8BF,GAAG,CAACG,KAAJ,CAAU,CAAV,CAA/C,EAAnB,CAEA,MAAO,SAASC,CAAAA,cAAT,CAAwBC,IAAxB,CAAiD,CACtD,GAAI,CAACT,cAAc,CAACS,IAAD,CAAnB,CAA2B,CACzBP,GAAG,CAAC,mBAAD,CAAsBO,IAAtB,CAAH,CACA,KAAMC,CAAAA,KAAK,CAAC,0BAAD,CAAX,CACD,CACD,GAAIT,cAAc,CAACQ,IAAD,CAAlB,CAA0B,CACxBE,eAAe,CAACF,IAAD,CAAf,CACAG,aAAa,CAACH,IAAD,CAAb,CACD,CACD,MAAOA,CAAAA,IAAP,CACD,CAED,QAASE,CAAAA,eAAT,CAAyBE,QAAzB,CAA6C,CAC3C,GAAMC,CAAAA,GAAG,CAAGD,QAAQ,CAACE,IAAT,CAAcD,GAAd,EAAqB,GAAjC,CACAD,QAAQ,CAACG,KAAT,CAAeC,OAAf,CAAuB,SAAAC,IAAI,CAAI,CAC7BA,IAAI,CAACC,IAAL,CAAYD,IAAI,CAACC,IAAL,EAAahB,UAAU,CAACe,IAAI,CAACE,EAAN,CAAnC,CACAF,IAAI,CAACG,MAAL,CAAcH,IAAI,CAACG,MAAL,EAAe,EAA7B,CACAH,IAAI,CAACI,KAAL,CAAaJ,IAAI,CAACI,KAAL,EAAc,EAA3B,CACAJ,IAAI,CAACK,OAAL,CAAeL,IAAI,CAACK,OAAL,EAAgB,EAA/B,CACAL,IAAI,CAACM,KAAL,CAAWC,MAAX,CAAoBP,IAAI,CAACM,KAAL,CAAWC,MAAX,EAAqB,GAAzC,CACAP,IAAI,CAACM,KAAL,CAAWE,eAAX,CAA8B,GAAKR,IAAI,CAACM,KAAL,CAAWG,KAAjB,CAA0Bb,GAAvD,CACD,CAPD,EAQD,CAED,QAASF,CAAAA,aAAT,CAAuBC,QAAvB,CAA2C,CACzC,GAAMe,CAAAA,KAAsB,CAAG,CAC7BC,QAAQ,CAAE,EADmB,CAE7BC,SAAS,CAAE,EAFkB,CAG7BC,cAAc,CAAE,EAHa,CAI7BC,aAAa,CAAE,EAJc,CAA/B,CAMAnB,QAAQ,CAACG,KAAT,CAAeC,OAAf,CAAuB,SAAAC,IAAI,CAAI,CAC7BU,KAAK,CAACC,QAAN,CAAeX,IAAI,CAACE,EAApB,EAA0BF,IAA1B,CACAU,KAAK,CAACI,aAAN,CAAoBd,IAAI,CAACE,EAAzB,EAA+BF,IAAI,CAACe,OAApC,CACD,CAHD,EAIApB,QAAQ,CAACqB,MAAT,CAAgBjB,OAAhB,CAAwB,SAAAkB,KAAK,CAAI,CAC/BP,KAAK,CAACE,SAAN,CAAgBK,KAAK,CAACf,EAAtB,EAA4Be,KAA5B,CACAP,KAAK,CAACG,cAAN,CAAqBI,KAAK,CAACf,EAA3B,EAAiCe,KAAK,CAACC,OAAvC,CACD,CAHD,EAIAvB,QAAQ,CAACe,KAAT,CAAiBA,KAAjB,CACD","sourcesContent":["import debug from \"debug\";\nimport {\n  Audioset,\n  AudiosetData,\n  AudiosetIndexes,\n  isAudiosetData,\n  isAudiosetPack,\n} from \"./Audioset\";\n\nconst log = debug(\"atpls:audioset\");\nconst capitalize = (str: string) => str.charAt(0).toUpperCase() + str.slice(1);\n\nexport function createAudioset(data: any): AudiosetData {\n  if (!isAudiosetData(data)) {\n    log(\"Invalid format %o\", data);\n    throw Error(\"Invalida Audioset format\");\n  }\n  if (isAudiosetPack(data)) {\n    migrateOrDerive(data);\n    createIndices(data);\n  }\n  return data;\n}\n\nfunction migrateOrDerive(audioset: Audioset) {\n  const bpm = audioset.meta.bpm || 120;\n  audioset.clips.forEach(clip => {\n    clip.name = clip.name || capitalize(clip.id);\n    clip.artist = clip.artist || \"\";\n    clip.place = clip.place || \"\";\n    clip.country = clip.country || \"\";\n    clip.audio.volume = clip.audio.volume || 0.7;\n    clip.audio.durationSeconds = (60 * clip.audio.beats) / bpm;\n  });\n}\n\nfunction createIndices(audioset: Audioset) {\n  const index: AudiosetIndexes = {\n    clipById: {},\n    trackById: {},\n    clipIdsOfTrack: {},\n    trackIdOfClip: {},\n  };\n  audioset.clips.forEach(clip => {\n    index.clipById[clip.id] = clip;\n    index.trackIdOfClip[clip.id] = clip.trackId;\n  });\n  audioset.tracks.forEach(track => {\n    index.trackById[track.id] = track;\n    index.clipIdsOfTrack[track.id] = track.clipIds;\n  });\n  audioset.index = index;\n}\n"]},"metadata":{},"sourceType":"module"}