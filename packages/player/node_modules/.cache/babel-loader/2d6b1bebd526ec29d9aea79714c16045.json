{"ast":null,"code":"import React,{useEffect}from\"react\";import{getAudioContext,player}from\"../../player\";import{Header}from\"../shared/Header\";import{Scroll}from\"../shared/Scroll\";import{useDeviceType}from\"../useDeviceType\";import{Controller}from\"./Controller\";import{Footer}from\"./Footer\";import Preview from\"./Preview\";import{useFullscreen}from\"./useFullscreen\";import{useKeyboardListener}from\"./useKeyboardListener\";import{useResourceLoader}from\"./useResourceLoader\";import{Visuals}from\"./Visuals\";var startPlayer=function startPlayer(){return getAudioContext().then(function(){return player.resources.load();}).then(function(){return player.control.keyboard.setActive(true);});};export var Player=function Player(_ref){var audioset=_ref.audioset;var _useResourceLoader=useResourceLoader(),status=_useResourceLoader.status;var fullscreen=useFullscreen();var isReady=status.stage===\"ready\";var _useDeviceType=useDeviceType(),isDesktop=_useDeviceType.isDesktop;useKeyboardListener();var isVisual=isDesktop||isReady;var toggleFullscreenAndStart=function toggleFullscreenAndStart(){fullscreen.toggle();if(!isReady){startPlayer();}};var Sidebar=function Sidebar(){return React.createElement(React.Fragment,null,React.createElement(Header,{meta:audioset.meta}),React.createElement(Scroll,null,React.createElement(\"div\",{className:\"content\"},isReady?React.createElement(Controller,{audioset:audioset}):React.createElement(Preview,{audioset:audioset,resourceStatus:status,onStart:startPlayer}))),React.createElement(Footer,{onFullscreen:toggleFullscreenAndStart}));};var isSidebarVisible=!fullscreen.isFull;// useAutoStartAudio(isReady, audioset, handleStart);\nreturn React.createElement(\"div\",{className:\"App Player\"},isSidebarVisible&&React.createElement(Sidebar,null),isVisual&&React.createElement(\"div\",{className:\"visuals\"},React.createElement(Visuals,{audioset:audioset})));};/**\n * Start audio when clicking in window\n */export function useAutoStartAudio(isReady,audioset,startAudio){useEffect(function(){if(!isReady&&audioset.id){var onClick=function onClick(){startAudio();removeListener();};var removeListener=function removeListener(){window.removeEventListener(\"click\",onClick);};window.addEventListener(\"click\",onClick);return removeListener;}},[audioset.id,isReady,startAudio]);return startAudio;}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/Player.tsx"],"names":["React","useEffect","getAudioContext","player","Header","Scroll","useDeviceType","Controller","Footer","Preview","useFullscreen","useKeyboardListener","useResourceLoader","Visuals","startPlayer","then","resources","load","control","keyboard","setActive","Player","audioset","status","fullscreen","isReady","stage","isDesktop","isVisual","toggleFullscreenAndStart","toggle","Sidebar","meta","isSidebarVisible","isFull","useAutoStartAudio","startAudio","id","onClick","removeListener","window","removeEventListener","addEventListener"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { Audioset } from \"../../audioset\";\nimport { getAudioContext, player } from \"../../player\";\nimport { Header } from \"../shared/Header\";\nimport { Scroll } from \"../shared/Scroll\";\nimport { useDeviceType } from \"../useDeviceType\";\nimport { Controller } from \"./Controller\";\nimport { Footer } from \"./Footer\";\nimport Preview from \"./Preview\";\nimport { useFullscreen } from \"./useFullscreen\";\nimport { useKeyboardListener } from \"./useKeyboardListener\";\nimport { useResourceLoader } from \"./useResourceLoader\";\nimport { Visuals } from \"./Visuals\";\n\nexport interface PlayerProps {\n  audioset: Audioset;\n}\n\nconst startPlayer = () =>\n  getAudioContext()\n    .then(() => player.resources.load())\n    .then(() => player.control.keyboard.setActive(true));\n\nexport const Player = ({ audioset }: PlayerProps) => {\n  const { status } = useResourceLoader();\n  const fullscreen = useFullscreen();\n  const isReady = status.stage === \"ready\";\n  const { isDesktop } = useDeviceType();\n  useKeyboardListener();\n\n  const isVisual = isDesktop || isReady;\n\n  const toggleFullscreenAndStart = () => {\n    fullscreen.toggle();\n    if (!isReady) {\n      startPlayer();\n    }\n  };\n\n  const Sidebar = () => (\n    <>\n      <Header meta={audioset.meta} />\n      <Scroll>\n        <div className=\"content\">\n          {isReady ? (\n            <Controller audioset={audioset} />\n          ) : (\n            <Preview\n              audioset={audioset}\n              resourceStatus={status}\n              onStart={startPlayer}\n            />\n          )}\n        </div>\n      </Scroll>\n      <Footer onFullscreen={toggleFullscreenAndStart} />\n    </>\n  );\n\n  const isSidebarVisible = !fullscreen.isFull;\n  // useAutoStartAudio(isReady, audioset, handleStart);\n\n  return (\n    <div className=\"App Player\">\n      {isSidebarVisible && <Sidebar />}\n      {isVisual && (\n        <div className=\"visuals\">{<Visuals audioset={audioset} />}</div>\n      )}\n    </div>\n  );\n};\n\n/**\n * Start audio when clicking in window\n */\nexport function useAutoStartAudio(\n  isReady: boolean,\n  audioset: Audioset,\n  startAudio: () => void,\n) {\n  useEffect(() => {\n    if (!isReady && audioset.id) {\n      const onClick = () => {\n        startAudio();\n        removeListener();\n      };\n      const removeListener = () => {\n        window.removeEventListener(\"click\", onClick);\n      };\n      window.addEventListener(\"click\", onClick);\n      return removeListener;\n    }\n  }, [audioset.id, isReady, startAudio]);\n\n  return startAudio;\n}\n"]},"metadata":{},"sourceType":"module"}