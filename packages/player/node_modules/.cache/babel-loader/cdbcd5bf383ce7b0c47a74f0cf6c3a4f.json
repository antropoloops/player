{"ast":null,"code":"import _objectSpread from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { wrapIIRFilterNodeGetFrequencyResponseMethod } from '../helpers/wrap-iir-filter-node-get-frequency-response-method';\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers'\n};\nexport var createIIRFilterNodeConstructor = function createIIRFilterNodeConstructor(audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(IIRFilterNode, _audioNodeConstructor);\n\n    var _super = _createSuper(IIRFilterNode);\n\n    function IIRFilterNode(context, options) {\n      var _this;\n\n      _classCallCheck(this, IIRFilterNode);\n\n      var nativeContext = getNativeContext(context);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n      var nativeIIRFilterNode = createNativeIIRFilterNode(nativeContext, isOffline ? null : context.baseLatency, mergedOptions);\n      var iirFilterNodeRenderer = isOffline ? createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward) : null;\n      _this = _super.call(this, context, false, nativeIIRFilterNode, iirFilterNodeRenderer); // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.\n      // @todo Write a test which allows other browsers to remain unpatched.\n\n      wrapIIRFilterNodeGetFrequencyResponseMethod(nativeIIRFilterNode);\n      _this._nativeIIRFilterNode = nativeIIRFilterNode;\n      return _this;\n    }\n\n    _createClass(IIRFilterNode, [{\n      key: \"getFrequencyResponse\",\n      value: function getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n        return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n      }\n    }]);\n\n    return IIRFilterNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/iir-filter-node-constructor.js"],"names":["wrapIIRFilterNodeGetFrequencyResponseMethod","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","createIIRFilterNodeConstructor","audioNodeConstructor","createNativeIIRFilterNode","createIIRFilterNodeRenderer","getNativeContext","isNativeOfflineAudioContext","context","options","nativeContext","isOffline","mergedOptions","nativeIIRFilterNode","baseLatency","iirFilterNodeRenderer","feedback","feedforward","_nativeIIRFilterNode","frequencyHz","magResponse","phaseResponse","getFrequencyResponse"],"mappings":";;;;;AAAA,SAASA,2CAAT,QAA4D,+DAA5D;AACA,IAAMC,eAAe,GAAG;AACpBC,EAAAA,YAAY,EAAE,CADM;AAEpBC,EAAAA,gBAAgB,EAAE,KAFE;AAGpBC,EAAAA,qBAAqB,EAAE;AAHH,CAAxB;AAKA,OAAO,IAAMC,8BAA8B,GAAG,SAAjCA,8BAAiC,CAACC,oBAAD,EAAuBC,yBAAvB,EAAkDC,2BAAlD,EAA+EC,gBAA/E,EAAiGC,2BAAjG,EAAiI;AAC3K;AAAA;;AAAA;;AACI,2BAAYC,OAAZ,EAAqBC,OAArB,EAA8B;AAAA;;AAAA;;AAC1B,UAAMC,aAAa,GAAGJ,gBAAgB,CAACE,OAAD,CAAtC;AACA,UAAMG,SAAS,GAAGJ,2BAA2B,CAACG,aAAD,CAA7C;;AACA,UAAME,aAAa,mCAAQd,eAAR,GAA4BW,OAA5B,CAAnB;;AACA,UAAMI,mBAAmB,GAAGT,yBAAyB,CAACM,aAAD,EAAgBC,SAAS,GAAG,IAAH,GAAUH,OAAO,CAACM,WAA3C,EAAwDF,aAAxD,CAArD;AACA,UAAMG,qBAAqB,GAAKJ,SAAD,GACzBN,2BAA2B,CAACO,aAAa,CAACI,QAAf,EAAyBJ,aAAa,CAACK,WAAvC,CADF,GAEzB,IAFN;AAGA,gCAAMT,OAAN,EAAe,KAAf,EAAsBK,mBAAtB,EAA2CE,qBAA3C,EAR0B,CAS1B;AACA;;AACAlB,MAAAA,2CAA2C,CAACgB,mBAAD,CAA3C;AACA,YAAKK,oBAAL,GAA4BL,mBAA5B;AAZ0B;AAa7B;;AAdL;AAAA;AAAA,2CAeyBM,WAfzB,EAesCC,WAftC,EAemDC,aAfnD,EAekE;AAC1D,eAAO,KAAKH,oBAAL,CAA0BI,oBAA1B,CAA+CH,WAA/C,EAA4DC,WAA5D,EAAyEC,aAAzE,CAAP;AACH;AAjBL;;AAAA;AAAA,IAAmClB,oBAAnC;AAmBH,CApBM","sourcesContent":["import { wrapIIRFilterNodeGetFrequencyResponseMethod } from '../helpers/wrap-iir-filter-node-get-frequency-response-method';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers'\n};\nexport const createIIRFilterNodeConstructor = (audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {\n    return class IIRFilterNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeIIRFilterNode = createNativeIIRFilterNode(nativeContext, isOffline ? null : context.baseLatency, mergedOptions);\n            const iirFilterNodeRenderer = ((isOffline)\n                ? createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward)\n                : null);\n            super(context, false, nativeIIRFilterNode, iirFilterNodeRenderer);\n            // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.\n            // @todo Write a test which allows other browsers to remain unpatched.\n            wrapIIRFilterNodeGetFrequencyResponseMethod(nativeIIRFilterNode);\n            this._nativeIIRFilterNode = nativeIIRFilterNode;\n        }\n        getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n            return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/iir-filter-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}