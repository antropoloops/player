{"ast":null,"code":"var _jsxFileName = \"/Users/dani/Antropoloops/atpls-player/src/ui/LoadAudioset.tsx\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { Browser } from \"./Browser\";\nimport Loading from \"./Loading\";\nimport NotFound from \"./NotFound\";\nimport { Player } from \"./Player\";\nimport { useAudiosetLoadStatus } from \"./useAudiosetLoad\";\nexport const App = ({\n  match\n}) => {\n  const id = match.params.id || \"index\";\n  return LoadAudioset({\n    id\n  });\n};\nexport const LoadAudioset = ({\n  id\n}) => {\n  const loadStatus = useAudiosetLoadStatus(id);\n\n  switch (loadStatus.status) {\n    case \"loading\":\n      return React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      });\n\n    case \"ready\":\n      const audioset = loadStatus.audioset;\n      return audioset.type === \"project\" ? React.createElement(Browser, {\n        audioset: audioset,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }) : React.createElement(Player, {\n        audioset: audioset,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      });\n\n    case \"error\":\n      return React.createElement(NotFound, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      });\n\n    default:\n      return React.createElement(\"pre\", {\n        style: {\n          color: \"white\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, JSON.stringify(loadStatus, null, 2));\n  }\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/LoadAudioset.tsx"],"names":["React","Browser","Loading","NotFound","Player","useAudiosetLoadStatus","App","match","id","params","LoadAudioset","loadStatus","status","audioset","type","color","JSON","stringify"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,OAAO,WAAP;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,qBAAT,QAAsC,mBAAtC;AASA,OAAO,MAAMC,GAAG,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAyB;AAC1C,QAAMC,EAAE,GAAGD,KAAK,CAACE,MAAN,CAAaD,EAAb,IAAmB,OAA9B;AACA,SAAOE,YAAY,CAAC;AAAEF,IAAAA;AAAF,GAAD,CAAnB;AACD,CAHM;AASP,OAAO,MAAME,YAAY,GAAG,CAAC;AAAEF,EAAAA;AAAF,CAAD,KAA+B;AACzD,QAAMG,UAAU,GAAGN,qBAAqB,CAACG,EAAD,CAAxC;;AAEA,UAAQG,UAAU,CAACC,MAAnB;AACE,SAAK,SAAL;AACE,aAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;;AACF,SAAK,OAAL;AACE,YAAMC,QAAQ,GAAGF,UAAU,CAACE,QAA5B;AACA,aAAOA,QAAQ,CAACC,IAAT,KAAkB,SAAlB,GACL,oBAAC,OAAD;AAAS,QAAA,QAAQ,EAAED,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADK,GAGL,oBAAC,MAAD;AAAQ,QAAA,QAAQ,EAAEA,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF;;AAKF,SAAK,OAAL;AACE,aAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;;AACF;AACE,aACE;AAAK,QAAA,KAAK,EAAE;AAAEE,UAAAA,KAAK,EAAE;AAAT,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGC,IAAI,CAACC,SAAL,CAAeN,UAAf,EAA2B,IAA3B,EAAiC,CAAjC,CADH,CADF;AAbJ;AAmBD,CAtBM","sourcesContent":["import React from \"react\";\nimport { match as Match } from \"react-router-dom\";\nimport { Audioset, AudiosetProject } from \"../audioset\";\nimport \"./App.css\";\nimport { Browser } from \"./Browser\";\nimport Loading from \"./Loading\";\nimport NotFound from \"./NotFound\";\nimport { Player } from \"./Player\";\nimport { useAudiosetLoadStatus } from \"./useAudiosetLoad\";\n\ninterface AppParams {\n  id: string;\n}\n\ninterface AppProps {\n  match: Match<AppParams>;\n}\nexport const App = ({ match }: AppProps) => {\n  const id = match.params.id || \"index\";\n  return LoadAudioset({ id })\n};\n\ninterface LoadAudiosetProps {\n  id: string;\n}\n\nexport const LoadAudioset = ({ id }: LoadAudiosetProps) => {\n  const loadStatus = useAudiosetLoadStatus(id);\n\n  switch (loadStatus.status) {\n    case \"loading\":\n      return <Loading />;\n    case \"ready\":\n      const audioset = loadStatus.audioset;\n      return audioset.type === \"project\" ? (\n        <Browser audioset={audioset as AudiosetProject} />\n      ) : (\n        <Player audioset={audioset as Audioset} />\n      );\n    case \"error\":\n      return <NotFound />;\n    default:\n      return (\n        <pre style={{ color: \"white\" }}>\n          {JSON.stringify(loadStatus, null, 2)}\n        </pre>\n      );\n  }\n};\n\n"]},"metadata":{},"sourceType":"module"}