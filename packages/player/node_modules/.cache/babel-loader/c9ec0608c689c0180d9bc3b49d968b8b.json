{"ast":null,"code":"import _objectSpread from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport debug from \"debug\";\nimport { KeyboardControler } from \"./Control/KeyboardControler\";\nconst log = debug(\"atpls:control\");\nexport const EmptyControlState = {\n  playingClipsCount: 0,\n  playingTracksCount: 0,\n  clips: {},\n  tracks: {}\n};\n\n/**\n * Controls the playing state of clips and tracks\n */\nexport class AudiosetControl {\n  constructor(audioset, listener) {\n    this.listener = listener;\n    this.keyboard = void 0;\n    this.clipStateByClipId = {};\n    this.trackStateByTrackId = {};\n    this.clipIdsOfTrack = {};\n    this.trackIdOfClip = {};\n    this.commands = [];\n    this.playingClipsCount = 0;\n    this.playingTracksCount = 0;\n    log(\"create control\");\n    this.keyboard = new KeyboardControler(audioset, this);\n    audioset.clips.forEach(clip => {\n      this.clipStateByClipId[clip.id] = {\n        state: \"stopped\"\n      };\n      this.trackIdOfClip[clip.id] = clip.trackId;\n    });\n    audioset.tracks.forEach(track => {\n      const volume = track.volume || 1;\n      this.trackStateByTrackId[track.id] = {\n        state: \"stopped\",\n        volume\n      };\n      this.clipIdsOfTrack[track.id] = track.clipIds;\n    });\n  }\n\n  toggleClip(clipId, time) {\n    const clipState = this.clipStateByClipId[clipId];\n\n    if (!clipState) {\n      return;\n    } else if (clipState.state === \"stopped\") {\n      this.startClip(clipId, time);\n    } else if (clipState.state === \"playing\") {\n      this.stopClip(clipId, time);\n    }\n  }\n  /**\n   * Start a clip\n   * @param clipId\n   */\n\n\n  startClip(clipId, time) {\n    const clipState = this.clipStateByClipId[clipId];\n\n    if (!clipState || clipState.state === \"playing\") {\n      return;\n    }\n\n    const trackId = this.trackIdOfClip[clipId];\n    const sameTrackClipIds = this.clipIdsOfTrack[trackId];\n    sameTrackClipIds.forEach(trackClipId => this.stopClipCommand(trackClipId, time));\n    this.startTrackCommand(trackId, time);\n    this.startClipCommand(clipId, time);\n    this.sendCommands();\n  }\n  /**\n   * Stops a clip\n   */\n\n\n  stopClip(clipId, time) {\n    const clipState = this.clipStateByClipId[clipId];\n\n    if (!clipState || clipState.state === \"stopped\") {\n      return;\n    }\n\n    const trackId = this.trackIdOfClip[clipId];\n    this.stopClipCommand(clipId, time);\n    this.stopTrackCommand(trackId, time);\n    this.sendCommands();\n  }\n  /**\n   * Stops all clips\n   */\n\n\n  stopAll(time) {\n    Object.keys(this.clipStateByClipId).forEach(clipId => this.stopClipCommand(clipId, time));\n    Object.keys(this.trackStateByTrackId).forEach(trackId => this.stopTrackCommand(trackId, time));\n    this.sendCommands();\n  }\n\n  getState() {\n    return {\n      playingClipsCount: this.playingClipsCount,\n      playingTracksCount: this.playingTracksCount,\n      clips: _objectSpread({}, this.clipStateByClipId),\n      tracks: _objectSpread({}, this.trackStateByTrackId)\n    };\n  } //// PRIVATE ////\n\n\n  sendCommands() {\n    this.commands.forEach(command => {\n      this.listener.onControlCommand(command);\n    });\n    this.commands = [];\n    this.listener.onControlStateChanged(this.getState());\n  }\n\n  startClipCommand(clipId, time) {\n    if (this.clipStateByClipId[clipId].state === \"playing\") {\n      return;\n    }\n\n    this.playingClipsCount += 1;\n    this.clipStateByClipId[clipId] = {\n      state: \"playing\"\n    };\n    this.commands.push({\n      command: \"startClip\",\n      clipId,\n      time\n    });\n  }\n\n  stopClipCommand(clipId, time) {\n    if (this.clipStateByClipId[clipId].state === \"stopped\") {\n      return;\n    }\n\n    this.playingClipsCount -= 1;\n    this.clipStateByClipId[clipId] = {\n      state: \"stopped\"\n    };\n    this.commands.push({\n      command: \"stopClip\",\n      clipId,\n      time\n    });\n  }\n\n  startTrackCommand(trackId, time) {\n    const trackState = this.trackStateByTrackId[trackId];\n\n    if (trackState.state === \"playing\") {\n      return;\n    }\n\n    this.playingTracksCount += 1;\n    this.trackStateByTrackId[trackId] = {\n      state: \"playing\",\n      volume: trackState.volume\n    };\n    this.commands.push({\n      command: \"startTrack\",\n      trackId,\n      time\n    });\n  }\n\n  stopTrackCommand(trackId, time) {\n    const trackState = this.trackStateByTrackId[trackId];\n\n    if (trackState.state === \"stopped\") {\n      return;\n    }\n\n    this.playingTracksCount -= 1;\n    this.trackStateByTrackId[trackId] = {\n      state: \"stopped\",\n      volume: trackState.volume\n    };\n    this.commands.push({\n      command: \"stopTrack\",\n      trackId,\n      time\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/AudiosetControl.ts"],"names":["debug","KeyboardControler","log","EmptyControlState","playingClipsCount","playingTracksCount","clips","tracks","AudiosetControl","constructor","audioset","listener","keyboard","clipStateByClipId","trackStateByTrackId","clipIdsOfTrack","trackIdOfClip","commands","forEach","clip","id","state","trackId","track","volume","clipIds","toggleClip","clipId","time","clipState","startClip","stopClip","sameTrackClipIds","trackClipId","stopClipCommand","startTrackCommand","startClipCommand","sendCommands","stopTrackCommand","stopAll","Object","keys","getState","command","onControlCommand","onControlStateChanged","push","trackState"],"mappings":"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","sourcesContent":["import debug from \"debug\";\nimport { Audioset, Clip } from \"../audioset\";\nimport { KeyboardControler } from \"./Control/KeyboardControler\";\n\nconst log = debug(\"atpls:control\");\n\nexport type PlayingState = \"stopped\" | \"playing\"; // | \"playScheduled\" |  \"stopScheduled\";\n\nexport interface ClipPlayingState {\n  readonly state: PlayingState;\n}\n\nexport interface TrackPlayingState {\n  readonly state: PlayingState;\n  readonly volume: number;\n}\n\nexport interface StartClip {\n  command: \"startClip\";\n  clipId: string;\n  time: number;\n}\nexport interface StopClip {\n  command: \"stopClip\";\n  clipId: string;\n  time: number;\n}\nexport interface StartTrack {\n  command: \"startTrack\";\n  trackId: string;\n  time: number;\n}\nexport interface StopTrack {\n  command: \"stopTrack\";\n  trackId: string;\n  time: number;\n}\n\nexport type ControlCommand = StartClip | StopClip | StartTrack | StopTrack;\n\ntype ClipPlayingStateByClipId = Record<string, ClipPlayingState>;\ntype TrackPlayingStateByTrackId = Record<string, TrackPlayingState>;\n\nexport interface ControlState {\n  playingClipsCount: number;\n  playingTracksCount: number;\n  clips: ClipPlayingStateByClipId;\n  tracks: TrackPlayingStateByTrackId;\n}\nexport const EmptyControlState = {\n  playingClipsCount: 0,\n  playingTracksCount: 0,\n  clips: {},\n  tracks: {},\n};\n\nexport interface ControlListener {\n  onControlStateChanged: (state: ControlState) => void;\n  onControlCommand: (command: ControlCommand) => void;\n}\n\n/**\n * Controls the playing state of clips and tracks\n */\nexport class AudiosetControl {\n  public readonly keyboard: KeyboardControler;\n  private clipStateByClipId: ClipPlayingStateByClipId = {};\n  private trackStateByTrackId: TrackPlayingStateByTrackId = {};\n  private clipIdsOfTrack: Record<string, string[]> = {};\n  private trackIdOfClip: Record<string, string> = {};\n  private commands: ControlCommand[] = [];\n  private playingClipsCount: number = 0;\n  private playingTracksCount: number = 0;\n\n  constructor(audioset: Audioset, private listener: ControlListener) {\n    log(\"create control\");\n    this.keyboard = new KeyboardControler(audioset, this);\n    audioset.clips.forEach((clip: Clip) => {\n      this.clipStateByClipId[clip.id] = { state: \"stopped\" };\n      this.trackIdOfClip[clip.id] = clip.trackId;\n    });\n    audioset.tracks.forEach(track => {\n      const volume = track.volume || 1;\n      this.trackStateByTrackId[track.id] = { state: \"stopped\", volume };\n      this.clipIdsOfTrack[track.id] = track.clipIds;\n    });\n  }\n\n  public toggleClip(clipId: string, time: number) {\n    const clipState = this.clipStateByClipId[clipId];\n    if (!clipState) {\n      return;\n    } else if (clipState.state === \"stopped\") {\n      this.startClip(clipId, time);\n    } else if (clipState.state === \"playing\") {\n      this.stopClip(clipId, time);\n    }\n  }\n\n  /**\n   * Start a clip\n   * @param clipId\n   */\n  public startClip(clipId: string, time: number) {\n    const clipState = this.clipStateByClipId[clipId];\n    if (!clipState || clipState.state === \"playing\") {\n      return;\n    }\n\n    const trackId = this.trackIdOfClip[clipId];\n    const sameTrackClipIds = this.clipIdsOfTrack[trackId];\n    sameTrackClipIds.forEach(trackClipId =>\n      this.stopClipCommand(trackClipId, time),\n    );\n    this.startTrackCommand(trackId, time);\n    this.startClipCommand(clipId, time);\n    this.sendCommands();\n  }\n\n  /**\n   * Stops a clip\n   */\n  public stopClip(clipId: string, time: number) {\n    const clipState = this.clipStateByClipId[clipId];\n    if (!clipState || clipState.state === \"stopped\") {\n      return;\n    }\n\n    const trackId = this.trackIdOfClip[clipId];\n\n    this.stopClipCommand(clipId, time);\n    this.stopTrackCommand(trackId, time);\n    this.sendCommands();\n  }\n\n  /**\n   * Stops all clips\n   */\n  public stopAll(time: number) {\n    Object.keys(this.clipStateByClipId).forEach(clipId =>\n      this.stopClipCommand(clipId, time),\n    );\n    Object.keys(this.trackStateByTrackId).forEach(trackId =>\n      this.stopTrackCommand(trackId, time),\n    );\n    this.sendCommands();\n  }\n\n  public getState(): ControlState {\n    return {\n      playingClipsCount: this.playingClipsCount,\n      playingTracksCount: this.playingTracksCount,\n      clips: { ...this.clipStateByClipId },\n      tracks: { ...this.trackStateByTrackId },\n    };\n  }\n\n  //// PRIVATE ////\n  private sendCommands() {\n    this.commands.forEach(command => {\n      this.listener.onControlCommand(command);\n    });\n    this.commands = [];\n\n    this.listener.onControlStateChanged(this.getState());\n  }\n\n  private startClipCommand(clipId: string, time: number) {\n    if (this.clipStateByClipId[clipId].state === \"playing\") {\n      return;\n    }\n\n    this.playingClipsCount += 1;\n    this.clipStateByClipId[clipId] = { state: \"playing\" };\n    this.commands.push({ command: \"startClip\", clipId, time });\n  }\n  private stopClipCommand(clipId: string, time: number) {\n    if (this.clipStateByClipId[clipId].state === \"stopped\") {\n      return;\n    }\n\n    this.playingClipsCount -= 1;\n    this.clipStateByClipId[clipId] = { state: \"stopped\" };\n    this.commands.push({ command: \"stopClip\", clipId, time });\n  }\n  private startTrackCommand(trackId: string, time: number) {\n    const trackState = this.trackStateByTrackId[trackId];\n    if (trackState.state === \"playing\") {\n      return;\n    }\n\n    this.playingTracksCount += 1;\n    this.trackStateByTrackId[trackId] = {\n      state: \"playing\",\n      volume: trackState.volume,\n    };\n    this.commands.push({ command: \"startTrack\", trackId, time });\n  }\n  private stopTrackCommand(trackId: string, time: number) {\n    const trackState = this.trackStateByTrackId[trackId];\n    if (trackState.state === \"stopped\") {\n      return;\n    }\n\n    this.playingTracksCount -= 1;\n    this.trackStateByTrackId[trackId] = {\n      state: \"stopped\",\n      volume: trackState.volume,\n    };\n    this.commands.push({ command: \"stopTrack\", trackId, time });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}