{"ast":null,"code":"import debug from \"debug\";\nimport { decodeAudioBuffer } from \"./decodeAudioBuffer\";\nconst log = debug(\"atpls:resources\"); // TODO: abstract the loader mechanism: { stage, payload }\n\nexport class ResourceLoader {\n  constructor(audioset, listener) {\n    this.audioset = audioset;\n    this.listener = listener;\n    this.status = void 0;\n    this.total = void 0;\n    this.completed = void 0;\n    this.buffers = {};\n    this.preloaded = void 0;\n    log(\"create ResourceLoader %s\", audioset.id);\n    this.status = {\n      stage: \"pending\"\n    };\n    this.preloaded = false;\n    this.total = this.audioset.clips.length;\n    this.completed = 0;\n    this.preload();\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  getBuffer(clipId) {\n    return this.buffers[clipId];\n  }\n\n  load(context) {\n    console.log(\"jodder\", context.state, context);\n    this.preload();\n    const total = this.total,\n          completed = this.completed;\n\n    if (total === completed) {\n      return Promise.resolve();\n    }\n\n    log(\"Start clip audio loading [%s]\", this.audioset.meta.title);\n    this.setStatus({\n      stage: \"loading\",\n      total,\n      completed: 0\n    });\n    const clips = this.audioset.clips;\n\n    if (clips[0]) {\n      log(\"Audio format %s\", clips[0].resources.audio.ogg ? \"ogg\" : \"mp3\");\n    }\n\n    const promises = clips.map(clip => this.loadClipAudio(clip, context).catch(err => {\n      this.handleResourceCompleted();\n      log(\"Error %o\", err);\n    }));\n    return Promise.all(promises);\n  }\n\n  preload() {\n    if (this.preloaded) {\n      return Promise.resolve();\n    }\n\n    log(\"Preload\");\n    this.preloaded = true;\n    const _this$audioset = this.audioset,\n          visuals = _this$audioset.visuals,\n          clips = _this$audioset.clips;\n    const promises = [];\n\n    if (visuals.mode === \"map\" && visuals.geomap.url) {\n      promises.push(fetch(visuals.geomap.url));\n    }\n\n    clips.forEach(clip => {\n      preloadImage(clip.resources.cover.small);\n    });\n    return Promise.all(promises);\n  } //// PRIVATE ////\n\n\n  setStatus(status) {\n    if (status.stage !== \"loading\") {\n      log(\"stage %s\", status.stage);\n    }\n\n    this.status = status;\n    this.listener(status);\n  }\n\n  async loadClipAudio(clip, context) {\n    const audio = clip.resources.audio;\n    const url = audio.ogg || audio.mp3;\n    const response = await fetch(url);\n    const buffer = await decodeAudioBuffer(response, context);\n    this.buffers[clip.id] = buffer;\n    this.handleResourceCompleted(url);\n    return buffer;\n  }\n\n  handleResourceCompleted(url) {\n    this.completed += 1;\n    const status = this.completed >= this.total ? {\n      stage: \"ready\",\n      total: this.total\n    } : {\n      stage: \"loading\",\n      total: this.total,\n      completed: this.completed\n    };\n    this.setStatus(status);\n  }\n\n}\n\nfunction preloadImage(url) {\n  if (!url || !url.length) {\n    return Promise.resolve();\n  }\n\n  return new Promise(resolve => {\n    const image = new Image();\n    image.addEventListener(\"load\", () => {\n      resolve(image);\n    });\n    image.src = url;\n  });\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/ResourceLoader.ts"],"names":["debug","decodeAudioBuffer","log","ResourceLoader","constructor","audioset","listener","status","total","completed","buffers","preloaded","id","stage","clips","length","preload","getStatus","getBuffer","clipId","load","context","console","state","Promise","resolve","meta","title","setStatus","resources","audio","ogg","promises","map","clip","loadClipAudio","catch","err","handleResourceCompleted","all","visuals","mode","geomap","url","push","fetch","forEach","preloadImage","cover","small","mp3","response","buffer","image","Image","addEventListener","src"],"mappings":"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","sourcesContent":["import debug from \"debug\";\nimport { IAudioContext } from \"standardized-audio-context\";\nimport { Audioset, Clip } from \"../audioset\";\nimport { decodeAudioBuffer } from \"./decodeAudioBuffer\";\n\nconst log = debug(\"atpls:resources\");\n\n// TODO: abstract the loader mechanism: { stage, payload }\nexport interface LoadPending {\n  stage: \"pending\";\n}\nexport interface LoadingResources {\n  stage: \"loading\";\n  total: number;\n  completed: number;\n}\nexport interface ResourcesLoaded {\n  stage: \"ready\";\n  total: number;\n}\nexport interface ResourceLoadError {\n  stage: \"error\";\n  error: any;\n}\n\nexport type ResourceLoadStatus =\n  | LoadPending\n  | LoadingResources\n  | ResourcesLoaded\n  | ResourceLoadError;\n\nexport interface Resources {\n  getStatus(): ResourceLoadStatus;\n  getBuffer(clipId: string): any;\n  load(ctx: IAudioContext): Promise<any>;\n}\n\nexport class ResourceLoader implements Resources {\n  public status: ResourceLoadStatus;\n  private total: number;\n  private completed: number;\n  private buffers: Record<string, any> = {};\n  private preloaded: boolean;\n\n  constructor(\n    private audioset: Audioset,\n    private listener: (status: ResourceLoadStatus) => void,\n  ) {\n    log(\"create ResourceLoader %s\", audioset.id);\n    this.status = { stage: \"pending\" };\n    this.preloaded = false;\n    this.total = this.audioset.clips.length;\n    this.completed = 0;\n    this.preload();\n  }\n\n  public getStatus() {\n    return this.status;\n  }\n\n  public getBuffer(clipId: string): any {\n    return this.buffers[clipId];\n  }\n\n  public load(context: IAudioContext) {\n    console.log(\"jodder\", context.state, context);\n    this.preload();\n    const { total, completed } = this;\n    if (total === completed) {\n      return Promise.resolve();\n    }\n\n    log(\"Start clip audio loading [%s]\", this.audioset.meta.title);\n    this.setStatus({ stage: \"loading\", total, completed: 0 });\n    const clips = this.audioset.clips;\n    if (clips[0]) {\n      log(\"Audio format %s\", clips[0].resources.audio.ogg ? \"ogg\" : \"mp3\");\n    }\n    const promises = clips.map(clip =>\n      this.loadClipAudio(clip, context).catch(err => {\n        this.handleResourceCompleted();\n        log(\"Error %o\", err);\n      }),\n    );\n    return Promise.all(promises);\n  }\n\n  private preload() {\n    if (this.preloaded) {\n      return Promise.resolve();\n    }\n\n    log(\"Preload\");\n    this.preloaded = true;\n    const { visuals, clips } = this.audioset;\n    const promises: Array<Promise<any>> = [];\n    if (visuals.mode === \"map\" && visuals.geomap.url) {\n      promises.push(fetch(visuals.geomap.url));\n    }\n    clips.forEach(clip => {\n      preloadImage(clip.resources.cover.small);\n    });\n    return Promise.all(promises);\n  }\n\n  //// PRIVATE ////\n  private setStatus(status: ResourceLoadStatus) {\n    if (status.stage !== \"loading\") {\n      log(\"stage %s\", status.stage);\n    }\n    this.status = status;\n    this.listener(status);\n  }\n\n  private async loadClipAudio(clip: Clip, context: IAudioContext) {\n    const { audio } = clip.resources;\n    const url = audio.ogg || audio.mp3;\n    const response = await fetch(url);\n    const buffer = await decodeAudioBuffer(response, context);\n    this.buffers[clip.id] = buffer;\n    this.handleResourceCompleted(url);\n\n    return buffer;\n  }\n\n  private handleResourceCompleted(url?: string) {\n    this.completed += 1;\n    const status: ResourceLoadStatus =\n      this.completed >= this.total\n        ? { stage: \"ready\", total: this.total }\n        : { stage: \"loading\", total: this.total, completed: this.completed };\n    this.setStatus(status);\n  }\n}\n\nfunction preloadImage(url: string): Promise<any> {\n  if (!url || !url.length) {\n    return Promise.resolve();\n  }\n  return new Promise(resolve => {\n    const image = new Image();\n    image.addEventListener(\"load\", () => {\n      resolve(image);\n    });\n    image.src = url;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}