{"ast":null,"code":"/**\n * Edge up to version 14, Firefox up to version 52, Safari up to version 9 and maybe other browsers\n * did not refuse to decode invalid parameters with a TypeError.\n */\nexport var createTestAudioContextDecodeAudioDataMethodTypeErrorSupport = function createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor) {\n  return function () {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return Promise.resolve(false);\n    }\n\n    var offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100); // Bug #21: Safari does not support promises yet.\n\n    return new Promise(function (resolve) {\n      var isPending = true;\n\n      var resolvePromise = function resolvePromise(err) {\n        if (isPending) {\n          isPending = false;\n          offlineAudioContext.startRendering();\n          resolve(err instanceof TypeError);\n        }\n      };\n\n      var promise; // Bug #26: Safari throws a synchronous error.\n\n      try {\n        promise = offlineAudioContext // Bug #1: Safari requires a successCallback.\n        .decodeAudioData(null, function () {// Ignore the success callback.\n        }, resolvePromise);\n      } catch (err) {\n        resolvePromise(err);\n      } // Bug #21: Safari does not support promises yet.\n\n\n      if (promise !== undefined) {\n        // Bug #6 Chrome does not call the errorCallback\n        promise.catch(resolvePromise);\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/test-audio-context-decode-audio-data-method-type-error-support.js"],"names":["createTestAudioContextDecodeAudioDataMethodTypeErrorSupport","nativeOfflineAudioContextConstructor","Promise","resolve","offlineAudioContext","isPending","resolvePromise","err","startRendering","TypeError","promise","decodeAudioData","undefined","catch"],"mappings":"AAAA;;;;AAIA,OAAO,IAAMA,2DAA2D,GAAG,SAA9DA,2DAA8D,CAACC,oCAAD,EAA0C;AACjH,SAAO,YAAM;AACT,QAAIA,oCAAoC,KAAK,IAA7C,EAAmD;AAC/C,aAAOC,OAAO,CAACC,OAAR,CAAgB,KAAhB,CAAP;AACH;;AACD,QAAMC,mBAAmB,GAAG,IAAIH,oCAAJ,CAAyC,CAAzC,EAA4C,CAA5C,EAA+C,KAA/C,CAA5B,CAJS,CAKT;;AACA,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC5B,UAAIE,SAAS,GAAG,IAAhB;;AACA,UAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,GAAD,EAAS;AAC5B,YAAIF,SAAJ,EAAe;AACXA,UAAAA,SAAS,GAAG,KAAZ;AACAD,UAAAA,mBAAmB,CAACI,cAApB;AACAL,UAAAA,OAAO,CAACI,GAAG,YAAYE,SAAhB,CAAP;AACH;AACJ,OAND;;AAOA,UAAIC,OAAJ,CAT4B,CAU5B;;AACA,UAAI;AACAA,QAAAA,OAAO,GAAGN,mBAAmB,CACzB;AADyB,SAExBO,eAFK,CAEW,IAFX,EAEiB,YAAM,CAC7B;AACH,SAJS,EAIPL,cAJO,CAAV;AAKH,OAND,CAOA,OAAOC,GAAP,EAAY;AACRD,QAAAA,cAAc,CAACC,GAAD,CAAd;AACH,OApB2B,CAqB5B;;;AACA,UAAIG,OAAO,KAAKE,SAAhB,EAA2B;AACvB;AACAF,QAAAA,OAAO,CAACG,KAAR,CAAcP,cAAd;AACH;AACJ,KA1BM,CAAP;AA2BH,GAjCD;AAkCH,CAnCM","sourcesContent":["/**\n * Edge up to version 14, Firefox up to version 52, Safari up to version 9 and maybe other browsers\n * did not refuse to decode invalid parameters with a TypeError.\n */\nexport const createTestAudioContextDecodeAudioDataMethodTypeErrorSupport = (nativeOfflineAudioContextConstructor) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return Promise.resolve(false);\n        }\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        // Bug #21: Safari does not support promises yet.\n        return new Promise((resolve) => {\n            let isPending = true;\n            const resolvePromise = (err) => {\n                if (isPending) {\n                    isPending = false;\n                    offlineAudioContext.startRendering();\n                    resolve(err instanceof TypeError);\n                }\n            };\n            let promise;\n            // Bug #26: Safari throws a synchronous error.\n            try {\n                promise = offlineAudioContext\n                    // Bug #1: Safari requires a successCallback.\n                    .decodeAudioData(null, () => {\n                    // Ignore the success callback.\n                }, resolvePromise);\n            }\n            catch (err) {\n                resolvePromise(err);\n            }\n            // Bug #21: Safari does not support promises yet.\n            if (promise !== undefined) {\n                // Bug #6 Chrome does not call the errorCallback\n                promise.catch(resolvePromise);\n            }\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-context-decode-audio-data-method-type-error-support.js.map"]},"metadata":{},"sourceType":"module"}