{"ast":null,"code":"var _jsxFileName = \"/Users/dani/Antropoloops/atpls-player/src/ui/Player/Controller/Controller.tsx\";\nimport React from \"react\";\nimport { Track } from \"./Track\";\nexport const Controller = ({\n  audioset,\n  state,\n  control,\n  onR,\n  sume\n}) => {\n  if (!audioset || !audioset.tracks) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, \"Audioset not loaded\");\n  }\n\n  return React.createElement(\"div\", {\n    className: `Controller ${!control && \"loading\"}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, audioset.tracks.map(track => React.createElement(Track, {\n    key: track.id,\n    track: track,\n    audioset: audioset,\n    control: control,\n    state: state,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  })));\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/Controller/Controller.tsx"],"names":["React","Track","Controller","audioset","state","control","onR","sume","tracks","map","track","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAASC,KAAT,QAAsB,SAAtB;AAOA,OAAO,MAAMC,UAAU,GAAG,CAAC;AACzBC,EAAAA,QADyB;AAEzBC,EAAAA,KAFyB;AAGzBC,EAAAA,OAHyB;AAIzBC,EAAAA,GAJyB;AAK3BC,EAAAA;AAL2B,CAAD,KAKE;AAC1B,MAAI,CAACJ,QAAD,IAAa,CAACA,QAAQ,CAACK,MAA3B,EAAmC;AACjC,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAP;AACD;;AACD,SACE;AAAK,IAAA,SAAS,EAAG,cAAa,CAACH,OAAD,IAAY,SAAU,EAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,QAAQ,CAACK,MAAT,CAAgBC,GAAhB,CAAoBC,KAAK,IACxB,oBAAC,KAAD;AACE,IAAA,GAAG,EAAEA,KAAK,CAACC,EADb;AAEE,IAAA,KAAK,EAAED,KAFT;AAGE,IAAA,QAAQ,EAAEP,QAHZ;AAIE,IAAA,OAAO,EAAEE,OAJX;AAKE,IAAA,KAAK,EAAED,KALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CADF;AAaD,CAtBM","sourcesContent":["import React from \"react\";\nimport { Audioset } from \"../../../audioset\";\nimport { ControlState, PlayerControl } from \"../../../player/Control\";\nimport { Track } from \"./Track\";\ninterface ControllerProps {\n  audioset: Audioset;\n  state: ControlState;\n  control?: PlayerControl;\n  onResume: () => void;\n}\nexport const Controller = ({\n  audioset,\n  state,\n  control,\n  onR,\nsume }: ControllerProps) => {\n  if (!audioset || !audioset.tracks) {\n    return <div>Audioset not loaded</div>;\n  }\n  return (\n    <div className={`Controller ${!control && \"loading\"}`}>\n      {audioset.tracks.map(track => (\n        <Track\n          key={track.id}\n          track={track}\n          audioset={audioset}\n          control={control}\n          state={state}\n        />\n      ))}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}