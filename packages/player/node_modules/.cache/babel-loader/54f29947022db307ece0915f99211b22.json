{"ast":null,"code":"import _classCallCheck from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _objectSpread from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar DEFAULT_OPTIONS = {\n  channelCount: 6,\n  channelCountMode: 'explicit',\n  channelInterpretation: 'discrete',\n  numberOfOutputs: 6\n};\n\nvar sanitizedOptions = function sanitizedOptions(options) {\n  return _objectSpread(_objectSpread({}, options), {}, {\n    channelCount: options.numberOfOutputs\n  });\n};\n\nexport var createChannelSplitterNodeConstructor = function createChannelSplitterNodeConstructor(audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(ChannelSplitterNode, _audioNodeConstructor);\n\n    var _super = _createSuper(ChannelSplitterNode);\n\n    function ChannelSplitterNode(context) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_OPTIONS;\n\n      _classCallCheck(this, ChannelSplitterNode);\n\n      var nativeContext = getNativeContext(context);\n      var mergedOptions = sanitizedOptions(_objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options));\n      var nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);\n      var channelSplitterNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createChannelSplitterNodeRenderer() : null;\n      return _super.call(this, context, false, nativeChannelSplitterNode, channelSplitterNodeRenderer);\n    }\n\n    return ChannelSplitterNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/channel-splitter-node-constructor.js"],"names":["DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","numberOfOutputs","sanitizedOptions","options","createChannelSplitterNodeConstructor","audioNodeConstructor","createChannelSplitterNodeRenderer","createNativeChannelSplitterNode","getNativeContext","isNativeOfflineAudioContext","context","nativeContext","mergedOptions","nativeChannelSplitterNode","channelSplitterNodeRenderer"],"mappings":";;;;AAAA,IAAMA,eAAe,GAAG;AACpBC,EAAAA,YAAY,EAAE,CADM;AAEpBC,EAAAA,gBAAgB,EAAE,UAFE;AAGpBC,EAAAA,qBAAqB,EAAE,UAHH;AAIpBC,EAAAA,eAAe,EAAE;AAJG,CAAxB;;AAMA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,OAAD,EAAa;AAClC,yCAAYA,OAAZ;AAAqBL,IAAAA,YAAY,EAAEK,OAAO,CAACF;AAA3C;AACH,CAFD;;AAGA,OAAO,IAAMG,oCAAoC,GAAG,SAAvCA,oCAAuC,CAACC,oBAAD,EAAuBC,iCAAvB,EAA0DC,+BAA1D,EAA2FC,gBAA3F,EAA6GC,2BAA7G,EAA6I;AAC7L;AAAA;;AAAA;;AACI,iCAAYC,OAAZ,EAAgD;AAAA,UAA3BP,OAA2B,uEAAjBN,eAAiB;;AAAA;;AAC5C,UAAMc,aAAa,GAAGH,gBAAgB,CAACE,OAAD,CAAtC;AACA,UAAME,aAAa,GAAGV,gBAAgB,iCAAML,eAAN,GAA0BM,OAA1B,EAAtC;AACA,UAAMU,yBAAyB,GAAGN,+BAA+B,CAACI,aAAD,EAAgBC,aAAhB,CAAjE;AACA,UAAME,2BAA2B,GAAKL,2BAA2B,CAACE,aAAD,CAA5B,GAC/BL,iCAAiC,EADF,GAE/B,IAFN;AAJ4C,+BAOtCI,OAPsC,EAO7B,KAP6B,EAOtBG,yBAPsB,EAOKC,2BAPL;AAQ/C;;AATL;AAAA,IAAyCT,oBAAzC;AAWH,CAZM","sourcesContent":["const DEFAULT_OPTIONS = {\n    channelCount: 6,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'discrete',\n    numberOfOutputs: 6\n};\nconst sanitizedOptions = (options) => {\n    return { ...options, channelCount: options.numberOfOutputs };\n};\nexport const createChannelSplitterNodeConstructor = (audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class ChannelSplitterNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = sanitizedOptions({ ...DEFAULT_OPTIONS, ...options });\n            const nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);\n            const channelSplitterNodeRenderer = ((isNativeOfflineAudioContext(nativeContext))\n                ? createChannelSplitterNodeRenderer()\n                : null);\n            super(context, false, nativeChannelSplitterNode, channelSplitterNodeRenderer);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/channel-splitter-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}