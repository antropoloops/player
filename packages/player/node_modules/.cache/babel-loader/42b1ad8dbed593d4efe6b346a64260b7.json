{"ast":null,"code":"import _objectSpread from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport var createNativeConstantSourceNodeFakerFactory = function createNativeConstantSourceNodeFakerFactory(createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections) {\n  return function (nativeContext, _ref) {\n    var offset = _ref.offset,\n        audioNodeOptions = _objectWithoutProperties(_ref, [\"offset\"]);\n\n    var audioBuffer = nativeContext.createBuffer(1, 2, nativeContext.sampleRate);\n    var audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext);\n    var gainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, audioNodeOptions), {}, {\n      gain: offset\n    })); // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n\n    var channelData = audioBuffer.getChannelData(0); // Bug #95: Safari does not play or loop one sample buffers.\n\n    channelData[0] = 1;\n    channelData[1] = 1;\n    audioBufferSourceNode.buffer = audioBuffer;\n    audioBufferSourceNode.loop = true;\n    var nativeConstantSourceNodeFaker = {\n      get bufferSize() {\n        return undefined;\n      },\n\n      get channelCount() {\n        return gainNode.channelCount;\n      },\n\n      set channelCount(value) {\n        gainNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return gainNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        gainNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return gainNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        gainNode.channelInterpretation = value;\n      },\n\n      get context() {\n        return gainNode.context;\n      },\n\n      get inputs() {\n        return [];\n      },\n\n      get numberOfInputs() {\n        return audioBufferSourceNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return gainNode.numberOfOutputs;\n      },\n\n      get offset() {\n        return gainNode.gain;\n      },\n\n      get onended() {\n        return audioBufferSourceNode.onended;\n      },\n\n      set onended(value) {\n        audioBufferSourceNode.onended = value;\n      },\n\n      addEventListener: function addEventListener() {\n        return audioBufferSourceNode.addEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      },\n      dispatchEvent: function dispatchEvent() {\n        return audioBufferSourceNode.dispatchEvent(arguments.length <= 0 ? undefined : arguments[0]);\n      },\n      removeEventListener: function removeEventListener() {\n        return audioBufferSourceNode.removeEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      },\n      start: function start() {\n        var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        audioBufferSourceNode.start.call(audioBufferSourceNode, when);\n      },\n      stop: function stop() {\n        var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        audioBufferSourceNode.stop.call(audioBufferSourceNode, when);\n      }\n    };\n\n    var whenConnected = function whenConnected() {\n      return audioBufferSourceNode.connect(gainNode);\n    };\n\n    var whenDisconnected = function whenDisconnected() {\n      return audioBufferSourceNode.disconnect(gainNode);\n    };\n\n    return monitorConnections(interceptConnections(nativeConstantSourceNodeFaker, gainNode), whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/native-constant-source-node-faker-factory.js"],"names":["interceptConnections","createNativeConstantSourceNodeFakerFactory","createNativeAudioBufferSourceNode","createNativeGainNode","monitorConnections","nativeContext","offset","audioNodeOptions","audioBuffer","createBuffer","sampleRate","audioBufferSourceNode","gainNode","gain","channelData","getChannelData","buffer","loop","nativeConstantSourceNodeFaker","bufferSize","undefined","channelCount","value","channelCountMode","channelInterpretation","context","inputs","numberOfInputs","numberOfOutputs","onended","addEventListener","dispatchEvent","removeEventListener","start","when","call","stop","whenConnected","connect","whenDisconnected","disconnect"],"mappings":";;AAAA,SAASA,oBAAT,QAAqC,kCAArC;AACA,OAAO,IAAMC,0CAA0C,GAAG,SAA7CA,0CAA6C,CAACC,iCAAD,EAAoCC,oBAApC,EAA0DC,kBAA1D,EAAiF;AACvI,SAAO,UAACC,aAAD,QAAoD;AAAA,QAAlCC,MAAkC,QAAlCA,MAAkC;AAAA,QAAvBC,gBAAuB;;AACvD,QAAMC,WAAW,GAAGH,aAAa,CAACI,YAAd,CAA2B,CAA3B,EAA8B,CAA9B,EAAiCJ,aAAa,CAACK,UAA/C,CAApB;AACA,QAAMC,qBAAqB,GAAGT,iCAAiC,CAACG,aAAD,CAA/D;AACA,QAAMO,QAAQ,GAAGT,oBAAoB,CAACE,aAAD,kCAAqBE,gBAArB;AAAuCM,MAAAA,IAAI,EAAEP;AAA7C,OAArC,CAHuD,CAIvD;;AACA,QAAMQ,WAAW,GAAGN,WAAW,CAACO,cAAZ,CAA2B,CAA3B,CAApB,CALuD,CAMvD;;AACAD,IAAAA,WAAW,CAAC,CAAD,CAAX,GAAiB,CAAjB;AACAA,IAAAA,WAAW,CAAC,CAAD,CAAX,GAAiB,CAAjB;AACAH,IAAAA,qBAAqB,CAACK,MAAtB,GAA+BR,WAA/B;AACAG,IAAAA,qBAAqB,CAACM,IAAtB,GAA6B,IAA7B;AACA,QAAMC,6BAA6B,GAAG;AAClC,UAAIC,UAAJ,GAAiB;AACb,eAAOC,SAAP;AACH,OAHiC;;AAIlC,UAAIC,YAAJ,GAAmB;AACf,eAAOT,QAAQ,CAACS,YAAhB;AACH,OANiC;;AAOlC,UAAIA,YAAJ,CAAiBC,KAAjB,EAAwB;AACpBV,QAAAA,QAAQ,CAACS,YAAT,GAAwBC,KAAxB;AACH,OATiC;;AAUlC,UAAIC,gBAAJ,GAAuB;AACnB,eAAOX,QAAQ,CAACW,gBAAhB;AACH,OAZiC;;AAalC,UAAIA,gBAAJ,CAAqBD,KAArB,EAA4B;AACxBV,QAAAA,QAAQ,CAACW,gBAAT,GAA4BD,KAA5B;AACH,OAfiC;;AAgBlC,UAAIE,qBAAJ,GAA4B;AACxB,eAAOZ,QAAQ,CAACY,qBAAhB;AACH,OAlBiC;;AAmBlC,UAAIA,qBAAJ,CAA0BF,KAA1B,EAAiC;AAC7BV,QAAAA,QAAQ,CAACY,qBAAT,GAAiCF,KAAjC;AACH,OArBiC;;AAsBlC,UAAIG,OAAJ,GAAc;AACV,eAAOb,QAAQ,CAACa,OAAhB;AACH,OAxBiC;;AAyBlC,UAAIC,MAAJ,GAAa;AACT,eAAO,EAAP;AACH,OA3BiC;;AA4BlC,UAAIC,cAAJ,GAAqB;AACjB,eAAOhB,qBAAqB,CAACgB,cAA7B;AACH,OA9BiC;;AA+BlC,UAAIC,eAAJ,GAAsB;AAClB,eAAOhB,QAAQ,CAACgB,eAAhB;AACH,OAjCiC;;AAkClC,UAAItB,MAAJ,GAAa;AACT,eAAOM,QAAQ,CAACC,IAAhB;AACH,OApCiC;;AAqClC,UAAIgB,OAAJ,GAAc;AACV,eAAOlB,qBAAqB,CAACkB,OAA7B;AACH,OAvCiC;;AAwClC,UAAIA,OAAJ,CAAYP,KAAZ,EAAmB;AACfX,QAAAA,qBAAqB,CAACkB,OAAtB,GAAgCP,KAAhC;AACH,OA1CiC;;AA2ClCQ,MAAAA,gBA3CkC,8BA2CR;AACtB,eAAOnB,qBAAqB,CAACmB,gBAAtB,sJAAP;AACH,OA7CiC;AA8ClCC,MAAAA,aA9CkC,2BA8CX;AACnB,eAAOpB,qBAAqB,CAACoB,aAAtB,kDAAP;AACH,OAhDiC;AAiDlCC,MAAAA,mBAjDkC,iCAiDL;AACzB,eAAOrB,qBAAqB,CAACqB,mBAAtB,sJAAP;AACH,OAnDiC;AAoDlCC,MAAAA,KApDkC,mBAoDlB;AAAA,YAAVC,IAAU,uEAAH,CAAG;AACZvB,QAAAA,qBAAqB,CAACsB,KAAtB,CAA4BE,IAA5B,CAAiCxB,qBAAjC,EAAwDuB,IAAxD;AACH,OAtDiC;AAuDlCE,MAAAA,IAvDkC,kBAuDnB;AAAA,YAAVF,IAAU,uEAAH,CAAG;AACXvB,QAAAA,qBAAqB,CAACyB,IAAtB,CAA2BD,IAA3B,CAAgCxB,qBAAhC,EAAuDuB,IAAvD;AACH;AAzDiC,KAAtC;;AA2DA,QAAMG,aAAa,GAAG,SAAhBA,aAAgB;AAAA,aAAM1B,qBAAqB,CAAC2B,OAAtB,CAA8B1B,QAA9B,CAAN;AAAA,KAAtB;;AACA,QAAM2B,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,aAAM5B,qBAAqB,CAAC6B,UAAtB,CAAiC5B,QAAjC,CAAN;AAAA,KAAzB;;AACA,WAAOR,kBAAkB,CAACJ,oBAAoB,CAACkB,6BAAD,EAAgCN,QAAhC,CAArB,EAAgEyB,aAAhE,EAA+EE,gBAA/E,CAAzB;AACH,GAzED;AA0EH,CA3EM","sourcesContent":["import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeConstantSourceNodeFakerFactory = (createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections) => {\n    return (nativeContext, { offset, ...audioNodeOptions }) => {\n        const audioBuffer = nativeContext.createBuffer(1, 2, nativeContext.sampleRate);\n        const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext);\n        const gainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: offset });\n        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n        const channelData = audioBuffer.getChannelData(0);\n        // Bug #95: Safari does not play or loop one sample buffers.\n        channelData[0] = 1;\n        channelData[1] = 1;\n        audioBufferSourceNode.buffer = audioBuffer;\n        audioBufferSourceNode.loop = true;\n        const nativeConstantSourceNodeFaker = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return gainNode.channelCount;\n            },\n            set channelCount(value) {\n                gainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return gainNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                gainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return gainNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                gainNode.channelInterpretation = value;\n            },\n            get context() {\n                return gainNode.context;\n            },\n            get inputs() {\n                return [];\n            },\n            get numberOfInputs() {\n                return audioBufferSourceNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return gainNode.numberOfOutputs;\n            },\n            get offset() {\n                return gainNode.gain;\n            },\n            get onended() {\n                return audioBufferSourceNode.onended;\n            },\n            set onended(value) {\n                audioBufferSourceNode.onended = value;\n            },\n            addEventListener(...args) {\n                return audioBufferSourceNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return audioBufferSourceNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return audioBufferSourceNode.removeEventListener(args[0], args[1], args[2]);\n            },\n            start(when = 0) {\n                audioBufferSourceNode.start.call(audioBufferSourceNode, when);\n            },\n            stop(when = 0) {\n                audioBufferSourceNode.stop.call(audioBufferSourceNode, when);\n            }\n        };\n        const whenConnected = () => audioBufferSourceNode.connect(gainNode);\n        const whenDisconnected = () => audioBufferSourceNode.disconnect(gainNode);\n        return monitorConnections(interceptConnections(nativeConstantSourceNodeFaker, gainNode), whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-constant-source-node-faker-factory.js.map"]},"metadata":{},"sourceType":"module"}