{"ast":null,"code":"import { geoGnomonicRaw as gnomonicRaw } from \"d3-geo\";\nimport { cos } from \"./math.js\";\nimport twoPoint from \"./twoPoint.js\";\nexport function twoPointAzimuthalRaw(d) {\n  var cosd = cos(d);\n\n  function forward(lambda, phi) {\n    var coordinates = gnomonicRaw(lambda, phi);\n    coordinates[0] *= cosd;\n    return coordinates;\n  }\n\n  forward.invert = function (x, y) {\n    return gnomonicRaw.invert(x / cosd, y);\n  };\n\n  return forward;\n}\nexport function twoPointAzimuthalUsa() {\n  return twoPointAzimuthal([-158, 21.5], [-77, 39]).clipAngle(60).scale(400);\n}\nexport default function twoPointAzimuthal(p0, p1) {\n  return twoPoint(twoPointAzimuthalRaw, p0, p1);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/twoPointAzimuthal.js"],"names":["geoGnomonicRaw","gnomonicRaw","cos","twoPoint","twoPointAzimuthalRaw","d","cosd","forward","lambda","phi","coordinates","invert","x","y","twoPointAzimuthalUsa","twoPointAzimuthal","clipAngle","scale","p0","p1"],"mappings":"AAAA,SAAQA,cAAc,IAAIC,WAA1B,QAA4C,QAA5C;AACA,SAAQC,GAAR,QAAkB,WAAlB;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA,OAAO,SAASC,oBAAT,CAA8BC,CAA9B,EAAiC;AACtC,MAAIC,IAAI,GAAGJ,GAAG,CAACG,CAAD,CAAd;;AAEA,WAASE,OAAT,CAAiBC,MAAjB,EAAyBC,GAAzB,EAA8B;AAC5B,QAAIC,WAAW,GAAGT,WAAW,CAACO,MAAD,EAASC,GAAT,CAA7B;AACAC,IAAAA,WAAW,CAAC,CAAD,CAAX,IAAkBJ,IAAlB;AACA,WAAOI,WAAP;AACD;;AAEDH,EAAAA,OAAO,CAACI,MAAR,GAAiB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC9B,WAAOZ,WAAW,CAACU,MAAZ,CAAmBC,CAAC,GAAGN,IAAvB,EAA6BO,CAA7B,CAAP;AACD,GAFD;;AAIA,SAAON,OAAP;AACD;AAED,OAAO,SAASO,oBAAT,GAAgC;AACrC,SAAOC,iBAAiB,CAAC,CAAC,CAAC,GAAF,EAAO,IAAP,CAAD,EAAe,CAAC,CAAC,EAAF,EAAM,EAAN,CAAf,CAAjB,CACFC,SADE,CACQ,EADR,EAEFC,KAFE,CAEI,GAFJ,CAAP;AAGD;AAED,eAAe,SAASF,iBAAT,CAA2BG,EAA3B,EAA+BC,EAA/B,EAAmC;AAChD,SAAOhB,QAAQ,CAACC,oBAAD,EAAuBc,EAAvB,EAA2BC,EAA3B,CAAf;AACD","sourcesContent":["import {geoGnomonicRaw as gnomonicRaw} from \"d3-geo\";\nimport {cos} from \"./math.js\";\nimport twoPoint from \"./twoPoint.js\";\n\nexport function twoPointAzimuthalRaw(d) {\n  var cosd = cos(d);\n\n  function forward(lambda, phi) {\n    var coordinates = gnomonicRaw(lambda, phi);\n    coordinates[0] *= cosd;\n    return coordinates;\n  }\n\n  forward.invert = function(x, y) {\n    return gnomonicRaw.invert(x / cosd, y);\n  };\n\n  return forward;\n}\n\nexport function twoPointAzimuthalUsa() {\n  return twoPointAzimuthal([-158, 21.5], [-77, 39])\n      .clipAngle(60)\n      .scale(400);\n}\n\nexport default function twoPointAzimuthal(p0, p1) {\n  return twoPoint(twoPointAzimuthalRaw, p0, p1);\n}\n"]},"metadata":{},"sourceType":"module"}