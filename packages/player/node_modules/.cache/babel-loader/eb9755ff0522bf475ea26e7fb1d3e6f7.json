{"ast":null,"code":"import { testPromiseSupport } from '../helpers/test-promise-support';\nexport const createRenderNativeOfflineAudioContext = (cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, testOfflineAudioContextCurrentTimeSupport) => {\n  return nativeOfflineAudioContext => {\n    // Bug #21: Safari does not support promises yet.\n    if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n      // Bug #158: Edge does not advance currentTime if it is not accessed while rendering the audio.\n      return Promise.resolve(cacheTestResult(testOfflineAudioContextCurrentTimeSupport, testOfflineAudioContextCurrentTimeSupport)).then(isOfflineAudioContextCurrentTimeSupported => {\n        if (!isOfflineAudioContextCurrentTimeSupported) {\n          const scriptProcessorNode = createNativeScriptProcessorNode(nativeOfflineAudioContext, 512, 0, 1);\n\n          nativeOfflineAudioContext.oncomplete = () => {\n            scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n\n            scriptProcessorNode.disconnect();\n          };\n\n          scriptProcessorNode.onaudioprocess = () => nativeOfflineAudioContext.currentTime; // tslint:disable-line:deprecation\n\n\n          scriptProcessorNode.connect(nativeOfflineAudioContext.destination);\n        }\n\n        return nativeOfflineAudioContext.startRendering();\n      });\n    }\n\n    return new Promise(resolve => {\n      // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n      const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n        channelCount: 1,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'discrete',\n        gain: 0\n      });\n\n      nativeOfflineAudioContext.oncomplete = event => {\n        gainNode.disconnect();\n        resolve(event.renderedBuffer);\n      };\n\n      gainNode.connect(nativeOfflineAudioContext.destination);\n      nativeOfflineAudioContext.startRendering();\n    });\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/render-native-offline-audio-context.js"],"names":["testPromiseSupport","createRenderNativeOfflineAudioContext","cacheTestResult","createNativeGainNode","createNativeScriptProcessorNode","testOfflineAudioContextCurrentTimeSupport","nativeOfflineAudioContext","Promise","resolve","then","isOfflineAudioContextCurrentTimeSupported","scriptProcessorNode","oncomplete","onaudioprocess","disconnect","currentTime","connect","destination","startRendering","gainNode","channelCount","channelCountMode","channelInterpretation","gain","event","renderedBuffer"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,iCAAnC;AACA,OAAO,MAAMC,qCAAqC,GAAG,CAACC,eAAD,EAAkBC,oBAAlB,EAAwCC,+BAAxC,EAAyEC,yCAAzE,KAAuH;AACxK,SAAQC,yBAAD,IAA+B;AAClC;AACA,QAAIJ,eAAe,CAACF,kBAAD,EAAqB,MAAMA,kBAAkB,CAACM,yBAAD,CAA7C,CAAnB,EAA8F;AAC1F;AACA,aAAOC,OAAO,CACTC,OADE,CACMN,eAAe,CAACG,yCAAD,EAA4CA,yCAA5C,CADrB,EAEFI,IAFE,CAEIC,yCAAD,IAA+C;AACrD,YAAI,CAACA,yCAAL,EAAgD;AAC5C,gBAAMC,mBAAmB,GAAGP,+BAA+B,CAACE,yBAAD,EAA4B,GAA5B,EAAiC,CAAjC,EAAoC,CAApC,CAA3D;;AACAA,UAAAA,yBAAyB,CAACM,UAA1B,GAAuC,MAAM;AACzCD,YAAAA,mBAAmB,CAACE,cAApB,GAAqC,IAArC,CADyC,CACE;;AAC3CF,YAAAA,mBAAmB,CAACG,UAApB;AACH,WAHD;;AAIAH,UAAAA,mBAAmB,CAACE,cAApB,GAAqC,MAAMP,yBAAyB,CAACS,WAArE,CAN4C,CAMsC;;;AAClFJ,UAAAA,mBAAmB,CAACK,OAApB,CAA4BV,yBAAyB,CAACW,WAAtD;AACH;;AACD,eAAOX,yBAAyB,CAACY,cAA1B,EAAP;AACH,OAbM,CAAP;AAcH;;AACD,WAAO,IAAIX,OAAJ,CAAaC,OAAD,IAAa;AAC5B;AACA,YAAMW,QAAQ,GAAGhB,oBAAoB,CAACG,yBAAD,EAA4B;AAC7Dc,QAAAA,YAAY,EAAE,CAD+C;AAE7DC,QAAAA,gBAAgB,EAAE,UAF2C;AAG7DC,QAAAA,qBAAqB,EAAE,UAHsC;AAI7DC,QAAAA,IAAI,EAAE;AAJuD,OAA5B,CAArC;;AAMAjB,MAAAA,yBAAyB,CAACM,UAA1B,GAAwCY,KAAD,IAAW;AAC9CL,QAAAA,QAAQ,CAACL,UAAT;AACAN,QAAAA,OAAO,CAACgB,KAAK,CAACC,cAAP,CAAP;AACH,OAHD;;AAIAN,MAAAA,QAAQ,CAACH,OAAT,CAAiBV,yBAAyB,CAACW,WAA3C;AACAX,MAAAA,yBAAyB,CAACY,cAA1B;AACH,KAdM,CAAP;AAeH,GAlCD;AAmCH,CApCM","sourcesContent":["import { testPromiseSupport } from '../helpers/test-promise-support';\nexport const createRenderNativeOfflineAudioContext = (cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, testOfflineAudioContextCurrentTimeSupport) => {\n    return (nativeOfflineAudioContext) => {\n        // Bug #21: Safari does not support promises yet.\n        if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n            // Bug #158: Edge does not advance currentTime if it is not accessed while rendering the audio.\n            return Promise\n                .resolve(cacheTestResult(testOfflineAudioContextCurrentTimeSupport, testOfflineAudioContextCurrentTimeSupport))\n                .then((isOfflineAudioContextCurrentTimeSupported) => {\n                if (!isOfflineAudioContextCurrentTimeSupported) {\n                    const scriptProcessorNode = createNativeScriptProcessorNode(nativeOfflineAudioContext, 512, 0, 1);\n                    nativeOfflineAudioContext.oncomplete = () => {\n                        scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n                        scriptProcessorNode.disconnect();\n                    };\n                    scriptProcessorNode.onaudioprocess = () => nativeOfflineAudioContext.currentTime; // tslint:disable-line:deprecation\n                    scriptProcessorNode.connect(nativeOfflineAudioContext.destination);\n                }\n                return nativeOfflineAudioContext.startRendering();\n            });\n        }\n        return new Promise((resolve) => {\n            // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n            const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                gain: 0\n            });\n            nativeOfflineAudioContext.oncomplete = (event) => {\n                gainNode.disconnect();\n                resolve(event.renderedBuffer);\n            };\n            gainNode.connect(nativeOfflineAudioContext.destination);\n            nativeOfflineAudioContext.startRendering();\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/render-native-offline-audio-context.js.map"]},"metadata":{},"sourceType":"module"}