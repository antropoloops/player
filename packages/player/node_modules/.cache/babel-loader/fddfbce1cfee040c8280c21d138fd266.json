{"ast":null,"code":"import debounce from \"lodash.debounce\";\nimport ResizeObserver from \"resize-observer-polyfill\";\nexport function addResizeObserver(element, callback) {\n  const debouncedCallback = debounce(callback, 250);\n  const resizeObserver = new ResizeObserver(entries => {\n    if (!Array.isArray(entries)) {\n      return;\n    } // Since we only observe the one element, we don't need to loop over the array\n\n\n    if (!entries.length) {\n      return;\n    }\n\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    debouncedCallback(width, height);\n  });\n  resizeObserver.observe(element);\n  return () => resizeObserver.unobserve(element);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/visuals/addResizeObserver.ts"],"names":["debounce","ResizeObserver","addResizeObserver","element","callback","debouncedCallback","resizeObserver","entries","Array","isArray","length","entry","width","contentRect","height","observe","unobserve"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,iBAArB;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AAIA,OAAO,SAASC,iBAAT,CAA2BC,OAA3B,EAAyCC,QAAzC,EAAmE;AACxE,QAAMC,iBAAiB,GAAGL,QAAQ,CAACI,QAAD,EAAW,GAAX,CAAlC;AACA,QAAME,cAAc,GAAG,IAAIL,cAAJ,CAAmBM,OAAO,IAAI;AACnD,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,OAAd,CAAL,EAA6B;AAC3B;AACD,KAHkD,CAInD;;;AACA,QAAI,CAACA,OAAO,CAACG,MAAb,EAAqB;AACnB;AACD;;AACD,UAAMC,KAAK,GAAGJ,OAAO,CAAC,CAAD,CAArB;AACA,UAAMK,KAAK,GAAGD,KAAK,CAACE,WAAN,CAAkBD,KAAhC;AACA,UAAME,MAAM,GAAGH,KAAK,CAACE,WAAN,CAAkBC,MAAjC;AACAT,IAAAA,iBAAiB,CAACO,KAAD,EAAQE,MAAR,CAAjB;AACD,GAZsB,CAAvB;AAaAR,EAAAA,cAAc,CAACS,OAAf,CAAuBZ,OAAvB;AACA,SAAO,MAAMG,cAAc,CAACU,SAAf,CAAyBb,OAAzB,CAAb;AACD","sourcesContent":["import debounce from \"lodash.debounce\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\ntype ResizeListener = (width: number, heigth: number) => void;\n\nexport function addResizeObserver(element: any, callback: ResizeListener) {\n  const debouncedCallback = debounce(callback, 250);\n  const resizeObserver = new ResizeObserver(entries => {\n    if (!Array.isArray(entries)) {\n      return;\n    }\n    // Since we only observe the one element, we don't need to loop over the array\n    if (!entries.length) {\n      return;\n    }\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    debouncedCallback(width, height);\n  });\n  resizeObserver.observe(element);\n  return () => resizeObserver.unobserve(element);\n}\n"]},"metadata":{},"sourceType":"module"}