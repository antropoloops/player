{"ast":null,"code":"import _classCallCheck from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import debug from\"debug\";var log=debug(\"atpls:sampler\");export var Sampler=/*#__PURE__*/function(){function Sampler(audioset,buffers,audio){var _this=this;_classCallCheck(this,Sampler);this.audioset=audioset;this.buffers=buffers;this.audio=audio;this.master=void 0;this.tracks={};this.audioSources={};log(\"create sampler %s\",audioset.meta.title);this.master=audio.createTrack(\"master\",{volume:0.8});audioset.tracks.forEach(function(track){_this.tracks[track.id]=audio.createTrack(track.name,{volume:1},_this.master);});}_createClass(Sampler,[{key:\"dispose\",value:function dispose(){var _this2=this;Object.keys(this.tracks).forEach(function(trackId){_this2.tracks[trackId].disconnect();});}},{key:\"run\",value:function run(command){switch(command.command){case\"startClip\":return this.start(command.clipId,command.time);case\"stopClip\":return this.stop(command.clipId,command.time);default:}}},{key:\"start\",value:function start(clipId,time){log(\"start %s\",clipId);if(this.audioSources[clipId]){return;}var buffer=this.buffers.getBuffer(clipId);var trackId=this.audioset.index.trackIdOfClip[clipId];var track=this.tracks[trackId];var source=this.audio.createAudioSource({buffer:buffer},track);this.audioSources[clipId]=source;source.start(time);}},{key:\"stop\",value:function stop(clipId,time){log(\"stop %s\",clipId);var source=this.audioSources[clipId];if(source!==undefined){source.stop(time);}this.audioSources[clipId]=undefined;}}]);return Sampler;}();","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/Sampler.ts"],"names":["debug","log","Sampler","audioset","buffers","audio","master","tracks","audioSources","meta","title","createTrack","volume","forEach","track","id","name","Object","keys","trackId","disconnect","command","start","clipId","time","stop","buffer","getBuffer","index","trackIdOfClip","source","createAudioSource","undefined"],"mappings":"sTAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAMA,GAAMC,CAAAA,GAAG,CAAGD,KAAK,CAAC,eAAD,CAAjB,CAEA,UAAaE,CAAAA,OAAb,yBAKE,iBACUC,QADV,CAEUC,OAFV,CAGUC,KAHV,CAIE,mDAHQF,QAGR,CAHQA,QAGR,MAFQC,OAER,CAFQA,OAER,MADQC,KACR,CADQA,KACR,MARMC,MAQN,aAPMC,MAON,CAP2C,EAO3C,MANMC,YAMN,CAN8D,EAM9D,CACAP,GAAG,CAAC,mBAAD,CAAsBE,QAAQ,CAACM,IAAT,CAAcC,KAApC,CAAH,CACA,KAAKJ,MAAL,CAAcD,KAAK,CAACM,WAAN,CAAkB,QAAlB,CAA4B,CAAEC,MAAM,CAAE,GAAV,CAA5B,CAAd,CACAT,QAAQ,CAACI,MAAT,CAAgBM,OAAhB,CAAwB,SAAAC,KAAK,CAAI,CAC/B,KAAI,CAACP,MAAL,CAAYO,KAAK,CAACC,EAAlB,EAAwBV,KAAK,CAACM,WAAN,CACtBG,KAAK,CAACE,IADgB,CAEtB,CAAEJ,MAAM,CAAE,CAAV,CAFsB,CAGtB,KAAI,CAACN,MAHiB,CAAxB,CAKD,CAND,EAOD,CAnBH,6DAqBmB,iBACfW,MAAM,CAACC,IAAP,CAAY,KAAKX,MAAjB,EAAyBM,OAAzB,CAAiC,SAAAM,OAAO,CAAI,CAC1C,MAAI,CAACZ,MAAL,CAAYY,OAAZ,EAAqBC,UAArB,GACD,CAFD,EAGD,CAzBH,gCA2BaC,OA3Bb,CA2BsC,CAClC,OAAQA,OAAO,CAACA,OAAhB,EACE,IAAK,WAAL,CACE,MAAO,MAAKC,KAAL,CAAWD,OAAO,CAACE,MAAnB,CAA2BF,OAAO,CAACG,IAAnC,CAAP,CACF,IAAK,UAAL,CACE,MAAO,MAAKC,IAAL,CAAUJ,OAAO,CAACE,MAAlB,CAA0BF,OAAO,CAACG,IAAlC,CAAP,CACF,QALF,CAOD,CAnCH,oCAqCeD,MArCf,CAqC+BC,IArC/B,CAqC6C,CACzCvB,GAAG,CAAC,UAAD,CAAasB,MAAb,CAAH,CACA,GAAI,KAAKf,YAAL,CAAkBe,MAAlB,CAAJ,CAA+B,CAC7B,OACD,CAED,GAAMG,CAAAA,MAAM,CAAG,KAAKtB,OAAL,CAAauB,SAAb,CAAuBJ,MAAvB,CAAf,CACA,GAAMJ,CAAAA,OAAO,CAAG,KAAKhB,QAAL,CAAcyB,KAAd,CAAoBC,aAApB,CAAkCN,MAAlC,CAAhB,CACA,GAAMT,CAAAA,KAAK,CAAG,KAAKP,MAAL,CAAYY,OAAZ,CAAd,CACA,GAAMW,CAAAA,MAAM,CAAG,KAAKzB,KAAL,CAAW0B,iBAAX,CAA6B,CAAEL,MAAM,CAANA,MAAF,CAA7B,CAAyCZ,KAAzC,CAAf,CACA,KAAKN,YAAL,CAAkBe,MAAlB,EAA4BO,MAA5B,CAEAA,MAAM,CAACR,KAAP,CAAaE,IAAb,EACD,CAlDH,kCAoDcD,MApDd,CAoD8BC,IApD9B,CAoD4C,CACxCvB,GAAG,CAAC,SAAD,CAAYsB,MAAZ,CAAH,CACA,GAAMO,CAAAA,MAAM,CAAG,KAAKtB,YAAL,CAAkBe,MAAlB,CAAf,CACA,GAAIO,MAAM,GAAKE,SAAf,CAA0B,CACxBF,MAAM,CAACL,IAAP,CAAYD,IAAZ,EACD,CACD,KAAKhB,YAAL,CAAkBe,MAAlB,EAA4BS,SAA5B,CACD,CA3DH","sourcesContent":["import debug from \"debug\";\nimport { Audioset } from \"../audioset\";\nimport { AudioEngine, AudioSource, AudioTrack } from \"./Audio\";\nimport { ControlCommand } from \"./Control\";\nimport { Resources } from \"./ResourceLoader\";\n\nconst log = debug(\"atpls:sampler\");\n\nexport class Sampler {\n  private master: AudioTrack;\n  private tracks: Record<string, AudioTrack> = {};\n  private audioSources: Record<string, AudioSource | undefined> = {};\n\n  constructor(\n    private audioset: Audioset,\n    private buffers: Resources,\n    private audio: AudioEngine,\n  ) {\n    log(\"create sampler %s\", audioset.meta.title);\n    this.master = audio.createTrack(\"master\", { volume: 0.8 });\n    audioset.tracks.forEach(track => {\n      this.tracks[track.id] = audio.createTrack(\n        track.name,\n        { volume: 1 },\n        this.master,\n      );\n    });\n  }\n\n  public dispose() {\n    Object.keys(this.tracks).forEach(trackId => {\n      this.tracks[trackId].disconnect();\n    });\n  }\n\n  public run(command: ControlCommand) {\n    switch (command.command) {\n      case \"startClip\":\n        return this.start(command.clipId, command.time);\n      case \"stopClip\":\n        return this.stop(command.clipId, command.time);\n      default:\n    }\n  }\n\n  public start(clipId: string, time: number) {\n    log(\"start %s\", clipId);\n    if (this.audioSources[clipId]) {\n      return;\n    }\n\n    const buffer = this.buffers.getBuffer(clipId);\n    const trackId = this.audioset.index.trackIdOfClip[clipId];\n    const track = this.tracks[trackId];\n    const source = this.audio.createAudioSource({ buffer }, track);\n    this.audioSources[clipId] = source;\n\n    source.start(time);\n  }\n\n  public stop(clipId: string, time: number) {\n    log(\"stop %s\", clipId);\n    const source = this.audioSources[clipId];\n    if (source !== undefined) {\n      source.stop(time);\n    }\n    this.audioSources[clipId] = undefined;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}