{"ast":null,"code":"import _objectSpread from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\n/**\n * It handles the state of the control\n */\nexport class ControlStateManager {\n  constructor() {\n    this.clipStateByClipId = {};\n    this.clipIdsOfTrack = {};\n    this.trackIdOfClip = {};\n    this.trackStateByTrackId = {};\n  }\n\n  addClip(clip) {\n    this.clipStateByClipId[clip.id] = {\n      status: \"stopped\"\n    };\n    this.trackIdOfClip[clip.id] = clip.trackId;\n  }\n\n  addTrack(track) {\n    const volume = track.volume || 1;\n    this.trackStateByTrackId[track.id] = {\n      status: \"stopped\",\n      volume\n    };\n    this.clipIdsOfTrack[track.id] = track.clipIds;\n  }\n\n  getAllClipIds() {\n    return Object.keys(this.clipStateByClipId);\n  }\n\n  getAllTrackIds() {\n    return Object.keys(this.trackStateByTrackId);\n  }\n\n  getClipState(clipId) {\n    return this.clipStateByClipId[clipId];\n  }\n\n  setClipState(clipId, newStsate) {\n    this.clipStateByClipId[clipId] = newStsate;\n  }\n\n  getTrackState(trackId) {\n    return this.trackStateByTrackId[trackId];\n  }\n\n  setTrackState(trackId, state) {\n    this.trackStateByTrackId[trackId] = state;\n  }\n\n  getTrackIdOfClip(clipId) {\n    return this.trackIdOfClip[clipId];\n  }\n\n  getClipIdsOfTrack(trackId) {\n    return this.clipIdsOfTrack[trackId];\n  }\n\n  getState() {\n    return {\n      clips: _objectSpread({}, this.clipStateByClipId),\n      tracks: _objectSpread({}, this.trackStateByTrackId)\n    };\n  }\n\n}\nexport class PlayerControl extends ControlStateManager {}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/Control/ControlStateManager.ts"],"names":["ControlStateManager","clipStateByClipId","clipIdsOfTrack","trackIdOfClip","trackStateByTrackId","addClip","clip","id","status","trackId","addTrack","track","volume","clipIds","getAllClipIds","Object","keys","getAllTrackIds","getClipState","clipId","setClipState","newStsate","getTrackState","setTrackState","state","getTrackIdOfClip","getClipIdsOfTrack","getState","clips","tracks","PlayerControl"],"mappings":";;AASA;;;AAGA,OAAO,MAAMA,mBAAN,CAA0B;AAAA;AAAA,SACvBC,iBADuB,GACuB,EADvB;AAAA,SAEvBC,cAFuB,GAEoB,EAFpB;AAAA,SAGvBC,aAHuB,GAGiB,EAHjB;AAAA,SAIvBC,mBAJuB,GAI2B,EAJ3B;AAAA;;AAMxBC,EAAAA,OAAP,CAAeC,IAAf,EAA2B;AACzB,SAAKL,iBAAL,CAAuBK,IAAI,CAACC,EAA5B,IAAkC;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAlC;AACA,SAAKL,aAAL,CAAmBG,IAAI,CAACC,EAAxB,IAA8BD,IAAI,CAACG,OAAnC;AACD;;AACMC,EAAAA,QAAP,CAAgBC,KAAhB,EAA8B;AAC5B,UAAMC,MAAM,GAAGD,KAAK,CAACC,MAAN,IAAgB,CAA/B;AACA,SAAKR,mBAAL,CAAyBO,KAAK,CAACJ,EAA/B,IAAqC;AAAEC,MAAAA,MAAM,EAAE,SAAV;AAAqBI,MAAAA;AAArB,KAArC;AACA,SAAKV,cAAL,CAAoBS,KAAK,CAACJ,EAA1B,IAAgCI,KAAK,CAACE,OAAtC;AACD;;AACMC,EAAAA,aAAP,GAAuB;AACrB,WAAOC,MAAM,CAACC,IAAP,CAAY,KAAKf,iBAAjB,CAAP;AACD;;AACMgB,EAAAA,cAAP,GAAwB;AACtB,WAAOF,MAAM,CAACC,IAAP,CAAY,KAAKZ,mBAAjB,CAAP;AACD;;AACMc,EAAAA,YAAP,CAAoBC,MAApB,EAAoC;AAClC,WAAO,KAAKlB,iBAAL,CAAuBkB,MAAvB,CAAP;AACD;;AACMC,EAAAA,YAAP,CAAoBD,MAApB,EAAoCE,SAApC,EAAiE;AAC/D,SAAKpB,iBAAL,CAAuBkB,MAAvB,IAAiCE,SAAjC;AACD;;AACMC,EAAAA,aAAP,CAAqBb,OAArB,EAAsC;AACpC,WAAO,KAAKL,mBAAL,CAAyBK,OAAzB,CAAP;AACD;;AACMc,EAAAA,aAAP,CAAqBd,OAArB,EAAsCe,KAAtC,EAAgE;AAC9D,SAAKpB,mBAAL,CAAyBK,OAAzB,IAAoCe,KAApC;AACD;;AACMC,EAAAA,gBAAP,CAAwBN,MAAxB,EAAwC;AACtC,WAAO,KAAKhB,aAAL,CAAmBgB,MAAnB,CAAP;AACD;;AACMO,EAAAA,iBAAP,CAAyBjB,OAAzB,EAA0C;AACxC,WAAO,KAAKP,cAAL,CAAoBO,OAApB,CAAP;AACD;;AACMkB,EAAAA,QAAP,GAAgC;AAC9B,WAAO;AACLC,MAAAA,KAAK,oBAAO,KAAK3B,iBAAZ,CADA;AAEL4B,MAAAA,MAAM,oBAAO,KAAKzB,mBAAZ;AAFD,KAAP;AAID;;AA5C8B;AA+CjC,OAAO,MAAM0B,aAAN,SAA4B9B,mBAA5B,CAAgD","sourcesContent":["import { Clip, Track } from \"../../audioset\";\nimport {\n  ClipPlayingState,\n  ClipPlayingStateByClipId,\n  ControlState,\n  TrackPlayingState,\n  TrackPlayingStateByTrackId,\n} from \"./ControlState\";\n\n/**\n * It handles the state of the control\n */\nexport class ControlStateManager {\n  private clipStateByClipId: ClipPlayingStateByClipId = {};\n  private clipIdsOfTrack: Record<string, string[]> = {};\n  private trackIdOfClip: Record<string, string> = {};\n  private trackStateByTrackId: TrackPlayingStateByTrackId = {};\n\n  public addClip(clip: Clip) {\n    this.clipStateByClipId[clip.id] = { status: \"stopped\" };\n    this.trackIdOfClip[clip.id] = clip.trackId;\n  }\n  public addTrack(track: Track) {\n    const volume = track.volume || 1;\n    this.trackStateByTrackId[track.id] = { status: \"stopped\", volume };\n    this.clipIdsOfTrack[track.id] = track.clipIds;\n  }\n  public getAllClipIds() {\n    return Object.keys(this.clipStateByClipId);\n  }\n  public getAllTrackIds() {\n    return Object.keys(this.trackStateByTrackId);\n  }\n  public getClipState(clipId: string) {\n    return this.clipStateByClipId[clipId];\n  }\n  public setClipState(clipId: string, newStsate: ClipPlayingState) {\n    this.clipStateByClipId[clipId] = newStsate;\n  }\n  public getTrackState(trackId: string) {\n    return this.trackStateByTrackId[trackId];\n  }\n  public setTrackState(trackId: string, state: TrackPlayingState) {\n    this.trackStateByTrackId[trackId] = state;\n  }\n  public getTrackIdOfClip(clipId: string) {\n    return this.trackIdOfClip[clipId];\n  }\n  public getClipIdsOfTrack(trackId: string) {\n    return this.clipIdsOfTrack[trackId];\n  }\n  public getState(): ControlState {\n    return {\n      clips: { ...this.clipStateByClipId },\n      tracks: { ...this.trackStateByTrackId },\n    };\n  }\n}\n\nexport class PlayerControl extends ControlStateManager {}\n"]},"metadata":{},"sourceType":"module"}