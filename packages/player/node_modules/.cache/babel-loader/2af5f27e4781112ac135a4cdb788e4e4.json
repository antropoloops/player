{"ast":null,"code":"import _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/dani/Antropoloops/atpls-player/src/ui/Player/ClipOpen.tsx\";\nimport React, { useReducer } from \"react\";\nimport { ArrowDown, ArrowUp } from \"../shared/Icons\";\nimport { Markdown } from \"../shared/Markdown\";\nimport \"./ClipOpen.css\";\nexport const OpenClip = ({\n  ref,\n  clip,\n  onClick\n}) => {\n  const _useReducer = useReducer(x => !x, false),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        isReadmeVisible = _useReducer2[0],\n        toggleReadme = _useReducer2[1];\n\n  const hasReadme = clip.readme;\n  const Icon = isReadmeVisible ? ArrowUp : ArrowDown;\n  const clipToggle = React.createElement(\"div\", {\n    className: \"clipToggle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"clipName\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, clip.name), hasReadme && React.createElement(Icon, {\n    onClick: toggleReadme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }));\n  const clipInfo = React.createElement(\"div\", {\n    className: \"clipInfo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, clip.title), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, clip.artist));\n  const cover2 = clip.resources.cover2 && clip.resources.cover2.small;\n  return React.createElement(\"div\", {\n    ref: ref,\n    className: \"Clip open\",\n    style: {\n      backgroundColor: clip.color\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"covers\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: \"cover\",\n    alt: clip.title,\n    src: clip.coverUrl,\n    onClick: onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), cover2 ? React.createElement(\"img\", {\n    className: \"cover alternative\",\n    alt: clip.title,\n    src: cover2,\n    onClick: onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    className: \"cover info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, clipInfo, \" \", clipToggle)), cover2 && React.createElement(\"div\", {\n    className: \"meta\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, clipToggle, clipInfo), React.createElement(Markdown, {\n    className: \"expand \".concat(isReadmeVisible ? \"visible\" : \"hidden\"),\n    markdown: clip.readme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }));\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/ClipOpen.tsx"],"names":["React","useReducer","ArrowDown","ArrowUp","Markdown","OpenClip","ref","clip","onClick","x","isReadmeVisible","toggleReadme","hasReadme","readme","Icon","clipToggle","name","clipInfo","title","artist","cover2","resources","small","backgroundColor","color","coverUrl"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,iBAAnC;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAO,gBAAP;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,IAAP;AAAaC,EAAAA;AAAb,CAAD,KAAiC;AAAA,sBACfP,UAAU,CAACQ,CAAC,IAAI,CAACA,CAAP,EAAU,KAAV,CADK;AAAA;AAAA,QAChDC,eADgD;AAAA,QAC/BC,YAD+B;;AAEvD,QAAMC,SAAS,GAAGL,IAAI,CAACM,MAAvB;AAEA,QAAMC,IAAI,GAAGJ,eAAe,GAAGP,OAAH,GAAaD,SAAzC;AAEA,QAAMa,UAAU,GACd;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BR,IAAI,CAACS,IAAhC,CADF,EAEGJ,SAAS,IAAI,oBAAC,IAAD;AAAM,IAAA,OAAO,EAAED,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFhB,CADF;AAMA,QAAMM,QAAQ,GACZ;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuBV,IAAI,CAACW,KAA5B,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIX,IAAI,CAACY,MAAT,CAFF,CADF;AAOA,QAAMC,MAAM,GAAGb,IAAI,CAACc,SAAL,CAAeD,MAAf,IAAyBb,IAAI,CAACc,SAAL,CAAeD,MAAf,CAAsBE,KAA9D;AACA,SACE;AACE,IAAA,GAAG,EAAEhB,GADP;AAEE,IAAA,SAAS,EAAC,WAFZ;AAGE,IAAA,KAAK,EAAE;AAAEiB,MAAAA,eAAe,EAAEhB,IAAI,CAACiB;AAAxB,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,SAAS,EAAC,OADZ;AAEE,IAAA,GAAG,EAAEjB,IAAI,CAACW,KAFZ;AAGE,IAAA,GAAG,EAAEX,IAAI,CAACkB,QAHZ;AAIE,IAAA,OAAO,EAAEjB,OAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOGY,MAAM,GACL;AACE,IAAA,SAAS,EAAC,mBADZ;AAEE,IAAA,GAAG,EAAEb,IAAI,CAACW,KAFZ;AAGE,IAAA,GAAG,EAAEE,MAHP;AAIE,IAAA,OAAO,EAAEZ,OAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,GAQL;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGS,QADH,OACcF,UADd,CAfJ,CALF,EAyBGK,MAAM,IACL;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,UADH,EAEGE,QAFH,CA1BJ,EA+BE,oBAAC,QAAD;AACE,IAAA,SAAS,mBAAYP,eAAe,GAAG,SAAH,GAAe,QAA1C,CADX;AAEE,IAAA,QAAQ,EAAEH,IAAI,CAACM,MAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA/BF,CADF;AAsCD,CA1DM","sourcesContent":["import React, { useReducer } from \"react\";\nimport { Clip } from \"../../audioset\";\nimport { ArrowDown, ArrowUp } from \"../shared/Icons\";\nimport { Markdown } from \"../shared/Markdown\";\nimport \"./ClipOpen.css\";\n\nexport const OpenClip = ({ ref, clip, onClick }: any) => {\n  const [isReadmeVisible, toggleReadme] = useReducer(x => !x, false);\n  const hasReadme = clip.readme;\n\n  const Icon = isReadmeVisible ? ArrowUp : ArrowDown;\n\n  const clipToggle = (\n    <div className=\"clipToggle\">\n      <div className=\"clipName\">{clip.name}</div>\n      {hasReadme && <Icon onClick={toggleReadme} />}\n    </div>\n  );\n  const clipInfo = (\n    <div className=\"clipInfo\">\n      <h3 className=\"title\">{clip.title}</h3>\n      <p>{clip.artist}</p>\n    </div>\n  );\n\n  const cover2 = clip.resources.cover2 && clip.resources.cover2.small;\n  return (\n    <div\n      ref={ref}\n      className=\"Clip open\"\n      style={{ backgroundColor: clip.color }}\n    >\n      <div className=\"covers\">\n        <img\n          className=\"cover\"\n          alt={clip.title}\n          src={clip.coverUrl}\n          onClick={onClick}\n        />\n        {cover2 ? (\n          <img\n            className=\"cover alternative\"\n            alt={clip.title}\n            src={cover2}\n            onClick={onClick}\n          />\n        ) : (\n          <div className=\"cover info\">\n            {clipInfo} {clipToggle}\n          </div>\n        )}\n      </div>\n      {cover2 && (\n        <div className=\"meta\">\n          {clipToggle}\n          {clipInfo}\n        </div>\n      )}\n      <Markdown\n        className={`expand ${isReadmeVisible ? \"visible\" : \"hidden\"}`}\n        markdown={clip.readme}\n      />\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}