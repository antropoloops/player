{"ast":null,"code":"import prune from \"./prune\";\nexport default function (topology, filter) {\n  var oldObjects = topology.objects,\n      newObjects = {},\n      key;\n  if (filter == null) filter = filterTrue;\n\n  function filterGeometry(input) {\n    var output, arcs;\n\n    switch (input.type) {\n      case \"Polygon\":\n        {\n          arcs = filterRings(input.arcs);\n          output = arcs ? {\n            type: \"Polygon\",\n            arcs: arcs\n          } : {\n            type: null\n          };\n          break;\n        }\n\n      case \"MultiPolygon\":\n        {\n          arcs = input.arcs.map(filterRings).filter(filterIdentity);\n          output = arcs.length ? {\n            type: \"MultiPolygon\",\n            arcs: arcs\n          } : {\n            type: null\n          };\n          break;\n        }\n\n      case \"GeometryCollection\":\n        {\n          arcs = input.geometries.map(filterGeometry).filter(filterNotNull);\n          output = arcs.length ? {\n            type: \"GeometryCollection\",\n            geometries: arcs\n          } : {\n            type: null\n          };\n          break;\n        }\n\n      default:\n        return input;\n    }\n\n    if (input.id != null) output.id = input.id;\n    if (input.bbox != null) output.bbox = input.bbox;\n    if (input.properties != null) output.properties = input.properties;\n    return output;\n  }\n\n  function filterRings(arcs) {\n    return arcs.length && filterExteriorRing(arcs[0]) // if the exterior is small, ignore any holes\n    ? [arcs[0]].concat(arcs.slice(1).filter(filterInteriorRing)) : null;\n  }\n\n  function filterExteriorRing(ring) {\n    return filter(ring, false);\n  }\n\n  function filterInteriorRing(ring) {\n    return filter(ring, true);\n  }\n\n  for (key in oldObjects) {\n    newObjects[key] = filterGeometry(oldObjects[key]);\n  }\n\n  return prune({\n    type: \"Topology\",\n    bbox: topology.bbox,\n    transform: topology.transform,\n    objects: newObjects,\n    arcs: topology.arcs\n  });\n}\n\nfunction filterTrue() {\n  return true;\n}\n\nfunction filterIdentity(x) {\n  return x;\n}\n\nfunction filterNotNull(geometry) {\n  return geometry.type != null;\n}","map":null,"metadata":{},"sourceType":"module"}