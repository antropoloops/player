{"ast":null,"code":"import _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { getAlbumHeight } from \"./dimensions\";\nimport drawCircle from \"./drawCircle\";\nimport drawAlbum from \"./drawAlbum\";\nimport drawRefLine from \"./drawRefLine\";\nimport drawWave from \"./drawWave\";\nimport { drawMap, calculateMapScale, createMapProjector } from \"./drawMap\";\nimport { drawPanel, createPanelProjector } from \"./drawPanel\";\n\nconst remove = (name, group) => {\n  const value = group[name];\n\n  if (value) {\n    value.remove();\n    group[name] = null;\n  }\n};\n\nfunction createProjector(visuals, dimension) {\n  const width = dimension.width,\n        height = dimension.height;\n  const albumsHeight = getAlbumHeight(width);\n  const scale = calculateMapScale(width, height - albumsHeight);\n  return visuals.mode === \"map\" ? createMapProjector(dimension.width, dimension.height - albumsHeight, visuals.geomap.scaleFactor * scale, visuals.geomap.center) : createPanelProjector(dimension.width, dimension.height - albumsHeight, visuals.image.size.width, visuals.image.size.height);\n}\n\n/**\n * It stores the state required to render visualizations\n */\nexport class Visuals {\n  constructor(set, display) {\n    this.set = set;\n    this.display = display;\n    this.circles = {};\n    this.albums = {};\n    this.refLines = {};\n    this.countries = void 0;\n    this.visuals = void 0;\n    this.backgroundContainer = void 0;\n    this.albumsContainer = void 0;\n    this.refLinesContainer = void 0;\n    this.circlesContainer = void 0;\n    this.wavesContainer = void 0;\n    this.projector = void 0;\n    this.visuals = set.visuals;\n  }\n\n  setCountries(countries) {\n    this.countries = countries;\n    this.setup();\n  }\n\n  show(clipId) {\n    const clip = this.set.index.clipById[clipId];\n    if (!clip) return; // REVIEW: See if there is a better way to get this info (scale, projection)\n    // that is already calculated in drawMap\n\n    const width = this.display.dimensions.width;\n\n    const _this$projector = this.projector(clip.position),\n          _this$projector2 = _slicedToArray(_this$projector, 2),\n          cx = _this$projector2[0],\n          cy = _this$projector2[1]; // REVIEW: fix width parameter to draw circles with the proper size\n\n\n    const circle = drawCircle(this.circlesContainer, width, cx, cy, clip);\n    this.circles[name] = circle;\n    const album = drawAlbum(this.albumsContainer, width, clip);\n    this.albums[name] = album;\n    const refLine = drawRefLine(this.refLinesContainer, width, cx, cy, clip);\n    this.refLines[name] = refLine;\n    drawWave(this.wavesContainer, width, cx, cy, clip);\n  }\n\n  hide(clipId) {\n    remove(clipId, this.circles);\n    remove(clipId, this.albums);\n    remove(clipId, this.refLines);\n  }\n\n  resizeSvg() {\n    // TODO: create a resize function that only changes the svg viewBox\n    this.setup();\n  }\n\n  setup() {\n    this.display.clear();\n    this.display.createSvg();\n    this.projector = createProjector(this.visuals, this.display.dimensions);\n    const backgroundWidth = this.display.dimensions.width;\n    const albumsHeight = getAlbumHeight(backgroundWidth);\n    const backgroundHeight = this.display.dimensions.height - albumsHeight;\n    this.backgroundContainer = this.createGroup(\"background\", albumsHeight);\n    this.albumsContainer = this.createGroup(\"albums\", 0);\n    this.refLinesContainer = this.createGroup(\"refLines\", albumsHeight);\n    this.circlesContainer = this.createGroup(\"circles\", albumsHeight);\n    this.wavesContainer = this.createGroup(\"waves\", albumsHeight);\n\n    if (this.visuals.mode === \"map\") {\n      drawMap(this.backgroundContainer, this.countries, backgroundWidth, backgroundHeight, this.visuals.geomap);\n    } else {\n      drawPanel(this.backgroundContainer, backgroundWidth, backgroundHeight, this.visuals.image.url);\n    }\n  }\n\n  createGroup(id, height) {\n    const svg = this.display.svg;\n    return svg.append(\"g\").attr(\"id\", id).attr(\"transform\", \"translate(0, \".concat(height, \")\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/visuals/visuals.ts"],"names":["getAlbumHeight","drawCircle","drawAlbum","drawRefLine","drawWave","drawMap","calculateMapScale","createMapProjector","drawPanel","createPanelProjector","remove","name","group","value","createProjector","visuals","dimension","width","height","albumsHeight","scale","mode","geomap","scaleFactor","center","image","size","Visuals","constructor","set","display","circles","albums","refLines","countries","backgroundContainer","albumsContainer","refLinesContainer","circlesContainer","wavesContainer","projector","setCountries","setup","show","clipId","clip","index","clipById","dimensions","position","cx","cy","circle","album","refLine","hide","resizeSvg","clear","createSvg","backgroundWidth","backgroundHeight","createGroup","url","id","svg","append","attr"],"mappings":"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","sourcesContent":["\nimport { getAlbumHeight } from \"./dimensions\";\n\nimport drawCircle from \"./drawCircle\";\nimport drawAlbum from \"./drawAlbum\";\nimport drawRefLine, { RefLine } from \"./drawRefLine\";\nimport drawWave from \"./drawWave\";\nimport { drawMap, calculateMapScale, createMapProjector } from \"./drawMap\";\nimport { drawPanel, createPanelProjector } from \"./drawPanel\";\nimport { Audioset, AudiosetVisuals } from \"../Audioset\";\nimport { Display, Dimension } from \"./display\";\nimport { Selection } from \"d3\";\n\nconst remove = (name: string, group: Record<string, any>) => {\n  const value = group[name];\n  if (value) {\n    value.remove();\n    group[name] = null;\n  }\n};\nfunction createProjector(visuals: AudiosetVisuals, dimension: Dimension) {\n  const { width, height } = dimension;\n  const albumsHeight = getAlbumHeight(width);\n\n  const scale = calculateMapScale(width, height - albumsHeight);\n  return visuals.mode === \"map\"\n    ? createMapProjector(\n        dimension.width,\n        dimension.height - albumsHeight,\n        visuals.geomap.scaleFactor * scale,\n        visuals.geomap.center,\n      )\n    : createPanelProjector(\n        dimension.width,\n        dimension.height - albumsHeight,\n        visuals.image.size.width,\n        visuals.image.size.height,\n      );\n}\n\nexport type D3Selection = Selection<SVGGElement, unknown, null, undefined>;\n\n/**\n * It stores the state required to render visualizations\n */\nexport class Visuals {\n  circles: Record<string, D3Selection> = {};\n  albums: Record<string, D3Selection> = {};\n  refLines: Record<string, RefLine> = {};\n  countries: any;\n  visuals: AudiosetVisuals;\n  private backgroundContainer!: D3Selection;\n  private albumsContainer!: D3Selection;\n  private refLinesContainer!: D3Selection;\n  private circlesContainer!: D3Selection;\n  private wavesContainer!: D3Selection;\n  projector: any;\n\n  constructor(private set: Audioset, private display: Display) {\n    this.visuals = set.visuals;\n  }\n\n  setCountries(countries: any) {\n    this.countries = countries\n    this.setup();\n  }\n\n  show(clipId: string) {\n    const clip = this.set.index.clipById[clipId];\n    if (!clip) return;\n\n    // REVIEW: See if there is a better way to get this info (scale, projection)\n    // that is already calculated in drawMap\n    const { width } = this.display.dimensions;\n\n\n    const [cx, cy] = this.projector(clip.position);\n\n    // REVIEW: fix width parameter to draw circles with the proper size\n    const circle = drawCircle(this.circlesContainer, width, cx, cy, clip);\n    this.circles[name] = circle;\n\n    const album = drawAlbum(this.albumsContainer, width, clip);\n    this.albums[name] = album;\n\n    const refLine = drawRefLine(this.refLinesContainer, width, cx, cy, clip);\n    this.refLines[name] = refLine;\n\n    drawWave(this.wavesContainer, width, cx, cy, clip);\n  }\n\n  public hide(clipId: string) {\n    remove(clipId, this.circles);\n    remove(clipId, this.albums);\n    remove(clipId, this.refLines);\n  }\n\n  public resizeSvg() {\n    // TODO: create a resize function that only changes the svg viewBox\n    this.setup();\n  }\n\n  setup() {\n    this.display.clear();\n    this.display.createSvg();\n    this.projector = createProjector(this.visuals, this.display.dimensions);\n\n    const backgroundWidth = this.display.dimensions.width;\n    const albumsHeight = getAlbumHeight(backgroundWidth);\n    const backgroundHeight = this.display.dimensions.height - albumsHeight;\n\n    this.backgroundContainer = this.createGroup(\"background\", albumsHeight);\n    this.albumsContainer = this.createGroup(\"albums\", 0);\n    this.refLinesContainer = this.createGroup(\"refLines\", albumsHeight);\n    this.circlesContainer = this.createGroup(\"circles\", albumsHeight);\n    this.wavesContainer = this.createGroup(\"waves\", albumsHeight);\n\n    if (this.visuals.mode === \"map\") {\n      drawMap(this.backgroundContainer, this.countries, backgroundWidth, backgroundHeight, this.visuals.geomap);\n    } else {\n      drawPanel(this.backgroundContainer, backgroundWidth, backgroundHeight, this.visuals.image.url);\n    }\n  }\n  private createGroup(id: string, height: number): D3Selection {\n    const svg = this.display.svg;\n    return svg.append(\"g\").attr(\"id\", id).attr(\"transform\", `translate(0, ${height})`);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}