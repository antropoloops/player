{"ast":null,"code":"import _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/dani/Antropoloops/atpls-player/src/ui/Player/ClipOpen.tsx\";\nimport React, { useReducer } from \"react\";\nimport { ArrowDown, ArrowUp } from \"../shared/Icons\";\nimport { Markdown } from \"../shared/Markdown\";\nimport \"./ClipOpen.css\";\nexport const OpenClip = ({\n  ref,\n  clip,\n  onClick\n}) => {\n  const _useReducer = useReducer(x => !x, false),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        isReadmeVisible = _useReducer2[0],\n        toggleReadme = _useReducer2[1];\n\n  const hasReadme = clip.readme;\n  const cover2 = clip.resources.cover2 && clip.resources.cover2.small;\n  return React.createElement(\"div\", {\n    ref: ref,\n    className: \"Clip open\",\n    style: {\n      backgroundColor: clip.color\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"covers\",\n    onClick: onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: \"cover\",\n    alt: clip.title,\n    src: clip.coverUrl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }), cover2 ? React.createElement(\"img\", {\n    className: \"cover alternative\",\n    alt: clip.title,\n    src: cover2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(ClipInfo, {\n    className: \"info\",\n    clip: clip,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"meta\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(ClipToggle, {\n    className: \"column\",\n    name: clip.name,\n    hasToggle: hasReadme,\n    isOpen: isReadmeVisible,\n    onToggle: toggleReadme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), cover2 && React.createElement(ClipInfo, {\n    className: \"column\",\n    clip: clip,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  })), React.createElement(Markdown, {\n    className: \"expand \".concat(isReadmeVisible ? \"visible\" : \"hidden\"),\n    markdown: clip.readme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }));\n};\n\nconst ClipInfo = ({\n  className,\n  clip\n}) => React.createElement(\"div\", {\n  className: className,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 52\n  },\n  __self: this\n}, React.createElement(\"h3\", {\n  className: \"title\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 53\n  },\n  __self: this\n}, clip.title), React.createElement(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 54\n  },\n  __self: this\n}, clip.artist));\n\nconst ClipToggle = ({\n  className,\n  name,\n  hasToggle,\n  isOpen,\n  onToggle\n}) => {\n  const Icon = isOpen ? ArrowUp : ArrowDown;\n  return React.createElement(\"div\", {\n    className: className,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"clipName\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, name), hasToggle && React.createElement(Icon, {\n    onClick: onToggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }));\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/ClipOpen.tsx"],"names":["React","useReducer","ArrowDown","ArrowUp","Markdown","OpenClip","ref","clip","onClick","x","isReadmeVisible","toggleReadme","hasReadme","readme","cover2","resources","small","backgroundColor","color","title","coverUrl","name","ClipInfo","className","artist","ClipToggle","hasToggle","isOpen","onToggle","Icon"],"mappings":"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","sourcesContent":["import React, { useReducer } from \"react\";\nimport { Clip } from \"../../audioset\";\nimport { ArrowDown, ArrowUp } from \"../shared/Icons\";\nimport { Markdown } from \"../shared/Markdown\";\nimport \"./ClipOpen.css\";\n\nexport const OpenClip = ({ ref, clip, onClick }: any) => {\n  const [isReadmeVisible, toggleReadme] = useReducer(x => !x, false);\n  const hasReadme = clip.readme;\n\n  const cover2 = clip.resources.cover2 && clip.resources.cover2.small;\n  return (\n    <div\n      ref={ref}\n      className=\"Clip open\"\n      style={{ backgroundColor: clip.color }}\n    >\n      <div className=\"covers\" onClick={onClick}>\n        <img className=\"cover\" alt={clip.title} src={clip.coverUrl} />\n        {cover2 ? (\n          <img className=\"cover alternative\" alt={clip.title} src={cover2} />\n        ) : (\n          <div>\n            <ClipInfo className=\"info\" clip={clip} />\n          </div>\n        )}\n      </div>\n      <div className=\"meta\">\n        <ClipToggle\n          className=\"column\"\n          name={clip.name}\n          hasToggle={hasReadme}\n          isOpen={isReadmeVisible}\n          onToggle={toggleReadme}\n        />\n        {cover2 && <ClipInfo className=\"column\" clip={clip} />}\n      </div>\n      <Markdown\n        className={`expand ${isReadmeVisible ? \"visible\" : \"hidden\"}`}\n        markdown={clip.readme}\n      />\n    </div>\n  );\n};\n\ninterface ClipInfoProps {\n  className: string;\n  clip: Clip;\n}\n\nconst ClipInfo = ({ className, clip }: ClipInfoProps) => (\n  <div className={className}>\n    <h3 className=\"title\">{clip.title}</h3>\n    <p>{clip.artist}</p>\n  </div>\n);\n\ninterface ClipToggleProps {\n  className: string;\n  name: string;\n  hasToggle: boolean;\n  isOpen: boolean;\n  onToggle: (event?: any) => void;\n}\n\nconst ClipToggle = ({\n  className,\n  name,\n  hasToggle,\n  isOpen,\n  onToggle,\n}: ClipToggleProps) => {\n  const Icon = isOpen ? ArrowUp : ArrowDown;\n  return (\n    <div className={className}>\n      <div className=\"clipName\">{name}</div>\n      {hasToggle && <Icon onClick={onToggle} />}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}