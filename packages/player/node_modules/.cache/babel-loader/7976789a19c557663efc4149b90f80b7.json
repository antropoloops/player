{"ast":null,"code":"export class BundleLoader {\n  constructor(onAudiosetStatusChange) {\n    this.onAudiosetStatusChange = onAudiosetStatusChange;\n    this.status = {\n      stage: \"pending\"\n    };\n\n    this.fetch = () => Promise.reject();\n  }\n\n  loadBundle(audiosetId) {\n    this.setStatus({\n      stage: \"loading\",\n      payload: audiosetId\n    });\n    return this.fetch(audiosetId).then(audioset => this.setStatus({\n      stage: \"ready\",\n      payload: audioset\n    })).catch(error => this.setStatus({\n      stage: \"error\",\n      error\n    }));\n  }\n\n  setStatus(status) {\n    this.status = status;\n    this.onAudiosetStatusChange(status);\n    return status;\n  }\n\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/audioset/BundleLoader.ts"],"names":["BundleLoader","constructor","onAudiosetStatusChange","status","stage","fetch","Promise","reject","loadBundle","audiosetId","setStatus","payload","then","audioset","catch","error"],"mappings":"AASA,OAAO,MAAMA,YAAN,CAAmB;AAGxBC,EAAAA,WAAW,CAASC,sBAAT,EAA+C;AAAA,SAAtCA,sBAAsC,GAAtCA,sBAAsC;AAAA,SAFnDC,MAEmD,GAFtB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAEsB;;AAAA,SAEnDC,KAFmD,GAE5B,MAAMC,OAAO,CAACC,MAAR,EAFsB;AAAE;;AAIrDC,EAAAA,UAAP,CAAkBC,UAAlB,EAAmE;AACjE,SAAKC,SAAL,CAAe;AAAEN,MAAAA,KAAK,EAAE,SAAT;AAAoBO,MAAAA,OAAO,EAAEF;AAA7B,KAAf;AACA,WAAO,KAAKJ,KAAL,CAAWI,UAAX,EACJG,IADI,CACCC,QAAQ,IAAI,KAAKH,SAAL,CAAe;AAAEN,MAAAA,KAAK,EAAE,OAAT;AAAkBO,MAAAA,OAAO,EAAEE;AAA3B,KAAf,CADb,EAEJC,KAFI,CAEEC,KAAK,IAAI,KAAKL,SAAL,CAAe;AAAEN,MAAAA,KAAK,EAAE,OAAT;AAAkBW,MAAAA;AAAlB,KAAf,CAFX,CAAP;AAGD;;AAEOL,EAAAA,SAAR,CAAkBP,MAAlB,EAA8C;AAC5C,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKD,sBAAL,CAA4BC,MAA5B;AACA,WAAOA,MAAP;AACD;;AAlBuB","sourcesContent":["import { Bundle } from \"./Bundle\";\nimport { LoadStatus } from \"./LoadStatus\";\n\nexport type AudiosetLoadStatus = LoadStatus<Bundle, string>;\n\nexport type FetchAudioset = (id: string) => Promise<Bundle>;\n\ntype LoadListener = (status: AudiosetLoadStatus) => void;\n\nexport class BundleLoader {\n  public status: AudiosetLoadStatus = { stage: \"pending\" };\n\n  constructor(private onAudiosetStatusChange: LoadListener) {}\n\n  public fetch: FetchAudioset = () => Promise.reject();\n\n  public loadBundle(audiosetId: string): Promise<AudiosetLoadStatus> {\n    this.setStatus({ stage: \"loading\", payload: audiosetId });\n    return this.fetch(audiosetId)\n      .then(audioset => this.setStatus({ stage: \"ready\", payload: audioset }))\n      .catch(error => this.setStatus({ stage: \"error\", error }));\n  }\n\n  private setStatus(status: AudiosetLoadStatus) {\n    this.status = status;\n    this.onAudiosetStatusChange(status);\n    return status;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}