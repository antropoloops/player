{"ast":null,"code":"// Given a hash of GeoJSON objects, returns a hash of GeoJSON geometry objects.\n// Any null input geometry objects are represented as {type: null} in the output.\n// Any feature.{id,properties,bbox} are transferred to the output geometry object.\n// Each output geometry object is a shallow copy of the input (e.g., properties, coordinates)!\nexport default function (inputs) {\n  var outputs = {},\n      key;\n\n  for (key in inputs) {\n    outputs[key] = geomifyObject(inputs[key]);\n  }\n\n  return outputs;\n}\n\nfunction geomifyObject(input) {\n  return input == null ? {\n    type: null\n  } : (input.type === \"FeatureCollection\" ? geomifyFeatureCollection : input.type === \"Feature\" ? geomifyFeature : geomifyGeometry)(input);\n}\n\nfunction geomifyFeatureCollection(input) {\n  var output = {\n    type: \"GeometryCollection\",\n    geometries: input.features.map(geomifyFeature)\n  };\n  if (input.bbox != null) output.bbox = input.bbox;\n  return output;\n}\n\nfunction geomifyFeature(input) {\n  var output = geomifyGeometry(input.geometry),\n      key; // eslint-disable-line no-unused-vars\n\n  if (input.id != null) output.id = input.id;\n  if (input.bbox != null) output.bbox = input.bbox;\n\n  for (key in input.properties) {\n    output.properties = input.properties;\n    break;\n  }\n\n  return output;\n}\n\nfunction geomifyGeometry(input) {\n  if (input == null) return {\n    type: null\n  };\n  var output = input.type === \"GeometryCollection\" ? {\n    type: \"GeometryCollection\",\n    geometries: input.geometries.map(geomifyGeometry)\n  } : input.type === \"Point\" || input.type === \"MultiPoint\" ? {\n    type: input.type,\n    coordinates: input.coordinates\n  } : {\n    type: input.type,\n    arcs: input.coordinates\n  }; // TODO Check for unknown types?\n\n  if (input.bbox != null) output.bbox = input.bbox;\n  return output;\n}","map":null,"metadata":{},"sourceType":"module"}