{"ast":null,"code":"import { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createAudioContextConstructor = (baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor) => {\n  return class AudioContext extends baseAudioContextConstructor {\n    constructor(options = {}) {\n      if (nativeAudioContextConstructor === null) {\n        throw new Error('Missing the native AudioContext constructor.');\n      }\n\n      const nativeAudioContext = new nativeAudioContextConstructor(options); // Bug #131 Safari returns null when there are four other AudioContexts running already.\n\n      if (nativeAudioContext === null) {\n        throw createUnknownError();\n      } // Bug #51 Only Chrome and Opera throw an error if the given latencyHint is invalid.\n\n\n      if (!isValidLatencyHint(options.latencyHint)) {\n        throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n      } // Bug #150 Only Chrome, Firefox and Opera support setting the sampleRate.\n\n\n      if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n        throw createNotSupportedError();\n      }\n\n      super(nativeAudioContext, 2);\n      const latencyHint = options.latencyHint;\n      const sampleRate = nativeAudioContext.sampleRate; // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n\n      this._baseLatency = typeof nativeAudioContext.baseLatency === 'number' ? nativeAudioContext.baseLatency : latencyHint === 'balanced' ? 512 / sampleRate : latencyHint === 'interactive' || latencyHint === undefined ? 256 / sampleRate : latencyHint === 'playback' ? 1024 / sampleRate :\n      /*\n       * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n       * ScriptProcessorNode.\n       */\n      Math.max(2, Math.min(128, Math.round(latencyHint * sampleRate / 128))) * 128 / sampleRate;\n      this._nativeAudioContext = nativeAudioContext;\n      this._state = null;\n      /*\n       * Bug #34: Chrome and Opera pretend to be running right away, but fire an onstatechange event when the state actually changes\n       * to 'running'.\n       */\n\n      if (nativeAudioContext.state === 'running') {\n        this._state = 'suspended';\n\n        const revokeState = () => {\n          if (this._state === 'suspended') {\n            this._state = null;\n          }\n\n          nativeAudioContext.removeEventListener('statechange', revokeState);\n        };\n\n        nativeAudioContext.addEventListener('statechange', revokeState);\n      }\n    }\n\n    get baseLatency() {\n      return this._baseLatency;\n    }\n\n    get state() {\n      return this._state !== null ? this._state : this._nativeAudioContext.state;\n    }\n\n    close() {\n      // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n      if (this.state === 'closed') {\n        return this._nativeAudioContext.close().then(() => {\n          throw createInvalidStateError();\n        });\n      } // Bug #34: If the state was set to suspended before it should be revoked now.\n\n\n      if (this._state === 'suspended') {\n        this._state = null;\n      }\n\n      return this._nativeAudioContext.close();\n      /*\n       * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n       * ...then(() => deleteAudioGraph(this, this._nativeAudioContext));\n       */\n    }\n\n    createMediaElementSource(mediaElement) {\n      return new mediaElementAudioSourceNodeConstructor(this, {\n        mediaElement\n      });\n    }\n\n    createMediaStreamSource(mediaStream) {\n      return new mediaStreamAudioSourceNodeConstructor(this, {\n        mediaStream\n      });\n    }\n\n    createMediaStreamTrackSource(mediaStreamTrack) {\n      return new mediaStreamTrackAudioSourceNodeConstructor(this, {\n        mediaStreamTrack\n      });\n    }\n\n    resume() {\n      if (this._state === 'suspended') {\n        return new Promise((resolve, reject) => {\n          const resolvePromise = () => {\n            this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n\n            if (this._nativeAudioContext.state === 'running') {\n              resolve();\n            } else {\n              this.resume().then(resolve, reject);\n            }\n          };\n\n          this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n        });\n      }\n\n      return this._nativeAudioContext.resume().catch(err => {\n        // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.\n        // Bug #56: Safari invokes the catch handler but without an error.\n        if (err === undefined || err.code === 15) {\n          throw createInvalidStateError();\n        }\n\n        throw err; // tslint:disable-line:rxjs-throw-error\n      });\n    }\n\n    suspend() {\n      return this._nativeAudioContext.suspend().catch(err => {\n        // Bug #56: Safari invokes the catch handler but without an error.\n        if (err === undefined) {\n          throw createInvalidStateError();\n        }\n\n        throw err; // tslint:disable-line:rxjs-throw-error\n      });\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/audio-context-constructor.js"],"names":["isValidLatencyHint","createAudioContextConstructor","baseAudioContextConstructor","createInvalidStateError","createNotSupportedError","createUnknownError","mediaElementAudioSourceNodeConstructor","mediaStreamAudioSourceNodeConstructor","mediaStreamTrackAudioSourceNodeConstructor","nativeAudioContextConstructor","AudioContext","constructor","options","Error","nativeAudioContext","latencyHint","TypeError","sampleRate","undefined","_baseLatency","baseLatency","Math","max","min","round","_nativeAudioContext","_state","state","revokeState","removeEventListener","addEventListener","close","then","createMediaElementSource","mediaElement","createMediaStreamSource","mediaStream","createMediaStreamTrackSource","mediaStreamTrack","resume","Promise","resolve","reject","resolvePromise","catch","err","code","suspend"],"mappings":"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","sourcesContent":["import { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createAudioContextConstructor = (baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor) => {\n    return class AudioContext extends baseAudioContextConstructor {\n        constructor(options = {}) {\n            if (nativeAudioContextConstructor === null) {\n                throw new Error('Missing the native AudioContext constructor.');\n            }\n            const nativeAudioContext = new nativeAudioContextConstructor(options);\n            // Bug #131 Safari returns null when there are four other AudioContexts running already.\n            if (nativeAudioContext === null) {\n                throw createUnknownError();\n            }\n            // Bug #51 Only Chrome and Opera throw an error if the given latencyHint is invalid.\n            if (!isValidLatencyHint(options.latencyHint)) {\n                throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n            }\n            // Bug #150 Only Chrome, Firefox and Opera support setting the sampleRate.\n            if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n                throw createNotSupportedError();\n            }\n            super(nativeAudioContext, 2);\n            const { latencyHint } = options;\n            const { sampleRate } = nativeAudioContext;\n            // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n            this._baseLatency = (typeof nativeAudioContext.baseLatency === 'number')\n                ? nativeAudioContext.baseLatency\n                : (latencyHint === 'balanced')\n                    ? (512 / sampleRate)\n                    : (latencyHint === 'interactive' || latencyHint === undefined)\n                        ? (256 / sampleRate)\n                        : (latencyHint === 'playback')\n                            ? (1024 / sampleRate)\n                            /*\n                             * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n                             * ScriptProcessorNode.\n                             */\n                            : ((Math.max(2, Math.min(128, Math.round((latencyHint * sampleRate) / 128))) * 128) / sampleRate);\n            this._nativeAudioContext = nativeAudioContext;\n            this._state = null;\n            /*\n             * Bug #34: Chrome and Opera pretend to be running right away, but fire an onstatechange event when the state actually changes\n             * to 'running'.\n             */\n            if (nativeAudioContext.state === 'running') {\n                this._state = 'suspended';\n                const revokeState = () => {\n                    if (this._state === 'suspended') {\n                        this._state = null;\n                    }\n                    nativeAudioContext.removeEventListener('statechange', revokeState);\n                };\n                nativeAudioContext.addEventListener('statechange', revokeState);\n            }\n        }\n        get baseLatency() {\n            return this._baseLatency;\n        }\n        get state() {\n            return (this._state !== null) ? this._state : this._nativeAudioContext.state;\n        }\n        close() {\n            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n            if (this.state === 'closed') {\n                return this._nativeAudioContext\n                    .close()\n                    .then(() => {\n                    throw createInvalidStateError();\n                });\n            }\n            // Bug #34: If the state was set to suspended before it should be revoked now.\n            if (this._state === 'suspended') {\n                this._state = null;\n            }\n            return this._nativeAudioContext.close();\n            /*\n             * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n             * ...then(() => deleteAudioGraph(this, this._nativeAudioContext));\n             */\n        }\n        createMediaElementSource(mediaElement) {\n            return new mediaElementAudioSourceNodeConstructor(this, { mediaElement });\n        }\n        createMediaStreamSource(mediaStream) {\n            return new mediaStreamAudioSourceNodeConstructor(this, { mediaStream });\n        }\n        createMediaStreamTrackSource(mediaStreamTrack) {\n            return new mediaStreamTrackAudioSourceNodeConstructor(this, { mediaStreamTrack });\n        }\n        resume() {\n            if (this._state === 'suspended') {\n                return new Promise((resolve, reject) => {\n                    const resolvePromise = () => {\n                        this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n                        if (this._nativeAudioContext.state === 'running') {\n                            resolve();\n                        }\n                        else {\n                            this\n                                .resume()\n                                .then(resolve, reject);\n                        }\n                    };\n                    this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n                });\n            }\n            return this._nativeAudioContext\n                .resume()\n                .catch((err) => {\n                // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined || err.code === 15) {\n                    throw createInvalidStateError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n        suspend() {\n            return this._nativeAudioContext\n                .suspend()\n                .catch((err) => {\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined) {\n                    throw createInvalidStateError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-context-constructor.js.map"]},"metadata":{},"sourceType":"module"}