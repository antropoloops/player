{"ast":null,"code":"import _classCallCheck from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";/**\n * A simple pub/sub emitter\n */export var Emitter=/*#__PURE__*/function(){function Emitter(){_classCallCheck(this,Emitter);this.listeners=[];}_createClass(Emitter,[{key:\"emit\",value:function emit(event){this.listeners.forEach(function(listen){return listen(event);});}},{key:\"on\",value:function on(listener){var _this=this;this.listeners.push(listener);return function(){return _this.off(listener);};}},{key:\"off\",value:function off(listener){var index=this.listeners.indexOf(listener);if(index>-1){this.listeners.splice(index,1);}}}]);return Emitter;}();","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/Emitter.ts"],"names":["Emitter","listeners","event","forEach","listen","listener","push","off","index","indexOf","splice"],"mappings":"sTAGA;;GAGA,UAAaA,CAAAA,OAAb,+EACmBC,SADnB,CACmD,EADnD,wDAEcC,KAFd,CAEwB,CACpB,KAAKD,SAAL,CAAeE,OAAf,CAAuB,SAAAC,MAAM,QAAIA,CAAAA,MAAM,CAACF,KAAD,CAAV,EAA7B,EACD,CAJH,8BAKYG,QALZ,CAKgD,gBAC5C,KAAKJ,SAAL,CAAeK,IAAf,CAAoBD,QAApB,EACA,MAAO,kBAAM,CAAA,KAAI,CAACE,GAAL,CAASF,QAAT,CAAN,EAAP,CACD,CARH,gCASaA,QATb,CAS0C,CACtC,GAAMG,CAAAA,KAAK,CAAG,KAAKP,SAAL,CAAeQ,OAAf,CAAuBJ,QAAvB,CAAd,CACA,GAAIG,KAAK,CAAG,CAAC,CAAb,CAAgB,CACd,KAAKP,SAAL,CAAeS,MAAf,CAAsBF,KAAtB,CAA6B,CAA7B,EACD,CACF,CAdH","sourcesContent":["export type Listener<T> = (event: T) => void;\nexport type Unsubscribe = () => void;\n\n/**\n * A simple pub/sub emitter\n */\nexport class Emitter<T> {\n  private readonly listeners: Array<Listener<T>> = [];\n  public emit(event: T) {\n    this.listeners.forEach(listen => listen(event));\n  }\n  public on(listener: Listener<T>): Unsubscribe {\n    this.listeners.push(listener);\n    return () => this.off(listener);\n  }\n  public off(listener: Listener<T>): void {\n    const index = this.listeners.indexOf(listener);\n    if (index > -1) {\n      this.listeners.splice(index, 1);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}