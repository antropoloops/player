{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { abs, arcosh, arsinh, asin, atan2, cos, cosh, sign, sin, sinh, sqrt, tan } from \"./math.js\";\nexport function augustRaw(lambda, phi) {\n  var tanPhi = tan(phi / 2),\n      k = sqrt(1 - tanPhi * tanPhi),\n      c = 1 + k * cos(lambda /= 2),\n      x = sin(lambda) * k / c,\n      y = tanPhi / c,\n      x2 = x * x,\n      y2 = y * y;\n  return [4 / 3 * x * (3 + x2 - 3 * y2), 4 / 3 * y * (3 + 3 * x2 - y2)];\n}\n\naugustRaw.invert = function (x, y) {\n  x *= 3 / 8, y *= 3 / 8;\n  if (!x && abs(y) > 1) return null;\n  var x2 = x * x,\n      y2 = y * y,\n      s = 1 + x2 + y2,\n      sin3Eta = sqrt((s - sqrt(s * s - 4 * y * y)) / 2),\n      eta = asin(sin3Eta) / 3,\n      xi = sin3Eta ? arcosh(abs(y / sin3Eta)) / 3 : arsinh(abs(x)) / 3,\n      cosEta = cos(eta),\n      coshXi = cosh(xi),\n      d = coshXi * coshXi - cosEta * cosEta;\n  return [sign(x) * 2 * atan2(sinh(xi) * cosEta, 0.25 - d), sign(y) * 2 * atan2(coshXi * sin(eta), 0.25 + d)];\n};\n\nexport default function () {\n  return projection(augustRaw).scale(66.1603);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/august.js"],"names":["geoProjection","projection","abs","arcosh","arsinh","asin","atan2","cos","cosh","sign","sin","sinh","sqrt","tan","augustRaw","lambda","phi","tanPhi","k","c","x","y","x2","y2","invert","s","sin3Eta","eta","xi","cosEta","coshXi","d","scale"],"mappings":"AAAA,SAAQA,aAAa,IAAIC,UAAzB,QAA0C,QAA1C;AACA,SAAQC,GAAR,EAAaC,MAAb,EAAqBC,MAArB,EAA6BC,IAA7B,EAAmCC,KAAnC,EAA0CC,GAA1C,EAA+CC,IAA/C,EAAqDC,IAArD,EAA2DC,GAA3D,EAAgEC,IAAhE,EAAsEC,IAAtE,EAA4EC,GAA5E,QAAsF,WAAtF;AAEA,OAAO,SAASC,SAAT,CAAmBC,MAAnB,EAA2BC,GAA3B,EAAgC;AACrC,MAAIC,MAAM,GAAGJ,GAAG,CAACG,GAAG,GAAG,CAAP,CAAhB;AAAA,MACIE,CAAC,GAAGN,IAAI,CAAC,IAAIK,MAAM,GAAGA,MAAd,CADZ;AAAA,MAEIE,CAAC,GAAG,IAAID,CAAC,GAAGX,GAAG,CAACQ,MAAM,IAAI,CAAX,CAFnB;AAAA,MAGIK,CAAC,GAAGV,GAAG,CAACK,MAAD,CAAH,GAAcG,CAAd,GAAkBC,CAH1B;AAAA,MAIIE,CAAC,GAAGJ,MAAM,GAAGE,CAJjB;AAAA,MAKIG,EAAE,GAAGF,CAAC,GAAGA,CALb;AAAA,MAMIG,EAAE,GAAGF,CAAC,GAAGA,CANb;AAOA,SAAO,CACL,IAAI,CAAJ,GAAQD,CAAR,IAAa,IAAIE,EAAJ,GAAS,IAAIC,EAA1B,CADK,EAEL,IAAI,CAAJ,GAAQF,CAAR,IAAa,IAAI,IAAIC,EAAR,GAAaC,EAA1B,CAFK,CAAP;AAID;;AAEDT,SAAS,CAACU,MAAV,GAAmB,UAASJ,CAAT,EAAYC,CAAZ,EAAe;AAChCD,EAAAA,CAAC,IAAI,IAAI,CAAT,EAAYC,CAAC,IAAI,IAAI,CAArB;AACA,MAAI,CAACD,CAAD,IAAMlB,GAAG,CAACmB,CAAD,CAAH,GAAS,CAAnB,EAAsB,OAAO,IAAP;AACtB,MAAIC,EAAE,GAAGF,CAAC,GAAGA,CAAb;AAAA,MACIG,EAAE,GAAGF,CAAC,GAAGA,CADb;AAAA,MAEII,CAAC,GAAG,IAAIH,EAAJ,GAASC,EAFjB;AAAA,MAGIG,OAAO,GAAGd,IAAI,CAAC,CAACa,CAAC,GAAGb,IAAI,CAACa,CAAC,GAAGA,CAAJ,GAAQ,IAAIJ,CAAJ,GAAQA,CAAjB,CAAT,IAAgC,CAAjC,CAHlB;AAAA,MAIIM,GAAG,GAAGtB,IAAI,CAACqB,OAAD,CAAJ,GAAgB,CAJ1B;AAAA,MAKIE,EAAE,GAAGF,OAAO,GAAGvB,MAAM,CAACD,GAAG,CAACmB,CAAC,GAAGK,OAAL,CAAJ,CAAN,GAA2B,CAA9B,GAAkCtB,MAAM,CAACF,GAAG,CAACkB,CAAD,CAAJ,CAAN,GAAiB,CALnE;AAAA,MAMIS,MAAM,GAAGtB,GAAG,CAACoB,GAAD,CANhB;AAAA,MAOIG,MAAM,GAAGtB,IAAI,CAACoB,EAAD,CAPjB;AAAA,MAQIG,CAAC,GAAGD,MAAM,GAAGA,MAAT,GAAkBD,MAAM,GAAGA,MARnC;AASA,SAAO,CACLpB,IAAI,CAACW,CAAD,CAAJ,GAAU,CAAV,GAAcd,KAAK,CAACK,IAAI,CAACiB,EAAD,CAAJ,GAAWC,MAAZ,EAAoB,OAAOE,CAA3B,CADd,EAELtB,IAAI,CAACY,CAAD,CAAJ,GAAU,CAAV,GAAcf,KAAK,CAACwB,MAAM,GAAGpB,GAAG,CAACiB,GAAD,CAAb,EAAoB,OAAOI,CAA3B,CAFd,CAAP;AAID,CAhBD;;AAkBA,eAAe,YAAW;AACxB,SAAO9B,UAAU,CAACa,SAAD,CAAV,CACFkB,KADE,CACI,OADJ,CAAP;AAED","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, arcosh, arsinh, asin, atan2, cos, cosh, sign, sin, sinh, sqrt, tan} from \"./math.js\";\n\nexport function augustRaw(lambda, phi) {\n  var tanPhi = tan(phi / 2),\n      k = sqrt(1 - tanPhi * tanPhi),\n      c = 1 + k * cos(lambda /= 2),\n      x = sin(lambda) * k / c,\n      y = tanPhi / c,\n      x2 = x * x,\n      y2 = y * y;\n  return [\n    4 / 3 * x * (3 + x2 - 3 * y2),\n    4 / 3 * y * (3 + 3 * x2 - y2)\n  ];\n}\n\naugustRaw.invert = function(x, y) {\n  x *= 3 / 8, y *= 3 / 8;\n  if (!x && abs(y) > 1) return null;\n  var x2 = x * x,\n      y2 = y * y,\n      s = 1 + x2 + y2,\n      sin3Eta = sqrt((s - sqrt(s * s - 4 * y * y)) / 2),\n      eta = asin(sin3Eta) / 3,\n      xi = sin3Eta ? arcosh(abs(y / sin3Eta)) / 3 : arsinh(abs(x)) / 3,\n      cosEta = cos(eta),\n      coshXi = cosh(xi),\n      d = coshXi * coshXi - cosEta * cosEta;\n  return [\n    sign(x) * 2 * atan2(sinh(xi) * cosEta, 0.25 - d),\n    sign(y) * 2 * atan2(coshXi * sin(eta), 0.25 + d)\n  ];\n};\n\nexport default function() {\n  return projection(augustRaw)\n      .scale(66.1603);\n}\n"]},"metadata":{},"sourceType":"module"}