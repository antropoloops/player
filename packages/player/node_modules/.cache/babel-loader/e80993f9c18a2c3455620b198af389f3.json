{"ast":null,"code":"import debug from \"debug\";\nimport { AudioContext } from \"standardized-audio-context\";\nimport unmute from \"./unmute\";\nconst log = debug(\"atpls:context\");\nconst activeListeners = [];\nconst context = new AudioContext();\ncontext.onstatechange = handleStateChange;\n/**\n * Waits until the AudioContext is in \"running\" state\n *\n * @see https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio\n */\n\nexport function getActiveAudioContext() {\n  if (context.state === \"running\") {\n    return Promise.resolve(context);\n  } else {\n    return new Promise(resolve => {\n      activeListeners.push(resolve);\n    });\n  }\n}\nexport function autoUnlockAudio() {\n  function unlock() {\n    unmute(context);\n    const prevHandler = context.onstatechange; // FIXME: think better how to fix this\n\n    context.onstatechange = args => {\n      handleStateChange();\n\n      if (prevHandler) {\n        prevHandler(args);\n      }\n    };\n\n    context.resume().then(detach);\n  }\n\n  function detach() {\n    // Remove the touch start listener.\n    log(\"detach auto unlock\", context.state);\n    document.removeEventListener(\"touchstart\", unlock, true);\n    document.removeEventListener(\"touchend\", unlock, true);\n    document.removeEventListener(\"click\", unlock, true);\n  } // Setup a touch start listener to attempt an unlock in.\n\n\n  log(\"attach auto unlock\");\n  document.addEventListener(\"touchstart\", unlock, true);\n  document.addEventListener(\"touchend\", unlock, true);\n  document.addEventListener(\"click\", unlock, true);\n}\n\nfunction handleStateChange() {\n  const state = context.state;\n  log(\"state %s\", state);\n\n  if (state === \"running\") {\n    const listeners = activeListeners.slice();\n    activeListeners.length = 0;\n    listeners.forEach(listener => listener(context));\n  }\n}\n\nhandleStateChange();","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/packages/player/src/active-audio-context/index.ts"],"names":["debug","AudioContext","unmute","log","activeListeners","context","onstatechange","handleStateChange","getActiveAudioContext","state","Promise","resolve","push","autoUnlockAudio","unlock","prevHandler","args","resume","then","detach","document","removeEventListener","addEventListener","listeners","slice","length","forEach","listener"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,MAAMC,GAAG,GAAGH,KAAK,CAAC,eAAD,CAAjB;AAGA,MAAMI,eAAiC,GAAG,EAA1C;AACA,MAAMC,OAAO,GAAG,IAAIJ,YAAJ,EAAhB;AACAI,OAAO,CAACC,aAAR,GAAwBC,iBAAxB;AAEA;;;;;;AAKA,OAAO,SAASC,qBAAT,GAAwD;AAC7D,MAAIH,OAAO,CAACI,KAAR,KAAkB,SAAtB,EAAiC;AAC/B,WAAOC,OAAO,CAACC,OAAR,CAAgBN,OAAhB,CAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAIK,OAAJ,CAA2BC,OAAD,IAAa;AAC5CP,MAAAA,eAAe,CAACQ,IAAhB,CAAqBD,OAArB;AACD,KAFM,CAAP;AAGD;AACF;AAED,OAAO,SAASE,eAAT,GAA2B;AAChC,WAASC,MAAT,GAAkB;AAChBZ,IAAAA,MAAM,CAACG,OAAD,CAAN;AACA,UAAMU,WAAW,GAAGV,OAAO,CAACC,aAA5B,CAFgB,CAGhB;;AACAD,IAAAA,OAAO,CAACC,aAAR,GAAyBU,IAAD,IAAU;AAChCT,MAAAA,iBAAiB;;AACjB,UAAIQ,WAAJ,EAAiB;AACfA,QAAAA,WAAW,CAACC,IAAD,CAAX;AACD;AACF,KALD;;AAMAX,IAAAA,OAAO,CAACY,MAAR,GAAiBC,IAAjB,CAAsBC,MAAtB;AACD;;AAED,WAASA,MAAT,GAAkB;AAChB;AACAhB,IAAAA,GAAG,CAAC,oBAAD,EAAuBE,OAAO,CAACI,KAA/B,CAAH;AACAW,IAAAA,QAAQ,CAACC,mBAAT,CAA6B,YAA7B,EAA2CP,MAA3C,EAAmD,IAAnD;AACAM,IAAAA,QAAQ,CAACC,mBAAT,CAA6B,UAA7B,EAAyCP,MAAzC,EAAiD,IAAjD;AACAM,IAAAA,QAAQ,CAACC,mBAAT,CAA6B,OAA7B,EAAsCP,MAAtC,EAA8C,IAA9C;AACD,GApB+B,CAsBhC;;;AACAX,EAAAA,GAAG,CAAC,oBAAD,CAAH;AACAiB,EAAAA,QAAQ,CAACE,gBAAT,CAA0B,YAA1B,EAAwCR,MAAxC,EAAgD,IAAhD;AACAM,EAAAA,QAAQ,CAACE,gBAAT,CAA0B,UAA1B,EAAsCR,MAAtC,EAA8C,IAA9C;AACAM,EAAAA,QAAQ,CAACE,gBAAT,CAA0B,OAA1B,EAAmCR,MAAnC,EAA2C,IAA3C;AACD;;AAED,SAASP,iBAAT,GAA6B;AAC3B,QAAME,KAAK,GAAGJ,OAAO,CAACI,KAAtB;AACAN,EAAAA,GAAG,CAAC,UAAD,EAAaM,KAAb,CAAH;;AACA,MAAIA,KAAK,KAAK,SAAd,EAAyB;AACvB,UAAMc,SAAS,GAAGnB,eAAe,CAACoB,KAAhB,EAAlB;AACApB,IAAAA,eAAe,CAACqB,MAAhB,GAAyB,CAAzB;AACAF,IAAAA,SAAS,CAACG,OAAV,CAAmBC,QAAD,IAAcA,QAAQ,CAACtB,OAAD,CAAxC;AACD;AACF;;AAEDE,iBAAiB","sourcesContent":["import debug from \"debug\";\nimport { AudioContext } from \"standardized-audio-context\";\nimport unmute from \"./unmute\";\n\nconst log = debug(\"atpls:context\");\n\ntype ResolveContext = (value: AudioContext) => void;\nconst activeListeners: ResolveContext[] = [];\nconst context = new AudioContext();\ncontext.onstatechange = handleStateChange;\n\n/**\n * Waits until the AudioContext is in \"running\" state\n *\n * @see https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio\n */\nexport function getActiveAudioContext(): Promise<AudioContext> {\n  if (context.state === \"running\") {\n    return Promise.resolve(context);\n  } else {\n    return new Promise<AudioContext>((resolve) => {\n      activeListeners.push(resolve);\n    });\n  }\n}\n\nexport function autoUnlockAudio() {\n  function unlock() {\n    unmute(context);\n    const prevHandler = context.onstatechange;\n    // FIXME: think better how to fix this\n    context.onstatechange = (args) => {\n      handleStateChange();\n      if (prevHandler) {\n        prevHandler(args);\n      }\n    };\n    context.resume().then(detach);\n  }\n\n  function detach() {\n    // Remove the touch start listener.\n    log(\"detach auto unlock\", context.state);\n    document.removeEventListener(\"touchstart\", unlock, true);\n    document.removeEventListener(\"touchend\", unlock, true);\n    document.removeEventListener(\"click\", unlock, true);\n  }\n\n  // Setup a touch start listener to attempt an unlock in.\n  log(\"attach auto unlock\");\n  document.addEventListener(\"touchstart\", unlock, true);\n  document.addEventListener(\"touchend\", unlock, true);\n  document.addEventListener(\"click\", unlock, true);\n}\n\nfunction handleStateChange() {\n  const state = context.state;\n  log(\"state %s\", state);\n  if (state === \"running\") {\n    const listeners = activeListeners.slice();\n    activeListeners.length = 0;\n    listeners.forEach((listener) => listener(context));\n  }\n}\n\nhandleStateChange();\n"]},"metadata":{},"sourceType":"module"}