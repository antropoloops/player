{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createDynamicsCompressorNodeRendererFactory = function createDynamicsCompressorNodeRendererFactory(connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeDynamicsCompressorNodes = new WeakMap();\n\n    var createDynamicsCompressorNode = function createDynamicsCompressorNode(proxy, nativeOfflineAudioContext, trace) {\n      var nativeDynamicsCompressorNode, nativeDynamicsCompressorNodeIsOwnedByContext, options;\n      return _regeneratorRuntime.async(function createDynamicsCompressorNode$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              nativeDynamicsCompressorNode = getNativeAudioNode(proxy);\n              /*\n               * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n               * created again.\n               */\n\n              nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n\n              if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                options = {\n                  attack: nativeDynamicsCompressorNode.attack.value,\n                  channelCount: nativeDynamicsCompressorNode.channelCount,\n                  channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n                  channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n                  knee: nativeDynamicsCompressorNode.knee.value,\n                  ratio: nativeDynamicsCompressorNode.ratio.value,\n                  release: nativeDynamicsCompressorNode.release.value,\n                  threshold: nativeDynamicsCompressorNode.threshold.value\n                };\n                nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n              }\n\n              renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n\n              if (nativeDynamicsCompressorNodeIsOwnedByContext) {\n                _context.next = 17;\n                break;\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack, trace));\n\n            case 7:\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee, trace));\n\n            case 9:\n              _context.next = 11;\n              return _regeneratorRuntime.awrap(renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio, trace));\n\n            case 11:\n              _context.next = 13;\n              return _regeneratorRuntime.awrap(renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release, trace));\n\n            case 13:\n              _context.next = 15;\n              return _regeneratorRuntime.awrap(renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold, trace));\n\n            case 15:\n              _context.next = 27;\n              break;\n\n            case 17:\n              _context.next = 19;\n              return _regeneratorRuntime.awrap(connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack, trace));\n\n            case 19:\n              _context.next = 21;\n              return _regeneratorRuntime.awrap(connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee, trace));\n\n            case 21:\n              _context.next = 23;\n              return _regeneratorRuntime.awrap(connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio, trace));\n\n            case 23:\n              _context.next = 25;\n              return _regeneratorRuntime.awrap(connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release, trace));\n\n            case 25:\n              _context.next = 27;\n              return _regeneratorRuntime.awrap(connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold, trace));\n\n            case 27:\n              _context.next = 29;\n              return _regeneratorRuntime.awrap(renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode, trace));\n\n            case 29:\n              return _context.abrupt(\"return\", nativeDynamicsCompressorNode);\n\n            case 30:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext, trace) {\n        var renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeDynamicsCompressorNode !== undefined) {\n          return Promise.resolve(renderedNativeDynamicsCompressorNode);\n        }\n\n        return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext, trace);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/dynamics-compressor-node-renderer-factory.js"],"names":["isOwnedByContext","createDynamicsCompressorNodeRendererFactory","connectAudioParam","createNativeDynamicsCompressorNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeDynamicsCompressorNodes","WeakMap","createDynamicsCompressorNode","proxy","nativeOfflineAudioContext","trace","nativeDynamicsCompressorNode","nativeDynamicsCompressorNodeIsOwnedByContext","options","attack","value","channelCount","channelCountMode","channelInterpretation","knee","ratio","release","threshold","set","render","renderedNativeDynamicsCompressorNode","get","undefined","Promise","resolve"],"mappings":"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","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDynamicsCompressorNodeRendererFactory = (connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeDynamicsCompressorNodes = new WeakMap();\n        const createDynamicsCompressorNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeDynamicsCompressorNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n             * created again.\n             */\n            const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                const options = {\n                    attack: nativeDynamicsCompressorNode.attack.value,\n                    channelCount: nativeDynamicsCompressorNode.channelCount,\n                    channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n                    channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n                    knee: nativeDynamicsCompressorNode.knee.value,\n                    ratio: nativeDynamicsCompressorNode.ratio.value,\n                    release: nativeDynamicsCompressorNode.release.value,\n                    threshold: nativeDynamicsCompressorNode.threshold.value\n                };\n                nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode, trace);\n            return nativeDynamicsCompressorNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeDynamicsCompressorNode !== undefined) {\n                    return Promise.resolve(renderedNativeDynamicsCompressorNode);\n                }\n                return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/dynamics-compressor-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}