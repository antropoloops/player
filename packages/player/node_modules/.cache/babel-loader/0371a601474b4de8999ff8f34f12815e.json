{"ast":null,"code":"import _defineProperty from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport debug from \"debug\";\nimport { KeyboardControler } from \"./KeyboardControler\";\nconst log = debug(\"atpls:control\");\n\nclass ControlStateManager {\n  constructor() {\n    this.clipStateByClipId = {};\n    this.clipIdsOfTrack = {};\n    this.trackIdOfClip = {};\n    this.trackStateByTrackId = {};\n    this.playingClipsCount = 0;\n    this.playingTracksCount = 0;\n  }\n\n  updateTrackCount(n) {\n    return this.playingTracksCount += n;\n  }\n\n  updateClipCount(n) {\n    return this.playingClipsCount += n;\n  }\n\n  addClip(clip) {\n    this.clipStateByClipId[clip.id] = {\n      state: \"stopped\"\n    };\n    this.trackIdOfClip[clip.id] = clip.trackId;\n  }\n\n  addTrack(track) {\n    const volume = track.volume || 1;\n    this.trackStateByTrackId[track.id] = {\n      state: \"stopped\",\n      volume\n    };\n    this.clipIdsOfTrack[track.id] = track.clipIds;\n  }\n\n  getAllClipIds() {\n    return Object.keys(this.clipStateByClipId);\n  }\n\n  getAllTrackIds() {\n    return Object.keys(this.trackStateByTrackId);\n  }\n\n  getClipState(clipId) {\n    return this.clipStateByClipId[clipId];\n  }\n\n  setClipState(clipId, newStsate) {\n    this.clipStateByClipId[clipId] = newStsate;\n  }\n\n  getTrackState(trackId) {\n    return this.trackStateByTrackId[trackId];\n  }\n\n  setTrackState(trackId, state) {\n    this.trackStateByTrackId[trackId] = state;\n  }\n\n  getTrackIdOfClip(clipId) {\n    return this.trackIdOfClip[clipId];\n  }\n\n  getClipIdsOfTrack(trackId) {\n    return this.clipIdsOfTrack[trackId];\n  }\n\n  getState() {\n    return {\n      playingClipsCount: this.playingClipsCount,\n      playingTracksCount: this.playingTracksCount,\n      clips: _objectSpread({}, this.clipStateByClipId),\n      tracks: _objectSpread({}, this.trackStateByTrackId)\n    };\n  }\n\n}\n/**\n * Controls the playing state of clips and tracks\n */\n\n\nexport class AudiosetControl {\n  constructor(audioset, listener) {\n    this.listener = listener;\n    this.keyboard = void 0;\n    this.commands = [];\n    this.manager = new ControlStateManager();\n    log(\"create control\");\n    this.keyboard = new KeyboardControler(audioset, this);\n    audioset.clips.forEach(clip => this.manager.addClip(clip));\n    audioset.tracks.forEach(track => this.manager.addTrack(track));\n  }\n\n  toggleClip(clipId, time) {\n    const clipState = this.manager.getClipState(clipId);\n\n    if (!clipState) {\n      return;\n    } else if (clipState.state === \"stopped\") {\n      this.startClip(clipId, time);\n    } else if (clipState.state === \"playing\") {\n      this.stopClip(clipId, time);\n    }\n  }\n  /**\n   * Start a clip\n   * @param clipId\n   */\n\n\n  startClip(clipId, time) {\n    const clipState = this.manager.getClipState(clipId);\n\n    if (!clipState || clipState.state === \"playing\") {\n      return;\n    }\n\n    log(\"start clip %s %o\", clipId, time);\n    const trackId = this.manager.getTrackIdOfClip(clipId);\n    const sameTrackClipIds = this.manager.getClipIdsOfTrack(trackId);\n    sameTrackClipIds.forEach(trackClipId => this.stopClipCommand(trackClipId, time));\n    this.startTrackCommand(trackId, time);\n    this.startClipCommand(clipId, time);\n    this.sendCommands();\n  }\n  /**\n   * Stops a clip\n   */\n\n\n  stopClip(clipId, time) {\n    const clipState = this.manager.getClipState(clipId);\n\n    if (!clipState || clipState.state === \"stopped\") {\n      return;\n    }\n\n    const trackId = this.manager.getTrackIdOfClip(clipId);\n    this.stopClipCommand(clipId, time);\n    this.stopTrackCommand(trackId, time);\n    this.sendCommands();\n  }\n  /**\n   * Stops all clips\n   */\n\n\n  stopAll(time) {\n    this.manager.getAllClipIds().forEach(clipId => this.stopClipCommand(clipId, time));\n    this.manager.getAllTrackIds().forEach(trackId => this.stopTrackCommand(trackId, time));\n    this.sendCommands();\n  }\n\n  getState() {\n    return this.manager.getState();\n  } //// PRIVATE ////\n\n\n  sendCommands() {\n    this.commands.forEach(command => {\n      this.listener.onControlCommand(command);\n    });\n    this.commands = [];\n    this.listener.onControlStateChanged(this.getState());\n  }\n\n  startClipCommand(clipId, time) {\n    const clipState = this.manager.getClipState(clipId);\n\n    if (clipState.state === \"playing\") {\n      return;\n    }\n\n    this.manager.updateClipCount(+1);\n    this.manager.setClipState(clipId, {\n      state: \"playing\"\n    });\n    this.commands.push({\n      command: \"startClip\",\n      clipId,\n      time\n    });\n  }\n\n  stopClipCommand(clipId, time) {\n    const clipState = this.manager.getClipState(clipId);\n\n    if (clipState.state === \"stopped\") {\n      return;\n    }\n\n    this.manager.updateClipCount(-1);\n    this.manager.setClipState(clipId, {\n      state: \"stopped\"\n    });\n    this.commands.push({\n      command: \"stopClip\",\n      clipId,\n      time\n    });\n  }\n\n  startTrackCommand(trackId, time) {\n    const trackState = this.manager.getTrackState(trackId);\n\n    if (trackState.state === \"playing\") {\n      return;\n    }\n\n    this.manager.updateTrackCount(1);\n    this.manager.setTrackState(trackId, {\n      state: \"playing\",\n      volume: trackState.volume\n    });\n    this.commands.push({\n      command: \"startTrack\",\n      trackId,\n      time\n    });\n  }\n\n  stopTrackCommand(trackId, time) {\n    const trackState = this.manager.getTrackState(trackId);\n\n    if (trackState.state === \"stopped\") {\n      return;\n    }\n\n    this.manager.updateTrackCount(-1);\n    this.manager.setTrackState(trackId, {\n      state: \"stopped\",\n      volume: trackState.volume\n    });\n    this.commands.push({\n      command: \"stopTrack\",\n      trackId,\n      time\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/Control/AudiosetControl.ts"],"names":["debug","KeyboardControler","log","ControlStateManager","clipStateByClipId","clipIdsOfTrack","trackIdOfClip","trackStateByTrackId","playingClipsCount","playingTracksCount","updateTrackCount","n","updateClipCount","addClip","clip","id","state","trackId","addTrack","track","volume","clipIds","getAllClipIds","Object","keys","getAllTrackIds","getClipState","clipId","setClipState","newStsate","getTrackState","setTrackState","getTrackIdOfClip","getClipIdsOfTrack","getState","clips","tracks","AudiosetControl","constructor","audioset","listener","keyboard","commands","manager","forEach","toggleClip","time","clipState","startClip","stopClip","sameTrackClipIds","trackClipId","stopClipCommand","startTrackCommand","startClipCommand","sendCommands","stopTrackCommand","stopAll","command","onControlCommand","onControlStateChanged","push","trackState"],"mappings":"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","sourcesContent":["import debug from \"debug\";\nimport { Audioset, Clip, Track } from \"../../audioset\";\nimport { ControlCommand } from \"./ControlCommand\";\nimport {\n  ClipPlayingStateByClipId,\n  ControlState,\n  TrackPlayingStateByTrackId,\n} from \"./ControlState\";\nimport { KeyboardControler } from \"./KeyboardControler\";\nimport { ClipPlayingState, TrackPlayingState } from \"./PlayingState\";\n\nconst log = debug(\"atpls:control\");\n\nexport interface ControlListener {\n  onControlStateChanged: (state: ControlState) => void;\n  onControlCommand: (command: ControlCommand) => void;\n}\n\nexport interface PlayerControl {\n  readonly keyboard: KeyboardControler;\n  getState(): ControlState;\n  toggleClip(clipId: string, time: number): void;\n  stopClip(clipId: string, time: number): void;\n  startClip(clipId: string, time: number): void;\n  stopAll(time: number): void;\n}\n\nclass ControlStateManager {\n  private clipStateByClipId: ClipPlayingStateByClipId = {};\n  private clipIdsOfTrack: Record<string, string[]> = {};\n  private trackIdOfClip: Record<string, string> = {};\n  private trackStateByTrackId: TrackPlayingStateByTrackId = {};\n  private playingClipsCount: number = 0;\n  private playingTracksCount: number = 0;\n\n  public updateTrackCount(n: number) {\n    return (this.playingTracksCount += n);\n  }\n  public updateClipCount(n: number) {\n    return (this.playingClipsCount += n);\n  }\n\n  public addClip(clip: Clip) {\n    this.clipStateByClipId[clip.id] = { state: \"stopped\" };\n    this.trackIdOfClip[clip.id] = clip.trackId;\n  }\n\n  public addTrack(track: Track) {\n    const volume = track.volume || 1;\n    this.trackStateByTrackId[track.id] = { state: \"stopped\", volume };\n    this.clipIdsOfTrack[track.id] = track.clipIds;\n  }\n\n  public getAllClipIds() {\n    return Object.keys(this.clipStateByClipId);\n  }\n\n  public getAllTrackIds() {\n    return Object.keys(this.trackStateByTrackId);\n  }\n\n  public getClipState(clipId: string) {\n    return this.clipStateByClipId[clipId];\n  }\n\n  public setClipState(clipId: string, newStsate: ClipPlayingState) {\n    this.clipStateByClipId[clipId] = newStsate;\n  }\n  public getTrackState(trackId: string) {\n    return this.trackStateByTrackId[trackId];\n  }\n  public setTrackState(trackId: string, state: TrackPlayingState) {\n    this.trackStateByTrackId[trackId] = state;\n  }\n\n  public getTrackIdOfClip(clipId: string) {\n    return this.trackIdOfClip[clipId];\n  }\n  public getClipIdsOfTrack(trackId: string) {\n    return this.clipIdsOfTrack[trackId];\n  }\n  public getState(): ControlState {\n    return {\n      playingClipsCount: this.playingClipsCount,\n      playingTracksCount: this.playingTracksCount,\n      clips: { ...this.clipStateByClipId },\n      tracks: { ...this.trackStateByTrackId },\n    };\n  }\n}\n\n/**\n * Controls the playing state of clips and tracks\n */\nexport class AudiosetControl implements PlayerControl {\n  public readonly keyboard: KeyboardControler;\n  private commands: ControlCommand[] = [];\n  private manager = new ControlStateManager();\n\n  constructor(audioset: Audioset, private listener: ControlListener) {\n    log(\"create control\");\n    this.keyboard = new KeyboardControler(audioset, this);\n    audioset.clips.forEach((clip: Clip) => this.manager.addClip(clip));\n    audioset.tracks.forEach(track => this.manager.addTrack(track));\n  }\n\n  public toggleClip(clipId: string, time: number) {\n    const clipState = this.manager.getClipState(clipId);\n    if (!clipState) {\n      return;\n    } else if (clipState.state === \"stopped\") {\n      this.startClip(clipId, time);\n    } else if (clipState.state === \"playing\") {\n      this.stopClip(clipId, time);\n    }\n  }\n\n  /**\n   * Start a clip\n   * @param clipId\n   */\n  public startClip(clipId: string, time: number) {\n    const clipState = this.manager.getClipState(clipId);\n    if (!clipState || clipState.state === \"playing\") {\n      return;\n    }\n    log(\"start clip %s %o\", clipId, time);\n\n    const trackId = this.manager.getTrackIdOfClip(clipId);\n    const sameTrackClipIds = this.manager.getClipIdsOfTrack(trackId);\n    sameTrackClipIds.forEach(trackClipId =>\n      this.stopClipCommand(trackClipId, time),\n    );\n    this.startTrackCommand(trackId, time);\n    this.startClipCommand(clipId, time);\n    this.sendCommands();\n  }\n\n  /**\n   * Stops a clip\n   */\n  public stopClip(clipId: string, time: number) {\n    const clipState = this.manager.getClipState(clipId);\n    if (!clipState || clipState.state === \"stopped\") {\n      return;\n    }\n\n    const trackId = this.manager.getTrackIdOfClip(clipId);\n\n    this.stopClipCommand(clipId, time);\n    this.stopTrackCommand(trackId, time);\n    this.sendCommands();\n  }\n\n  /**\n   * Stops all clips\n   */\n  public stopAll(time: number) {\n    this.manager\n      .getAllClipIds()\n      .forEach(clipId => this.stopClipCommand(clipId, time));\n    this.manager\n      .getAllTrackIds()\n      .forEach(trackId => this.stopTrackCommand(trackId, time));\n    this.sendCommands();\n  }\n\n  public getState() {\n    return this.manager.getState();\n  }\n\n  //// PRIVATE ////\n  private sendCommands() {\n    this.commands.forEach(command => {\n      this.listener.onControlCommand(command);\n    });\n    this.commands = [];\n\n    this.listener.onControlStateChanged(this.getState());\n  }\n\n  private startClipCommand(clipId: string, time: number) {\n    const clipState = this.manager.getClipState(clipId);\n    if (clipState.state === \"playing\") {\n      return;\n    }\n\n    this.manager.updateClipCount(+1);\n    this.manager.setClipState(clipId, { state: \"playing\" });\n    this.commands.push({ command: \"startClip\", clipId, time });\n  }\n\n  private stopClipCommand(clipId: string, time: number) {\n    const clipState = this.manager.getClipState(clipId);\n    if (clipState.state === \"stopped\") {\n      return;\n    }\n\n    this.manager.updateClipCount(-1);\n    this.manager.setClipState(clipId, { state: \"stopped\" });\n    this.commands.push({ command: \"stopClip\", clipId, time });\n  }\n  private startTrackCommand(trackId: string, time: number) {\n    const trackState = this.manager.getTrackState(trackId);\n    if (trackState.state === \"playing\") {\n      return;\n    }\n\n    this.manager.updateTrackCount(1);\n    this.manager.setTrackState(trackId, {\n      state: \"playing\",\n      volume: trackState.volume,\n    });\n    this.commands.push({ command: \"startTrack\", trackId, time });\n  }\n\n  private stopTrackCommand(trackId: string, time: number) {\n    const trackState = this.manager.getTrackState(trackId);\n    if (trackState.state === \"stopped\") {\n      return;\n    }\n\n    this.manager.updateTrackCount(-1);\n    this.manager.setTrackState(trackId, {\n      state: \"stopped\",\n      volume: trackState.volume,\n    });\n    this.commands.push({ command: \"stopTrack\", trackId, time });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}