{"ast":null,"code":"import { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createStartRendering = (audioBufferStore, cacheTestResult, getAudioNodeRenderer, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n  return (destination, nativeOfflineAudioContext) => getAudioNodeRenderer(destination).render(destination, nativeOfflineAudioContext, []).then(() => renderNativeOfflineAudioContext(nativeOfflineAudioContext)).then(audioBuffer => {\n    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n    // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n    if (typeof audioBuffer.copyFromChannel !== 'function') {\n      wrapAudioBufferCopyChannelMethods(audioBuffer);\n      wrapAudioBufferGetChannelDataMethod(audioBuffer); // Bug #157: Only Chrome & Opera do allow the bufferOffset to be out-of-bounds.\n    } else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n      wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n    }\n\n    audioBufferStore.add(audioBuffer);\n    return audioBuffer;\n  });\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/start-rendering.js"],"names":["wrapAudioBufferGetChannelDataMethod","createStartRendering","audioBufferStore","cacheTestResult","getAudioNodeRenderer","renderNativeOfflineAudioContext","testAudioBufferCopyChannelMethodsOutOfBoundsSupport","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","destination","nativeOfflineAudioContext","render","then","audioBuffer","copyFromChannel","add"],"mappings":"AAAA,SAASA,mCAAT,QAAoD,sDAApD;AACA,OAAO,MAAMC,oBAAoB,GAAG,CAACC,gBAAD,EAAmBC,eAAnB,EAAoCC,oBAApC,EAA0DC,+BAA1D,EAA2FC,mDAA3F,EAAgJC,iCAAhJ,EAAmLC,4CAAnL,KAAoO;AACpQ,SAAO,CAACC,WAAD,EAAcC,yBAAd,KAA4CN,oBAAoB,CAACK,WAAD,CAApB,CAC9CE,MAD8C,CACvCF,WADuC,EAC1BC,yBAD0B,EACC,EADD,EAE9CE,IAF8C,CAEzC,MAAMP,+BAA+B,CAACK,yBAAD,CAFI,EAG9CE,IAH8C,CAGxCC,WAAD,IAAiB;AACvB;AACA;AACA,QAAI,OAAOA,WAAW,CAACC,eAAnB,KAAuC,UAA3C,EAAuD;AACnDP,MAAAA,iCAAiC,CAACM,WAAD,CAAjC;AACAb,MAAAA,mCAAmC,CAACa,WAAD,CAAnC,CAFmD,CAGnD;AACH,KAJD,MAKK,IAAI,CAACV,eAAe,CAACG,mDAAD,EAAsD,MAAMA,mDAAmD,CAACO,WAAD,CAA/G,CAApB,EAAmJ;AACpJL,MAAAA,4CAA4C,CAACK,WAAD,CAA5C;AACH;;AACDX,IAAAA,gBAAgB,CAACa,GAAjB,CAAqBF,WAArB;AACA,WAAOA,WAAP;AACH,GAhBkD,CAAnD;AAiBH,CAlBM","sourcesContent":["import { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createStartRendering = (audioBufferStore, cacheTestResult, getAudioNodeRenderer, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n    return (destination, nativeOfflineAudioContext) => getAudioNodeRenderer(destination)\n        .render(destination, nativeOfflineAudioContext, [])\n        .then(() => renderNativeOfflineAudioContext(nativeOfflineAudioContext))\n        .then((audioBuffer) => {\n        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n        // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n        if (typeof audioBuffer.copyFromChannel !== 'function') {\n            wrapAudioBufferCopyChannelMethods(audioBuffer);\n            wrapAudioBufferGetChannelDataMethod(audioBuffer);\n            // Bug #157: Only Chrome & Opera do allow the bufferOffset to be out-of-bounds.\n        }\n        else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n            wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n        }\n        audioBufferStore.add(audioBuffer);\n        return audioBuffer;\n    });\n};\n//# sourceMappingURL=/build/es2018/factories/start-rendering.js.map"]},"metadata":{},"sourceType":"module"}