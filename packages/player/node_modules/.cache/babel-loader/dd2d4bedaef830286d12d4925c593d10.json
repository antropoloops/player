{"ast":null,"code":"function compare(a, b) {\n  return a[1][2] - b[1][2];\n}\n\nexport default function () {\n  var heap = {},\n      array = [],\n      size = 0;\n\n  heap.push = function (object) {\n    up(array[object._ = size] = object, size++);\n    return size;\n  };\n\n  heap.pop = function () {\n    if (size <= 0) return;\n    var removed = array[0],\n        object;\n    if (--size > 0) object = array[size], down(array[object._ = 0] = object, 0);\n    return removed;\n  };\n\n  heap.remove = function (removed) {\n    var i = removed._,\n        object;\n    if (array[i] !== removed) return; // invalid request\n\n    if (i !== --size) object = array[size], (compare(object, removed) < 0 ? up : down)(array[object._ = i] = object, i);\n    return i;\n  };\n\n  function up(object, i) {\n    while (i > 0) {\n      var j = (i + 1 >> 1) - 1,\n          parent = array[j];\n      if (compare(object, parent) >= 0) break;\n      array[parent._ = i] = parent;\n      array[object._ = i = j] = object;\n    }\n  }\n\n  function down(object, i) {\n    while (true) {\n      var r = i + 1 << 1,\n          l = r - 1,\n          j = i,\n          child = array[j];\n      if (l < size && compare(array[l], child) < 0) child = array[j = l];\n      if (r < size && compare(array[r], child) < 0) child = array[j = r];\n      if (j === i) break;\n      array[child._ = i] = child;\n      array[object._ = i = j] = object;\n    }\n  }\n\n  return heap;\n}","map":null,"metadata":{},"sourceType":"module"}