{"ast":null,"code":"import { AUDIO_NODE_STORE, EVENT_LISTENERS } from '../globals';\nimport { isAudioNode } from '../guards/audio-node';\nimport { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nimport { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { connectNativeAudioNodeToNativeAudioNode } from '../helpers/connect-native-audio-node-to-native-audio-node';\nimport { deleteEventListenerOfAudioNode } from '../helpers/delete-event-listeners-of-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from '../helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from '../helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from '../helpers/get-event-listeners-of-audio-node';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { getNativeAudioParam } from '../helpers/get-native-audio-param';\nimport { getValueForKey } from '../helpers/get-value-for-key';\nimport { insertElementInSet } from '../helpers/insert-element-in-set';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { isPartOfACycle } from '../helpers/is-part-of-a-cycle';\nimport { isPassiveAudioNode } from '../helpers/is-passive-audio-node';\nimport { pickElementFromSet } from '../helpers/pick-element-from-set';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassiveWhenNecessary } from '../helpers/set-internal-state-to-passive-when-necessary';\nimport { testAudioNodeDisconnectMethodSupport } from '../helpers/test-audio-node-disconnect-method-support';\nimport { visitEachAudioNodeOnce } from '../helpers/visit-each-audio-node-once';\nimport { wrapAudioNodeDisconnectMethod } from '../helpers/wrap-audio-node-disconnect-method';\n\nconst addActiveInputConnectionToAudioNode = (activeInputs, source, [output, input, eventListener], ignoreDuplicates) => {\n  insertElementInSet(activeInputs[input], [source, output, eventListener], activeInputConnection => activeInputConnection[0] === source && activeInputConnection[1] === output, ignoreDuplicates);\n};\n\nconst addActiveInputConnectionToAudioParam = (activeInputs, source, [output, eventListener], ignoreDuplicates) => {\n  insertElementInSet(activeInputs, [source, output, eventListener], activeInputConnection => activeInputConnection[0] === source && activeInputConnection[1] === output, ignoreDuplicates);\n};\n\nconst deleteActiveInputConnectionToAudioNode = (activeInputs, source, output, input) => {\n  return pickElementFromSet(activeInputs[input], activeInputConnection => activeInputConnection[0] === source && activeInputConnection[1] === output);\n};\n\nconst deleteActiveInputConnectionToAudioParam = (activeInputs, source, output) => {\n  return pickElementFromSet(activeInputs, activeInputConnection => activeInputConnection[0] === source && activeInputConnection[1] === output);\n};\n\nconst addPassiveInputConnectionToAudioNode = (passiveInputs, input, [source, output, eventListener], ignoreDuplicates) => {\n  const passiveInputConnections = passiveInputs.get(source);\n\n  if (passiveInputConnections === undefined) {\n    passiveInputs.set(source, new Set([[output, input, eventListener]]));\n  } else {\n    insertElementInSet(passiveInputConnections, [output, input, eventListener], passiveInputConnection => passiveInputConnection[0] === output && passiveInputConnection[1] === input, ignoreDuplicates);\n  }\n};\n\nconst addPassiveInputConnectionToAudioParam = (passiveInputs, [source, output, eventListener], ignoreDuplicates) => {\n  const passiveInputConnections = passiveInputs.get(source);\n\n  if (passiveInputConnections === undefined) {\n    passiveInputs.set(source, new Set([[output, eventListener]]));\n  } else {\n    insertElementInSet(passiveInputConnections, [output, eventListener], passiveInputConnection => passiveInputConnection[0] === output, ignoreDuplicates);\n  }\n};\n\nconst deletePassiveInputConnectionToAudioNode = (passiveInputs, source, output, input) => {\n  const passiveInputConnections = getValueForKey(passiveInputs, source);\n  const matchingConnection = pickElementFromSet(passiveInputConnections, passiveInputConnection => passiveInputConnection[0] === output && passiveInputConnection[1] === input);\n\n  if (passiveInputConnections.size === 0) {\n    passiveInputs.delete(source);\n  }\n\n  return matchingConnection;\n};\n\nconst deletePassiveInputConnectionToAudioParam = (passiveInputs, source, output) => {\n  const passiveInputConnections = getValueForKey(passiveInputs, source);\n  const matchingConnection = pickElementFromSet(passiveInputConnections, passiveInputConnection => passiveInputConnection[0] === output);\n\n  if (passiveInputConnections.size === 0) {\n    passiveInputs.delete(source);\n  }\n\n  return matchingConnection;\n};\n\nconst addConnectionToAudioNodeOfAudioContext = (source, destination, output, input) => {\n  const {\n    activeInputs,\n    passiveInputs\n  } = getAudioNodeConnections(destination);\n  const {\n    outputs\n  } = getAudioNodeConnections(source);\n  const eventListeners = getEventListenersOfAudioNode(source);\n\n  const eventListener = isActive => {\n    const nativeDestinationAudioNode = getNativeAudioNode(destination);\n    const nativeSourceAudioNode = getNativeAudioNode(source);\n\n    if (isActive) {\n      const partialConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n      addActiveInputConnectionToAudioNode(activeInputs, source, partialConnection, false);\n\n      if (!isPartOfACycle(source)) {\n        connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n      }\n\n      if (isPassiveAudioNode(destination)) {\n        setInternalStateToActive(destination);\n      }\n    } else {\n      const partialConnection = deleteActiveInputConnectionToAudioNode(activeInputs, source, output, input);\n      addPassiveInputConnectionToAudioNode(passiveInputs, input, partialConnection, false);\n\n      if (!isPartOfACycle(source)) {\n        disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n      }\n\n      if (isActiveAudioNode(destination)) {\n        setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n      }\n    }\n  };\n\n  if (insertElementInSet(outputs, [destination, output, input], outputConnection => outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input, true)) {\n    eventListeners.add(eventListener);\n\n    if (isActiveAudioNode(source)) {\n      addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, eventListener], true);\n    } else {\n      addPassiveInputConnectionToAudioNode(passiveInputs, input, [source, output, eventListener], true);\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nconst addConnectionToAudioNodeOfOfflineAudioContext = (source, destination, output, input) => {\n  const {\n    outputs\n  } = getAudioNodeConnections(source);\n\n  if (insertElementInSet(outputs, [destination, output, input], outputConnection => outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input, true)) {\n    const {\n      activeInputs\n    } = getAudioNodeConnections(destination);\n    addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, null], true);\n    return true;\n  }\n\n  return false;\n};\n\nconst addConnectionToAudioParamOfAudioContext = (source, destination, output) => {\n  const {\n    activeInputs,\n    passiveInputs\n  } = getAudioParamConnections(destination);\n  const {\n    outputs\n  } = getAudioNodeConnections(source);\n  const eventListeners = getEventListenersOfAudioNode(source);\n\n  const eventListener = isActive => {\n    const nativeAudioNode = getNativeAudioNode(source);\n    const nativeAudioParam = getNativeAudioParam(destination);\n\n    if (isActive) {\n      const partialConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n      addActiveInputConnectionToAudioParam(activeInputs, source, partialConnection, false);\n\n      if (!isPartOfACycle(source)) {\n        nativeAudioNode.connect(nativeAudioParam, output);\n      }\n    } else {\n      const partialConnection = deleteActiveInputConnectionToAudioParam(activeInputs, source, output);\n      addPassiveInputConnectionToAudioParam(passiveInputs, partialConnection, false);\n\n      if (!isPartOfACycle(source)) {\n        nativeAudioNode.disconnect(nativeAudioParam, output);\n      }\n    }\n  };\n\n  if (insertElementInSet(outputs, [destination, output], outputConnection => outputConnection[0] === destination && outputConnection[1] === output, true)) {\n    eventListeners.add(eventListener);\n\n    if (isActiveAudioNode(source)) {\n      addActiveInputConnectionToAudioParam(activeInputs, source, [output, eventListener], true);\n    } else {\n      addPassiveInputConnectionToAudioParam(passiveInputs, [source, output, eventListener], true);\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nconst addConnectionToAudioParamOfOfflineAudioContext = (source, destination, output) => {\n  const {\n    outputs\n  } = getAudioNodeConnections(source);\n\n  if (insertElementInSet(outputs, [destination, output], outputConnection => outputConnection[0] === destination && outputConnection[1] === output, true)) {\n    const {\n      activeInputs\n    } = getAudioParamConnections(destination);\n    addActiveInputConnectionToAudioParam(activeInputs, source, [output, null], true);\n    return true;\n  }\n\n  return false;\n};\n\nconst deleteActiveInputConnection = (activeInputConnections, source, output) => {\n  for (const activeInputConnection of activeInputConnections) {\n    if (activeInputConnection[0] === source && activeInputConnection[1] === output) {\n      activeInputConnections.delete(activeInputConnection);\n      return activeInputConnection;\n    }\n  }\n\n  return null;\n};\n\nconst deleteInputConnectionOfAudioNode = (source, destination, output, input) => {\n  const {\n    activeInputs,\n    passiveInputs\n  } = getAudioNodeConnections(destination);\n  const activeInputConnection = deleteActiveInputConnection(activeInputs[input], source, output);\n\n  if (activeInputConnection === null) {\n    const passiveInputConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n    return [passiveInputConnection[2], false];\n  }\n\n  return [activeInputConnection[2], true];\n};\n\nconst deleteInputConnectionOfAudioParam = (source, destination, output) => {\n  const {\n    activeInputs,\n    passiveInputs\n  } = getAudioParamConnections(destination);\n  const activeInputConnection = deleteActiveInputConnection(activeInputs, source, output);\n\n  if (activeInputConnection === null) {\n    const passiveInputConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n    return [passiveInputConnection[1], false];\n  }\n\n  return [activeInputConnection[2], true];\n};\n\nconst deleteInputsOfAudioNode = (source, destination, output, input) => {\n  const [listener, isActive] = deleteInputConnectionOfAudioNode(source, destination, output, input);\n\n  if (listener !== null) {\n    deleteEventListenerOfAudioNode(source, listener);\n\n    if (isActive && !isPartOfACycle(source)) {\n      disconnectNativeAudioNodeFromNativeAudioNode(getNativeAudioNode(source), getNativeAudioNode(destination), output, input);\n    }\n  }\n\n  if (isActiveAudioNode(destination)) {\n    const {\n      activeInputs\n    } = getAudioNodeConnections(destination);\n    setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n  }\n};\n\nconst deleteInputsOfAudioParam = (source, destination, output) => {\n  const [listener, isActive] = deleteInputConnectionOfAudioParam(source, destination, output);\n\n  if (listener !== null) {\n    deleteEventListenerOfAudioNode(source, listener);\n\n    if (isActive && !isPartOfACycle(source)) {\n      getNativeAudioNode(source).disconnect(getNativeAudioParam(destination), output);\n    }\n  }\n};\n\nconst deleteAnyConnection = source => {\n  const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n  const destinations = [];\n\n  for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n    if (isAudioNodeOutputConnection(outputConnection)) {\n      deleteInputsOfAudioNode(source, ...outputConnection);\n    } else {\n      deleteInputsOfAudioParam(source, ...outputConnection);\n    }\n\n    destinations.push(outputConnection[0]);\n  }\n\n  audioNodeConnectionsOfSource.outputs.clear();\n  return destinations;\n};\n\nconst deleteConnectionAtOutput = (source, output) => {\n  const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n  const destinations = [];\n\n  for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n    if (outputConnection[1] === output) {\n      if (isAudioNodeOutputConnection(outputConnection)) {\n        deleteInputsOfAudioNode(source, ...outputConnection);\n      } else {\n        deleteInputsOfAudioParam(source, ...outputConnection);\n      }\n\n      destinations.push(outputConnection[0]);\n      audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n    }\n  }\n\n  return destinations;\n};\n\nconst deleteConnectionToDestination = (source, destination, output, input) => {\n  const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n  return Array.from(audioNodeConnectionsOfSource.outputs).filter(outputConnection => outputConnection[0] === destination && (output === undefined || outputConnection[1] === output) && (input === undefined || outputConnection[2] === input)).map(outputConnection => {\n    if (isAudioNodeOutputConnection(outputConnection)) {\n      deleteInputsOfAudioNode(source, ...outputConnection);\n    } else {\n      deleteInputsOfAudioParam(source, ...outputConnection);\n    }\n\n    audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n    return outputConnection[0];\n  });\n};\n\nexport const createAudioNodeConstructor = (addAudioNodeConnections, auxiliaryGainNodeStore, cacheTestResult, createIncrementCycleCounter, createIndexSizeError, createInvalidAccessError, createNotSupportedError, decrementCycleCounter, detectCycles, eventTargetConstructor, getNativeContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext) => {\n  return class AudioNode extends eventTargetConstructor {\n    constructor(context, isActive, nativeAudioNode, audioNodeRenderer) {\n      super(nativeAudioNode);\n      this._context = context;\n      this._nativeAudioNode = nativeAudioNode;\n      const nativeContext = getNativeContext(context); // Bug #12: Safari does not support to disconnect a specific destination.\n      // @todo Make sure this is not used with an OfflineAudioContext.\n\n      if (!isNativeOfflineAudioContext(nativeContext) && true !== cacheTestResult(testAudioNodeDisconnectMethodSupport, () => {\n        return testAudioNodeDisconnectMethodSupport(nativeContext);\n      })) {\n        wrapAudioNodeDisconnectMethod(nativeAudioNode);\n      }\n\n      AUDIO_NODE_STORE.set(this, nativeAudioNode);\n      EVENT_LISTENERS.set(this, new Set());\n\n      if (isActive) {\n        setInternalStateToActive(this);\n      }\n\n      addAudioNodeConnections(this, audioNodeRenderer, nativeAudioNode);\n    }\n\n    get channelCount() {\n      return this._nativeAudioNode.channelCount;\n    }\n\n    set channelCount(value) {\n      this._nativeAudioNode.channelCount = value;\n    }\n\n    get channelCountMode() {\n      return this._nativeAudioNode.channelCountMode;\n    }\n\n    set channelCountMode(value) {\n      this._nativeAudioNode.channelCountMode = value;\n    }\n\n    get channelInterpretation() {\n      return this._nativeAudioNode.channelInterpretation;\n    }\n\n    set channelInterpretation(value) {\n      this._nativeAudioNode.channelInterpretation = value;\n    }\n\n    get context() {\n      return this._context;\n    }\n\n    get numberOfInputs() {\n      return this._nativeAudioNode.numberOfInputs;\n    }\n\n    get numberOfOutputs() {\n      return this._nativeAudioNode.numberOfOutputs;\n    }\n\n    connect(destination, output = 0, input = 0) {\n      const nativeContext = getNativeContext(this._context);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n\n      if (isNativeAudioNode(destination) || isNativeAudioParam(destination)) {\n        throw createInvalidAccessError();\n      }\n\n      if (isAudioNode(destination)) {\n        const nativeDestinationAudioNode = getNativeAudioNode(destination);\n\n        try {\n          const connection = connectNativeAudioNodeToNativeAudioNode(this._nativeAudioNode, nativeDestinationAudioNode, output, input);\n\n          if (isOffline || isPassiveAudioNode(this)) {\n            this._nativeAudioNode.disconnect(...connection);\n          } else if (isPassiveAudioNode(destination)) {\n            setInternalStateToActive(destination);\n          } // An AudioWorklet needs a connection because it otherwise may truncate the input array.\n          // @todo Count the number of connections which depend on this auxiliary GainNode to know when it can be removed again.\n\n\n          if (isAudioWorkletNode(destination)) {\n            const auxiliaryGainNodes = auxiliaryGainNodeStore.get(nativeDestinationAudioNode);\n\n            if (auxiliaryGainNodes === undefined) {\n              const nativeGainNode = nativeContext.createGain();\n              nativeGainNode.connect(connection[0], 0, connection[2]);\n              auxiliaryGainNodeStore.set(nativeDestinationAudioNode, new Map([[input, nativeGainNode]]));\n            } else if (auxiliaryGainNodes.get(input) === undefined) {\n              const nativeGainNode = nativeContext.createGain();\n              nativeGainNode.connect(connection[0], 0, connection[2]);\n              auxiliaryGainNodes.set(input, nativeGainNode);\n            }\n          }\n        } catch (err) {\n          // Bug #41: Only Chrome, Firefox and Opera throw the correct exception by now.\n          if (err.code === 12) {\n            throw createInvalidAccessError();\n          }\n\n          throw err; // tslint:disable-line:rxjs-throw-error\n        }\n\n        const isNewConnectionToAudioNode = isOffline ? addConnectionToAudioNodeOfOfflineAudioContext(this, destination, output, input) : addConnectionToAudioNodeOfAudioContext(this, destination, output, input); // Bug #164: Only Firefox detects cycles so far.\n\n        if (isNewConnectionToAudioNode) {\n          const cycles = detectCycles([this], destination);\n          visitEachAudioNodeOnce(cycles, createIncrementCycleCounter(isOffline));\n        }\n\n        return destination;\n      }\n\n      const nativeAudioParam = getNativeAudioParam(destination);\n      /*\n       * Bug #147 & #153: Safari does not support to connect an input signal to the playbackRate AudioParam of an\n       * AudioBufferSourceNode. This can't be easily detected and that's why the outdated name property is used here to identify\n       * Safari.\n       */\n\n      if (nativeAudioParam.name === 'playbackRate') {\n        throw createNotSupportedError();\n      }\n\n      try {\n        this._nativeAudioNode.connect(nativeAudioParam, output);\n\n        if (isOffline || isPassiveAudioNode(this)) {\n          this._nativeAudioNode.disconnect(nativeAudioParam, output);\n        }\n      } catch (err) {\n        // Bug #58: Only Firefox does throw an InvalidStateError yet.\n        if (err.code === 12) {\n          throw createInvalidAccessError();\n        }\n\n        throw err; // tslint:disable-line:rxjs-throw-error\n      }\n\n      const isNewConnectionToAudioParam = isOffline ? addConnectionToAudioParamOfOfflineAudioContext(this, destination, output) : addConnectionToAudioParamOfAudioContext(this, destination, output); // Bug #164: Only Firefox detects cycles so far.\n\n      if (isNewConnectionToAudioParam) {\n        const cycles = detectCycles([this], destination);\n        visitEachAudioNodeOnce(cycles, createIncrementCycleCounter(isOffline));\n      }\n    }\n\n    disconnect(destinationOrOutput, output, input) {\n      let destinations;\n\n      if (destinationOrOutput === undefined) {\n        destinations = deleteAnyConnection(this);\n      } else if (typeof destinationOrOutput === 'number') {\n        if (destinationOrOutput < 0 || destinationOrOutput >= this.numberOfOutputs) {\n          throw createIndexSizeError();\n        }\n\n        destinations = deleteConnectionAtOutput(this, destinationOrOutput);\n      } else {\n        if (output !== undefined && (output < 0 || output >= this.numberOfOutputs)) {\n          throw createIndexSizeError();\n        }\n\n        if (isAudioNode(destinationOrOutput) && input !== undefined && (input < 0 || input >= destinationOrOutput.numberOfInputs)) {\n          throw createIndexSizeError();\n        }\n\n        destinations = deleteConnectionToDestination(this, destinationOrOutput, output, input);\n\n        if (destinations.length === 0) {\n          throw createInvalidAccessError();\n        }\n      } // Bug #164: Only Firefox detects cycles so far.\n\n\n      for (const destination of destinations) {\n        const cycles = detectCycles([this], destination);\n        visitEachAudioNodeOnce(cycles, decrementCycleCounter);\n      }\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/audio-node-constructor.js"],"names":["AUDIO_NODE_STORE","EVENT_LISTENERS","isAudioNode","isAudioNodeOutputConnection","isAudioWorkletNode","connectNativeAudioNodeToNativeAudioNode","deleteEventListenerOfAudioNode","disconnectNativeAudioNodeFromNativeAudioNode","getAudioNodeConnections","getAudioParamConnections","getEventListenersOfAudioNode","getNativeAudioNode","getNativeAudioParam","getValueForKey","insertElementInSet","isActiveAudioNode","isPartOfACycle","isPassiveAudioNode","pickElementFromSet","setInternalStateToActive","setInternalStateToPassiveWhenNecessary","testAudioNodeDisconnectMethodSupport","visitEachAudioNodeOnce","wrapAudioNodeDisconnectMethod","addActiveInputConnectionToAudioNode","activeInputs","source","output","input","eventListener","ignoreDuplicates","activeInputConnection","addActiveInputConnectionToAudioParam","deleteActiveInputConnectionToAudioNode","deleteActiveInputConnectionToAudioParam","addPassiveInputConnectionToAudioNode","passiveInputs","passiveInputConnections","get","undefined","set","Set","passiveInputConnection","addPassiveInputConnectionToAudioParam","deletePassiveInputConnectionToAudioNode","matchingConnection","size","delete","deletePassiveInputConnectionToAudioParam","addConnectionToAudioNodeOfAudioContext","destination","outputs","eventListeners","isActive","nativeDestinationAudioNode","nativeSourceAudioNode","partialConnection","outputConnection","add","addConnectionToAudioNodeOfOfflineAudioContext","addConnectionToAudioParamOfAudioContext","nativeAudioNode","nativeAudioParam","connect","disconnect","addConnectionToAudioParamOfOfflineAudioContext","deleteActiveInputConnection","activeInputConnections","deleteInputConnectionOfAudioNode","deleteInputConnectionOfAudioParam","deleteInputsOfAudioNode","listener","deleteInputsOfAudioParam","deleteAnyConnection","audioNodeConnectionsOfSource","destinations","push","clear","deleteConnectionAtOutput","deleteConnectionToDestination","Array","from","filter","map","createAudioNodeConstructor","addAudioNodeConnections","auxiliaryGainNodeStore","cacheTestResult","createIncrementCycleCounter","createIndexSizeError","createInvalidAccessError","createNotSupportedError","decrementCycleCounter","detectCycles","eventTargetConstructor","getNativeContext","isNativeAudioNode","isNativeAudioParam","isNativeOfflineAudioContext","AudioNode","constructor","context","audioNodeRenderer","_context","_nativeAudioNode","nativeContext","channelCount","value","channelCountMode","channelInterpretation","numberOfInputs","numberOfOutputs","isOffline","connection","auxiliaryGainNodes","nativeGainNode","createGain","Map","err","code","isNewConnectionToAudioNode","cycles","name","isNewConnectionToAudioParam","destinationOrOutput","length"],"mappings":"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","sourcesContent":["import { AUDIO_NODE_STORE, EVENT_LISTENERS } from '../globals';\nimport { isAudioNode } from '../guards/audio-node';\nimport { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nimport { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { connectNativeAudioNodeToNativeAudioNode } from '../helpers/connect-native-audio-node-to-native-audio-node';\nimport { deleteEventListenerOfAudioNode } from '../helpers/delete-event-listeners-of-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from '../helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from '../helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from '../helpers/get-event-listeners-of-audio-node';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { getNativeAudioParam } from '../helpers/get-native-audio-param';\nimport { getValueForKey } from '../helpers/get-value-for-key';\nimport { insertElementInSet } from '../helpers/insert-element-in-set';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { isPartOfACycle } from '../helpers/is-part-of-a-cycle';\nimport { isPassiveAudioNode } from '../helpers/is-passive-audio-node';\nimport { pickElementFromSet } from '../helpers/pick-element-from-set';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassiveWhenNecessary } from '../helpers/set-internal-state-to-passive-when-necessary';\nimport { testAudioNodeDisconnectMethodSupport } from '../helpers/test-audio-node-disconnect-method-support';\nimport { visitEachAudioNodeOnce } from '../helpers/visit-each-audio-node-once';\nimport { wrapAudioNodeDisconnectMethod } from '../helpers/wrap-audio-node-disconnect-method';\nconst addActiveInputConnectionToAudioNode = (activeInputs, source, [output, input, eventListener], ignoreDuplicates) => {\n    insertElementInSet(activeInputs[input], [source, output, eventListener], (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output), ignoreDuplicates);\n};\nconst addActiveInputConnectionToAudioParam = (activeInputs, source, [output, eventListener], ignoreDuplicates) => {\n    insertElementInSet(activeInputs, [source, output, eventListener], (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output), ignoreDuplicates);\n};\nconst deleteActiveInputConnectionToAudioNode = (activeInputs, source, output, input) => {\n    return pickElementFromSet(activeInputs[input], (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output));\n};\nconst deleteActiveInputConnectionToAudioParam = (activeInputs, source, output) => {\n    return pickElementFromSet(activeInputs, (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output));\n};\nconst addPassiveInputConnectionToAudioNode = (passiveInputs, input, [source, output, eventListener], ignoreDuplicates) => {\n    const passiveInputConnections = passiveInputs.get(source);\n    if (passiveInputConnections === undefined) {\n        passiveInputs.set(source, new Set([[output, input, eventListener]]));\n    }\n    else {\n        insertElementInSet(passiveInputConnections, [output, input, eventListener], (passiveInputConnection) => (passiveInputConnection[0] === output && passiveInputConnection[1] === input), ignoreDuplicates);\n    }\n};\nconst addPassiveInputConnectionToAudioParam = (passiveInputs, [source, output, eventListener], ignoreDuplicates) => {\n    const passiveInputConnections = passiveInputs.get(source);\n    if (passiveInputConnections === undefined) {\n        passiveInputs.set(source, new Set([[output, eventListener]]));\n    }\n    else {\n        insertElementInSet(passiveInputConnections, [output, eventListener], (passiveInputConnection) => (passiveInputConnection[0] === output), ignoreDuplicates);\n    }\n};\nconst deletePassiveInputConnectionToAudioNode = (passiveInputs, source, output, input) => {\n    const passiveInputConnections = getValueForKey(passiveInputs, source);\n    const matchingConnection = pickElementFromSet(passiveInputConnections, (passiveInputConnection) => (passiveInputConnection[0] === output && passiveInputConnection[1] === input));\n    if (passiveInputConnections.size === 0) {\n        passiveInputs.delete(source);\n    }\n    return matchingConnection;\n};\nconst deletePassiveInputConnectionToAudioParam = (passiveInputs, source, output) => {\n    const passiveInputConnections = getValueForKey(passiveInputs, source);\n    const matchingConnection = pickElementFromSet(passiveInputConnections, (passiveInputConnection) => (passiveInputConnection[0] === output));\n    if (passiveInputConnections.size === 0) {\n        passiveInputs.delete(source);\n    }\n    return matchingConnection;\n};\nconst addConnectionToAudioNodeOfAudioContext = (source, destination, output, input) => {\n    const { activeInputs, passiveInputs } = getAudioNodeConnections(destination);\n    const { outputs } = getAudioNodeConnections(source);\n    const eventListeners = getEventListenersOfAudioNode(source);\n    const eventListener = ((isActive) => {\n        const nativeDestinationAudioNode = getNativeAudioNode(destination);\n        const nativeSourceAudioNode = getNativeAudioNode(source);\n        if (isActive) {\n            const partialConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n            addActiveInputConnectionToAudioNode(activeInputs, source, partialConnection, false);\n            if (!isPartOfACycle(source)) {\n                connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n            }\n            if (isPassiveAudioNode(destination)) {\n                setInternalStateToActive(destination);\n            }\n        }\n        else {\n            const partialConnection = deleteActiveInputConnectionToAudioNode(activeInputs, source, output, input);\n            addPassiveInputConnectionToAudioNode(passiveInputs, input, partialConnection, false);\n            if (!isPartOfACycle(source)) {\n                disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n            }\n            if (isActiveAudioNode(destination)) {\n                setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n            }\n        }\n    });\n    if (insertElementInSet(outputs, [destination, output, input], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input), true)) {\n        eventListeners.add(eventListener);\n        if (isActiveAudioNode(source)) {\n            addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, eventListener], true);\n        }\n        else {\n            addPassiveInputConnectionToAudioNode(passiveInputs, input, [source, output, eventListener], true);\n        }\n        return true;\n    }\n    return false;\n};\nconst addConnectionToAudioNodeOfOfflineAudioContext = (source, destination, output, input) => {\n    const { outputs } = getAudioNodeConnections(source);\n    if (insertElementInSet(outputs, [destination, output, input], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input), true)) {\n        const { activeInputs } = getAudioNodeConnections(destination);\n        addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, null], true);\n        return true;\n    }\n    return false;\n};\nconst addConnectionToAudioParamOfAudioContext = (source, destination, output) => {\n    const { activeInputs, passiveInputs } = getAudioParamConnections(destination);\n    const { outputs } = getAudioNodeConnections(source);\n    const eventListeners = getEventListenersOfAudioNode(source);\n    const eventListener = ((isActive) => {\n        const nativeAudioNode = getNativeAudioNode(source);\n        const nativeAudioParam = getNativeAudioParam(destination);\n        if (isActive) {\n            const partialConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n            addActiveInputConnectionToAudioParam(activeInputs, source, partialConnection, false);\n            if (!isPartOfACycle(source)) {\n                nativeAudioNode.connect(nativeAudioParam, output);\n            }\n        }\n        else {\n            const partialConnection = deleteActiveInputConnectionToAudioParam(activeInputs, source, output);\n            addPassiveInputConnectionToAudioParam(passiveInputs, partialConnection, false);\n            if (!isPartOfACycle(source)) {\n                nativeAudioNode.disconnect(nativeAudioParam, output);\n            }\n        }\n    });\n    if (insertElementInSet(outputs, [destination, output], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output), true)) {\n        eventListeners.add(eventListener);\n        if (isActiveAudioNode(source)) {\n            addActiveInputConnectionToAudioParam(activeInputs, source, [output, eventListener], true);\n        }\n        else {\n            addPassiveInputConnectionToAudioParam(passiveInputs, [source, output, eventListener], true);\n        }\n        return true;\n    }\n    return false;\n};\nconst addConnectionToAudioParamOfOfflineAudioContext = (source, destination, output) => {\n    const { outputs } = getAudioNodeConnections(source);\n    if (insertElementInSet(outputs, [destination, output], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output), true)) {\n        const { activeInputs } = getAudioParamConnections(destination);\n        addActiveInputConnectionToAudioParam(activeInputs, source, [output, null], true);\n        return true;\n    }\n    return false;\n};\nconst deleteActiveInputConnection = (activeInputConnections, source, output) => {\n    for (const activeInputConnection of activeInputConnections) {\n        if (activeInputConnection[0] === source && activeInputConnection[1] === output) {\n            activeInputConnections.delete(activeInputConnection);\n            return activeInputConnection;\n        }\n    }\n    return null;\n};\nconst deleteInputConnectionOfAudioNode = (source, destination, output, input) => {\n    const { activeInputs, passiveInputs } = getAudioNodeConnections(destination);\n    const activeInputConnection = deleteActiveInputConnection(activeInputs[input], source, output);\n    if (activeInputConnection === null) {\n        const passiveInputConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n        return [passiveInputConnection[2], false];\n    }\n    return [activeInputConnection[2], true];\n};\nconst deleteInputConnectionOfAudioParam = (source, destination, output) => {\n    const { activeInputs, passiveInputs } = getAudioParamConnections(destination);\n    const activeInputConnection = deleteActiveInputConnection(activeInputs, source, output);\n    if (activeInputConnection === null) {\n        const passiveInputConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n        return [passiveInputConnection[1], false];\n    }\n    return [activeInputConnection[2], true];\n};\nconst deleteInputsOfAudioNode = (source, destination, output, input) => {\n    const [listener, isActive] = deleteInputConnectionOfAudioNode(source, destination, output, input);\n    if (listener !== null) {\n        deleteEventListenerOfAudioNode(source, listener);\n        if (isActive && !isPartOfACycle(source)) {\n            disconnectNativeAudioNodeFromNativeAudioNode(getNativeAudioNode(source), getNativeAudioNode(destination), output, input);\n        }\n    }\n    if (isActiveAudioNode(destination)) {\n        const { activeInputs } = getAudioNodeConnections(destination);\n        setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n    }\n};\nconst deleteInputsOfAudioParam = (source, destination, output) => {\n    const [listener, isActive] = deleteInputConnectionOfAudioParam(source, destination, output);\n    if (listener !== null) {\n        deleteEventListenerOfAudioNode(source, listener);\n        if (isActive && !isPartOfACycle(source)) {\n            getNativeAudioNode(source)\n                .disconnect(getNativeAudioParam(destination), output);\n        }\n    }\n};\nconst deleteAnyConnection = (source) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    const destinations = [];\n    for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n        if (isAudioNodeOutputConnection(outputConnection)) {\n            deleteInputsOfAudioNode(source, ...outputConnection);\n        }\n        else {\n            deleteInputsOfAudioParam(source, ...outputConnection);\n        }\n        destinations.push(outputConnection[0]);\n    }\n    audioNodeConnectionsOfSource.outputs.clear();\n    return destinations;\n};\nconst deleteConnectionAtOutput = (source, output) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    const destinations = [];\n    for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n        if (outputConnection[1] === output) {\n            if (isAudioNodeOutputConnection(outputConnection)) {\n                deleteInputsOfAudioNode(source, ...outputConnection);\n            }\n            else {\n                deleteInputsOfAudioParam(source, ...outputConnection);\n            }\n            destinations.push(outputConnection[0]);\n            audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n        }\n    }\n    return destinations;\n};\nconst deleteConnectionToDestination = (source, destination, output, input) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    return Array\n        .from(audioNodeConnectionsOfSource.outputs)\n        .filter((outputConnection) => (outputConnection[0] === destination\n        && (output === undefined || outputConnection[1] === output)\n        && (input === undefined || outputConnection[2] === input)))\n        .map((outputConnection) => {\n        if (isAudioNodeOutputConnection(outputConnection)) {\n            deleteInputsOfAudioNode(source, ...outputConnection);\n        }\n        else {\n            deleteInputsOfAudioParam(source, ...outputConnection);\n        }\n        audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n        return outputConnection[0];\n    });\n};\nexport const createAudioNodeConstructor = (addAudioNodeConnections, auxiliaryGainNodeStore, cacheTestResult, createIncrementCycleCounter, createIndexSizeError, createInvalidAccessError, createNotSupportedError, decrementCycleCounter, detectCycles, eventTargetConstructor, getNativeContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext) => {\n    return class AudioNode extends eventTargetConstructor {\n        constructor(context, isActive, nativeAudioNode, audioNodeRenderer) {\n            super(nativeAudioNode);\n            this._context = context;\n            this._nativeAudioNode = nativeAudioNode;\n            const nativeContext = getNativeContext(context);\n            // Bug #12: Safari does not support to disconnect a specific destination.\n            // @todo Make sure this is not used with an OfflineAudioContext.\n            if (!isNativeOfflineAudioContext(nativeContext) && true !== cacheTestResult(testAudioNodeDisconnectMethodSupport, () => {\n                return testAudioNodeDisconnectMethodSupport(nativeContext);\n            })) {\n                wrapAudioNodeDisconnectMethod(nativeAudioNode);\n            }\n            AUDIO_NODE_STORE.set(this, nativeAudioNode);\n            EVENT_LISTENERS.set(this, new Set());\n            if (isActive) {\n                setInternalStateToActive(this);\n            }\n            addAudioNodeConnections(this, audioNodeRenderer, nativeAudioNode);\n        }\n        get channelCount() {\n            return this._nativeAudioNode.channelCount;\n        }\n        set channelCount(value) {\n            this._nativeAudioNode.channelCount = value;\n        }\n        get channelCountMode() {\n            return this._nativeAudioNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            this._nativeAudioNode.channelCountMode = value;\n        }\n        get channelInterpretation() {\n            return this._nativeAudioNode.channelInterpretation;\n        }\n        set channelInterpretation(value) {\n            this._nativeAudioNode.channelInterpretation = value;\n        }\n        get context() {\n            return this._context;\n        }\n        get numberOfInputs() {\n            return this._nativeAudioNode.numberOfInputs;\n        }\n        get numberOfOutputs() {\n            return this._nativeAudioNode.numberOfOutputs;\n        }\n        connect(destination, output = 0, input = 0) {\n            const nativeContext = getNativeContext(this._context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            if (isNativeAudioNode(destination) || isNativeAudioParam(destination)) {\n                throw createInvalidAccessError();\n            }\n            if (isAudioNode(destination)) {\n                const nativeDestinationAudioNode = getNativeAudioNode(destination);\n                try {\n                    const connection = connectNativeAudioNodeToNativeAudioNode(this._nativeAudioNode, nativeDestinationAudioNode, output, input);\n                    if (isOffline || isPassiveAudioNode(this)) {\n                        this._nativeAudioNode.disconnect(...connection);\n                    }\n                    else if (isPassiveAudioNode(destination)) {\n                        setInternalStateToActive(destination);\n                    }\n                    // An AudioWorklet needs a connection because it otherwise may truncate the input array.\n                    // @todo Count the number of connections which depend on this auxiliary GainNode to know when it can be removed again.\n                    if (isAudioWorkletNode(destination)) {\n                        const auxiliaryGainNodes = auxiliaryGainNodeStore.get(nativeDestinationAudioNode);\n                        if (auxiliaryGainNodes === undefined) {\n                            const nativeGainNode = nativeContext.createGain();\n                            nativeGainNode.connect(connection[0], 0, connection[2]);\n                            auxiliaryGainNodeStore.set(nativeDestinationAudioNode, new Map([[input, nativeGainNode]]));\n                        }\n                        else if (auxiliaryGainNodes.get(input) === undefined) {\n                            const nativeGainNode = nativeContext.createGain();\n                            nativeGainNode.connect(connection[0], 0, connection[2]);\n                            auxiliaryGainNodes.set(input, nativeGainNode);\n                        }\n                    }\n                }\n                catch (err) {\n                    // Bug #41: Only Chrome, Firefox and Opera throw the correct exception by now.\n                    if (err.code === 12) {\n                        throw createInvalidAccessError();\n                    }\n                    throw err; // tslint:disable-line:rxjs-throw-error\n                }\n                const isNewConnectionToAudioNode = (isOffline)\n                    ? addConnectionToAudioNodeOfOfflineAudioContext(this, destination, output, input)\n                    : addConnectionToAudioNodeOfAudioContext(this, destination, output, input);\n                // Bug #164: Only Firefox detects cycles so far.\n                if (isNewConnectionToAudioNode) {\n                    const cycles = detectCycles([this], destination);\n                    visitEachAudioNodeOnce(cycles, createIncrementCycleCounter(isOffline));\n                }\n                return destination;\n            }\n            const nativeAudioParam = getNativeAudioParam(destination);\n            /*\n             * Bug #147 & #153: Safari does not support to connect an input signal to the playbackRate AudioParam of an\n             * AudioBufferSourceNode. This can't be easily detected and that's why the outdated name property is used here to identify\n             * Safari.\n             */\n            if (nativeAudioParam.name === 'playbackRate') {\n                throw createNotSupportedError();\n            }\n            try {\n                this._nativeAudioNode.connect(nativeAudioParam, output);\n                if (isOffline || isPassiveAudioNode(this)) {\n                    this._nativeAudioNode.disconnect(nativeAudioParam, output);\n                }\n            }\n            catch (err) {\n                // Bug #58: Only Firefox does throw an InvalidStateError yet.\n                if (err.code === 12) {\n                    throw createInvalidAccessError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            }\n            const isNewConnectionToAudioParam = (isOffline)\n                ? addConnectionToAudioParamOfOfflineAudioContext(this, destination, output)\n                : addConnectionToAudioParamOfAudioContext(this, destination, output);\n            // Bug #164: Only Firefox detects cycles so far.\n            if (isNewConnectionToAudioParam) {\n                const cycles = detectCycles([this], destination);\n                visitEachAudioNodeOnce(cycles, createIncrementCycleCounter(isOffline));\n            }\n        }\n        disconnect(destinationOrOutput, output, input) {\n            let destinations;\n            if (destinationOrOutput === undefined) {\n                destinations = deleteAnyConnection(this);\n            }\n            else if (typeof destinationOrOutput === 'number') {\n                if (destinationOrOutput < 0 || destinationOrOutput >= this.numberOfOutputs) {\n                    throw createIndexSizeError();\n                }\n                destinations = deleteConnectionAtOutput(this, destinationOrOutput);\n            }\n            else {\n                if (output !== undefined && (output < 0 || output >= this.numberOfOutputs)) {\n                    throw createIndexSizeError();\n                }\n                if (isAudioNode(destinationOrOutput)\n                    && input !== undefined\n                    && (input < 0 || input >= destinationOrOutput.numberOfInputs)) {\n                    throw createIndexSizeError();\n                }\n                destinations = deleteConnectionToDestination(this, destinationOrOutput, output, input);\n                if (destinations.length === 0) {\n                    throw createInvalidAccessError();\n                }\n            }\n            // Bug #164: Only Firefox detects cycles so far.\n            for (const destination of destinations) {\n                const cycles = detectCycles([this], destination);\n                visitEachAudioNodeOnce(cycles, decrementCycleCounter);\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}