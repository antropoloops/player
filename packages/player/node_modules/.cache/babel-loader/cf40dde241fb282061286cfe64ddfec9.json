{"ast":null,"code":"/**\n * Creates an AudioEngine instance\n * @param context\n */\nexport function createAudioEngine(context) {\n  return new AudioContextEngine(context);\n}\n\nclass AudioContextEngine {\n  constructor(context) {\n    this.context = context;\n  }\n\n  createAudioSource(props, destination) {\n    const source = this.context.createBufferSource();\n    source.buffer = props.buffer;\n    source.loop = true;\n    source.connect(destination);\n    return source;\n  }\n\n  createTrack(props, destination) {\n    const track = this.context.createGain();\n    track.gain.value = props.volume;\n    track.connect(destination || this.context.destination);\n    return track;\n  }\n\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/sampler/AudioEngine.ts"],"names":["createAudioEngine","context","AudioContextEngine","constructor","createAudioSource","props","destination","source","createBufferSource","buffer","loop","connect","createTrack","track","createGain","gain","value","volume"],"mappings":"AAEA;;;;AAIA,OAAO,SAASA,iBAAT,CAA2BC,OAA3B,EAAgE;AACrE,SAAO,IAAIC,kBAAJ,CAAuBD,OAAvB,CAAP;AACD;;AA2BD,MAAMC,kBAAN,CAAgD;AAC9CC,EAAAA,WAAW,CAASF,OAAT,EAAiC;AAAA,SAAxBA,OAAwB,GAAxBA,OAAwB;AAAE;;AAEvCG,EAAAA,iBAAP,CACEC,KADF,EAEEC,WAFF,EAGe;AACb,UAAMC,MAAM,GAAG,KAAKN,OAAL,CAAaO,kBAAb,EAAf;AACAD,IAAAA,MAAM,CAACE,MAAP,GAAgBJ,KAAK,CAACI,MAAtB;AACAF,IAAAA,MAAM,CAACG,IAAP,GAAc,IAAd;AACAH,IAAAA,MAAM,CAACI,OAAP,CAAeL,WAAf;AACA,WAAOC,MAAP;AACD;;AACMK,EAAAA,WAAP,CAAmBP,KAAnB,EAA2CC,WAA3C,EAAyE;AACvE,UAAMO,KAAK,GAAG,KAAKZ,OAAL,CAAaa,UAAb,EAAd;AACAD,IAAAA,KAAK,CAACE,IAAN,CAAWC,KAAX,GAAmBX,KAAK,CAACY,MAAzB;AACAJ,IAAAA,KAAK,CAACF,OAAN,CAAcL,WAAW,IAAI,KAAKL,OAAL,CAAaK,WAA1C;AACA,WAAOO,KAAP;AACD;;AAlB6C","sourcesContent":["import { IAudioContext } from \"standardized-audio-context\";\n\n/**\n * Creates an AudioEngine instance\n * @param context\n */\nexport function createAudioEngine(context: IAudioContext): AudioEngine {\n  return new AudioContextEngine(context);\n}\n\nexport interface AudioTrackProps {\n  volume: number;\n}\nexport interface AudioSourceProperties {\n  buffer: any;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface AudioTrack {\n  disconnect(): void;\n}\n\nexport interface AudioSource {\n  start: (time: number) => void;\n  stop: (time: number) => void;\n}\n\nexport interface AudioEngine {\n  createTrack: (props: AudioTrackProps, destination: any) => AudioTrack;\n  createAudioSource: (\n    props: AudioSourceProperties,\n    destination: any,\n  ) => AudioSource;\n}\n\nclass AudioContextEngine implements AudioEngine {\n  constructor(private context: IAudioContext) {}\n\n  public createAudioSource(\n    props: AudioSourceProperties,\n    destination: any,\n  ): AudioSource {\n    const source = this.context.createBufferSource();\n    source.buffer = props.buffer;\n    source.loop = true;\n    source.connect(destination);\n    return source;\n  }\n  public createTrack(props: AudioTrackProps, destination: any): AudioTrack {\n    const track = this.context.createGain();\n    track.gain.value = props.volume;\n    track.connect(destination || this.context.destination);\n    return track;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}