{"ast":null,"code":"import parallel1 from \"./parallel1.js\";\nimport { abs, cos, epsilon, halfPi, log, quarterPi, tan } from \"./math.js\";\nexport function loximuthalRaw(phi0) {\n  var cosPhi0 = cos(phi0),\n      tanPhi0 = tan(quarterPi + phi0 / 2);\n\n  function forward(lambda, phi) {\n    var y = phi - phi0,\n        x = abs(y) < epsilon ? lambda * cosPhi0 : abs(x = quarterPi + phi / 2) < epsilon || abs(abs(x) - halfPi) < epsilon ? 0 : lambda * y / log(tan(x) / tanPhi0);\n    return [x, y];\n  }\n\n  forward.invert = function (x, y) {\n    var lambda,\n        phi = y + phi0;\n    return [abs(y) < epsilon ? x / cosPhi0 : abs(lambda = quarterPi + phi / 2) < epsilon || abs(abs(lambda) - halfPi) < epsilon ? 0 : x * log(tan(lambda) / tanPhi0) / y, phi];\n  };\n\n  return forward;\n}\nexport default function () {\n  return parallel1(loximuthalRaw).parallel(40).scale(158.837);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/loximuthal.js"],"names":["parallel1","abs","cos","epsilon","halfPi","log","quarterPi","tan","loximuthalRaw","phi0","cosPhi0","tanPhi0","forward","lambda","phi","y","x","invert","parallel","scale"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,gBAAtB;AACA,SAAQC,GAAR,EAAaC,GAAb,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmCC,GAAnC,EAAwCC,SAAxC,EAAmDC,GAAnD,QAA6D,WAA7D;AAEA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAClC,MAAIC,OAAO,GAAGR,GAAG,CAACO,IAAD,CAAjB;AAAA,MACIE,OAAO,GAAGJ,GAAG,CAACD,SAAS,GAAGG,IAAI,GAAG,CAApB,CADjB;;AAGA,WAASG,OAAT,CAAiBC,MAAjB,EAAyBC,GAAzB,EAA8B;AAC5B,QAAIC,CAAC,GAAGD,GAAG,GAAGL,IAAd;AAAA,QACIO,CAAC,GAAGf,GAAG,CAACc,CAAD,CAAH,GAASZ,OAAT,GAAmBU,MAAM,GAAGH,OAA5B,GACET,GAAG,CAACe,CAAC,GAAGV,SAAS,GAAGQ,GAAG,GAAG,CAAvB,CAAH,GAA+BX,OAA/B,IAA0CF,GAAG,CAACA,GAAG,CAACe,CAAD,CAAH,GAASZ,MAAV,CAAH,GAAuBD,OAAjE,GACA,CADA,GACIU,MAAM,GAAGE,CAAT,GAAaV,GAAG,CAACE,GAAG,CAACS,CAAD,CAAH,GAASL,OAAV,CAH9B;AAIA,WAAO,CAACK,CAAD,EAAID,CAAJ,CAAP;AACD;;AAEDH,EAAAA,OAAO,CAACK,MAAR,GAAiB,UAASD,CAAT,EAAYD,CAAZ,EAAe;AAC9B,QAAIF,MAAJ;AAAA,QACIC,GAAG,GAAGC,CAAC,GAAGN,IADd;AAEA,WAAO,CACLR,GAAG,CAACc,CAAD,CAAH,GAASZ,OAAT,GAAmBa,CAAC,GAAGN,OAAvB,GACOT,GAAG,CAACY,MAAM,GAAGP,SAAS,GAAGQ,GAAG,GAAG,CAA5B,CAAH,GAAoCX,OAApC,IAA+CF,GAAG,CAACA,GAAG,CAACY,MAAD,CAAH,GAAcT,MAAf,CAAH,GAA4BD,OAA5E,GAAuF,CAAvF,GACAa,CAAC,GAAGX,GAAG,CAACE,GAAG,CAACM,MAAD,CAAH,GAAcF,OAAf,CAAP,GAAiCI,CAHlC,EAILD,GAJK,CAAP;AAMD,GATD;;AAWA,SAAOF,OAAP;AACD;AAED,eAAe,YAAW;AACxB,SAAOZ,SAAS,CAACQ,aAAD,CAAT,CACFU,QADE,CACO,EADP,EAEFC,KAFE,CAEI,OAFJ,CAAP;AAGD","sourcesContent":["import parallel1 from \"./parallel1.js\";\nimport {abs, cos, epsilon, halfPi, log, quarterPi, tan} from \"./math.js\";\n\nexport function loximuthalRaw(phi0) {\n  var cosPhi0 = cos(phi0),\n      tanPhi0 = tan(quarterPi + phi0 / 2);\n\n  function forward(lambda, phi) {\n    var y = phi - phi0,\n        x = abs(y) < epsilon ? lambda * cosPhi0\n            : abs(x = quarterPi + phi / 2) < epsilon || abs(abs(x) - halfPi) < epsilon\n            ? 0 : lambda * y / log(tan(x) / tanPhi0);\n    return [x, y];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda,\n        phi = y + phi0;\n    return [\n      abs(y) < epsilon ? x / cosPhi0\n          : (abs(lambda = quarterPi + phi / 2) < epsilon || abs(abs(lambda) - halfPi) < epsilon) ? 0\n          : x * log(tan(lambda) / tanPhi0) / y,\n      phi\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(loximuthalRaw)\n      .parallel(40)\n      .scale(158.837);\n}\n"]},"metadata":{},"sourceType":"module"}