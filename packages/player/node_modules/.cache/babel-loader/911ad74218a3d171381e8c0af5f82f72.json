{"ast":null,"code":"import _objectWithoutProperties from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport var createNativeStereoPannerNodeFakerFactory = function createNativeStereoPannerNodeFakerFactory(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections) {\n  // The curve has a size of 14bit plus 1 value to have an exact representation for zero. This value has been determined experimentally.\n  var CURVE_SIZE = 16385;\n  var DC_CURVE = new Float32Array([1, 1]);\n  var HALF_PI = Math.PI / 2;\n  var SINGLE_CHANNEL_OPTIONS = {\n    channelCount: 1,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'discrete'\n  };\n\n  var SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS = _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n    oversample: 'none'\n  });\n\n  var buildInternalGraphForMono = function buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode) {\n    var leftWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    var rightWaveShaperCurve = new Float32Array(CURVE_SIZE);\n\n    for (var i = 0; i < CURVE_SIZE; i += 1) {\n      var x = i / (CURVE_SIZE - 1) * HALF_PI;\n      leftWaveShaperCurve[i] = Math.cos(x);\n      rightWaveShaperCurve[i] = Math.sin(x);\n    }\n\n    var leftGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n      gain: 0\n    })); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    var leftWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n      curve: leftWaveShaperCurve\n    })); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    var panWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n      curve: DC_CURVE\n    }));\n    var rightGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n      gain: 0\n    })); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    var rightWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n      curve: rightWaveShaperCurve\n    }));\n    return {\n      connectGraph: function connectGraph() {\n        inputGainNode.connect(leftGainNode);\n        inputGainNode.connect(panWaveShaperNode.inputs[0]);\n        inputGainNode.connect(rightGainNode);\n        panWaveShaperNode.connect(panGainNode);\n        panGainNode.connect(leftWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightWaveShaperNode.inputs[0]);\n        leftWaveShaperNode.connect(leftGainNode.gain);\n        rightWaveShaperNode.connect(rightGainNode.gain);\n        leftGainNode.connect(channelMergerNode, 0, 0);\n        rightGainNode.connect(channelMergerNode, 0, 1);\n      },\n      disconnectGraph: function disconnectGraph() {\n        inputGainNode.disconnect(leftGainNode);\n        inputGainNode.disconnect(panWaveShaperNode.inputs[0]);\n        inputGainNode.disconnect(rightGainNode);\n        panWaveShaperNode.disconnect(panGainNode);\n        panGainNode.disconnect(leftWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(rightWaveShaperNode.inputs[0]);\n        leftWaveShaperNode.disconnect(leftGainNode.gain);\n        rightWaveShaperNode.disconnect(rightGainNode.gain);\n        leftGainNode.disconnect(channelMergerNode, 0, 0);\n        rightGainNode.disconnect(channelMergerNode, 0, 1);\n      }\n    };\n  };\n\n  var buildInternalGraphForStereo = function buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode) {\n    var leftInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    var leftInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    var rightInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    var rightInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    var centerIndex = Math.floor(CURVE_SIZE / 2);\n\n    for (var i = 0; i < CURVE_SIZE; i += 1) {\n      if (i > centerIndex) {\n        var x = (i - centerIndex) / (CURVE_SIZE - 1 - centerIndex) * HALF_PI;\n        leftInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n        leftInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n        rightInputForLeftOutputWaveShaperCurve[i] = 0;\n        rightInputForRightOutputWaveShaperCurve[i] = 1;\n      } else {\n        var _x = i / (CURVE_SIZE - 1 - centerIndex) * HALF_PI;\n\n        leftInputForLeftOutputWaveShaperCurve[i] = 1;\n        leftInputForRightOutputWaveShaperCurve[i] = 0;\n        rightInputForLeftOutputWaveShaperCurve[i] = Math.cos(_x);\n        rightInputForRightOutputWaveShaperCurve[i] = Math.sin(_x);\n      }\n    }\n\n    var channelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n      channelCount: 2,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      numberOfOutputs: 2\n    });\n    var leftInputForLeftOutputGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n      gain: 0\n    })); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    var leftInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n      curve: leftInputForLeftOutputWaveShaperCurve\n    }));\n    var leftInputForRightOutputGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n      gain: 0\n    })); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    var leftInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n      curve: leftInputForRightOutputWaveShaperCurve\n    })); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    var panWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n      curve: DC_CURVE\n    }));\n    var rightInputForLeftOutputGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n      gain: 0\n    })); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    var rightInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n      curve: rightInputForLeftOutputWaveShaperCurve\n    }));\n    var rightInputForRightOutputGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n      gain: 0\n    })); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    var rightInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n      curve: rightInputForRightOutputWaveShaperCurve\n    }));\n    return {\n      connectGraph: function connectGraph() {\n        inputGainNode.connect(channelSplitterNode);\n        inputGainNode.connect(panWaveShaperNode.inputs[0]);\n        channelSplitterNode.connect(leftInputForLeftOutputGainNode, 1);\n        channelSplitterNode.connect(leftInputForRightOutputGainNode, 1);\n        channelSplitterNode.connect(rightInputForLeftOutputGainNode, 1);\n        channelSplitterNode.connect(rightInputForRightOutputGainNode, 1);\n        panWaveShaperNode.connect(panGainNode);\n        panGainNode.connect(leftInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(leftInputForRightOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightInputForRightOutputWaveShaperNode.inputs[0]);\n        leftInputForLeftOutputWaveShaperNode.connect(leftInputForLeftOutputGainNode.gain);\n        leftInputForRightOutputWaveShaperNode.connect(leftInputForRightOutputGainNode.gain);\n        rightInputForLeftOutputWaveShaperNode.connect(rightInputForLeftOutputGainNode.gain);\n        rightInputForRightOutputWaveShaperNode.connect(rightInputForRightOutputGainNode.gain);\n        leftInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n        rightInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n        leftInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n        rightInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n      },\n      disconnectGraph: function disconnectGraph() {\n        inputGainNode.disconnect(channelSplitterNode);\n        inputGainNode.disconnect(panWaveShaperNode.inputs[0]);\n        channelSplitterNode.disconnect(leftInputForLeftOutputGainNode, 1);\n        channelSplitterNode.disconnect(leftInputForRightOutputGainNode, 1);\n        channelSplitterNode.disconnect(rightInputForLeftOutputGainNode, 1);\n        channelSplitterNode.disconnect(rightInputForRightOutputGainNode, 1);\n        panWaveShaperNode.disconnect(panGainNode);\n        panGainNode.disconnect(leftInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(leftInputForRightOutputWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(rightInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(rightInputForRightOutputWaveShaperNode.inputs[0]);\n        leftInputForLeftOutputWaveShaperNode.disconnect(leftInputForLeftOutputGainNode.gain);\n        leftInputForRightOutputWaveShaperNode.disconnect(leftInputForRightOutputGainNode.gain);\n        rightInputForLeftOutputWaveShaperNode.disconnect(rightInputForLeftOutputGainNode.gain);\n        rightInputForRightOutputWaveShaperNode.disconnect(rightInputForRightOutputGainNode.gain);\n        leftInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n        rightInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n        leftInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n        rightInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n      }\n    };\n  };\n\n  var buildInternalGraph = function buildInternalGraph(nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode) {\n    if (channelCount === 1) {\n      return buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n    }\n\n    if (channelCount === 2) {\n      return buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n    }\n\n    throw createNotSupportedError();\n  };\n\n  return function (nativeContext, _ref) {\n    var channelCount = _ref.channelCount,\n        channelCountMode = _ref.channelCountMode,\n        pan = _ref.pan,\n        audioNodeOptions = _objectWithoutProperties(_ref, [\"channelCount\", \"channelCountMode\", \"pan\"]);\n\n    if (channelCountMode === 'max') {\n      throw createNotSupportedError();\n    }\n\n    var channelMergerNode = createNativeChannelMergerNode(nativeContext, _objectSpread(_objectSpread({}, audioNodeOptions), {}, {\n      channelCount: 1,\n      channelCountMode: channelCountMode,\n      numberOfInputs: 2\n    }));\n    var inputGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, audioNodeOptions), {}, {\n      channelCount: channelCount,\n      channelCountMode: channelCountMode,\n      gain: 1\n    }));\n    var panGainNode = createNativeGainNode(nativeContext, {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      gain: pan\n    });\n\n    var _buildInternalGraph = buildInternalGraph(nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode),\n        connectGraph = _buildInternalGraph.connectGraph,\n        disconnectGraph = _buildInternalGraph.disconnectGraph;\n\n    Object.defineProperty(panGainNode.gain, 'defaultValue', {\n      get: function get() {\n        return 0;\n      }\n    });\n    var nativeStereoPannerNodeFakerFactory = {\n      get bufferSize() {\n        return undefined;\n      },\n\n      get channelCount() {\n        return inputGainNode.channelCount;\n      },\n\n      set channelCount(value) {\n        if (inputGainNode.channelCount !== value) {\n          if (isConnected) {\n            disconnectGraph();\n          }\n\n          var _buildInternalGraph2 = buildInternalGraph(nativeContext, value, inputGainNode, panGainNode, channelMergerNode);\n\n          connectGraph = _buildInternalGraph2.connectGraph;\n          disconnectGraph = _buildInternalGraph2.disconnectGraph;\n\n          if (isConnected) {\n            connectGraph();\n          }\n        }\n\n        inputGainNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return inputGainNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        if (value === 'clamped-max' || value === 'max') {\n          throw createNotSupportedError();\n        }\n\n        inputGainNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return inputGainNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        inputGainNode.channelInterpretation = value;\n      },\n\n      get context() {\n        return inputGainNode.context;\n      },\n\n      get inputs() {\n        return [inputGainNode];\n      },\n\n      get numberOfInputs() {\n        return inputGainNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return inputGainNode.numberOfOutputs;\n      },\n\n      get pan() {\n        return panGainNode.gain;\n      },\n\n      addEventListener: function addEventListener() {\n        return inputGainNode.addEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      },\n      dispatchEvent: function dispatchEvent() {\n        return inputGainNode.dispatchEvent(arguments.length <= 0 ? undefined : arguments[0]);\n      },\n      removeEventListener: function removeEventListener() {\n        return inputGainNode.removeEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      }\n    };\n    var isConnected = false;\n\n    var whenConnected = function whenConnected() {\n      connectGraph();\n      isConnected = true;\n    };\n\n    var whenDisconnected = function whenDisconnected() {\n      disconnectGraph();\n      isConnected = false;\n    };\n\n    return monitorConnections(interceptConnections(nativeStereoPannerNodeFakerFactory, channelMergerNode), whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/native-stereo-panner-node-faker-factory.js"],"names":["interceptConnections","createNativeStereoPannerNodeFakerFactory","createNativeChannelMergerNode","createNativeChannelSplitterNode","createNativeGainNode","createNativeWaveShaperNode","createNotSupportedError","monitorConnections","CURVE_SIZE","DC_CURVE","Float32Array","HALF_PI","Math","PI","SINGLE_CHANNEL_OPTIONS","channelCount","channelCountMode","channelInterpretation","SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS","oversample","buildInternalGraphForMono","nativeContext","inputGainNode","panGainNode","channelMergerNode","leftWaveShaperCurve","rightWaveShaperCurve","i","x","cos","sin","leftGainNode","gain","leftWaveShaperNode","curve","panWaveShaperNode","rightGainNode","rightWaveShaperNode","connectGraph","connect","inputs","disconnectGraph","disconnect","buildInternalGraphForStereo","leftInputForLeftOutputWaveShaperCurve","leftInputForRightOutputWaveShaperCurve","rightInputForLeftOutputWaveShaperCurve","rightInputForRightOutputWaveShaperCurve","centerIndex","floor","channelSplitterNode","numberOfOutputs","leftInputForLeftOutputGainNode","leftInputForLeftOutputWaveShaperNode","leftInputForRightOutputGainNode","leftInputForRightOutputWaveShaperNode","rightInputForLeftOutputGainNode","rightInputForLeftOutputWaveShaperNode","rightInputForRightOutputGainNode","rightInputForRightOutputWaveShaperNode","buildInternalGraph","pan","audioNodeOptions","numberOfInputs","Object","defineProperty","get","nativeStereoPannerNodeFakerFactory","bufferSize","undefined","value","isConnected","context","addEventListener","dispatchEvent","removeEventListener","whenConnected","whenDisconnected"],"mappings":"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","sourcesContent":["import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeStereoPannerNodeFakerFactory = (createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections) => {\n    // The curve has a size of 14bit plus 1 value to have an exact representation for zero. This value has been determined experimentally.\n    const CURVE_SIZE = 16385;\n    const DC_CURVE = new Float32Array([1, 1]);\n    const HALF_PI = Math.PI / 2;\n    const SINGLE_CHANNEL_OPTIONS = { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'discrete' };\n    const SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS = { ...SINGLE_CHANNEL_OPTIONS, oversample: 'none' };\n    const buildInternalGraphForMono = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {\n        const leftWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        for (let i = 0; i < CURVE_SIZE; i += 1) {\n            const x = (i / (CURVE_SIZE - 1)) * HALF_PI;\n            leftWaveShaperCurve[i] = Math.cos(x);\n            rightWaveShaperCurve[i] = Math.sin(x);\n        }\n        const leftGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: leftWaveShaperCurve });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: DC_CURVE });\n        const rightGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: rightWaveShaperCurve });\n        return {\n            connectGraph() {\n                inputGainNode.connect(leftGainNode);\n                inputGainNode.connect(panWaveShaperNode.inputs[0]);\n                inputGainNode.connect(rightGainNode);\n                panWaveShaperNode.connect(panGainNode);\n                panGainNode.connect(leftWaveShaperNode.inputs[0]);\n                panGainNode.connect(rightWaveShaperNode.inputs[0]);\n                leftWaveShaperNode.connect(leftGainNode.gain);\n                rightWaveShaperNode.connect(rightGainNode.gain);\n                leftGainNode.connect(channelMergerNode, 0, 0);\n                rightGainNode.connect(channelMergerNode, 0, 1);\n            },\n            disconnectGraph() {\n                inputGainNode.disconnect(leftGainNode);\n                inputGainNode.disconnect(panWaveShaperNode.inputs[0]);\n                inputGainNode.disconnect(rightGainNode);\n                panWaveShaperNode.disconnect(panGainNode);\n                panGainNode.disconnect(leftWaveShaperNode.inputs[0]);\n                panGainNode.disconnect(rightWaveShaperNode.inputs[0]);\n                leftWaveShaperNode.disconnect(leftGainNode.gain);\n                rightWaveShaperNode.disconnect(rightGainNode.gain);\n                leftGainNode.disconnect(channelMergerNode, 0, 0);\n                rightGainNode.disconnect(channelMergerNode, 0, 1);\n            }\n        };\n    };\n    const buildInternalGraphForStereo = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {\n        const leftInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const leftInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const centerIndex = Math.floor(CURVE_SIZE / 2);\n        for (let i = 0; i < CURVE_SIZE; i += 1) {\n            if (i > centerIndex) {\n                const x = ((i - centerIndex) / (CURVE_SIZE - 1 - centerIndex)) * HALF_PI;\n                leftInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n                leftInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n                rightInputForLeftOutputWaveShaperCurve[i] = 0;\n                rightInputForRightOutputWaveShaperCurve[i] = 1;\n            }\n            else {\n                const x = (i / (CURVE_SIZE - 1 - centerIndex)) * HALF_PI;\n                leftInputForLeftOutputWaveShaperCurve[i] = 1;\n                leftInputForRightOutputWaveShaperCurve[i] = 0;\n                rightInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n                rightInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n            }\n        }\n        const channelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n            channelCount: 2,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            numberOfOutputs: 2\n        });\n        const leftInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: leftInputForLeftOutputWaveShaperCurve });\n        const leftInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: leftInputForRightOutputWaveShaperCurve });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: DC_CURVE });\n        const rightInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: rightInputForLeftOutputWaveShaperCurve });\n        const rightInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: rightInputForRightOutputWaveShaperCurve });\n        return {\n            connectGraph() {\n                inputGainNode.connect(channelSplitterNode);\n                inputGainNode.connect(panWaveShaperNode.inputs[0]);\n                channelSplitterNode.connect(leftInputForLeftOutputGainNode, 1);\n                channelSplitterNode.connect(leftInputForRightOutputGainNode, 1);\n                channelSplitterNode.connect(rightInputForLeftOutputGainNode, 1);\n                channelSplitterNode.connect(rightInputForRightOutputGainNode, 1);\n                panWaveShaperNode.connect(panGainNode);\n                panGainNode.connect(leftInputForLeftOutputWaveShaperNode.inputs[0]);\n                panGainNode.connect(leftInputForRightOutputWaveShaperNode.inputs[0]);\n                panGainNode.connect(rightInputForLeftOutputWaveShaperNode.inputs[0]);\n                panGainNode.connect(rightInputForRightOutputWaveShaperNode.inputs[0]);\n                leftInputForLeftOutputWaveShaperNode.connect(leftInputForLeftOutputGainNode.gain);\n                leftInputForRightOutputWaveShaperNode.connect(leftInputForRightOutputGainNode.gain);\n                rightInputForLeftOutputWaveShaperNode.connect(rightInputForLeftOutputGainNode.gain);\n                rightInputForRightOutputWaveShaperNode.connect(rightInputForRightOutputGainNode.gain);\n                leftInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n                rightInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n                leftInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n                rightInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n            },\n            disconnectGraph() {\n                inputGainNode.disconnect(channelSplitterNode);\n                inputGainNode.disconnect(panWaveShaperNode.inputs[0]);\n                channelSplitterNode.disconnect(leftInputForLeftOutputGainNode, 1);\n                channelSplitterNode.disconnect(leftInputForRightOutputGainNode, 1);\n                channelSplitterNode.disconnect(rightInputForLeftOutputGainNode, 1);\n                channelSplitterNode.disconnect(rightInputForRightOutputGainNode, 1);\n                panWaveShaperNode.disconnect(panGainNode);\n                panGainNode.disconnect(leftInputForLeftOutputWaveShaperNode.inputs[0]);\n                panGainNode.disconnect(leftInputForRightOutputWaveShaperNode.inputs[0]);\n                panGainNode.disconnect(rightInputForLeftOutputWaveShaperNode.inputs[0]);\n                panGainNode.disconnect(rightInputForRightOutputWaveShaperNode.inputs[0]);\n                leftInputForLeftOutputWaveShaperNode.disconnect(leftInputForLeftOutputGainNode.gain);\n                leftInputForRightOutputWaveShaperNode.disconnect(leftInputForRightOutputGainNode.gain);\n                rightInputForLeftOutputWaveShaperNode.disconnect(rightInputForLeftOutputGainNode.gain);\n                rightInputForRightOutputWaveShaperNode.disconnect(rightInputForRightOutputGainNode.gain);\n                leftInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n                rightInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n                leftInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n                rightInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n            }\n        };\n    };\n    const buildInternalGraph = (nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode) => {\n        if (channelCount === 1) {\n            return buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n        }\n        if (channelCount === 2) {\n            return buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n        }\n        throw createNotSupportedError();\n    };\n    return (nativeContext, { channelCount, channelCountMode, pan, ...audioNodeOptions }) => {\n        if (channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n            ...audioNodeOptions,\n            channelCount: 1,\n            channelCountMode,\n            numberOfInputs: 2\n        });\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, channelCount, channelCountMode, gain: 1 });\n        const panGainNode = createNativeGainNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: pan\n        });\n        let { connectGraph, disconnectGraph } = buildInternalGraph(nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode);\n        Object.defineProperty(panGainNode.gain, 'defaultValue', { get: () => 0 });\n        const nativeStereoPannerNodeFakerFactory = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return inputGainNode.channelCount;\n            },\n            set channelCount(value) {\n                if (inputGainNode.channelCount !== value) {\n                    if (isConnected) {\n                        disconnectGraph();\n                    }\n                    ({ connectGraph, disconnectGraph } = buildInternalGraph(nativeContext, value, inputGainNode, panGainNode, channelMergerNode));\n                    if (isConnected) {\n                        connectGraph();\n                    }\n                }\n                inputGainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return inputGainNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                if (value === 'clamped-max' || value === 'max') {\n                    throw createNotSupportedError();\n                }\n                inputGainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return inputGainNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n            },\n            get context() {\n                return inputGainNode.context;\n            },\n            get inputs() {\n                return [inputGainNode];\n            },\n            get numberOfInputs() {\n                return inputGainNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return inputGainNode.numberOfOutputs;\n            },\n            get pan() {\n                return panGainNode.gain;\n            },\n            addEventListener(...args) {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        let isConnected = false;\n        const whenConnected = () => {\n            connectGraph();\n            isConnected = true;\n        };\n        const whenDisconnected = () => {\n            disconnectGraph();\n            isConnected = false;\n        };\n        return monitorConnections(interceptConnections(nativeStereoPannerNodeFakerFactory, channelMergerNode), whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-stereo-panner-node-faker-factory.js.map"]},"metadata":{},"sourceType":"module"}