{"ast":null,"code":"import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nexport var createAudioListenerFactory = function createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext) {\n  return function (context, nativeContext) {\n    var nativeListener = nativeContext.listener; // Bug #117: Only Chrome & Opera support the new interface already.\n\n    var createFakeAudioParams = function createFakeAudioParams() {\n      var channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n        channelCount: 1,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'speakers',\n        numberOfInputs: 9\n      });\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);\n\n      var createFakeAudioParam = function createFakeAudioParam(input, value) {\n        var constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n          channelCount: 1,\n          channelCountMode: 'explicit',\n          channelInterpretation: 'discrete',\n          offset: value\n        });\n        constantSourceNode.connect(channelMergerNode, 0, input); // @todo This should be stopped when the context is closed.\n\n        constantSourceNode.start();\n        Object.defineProperty(constantSourceNode.offset, 'defaultValue', {\n          get: function get() {\n            return value;\n          }\n        });\n        /*\n         * Bug #62 & #74: Edge & Safari do not support ConstantSourceNodes and do not export the correct values for maxValue and\n         * minValue for GainNodes.\n         */\n\n        return createAudioParam({\n          context: context\n        }, isOffline, constantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      };\n\n      var lastOrientation = [0, 0, -1, 0, 1, 0];\n      var lastPosition = [0, 0, 0];\n\n      scriptProcessorNode.onaudioprocess = function (_ref) {\n        var inputBuffer = _ref.inputBuffer;\n        var orientation = [inputBuffer.getChannelData(0)[0], inputBuffer.getChannelData(1)[0], inputBuffer.getChannelData(2)[0], inputBuffer.getChannelData(3)[0], inputBuffer.getChannelData(4)[0], inputBuffer.getChannelData(5)[0]];\n\n        if (orientation.some(function (value, index) {\n          return value !== lastOrientation[index];\n        })) {\n          nativeListener.setOrientation.apply(nativeListener, orientation); // tslint:disable-line:deprecation\n\n          lastOrientation = orientation;\n        }\n\n        var positon = [inputBuffer.getChannelData(6)[0], inputBuffer.getChannelData(7)[0], inputBuffer.getChannelData(8)[0]];\n\n        if (positon.some(function (value, index) {\n          return value !== lastPosition[index];\n        })) {\n          nativeListener.setPosition.apply(nativeListener, positon); // tslint:disable-line:deprecation\n\n          lastPosition = positon;\n        }\n      };\n\n      channelMergerNode.connect(scriptProcessorNode);\n      return {\n        forwardX: createFakeAudioParam(0, 0),\n        forwardY: createFakeAudioParam(1, 0),\n        forwardZ: createFakeAudioParam(2, -1),\n        positionX: createFakeAudioParam(6, 0),\n        positionY: createFakeAudioParam(7, 0),\n        positionZ: createFakeAudioParam(8, 0),\n        upX: createFakeAudioParam(3, 0),\n        upY: createFakeAudioParam(4, 1),\n        upZ: createFakeAudioParam(5, 0)\n      };\n    };\n\n    var _ref2 = nativeListener.forwardX === undefined ? createFakeAudioParams() : nativeListener,\n        forwardX = _ref2.forwardX,\n        forwardY = _ref2.forwardY,\n        forwardZ = _ref2.forwardZ,\n        positionX = _ref2.positionX,\n        positionY = _ref2.positionY,\n        positionZ = _ref2.positionZ,\n        upX = _ref2.upX,\n        upY = _ref2.upY,\n        upZ = _ref2.upZ;\n\n    return {\n      get forwardX() {\n        return forwardX;\n      },\n\n      get forwardY() {\n        return forwardY;\n      },\n\n      get forwardZ() {\n        return forwardZ;\n      },\n\n      get positionX() {\n        return positionX;\n      },\n\n      get positionY() {\n        return positionY;\n      },\n\n      get positionZ() {\n        return positionZ;\n      },\n\n      get upX() {\n        return upX;\n      },\n\n      get upY() {\n        return upY;\n      },\n\n      get upZ() {\n        return upZ;\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/audio-listener-factory.js"],"names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","createAudioListenerFactory","createAudioParam","createNativeChannelMergerNode","createNativeConstantSourceNode","createNativeScriptProcessorNode","isNativeOfflineAudioContext","context","nativeContext","nativeListener","listener","createFakeAudioParams","channelMergerNode","channelCount","channelCountMode","channelInterpretation","numberOfInputs","isOffline","scriptProcessorNode","createFakeAudioParam","input","value","constantSourceNode","offset","connect","start","Object","defineProperty","get","lastOrientation","lastPosition","onaudioprocess","inputBuffer","orientation","getChannelData","some","index","setOrientation","positon","setPosition","forwardX","forwardY","forwardZ","positionX","positionY","positionZ","upX","upY","upZ","undefined"],"mappings":"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","sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nexport const createAudioListenerFactory = (createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext) => {\n    return (context, nativeContext) => {\n        const nativeListener = nativeContext.listener;\n        // Bug #117: Only Chrome & Opera support the new interface already.\n        const createFakeAudioParams = () => {\n            const channelMergerNode = createNativeChannelMergerNode(nativeContext, { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'speakers', numberOfInputs: 9 });\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);\n            const createFakeAudioParam = (input, value) => {\n                const constantSourceNode = createNativeConstantSourceNode(nativeContext, { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'discrete', offset: value });\n                constantSourceNode.connect(channelMergerNode, 0, input);\n                // @todo This should be stopped when the context is closed.\n                constantSourceNode.start();\n                Object.defineProperty(constantSourceNode.offset, 'defaultValue', {\n                    get() {\n                        return value;\n                    }\n                });\n                /*\n                 * Bug #62 & #74: Edge & Safari do not support ConstantSourceNodes and do not export the correct values for maxValue and\n                 * minValue for GainNodes.\n                 */\n                return createAudioParam({ context }, isOffline, constantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            };\n            let lastOrientation = [0, 0, -1, 0, 1, 0];\n            let lastPosition = [0, 0, 0];\n            scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {\n                const orientation = [\n                    inputBuffer.getChannelData(0)[0],\n                    inputBuffer.getChannelData(1)[0],\n                    inputBuffer.getChannelData(2)[0],\n                    inputBuffer.getChannelData(3)[0],\n                    inputBuffer.getChannelData(4)[0],\n                    inputBuffer.getChannelData(5)[0]\n                ];\n                if (orientation.some((value, index) => (value !== lastOrientation[index]))) {\n                    nativeListener.setOrientation(...orientation); // tslint:disable-line:deprecation\n                    lastOrientation = orientation;\n                }\n                const positon = [\n                    inputBuffer.getChannelData(6)[0],\n                    inputBuffer.getChannelData(7)[0],\n                    inputBuffer.getChannelData(8)[0]\n                ];\n                if (positon.some((value, index) => (value !== lastPosition[index]))) {\n                    nativeListener.setPosition(...positon); // tslint:disable-line:deprecation\n                    lastPosition = positon;\n                }\n            };\n            channelMergerNode.connect(scriptProcessorNode);\n            return {\n                forwardX: createFakeAudioParam(0, 0),\n                forwardY: createFakeAudioParam(1, 0),\n                forwardZ: createFakeAudioParam(2, -1),\n                positionX: createFakeAudioParam(6, 0),\n                positionY: createFakeAudioParam(7, 0),\n                positionZ: createFakeAudioParam(8, 0),\n                upX: createFakeAudioParam(3, 0),\n                upY: createFakeAudioParam(4, 1),\n                upZ: createFakeAudioParam(5, 0)\n            };\n        };\n        const { forwardX, forwardY, forwardZ, positionX, positionY, positionZ, upX, upY, upZ } = (nativeListener.forwardX === undefined)\n            ? createFakeAudioParams()\n            : nativeListener;\n        return {\n            get forwardX() {\n                return forwardX;\n            },\n            get forwardY() {\n                return forwardY;\n            },\n            get forwardZ() {\n                return forwardZ;\n            },\n            get positionX() {\n                return positionX;\n            },\n            get positionY() {\n                return positionY;\n            },\n            get positionZ() {\n                return positionZ;\n            },\n            get upX() {\n                return upX;\n            },\n            get upY() {\n                return upY;\n            },\n            get upZ() {\n                return upZ;\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-listener-factory.js.map"]},"metadata":{},"sourceType":"module"}