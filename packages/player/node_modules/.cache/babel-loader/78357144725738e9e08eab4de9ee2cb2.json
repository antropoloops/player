{"ast":null,"code":"import _classCallCheck from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _toConsumableArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { AUDIO_NODE_STORE, EVENT_LISTENERS } from '../globals';\nimport { isAudioNode } from '../guards/audio-node';\nimport { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nimport { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { connectNativeAudioNodeToNativeAudioNode } from '../helpers/connect-native-audio-node-to-native-audio-node';\nimport { deleteEventListenerOfAudioNode } from '../helpers/delete-event-listeners-of-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from '../helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from '../helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from '../helpers/get-event-listeners-of-audio-node';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { getNativeAudioParam } from '../helpers/get-native-audio-param';\nimport { getValueForKey } from '../helpers/get-value-for-key';\nimport { insertElementInSet } from '../helpers/insert-element-in-set';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { isPartOfACycle } from '../helpers/is-part-of-a-cycle';\nimport { isPassiveAudioNode } from '../helpers/is-passive-audio-node';\nimport { pickElementFromSet } from '../helpers/pick-element-from-set';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassiveWhenNecessary } from '../helpers/set-internal-state-to-passive-when-necessary';\nimport { testAudioNodeDisconnectMethodSupport } from '../helpers/test-audio-node-disconnect-method-support';\nimport { visitEachAudioNodeOnce } from '../helpers/visit-each-audio-node-once';\nimport { wrapAudioNodeDisconnectMethod } from '../helpers/wrap-audio-node-disconnect-method';\n\nvar addActiveInputConnectionToAudioNode = function addActiveInputConnectionToAudioNode(activeInputs, source, _ref, ignoreDuplicates) {\n  var _ref2 = _slicedToArray(_ref, 3),\n      output = _ref2[0],\n      input = _ref2[1],\n      eventListener = _ref2[2];\n\n  insertElementInSet(activeInputs[input], [source, output, eventListener], function (activeInputConnection) {\n    return activeInputConnection[0] === source && activeInputConnection[1] === output;\n  }, ignoreDuplicates);\n};\n\nvar addActiveInputConnectionToAudioParam = function addActiveInputConnectionToAudioParam(activeInputs, source, _ref3, ignoreDuplicates) {\n  var _ref4 = _slicedToArray(_ref3, 2),\n      output = _ref4[0],\n      eventListener = _ref4[1];\n\n  insertElementInSet(activeInputs, [source, output, eventListener], function (activeInputConnection) {\n    return activeInputConnection[0] === source && activeInputConnection[1] === output;\n  }, ignoreDuplicates);\n};\n\nvar deleteActiveInputConnectionToAudioNode = function deleteActiveInputConnectionToAudioNode(activeInputs, source, output, input) {\n  return pickElementFromSet(activeInputs[input], function (activeInputConnection) {\n    return activeInputConnection[0] === source && activeInputConnection[1] === output;\n  });\n};\n\nvar deleteActiveInputConnectionToAudioParam = function deleteActiveInputConnectionToAudioParam(activeInputs, source, output) {\n  return pickElementFromSet(activeInputs, function (activeInputConnection) {\n    return activeInputConnection[0] === source && activeInputConnection[1] === output;\n  });\n};\n\nvar addPassiveInputConnectionToAudioNode = function addPassiveInputConnectionToAudioNode(passiveInputs, input, _ref5, ignoreDuplicates) {\n  var _ref6 = _slicedToArray(_ref5, 3),\n      source = _ref6[0],\n      output = _ref6[1],\n      eventListener = _ref6[2];\n\n  var passiveInputConnections = passiveInputs.get(source);\n\n  if (passiveInputConnections === undefined) {\n    passiveInputs.set(source, new Set([[output, input, eventListener]]));\n  } else {\n    insertElementInSet(passiveInputConnections, [output, input, eventListener], function (passiveInputConnection) {\n      return passiveInputConnection[0] === output && passiveInputConnection[1] === input;\n    }, ignoreDuplicates);\n  }\n};\n\nvar addPassiveInputConnectionToAudioParam = function addPassiveInputConnectionToAudioParam(passiveInputs, _ref7, ignoreDuplicates) {\n  var _ref8 = _slicedToArray(_ref7, 3),\n      source = _ref8[0],\n      output = _ref8[1],\n      eventListener = _ref8[2];\n\n  var passiveInputConnections = passiveInputs.get(source);\n\n  if (passiveInputConnections === undefined) {\n    passiveInputs.set(source, new Set([[output, eventListener]]));\n  } else {\n    insertElementInSet(passiveInputConnections, [output, eventListener], function (passiveInputConnection) {\n      return passiveInputConnection[0] === output;\n    }, ignoreDuplicates);\n  }\n};\n\nvar deletePassiveInputConnectionToAudioNode = function deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input) {\n  var passiveInputConnections = getValueForKey(passiveInputs, source);\n  var matchingConnection = pickElementFromSet(passiveInputConnections, function (passiveInputConnection) {\n    return passiveInputConnection[0] === output && passiveInputConnection[1] === input;\n  });\n\n  if (passiveInputConnections.size === 0) {\n    passiveInputs.delete(source);\n  }\n\n  return matchingConnection;\n};\n\nvar deletePassiveInputConnectionToAudioParam = function deletePassiveInputConnectionToAudioParam(passiveInputs, source, output) {\n  var passiveInputConnections = getValueForKey(passiveInputs, source);\n  var matchingConnection = pickElementFromSet(passiveInputConnections, function (passiveInputConnection) {\n    return passiveInputConnection[0] === output;\n  });\n\n  if (passiveInputConnections.size === 0) {\n    passiveInputs.delete(source);\n  }\n\n  return matchingConnection;\n};\n\nvar addConnectionToAudioNodeOfAudioContext = function addConnectionToAudioNodeOfAudioContext(source, destination, output, input) {\n  var _getAudioNodeConnecti = getAudioNodeConnections(destination),\n      activeInputs = _getAudioNodeConnecti.activeInputs,\n      passiveInputs = _getAudioNodeConnecti.passiveInputs;\n\n  var _getAudioNodeConnecti2 = getAudioNodeConnections(source),\n      outputs = _getAudioNodeConnecti2.outputs;\n\n  var eventListeners = getEventListenersOfAudioNode(source);\n\n  var eventListener = function eventListener(isActive) {\n    var nativeDestinationAudioNode = getNativeAudioNode(destination);\n    var nativeSourceAudioNode = getNativeAudioNode(source);\n\n    if (isActive) {\n      var partialConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n      addActiveInputConnectionToAudioNode(activeInputs, source, partialConnection, false);\n\n      if (!isPartOfACycle(source)) {\n        connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n      }\n\n      if (isPassiveAudioNode(destination)) {\n        setInternalStateToActive(destination);\n      }\n    } else {\n      var _partialConnection = deleteActiveInputConnectionToAudioNode(activeInputs, source, output, input);\n\n      addPassiveInputConnectionToAudioNode(passiveInputs, input, _partialConnection, false);\n\n      if (!isPartOfACycle(source)) {\n        disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n      }\n\n      if (isActiveAudioNode(destination)) {\n        setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n      }\n    }\n  };\n\n  if (insertElementInSet(outputs, [destination, output, input], function (outputConnection) {\n    return outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input;\n  }, true)) {\n    eventListeners.add(eventListener);\n\n    if (isActiveAudioNode(source)) {\n      addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, eventListener], true);\n    } else {\n      addPassiveInputConnectionToAudioNode(passiveInputs, input, [source, output, eventListener], true);\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nvar addConnectionToAudioNodeOfOfflineAudioContext = function addConnectionToAudioNodeOfOfflineAudioContext(source, destination, output, input) {\n  var _getAudioNodeConnecti3 = getAudioNodeConnections(source),\n      outputs = _getAudioNodeConnecti3.outputs;\n\n  if (insertElementInSet(outputs, [destination, output, input], function (outputConnection) {\n    return outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input;\n  }, true)) {\n    var _getAudioNodeConnecti4 = getAudioNodeConnections(destination),\n        activeInputs = _getAudioNodeConnecti4.activeInputs;\n\n    addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, null], true);\n    return true;\n  }\n\n  return false;\n};\n\nvar addConnectionToAudioParamOfAudioContext = function addConnectionToAudioParamOfAudioContext(source, destination, output) {\n  var _getAudioParamConnect = getAudioParamConnections(destination),\n      activeInputs = _getAudioParamConnect.activeInputs,\n      passiveInputs = _getAudioParamConnect.passiveInputs;\n\n  var _getAudioNodeConnecti5 = getAudioNodeConnections(source),\n      outputs = _getAudioNodeConnecti5.outputs;\n\n  var eventListeners = getEventListenersOfAudioNode(source);\n\n  var eventListener = function eventListener(isActive) {\n    var nativeAudioNode = getNativeAudioNode(source);\n    var nativeAudioParam = getNativeAudioParam(destination);\n\n    if (isActive) {\n      var partialConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n      addActiveInputConnectionToAudioParam(activeInputs, source, partialConnection, false);\n\n      if (!isPartOfACycle(source)) {\n        nativeAudioNode.connect(nativeAudioParam, output);\n      }\n    } else {\n      var _partialConnection2 = deleteActiveInputConnectionToAudioParam(activeInputs, source, output);\n\n      addPassiveInputConnectionToAudioParam(passiveInputs, _partialConnection2, false);\n\n      if (!isPartOfACycle(source)) {\n        nativeAudioNode.disconnect(nativeAudioParam, output);\n      }\n    }\n  };\n\n  if (insertElementInSet(outputs, [destination, output], function (outputConnection) {\n    return outputConnection[0] === destination && outputConnection[1] === output;\n  }, true)) {\n    eventListeners.add(eventListener);\n\n    if (isActiveAudioNode(source)) {\n      addActiveInputConnectionToAudioParam(activeInputs, source, [output, eventListener], true);\n    } else {\n      addPassiveInputConnectionToAudioParam(passiveInputs, [source, output, eventListener], true);\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nvar addConnectionToAudioParamOfOfflineAudioContext = function addConnectionToAudioParamOfOfflineAudioContext(source, destination, output) {\n  var _getAudioNodeConnecti6 = getAudioNodeConnections(source),\n      outputs = _getAudioNodeConnecti6.outputs;\n\n  if (insertElementInSet(outputs, [destination, output], function (outputConnection) {\n    return outputConnection[0] === destination && outputConnection[1] === output;\n  }, true)) {\n    var _getAudioParamConnect2 = getAudioParamConnections(destination),\n        activeInputs = _getAudioParamConnect2.activeInputs;\n\n    addActiveInputConnectionToAudioParam(activeInputs, source, [output, null], true);\n    return true;\n  }\n\n  return false;\n};\n\nvar deleteActiveInputConnection = function deleteActiveInputConnection(activeInputConnections, source, output) {\n  var _iterator = _createForOfIteratorHelper(activeInputConnections),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var activeInputConnection = _step.value;\n\n      if (activeInputConnection[0] === source && activeInputConnection[1] === output) {\n        activeInputConnections.delete(activeInputConnection);\n        return activeInputConnection;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return null;\n};\n\nvar deleteInputConnectionOfAudioNode = function deleteInputConnectionOfAudioNode(source, destination, output, input) {\n  var _getAudioNodeConnecti7 = getAudioNodeConnections(destination),\n      activeInputs = _getAudioNodeConnecti7.activeInputs,\n      passiveInputs = _getAudioNodeConnecti7.passiveInputs;\n\n  var activeInputConnection = deleteActiveInputConnection(activeInputs[input], source, output);\n\n  if (activeInputConnection === null) {\n    var passiveInputConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n    return [passiveInputConnection[2], false];\n  }\n\n  return [activeInputConnection[2], true];\n};\n\nvar deleteInputConnectionOfAudioParam = function deleteInputConnectionOfAudioParam(source, destination, output) {\n  var _getAudioParamConnect3 = getAudioParamConnections(destination),\n      activeInputs = _getAudioParamConnect3.activeInputs,\n      passiveInputs = _getAudioParamConnect3.passiveInputs;\n\n  var activeInputConnection = deleteActiveInputConnection(activeInputs, source, output);\n\n  if (activeInputConnection === null) {\n    var passiveInputConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n    return [passiveInputConnection[1], false];\n  }\n\n  return [activeInputConnection[2], true];\n};\n\nvar deleteInputsOfAudioNode = function deleteInputsOfAudioNode(source, destination, output, input) {\n  var _deleteInputConnectio = deleteInputConnectionOfAudioNode(source, destination, output, input),\n      _deleteInputConnectio2 = _slicedToArray(_deleteInputConnectio, 2),\n      listener = _deleteInputConnectio2[0],\n      isActive = _deleteInputConnectio2[1];\n\n  if (listener !== null) {\n    deleteEventListenerOfAudioNode(source, listener);\n\n    if (isActive && !isPartOfACycle(source)) {\n      disconnectNativeAudioNodeFromNativeAudioNode(getNativeAudioNode(source), getNativeAudioNode(destination), output, input);\n    }\n  }\n\n  if (isActiveAudioNode(destination)) {\n    var _getAudioNodeConnecti8 = getAudioNodeConnections(destination),\n        activeInputs = _getAudioNodeConnecti8.activeInputs;\n\n    setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n  }\n};\n\nvar deleteInputsOfAudioParam = function deleteInputsOfAudioParam(source, destination, output) {\n  var _deleteInputConnectio3 = deleteInputConnectionOfAudioParam(source, destination, output),\n      _deleteInputConnectio4 = _slicedToArray(_deleteInputConnectio3, 2),\n      listener = _deleteInputConnectio4[0],\n      isActive = _deleteInputConnectio4[1];\n\n  if (listener !== null) {\n    deleteEventListenerOfAudioNode(source, listener);\n\n    if (isActive && !isPartOfACycle(source)) {\n      getNativeAudioNode(source).disconnect(getNativeAudioParam(destination), output);\n    }\n  }\n};\n\nvar deleteAnyConnection = function deleteAnyConnection(source) {\n  var audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n  var destinations = [];\n\n  var _iterator2 = _createForOfIteratorHelper(audioNodeConnectionsOfSource.outputs),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var outputConnection = _step2.value;\n\n      if (isAudioNodeOutputConnection(outputConnection)) {\n        deleteInputsOfAudioNode.apply(void 0, [source].concat(_toConsumableArray(outputConnection)));\n      } else {\n        deleteInputsOfAudioParam.apply(void 0, [source].concat(_toConsumableArray(outputConnection)));\n      }\n\n      destinations.push(outputConnection[0]);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  audioNodeConnectionsOfSource.outputs.clear();\n  return destinations;\n};\n\nvar deleteConnectionAtOutput = function deleteConnectionAtOutput(source, output) {\n  var audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n  var destinations = [];\n\n  var _iterator3 = _createForOfIteratorHelper(audioNodeConnectionsOfSource.outputs),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var outputConnection = _step3.value;\n\n      if (outputConnection[1] === output) {\n        if (isAudioNodeOutputConnection(outputConnection)) {\n          deleteInputsOfAudioNode.apply(void 0, [source].concat(_toConsumableArray(outputConnection)));\n        } else {\n          deleteInputsOfAudioParam.apply(void 0, [source].concat(_toConsumableArray(outputConnection)));\n        }\n\n        destinations.push(outputConnection[0]);\n        audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return destinations;\n};\n\nvar deleteConnectionToDestination = function deleteConnectionToDestination(source, destination, output, input) {\n  var audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n  return Array.from(audioNodeConnectionsOfSource.outputs).filter(function (outputConnection) {\n    return outputConnection[0] === destination && (output === undefined || outputConnection[1] === output) && (input === undefined || outputConnection[2] === input);\n  }).map(function (outputConnection) {\n    if (isAudioNodeOutputConnection(outputConnection)) {\n      deleteInputsOfAudioNode.apply(void 0, [source].concat(_toConsumableArray(outputConnection)));\n    } else {\n      deleteInputsOfAudioParam.apply(void 0, [source].concat(_toConsumableArray(outputConnection)));\n    }\n\n    audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n    return outputConnection[0];\n  });\n};\n\nexport var createAudioNodeConstructor = function createAudioNodeConstructor(addAudioNodeConnections, auxiliaryGainNodeStore, cacheTestResult, createIncrementCycleCounter, createIndexSizeError, createInvalidAccessError, createNotSupportedError, decrementCycleCounter, detectCycles, eventTargetConstructor, getNativeContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext) {\n  return /*#__PURE__*/function (_eventTargetConstruct) {\n    _inherits(AudioNode, _eventTargetConstruct);\n\n    var _super = _createSuper(AudioNode);\n\n    function AudioNode(context, isActive, nativeAudioNode, audioNodeRenderer) {\n      var _this;\n\n      _classCallCheck(this, AudioNode);\n\n      _this = _super.call(this, nativeAudioNode);\n      _this._context = context;\n      _this._nativeAudioNode = nativeAudioNode;\n      var nativeContext = getNativeContext(context); // Bug #12: Safari does not support to disconnect a specific destination.\n      // @todo Make sure this is not used with an OfflineAudioContext.\n\n      if (!isNativeOfflineAudioContext(nativeContext) && true !== cacheTestResult(testAudioNodeDisconnectMethodSupport, function () {\n        return testAudioNodeDisconnectMethodSupport(nativeContext);\n      })) {\n        wrapAudioNodeDisconnectMethod(nativeAudioNode);\n      }\n\n      AUDIO_NODE_STORE.set(_assertThisInitialized(_this), nativeAudioNode);\n      EVENT_LISTENERS.set(_assertThisInitialized(_this), new Set());\n\n      if (isActive) {\n        setInternalStateToActive(_assertThisInitialized(_this));\n      }\n\n      addAudioNodeConnections(_assertThisInitialized(_this), audioNodeRenderer, nativeAudioNode);\n      return _this;\n    }\n\n    _createClass(AudioNode, [{\n      key: \"connect\",\n      value: function connect(destination) {\n        var output = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var input = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        var nativeContext = getNativeContext(this._context);\n        var isOffline = isNativeOfflineAudioContext(nativeContext);\n\n        if (isNativeAudioNode(destination) || isNativeAudioParam(destination)) {\n          throw createInvalidAccessError();\n        }\n\n        if (isAudioNode(destination)) {\n          var nativeDestinationAudioNode = getNativeAudioNode(destination);\n\n          try {\n            var connection = connectNativeAudioNodeToNativeAudioNode(this._nativeAudioNode, nativeDestinationAudioNode, output, input);\n\n            if (isOffline || isPassiveAudioNode(this)) {\n              var _this$_nativeAudioNod;\n\n              (_this$_nativeAudioNod = this._nativeAudioNode).disconnect.apply(_this$_nativeAudioNod, _toConsumableArray(connection));\n            } else if (isPassiveAudioNode(destination)) {\n              setInternalStateToActive(destination);\n            } // An AudioWorklet needs a connection because it otherwise may truncate the input array.\n            // @todo Count the number of connections which depend on this auxiliary GainNode to know when it can be removed again.\n\n\n            if (isAudioWorkletNode(destination)) {\n              var auxiliaryGainNodes = auxiliaryGainNodeStore.get(nativeDestinationAudioNode);\n\n              if (auxiliaryGainNodes === undefined) {\n                var nativeGainNode = nativeContext.createGain();\n                nativeGainNode.connect(connection[0], 0, connection[2]);\n                auxiliaryGainNodeStore.set(nativeDestinationAudioNode, new Map([[input, nativeGainNode]]));\n              } else if (auxiliaryGainNodes.get(input) === undefined) {\n                var _nativeGainNode = nativeContext.createGain();\n\n                _nativeGainNode.connect(connection[0], 0, connection[2]);\n\n                auxiliaryGainNodes.set(input, _nativeGainNode);\n              }\n            }\n          } catch (err) {\n            // Bug #41: Only Chrome, Firefox and Opera throw the correct exception by now.\n            if (err.code === 12) {\n              throw createInvalidAccessError();\n            }\n\n            throw err; // tslint:disable-line:rxjs-throw-error\n          }\n\n          var isNewConnectionToAudioNode = isOffline ? addConnectionToAudioNodeOfOfflineAudioContext(this, destination, output, input) : addConnectionToAudioNodeOfAudioContext(this, destination, output, input); // Bug #164: Only Firefox detects cycles so far.\n\n          if (isNewConnectionToAudioNode) {\n            var cycles = detectCycles([this], destination);\n            visitEachAudioNodeOnce(cycles, createIncrementCycleCounter(isOffline));\n          }\n\n          return destination;\n        }\n\n        var nativeAudioParam = getNativeAudioParam(destination);\n        /*\n         * Bug #147 & #153: Safari does not support to connect an input signal to the playbackRate AudioParam of an\n         * AudioBufferSourceNode. This can't be easily detected and that's why the outdated name property is used here to identify\n         * Safari.\n         */\n\n        if (nativeAudioParam.name === 'playbackRate') {\n          throw createNotSupportedError();\n        }\n\n        try {\n          this._nativeAudioNode.connect(nativeAudioParam, output);\n\n          if (isOffline || isPassiveAudioNode(this)) {\n            this._nativeAudioNode.disconnect(nativeAudioParam, output);\n          }\n        } catch (err) {\n          // Bug #58: Only Firefox does throw an InvalidStateError yet.\n          if (err.code === 12) {\n            throw createInvalidAccessError();\n          }\n\n          throw err; // tslint:disable-line:rxjs-throw-error\n        }\n\n        var isNewConnectionToAudioParam = isOffline ? addConnectionToAudioParamOfOfflineAudioContext(this, destination, output) : addConnectionToAudioParamOfAudioContext(this, destination, output); // Bug #164: Only Firefox detects cycles so far.\n\n        if (isNewConnectionToAudioParam) {\n          var _cycles = detectCycles([this], destination);\n\n          visitEachAudioNodeOnce(_cycles, createIncrementCycleCounter(isOffline));\n        }\n      }\n    }, {\n      key: \"disconnect\",\n      value: function disconnect(destinationOrOutput, output, input) {\n        var destinations;\n\n        if (destinationOrOutput === undefined) {\n          destinations = deleteAnyConnection(this);\n        } else if (typeof destinationOrOutput === 'number') {\n          if (destinationOrOutput < 0 || destinationOrOutput >= this.numberOfOutputs) {\n            throw createIndexSizeError();\n          }\n\n          destinations = deleteConnectionAtOutput(this, destinationOrOutput);\n        } else {\n          if (output !== undefined && (output < 0 || output >= this.numberOfOutputs)) {\n            throw createIndexSizeError();\n          }\n\n          if (isAudioNode(destinationOrOutput) && input !== undefined && (input < 0 || input >= destinationOrOutput.numberOfInputs)) {\n            throw createIndexSizeError();\n          }\n\n          destinations = deleteConnectionToDestination(this, destinationOrOutput, output, input);\n\n          if (destinations.length === 0) {\n            throw createInvalidAccessError();\n          }\n        } // Bug #164: Only Firefox detects cycles so far.\n\n\n        var _iterator4 = _createForOfIteratorHelper(destinations),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var destination = _step4.value;\n            var cycles = detectCycles([this], destination);\n            visitEachAudioNodeOnce(cycles, decrementCycleCounter);\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      }\n    }, {\n      key: \"channelCount\",\n      get: function get() {\n        return this._nativeAudioNode.channelCount;\n      },\n      set: function set(value) {\n        this._nativeAudioNode.channelCount = value;\n      }\n    }, {\n      key: \"channelCountMode\",\n      get: function get() {\n        return this._nativeAudioNode.channelCountMode;\n      },\n      set: function set(value) {\n        this._nativeAudioNode.channelCountMode = value;\n      }\n    }, {\n      key: \"channelInterpretation\",\n      get: function get() {\n        return this._nativeAudioNode.channelInterpretation;\n      },\n      set: function set(value) {\n        this._nativeAudioNode.channelInterpretation = value;\n      }\n    }, {\n      key: \"context\",\n      get: function get() {\n        return this._context;\n      }\n    }, {\n      key: \"numberOfInputs\",\n      get: function get() {\n        return this._nativeAudioNode.numberOfInputs;\n      }\n    }, {\n      key: \"numberOfOutputs\",\n      get: function get() {\n        return this._nativeAudioNode.numberOfOutputs;\n      }\n    }]);\n\n    return AudioNode;\n  }(eventTargetConstructor);\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/audio-node-constructor.js"],"names":["AUDIO_NODE_STORE","EVENT_LISTENERS","isAudioNode","isAudioNodeOutputConnection","isAudioWorkletNode","connectNativeAudioNodeToNativeAudioNode","deleteEventListenerOfAudioNode","disconnectNativeAudioNodeFromNativeAudioNode","getAudioNodeConnections","getAudioParamConnections","getEventListenersOfAudioNode","getNativeAudioNode","getNativeAudioParam","getValueForKey","insertElementInSet","isActiveAudioNode","isPartOfACycle","isPassiveAudioNode","pickElementFromSet","setInternalStateToActive","setInternalStateToPassiveWhenNecessary","testAudioNodeDisconnectMethodSupport","visitEachAudioNodeOnce","wrapAudioNodeDisconnectMethod","addActiveInputConnectionToAudioNode","activeInputs","source","ignoreDuplicates","output","input","eventListener","activeInputConnection","addActiveInputConnectionToAudioParam","deleteActiveInputConnectionToAudioNode","deleteActiveInputConnectionToAudioParam","addPassiveInputConnectionToAudioNode","passiveInputs","passiveInputConnections","get","undefined","set","Set","passiveInputConnection","addPassiveInputConnectionToAudioParam","deletePassiveInputConnectionToAudioNode","matchingConnection","size","delete","deletePassiveInputConnectionToAudioParam","addConnectionToAudioNodeOfAudioContext","destination","outputs","eventListeners","isActive","nativeDestinationAudioNode","nativeSourceAudioNode","partialConnection","outputConnection","add","addConnectionToAudioNodeOfOfflineAudioContext","addConnectionToAudioParamOfAudioContext","nativeAudioNode","nativeAudioParam","connect","disconnect","addConnectionToAudioParamOfOfflineAudioContext","deleteActiveInputConnection","activeInputConnections","deleteInputConnectionOfAudioNode","deleteInputConnectionOfAudioParam","deleteInputsOfAudioNode","listener","deleteInputsOfAudioParam","deleteAnyConnection","audioNodeConnectionsOfSource","destinations","push","clear","deleteConnectionAtOutput","deleteConnectionToDestination","Array","from","filter","map","createAudioNodeConstructor","addAudioNodeConnections","auxiliaryGainNodeStore","cacheTestResult","createIncrementCycleCounter","createIndexSizeError","createInvalidAccessError","createNotSupportedError","decrementCycleCounter","detectCycles","eventTargetConstructor","getNativeContext","isNativeAudioNode","isNativeAudioParam","isNativeOfflineAudioContext","context","audioNodeRenderer","_context","_nativeAudioNode","nativeContext","isOffline","connection","auxiliaryGainNodes","nativeGainNode","createGain","Map","err","code","isNewConnectionToAudioNode","cycles","name","isNewConnectionToAudioParam","destinationOrOutput","numberOfOutputs","numberOfInputs","length","channelCount","value","channelCountMode","channelInterpretation"],"mappings":"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","sourcesContent":["import { AUDIO_NODE_STORE, EVENT_LISTENERS } from '../globals';\nimport { isAudioNode } from '../guards/audio-node';\nimport { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nimport { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { connectNativeAudioNodeToNativeAudioNode } from '../helpers/connect-native-audio-node-to-native-audio-node';\nimport { deleteEventListenerOfAudioNode } from '../helpers/delete-event-listeners-of-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from '../helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from '../helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from '../helpers/get-event-listeners-of-audio-node';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { getNativeAudioParam } from '../helpers/get-native-audio-param';\nimport { getValueForKey } from '../helpers/get-value-for-key';\nimport { insertElementInSet } from '../helpers/insert-element-in-set';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { isPartOfACycle } from '../helpers/is-part-of-a-cycle';\nimport { isPassiveAudioNode } from '../helpers/is-passive-audio-node';\nimport { pickElementFromSet } from '../helpers/pick-element-from-set';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassiveWhenNecessary } from '../helpers/set-internal-state-to-passive-when-necessary';\nimport { testAudioNodeDisconnectMethodSupport } from '../helpers/test-audio-node-disconnect-method-support';\nimport { visitEachAudioNodeOnce } from '../helpers/visit-each-audio-node-once';\nimport { wrapAudioNodeDisconnectMethod } from '../helpers/wrap-audio-node-disconnect-method';\nconst addActiveInputConnectionToAudioNode = (activeInputs, source, [output, input, eventListener], ignoreDuplicates) => {\n    insertElementInSet(activeInputs[input], [source, output, eventListener], (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output), ignoreDuplicates);\n};\nconst addActiveInputConnectionToAudioParam = (activeInputs, source, [output, eventListener], ignoreDuplicates) => {\n    insertElementInSet(activeInputs, [source, output, eventListener], (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output), ignoreDuplicates);\n};\nconst deleteActiveInputConnectionToAudioNode = (activeInputs, source, output, input) => {\n    return pickElementFromSet(activeInputs[input], (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output));\n};\nconst deleteActiveInputConnectionToAudioParam = (activeInputs, source, output) => {\n    return pickElementFromSet(activeInputs, (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output));\n};\nconst addPassiveInputConnectionToAudioNode = (passiveInputs, input, [source, output, eventListener], ignoreDuplicates) => {\n    const passiveInputConnections = passiveInputs.get(source);\n    if (passiveInputConnections === undefined) {\n        passiveInputs.set(source, new Set([[output, input, eventListener]]));\n    }\n    else {\n        insertElementInSet(passiveInputConnections, [output, input, eventListener], (passiveInputConnection) => (passiveInputConnection[0] === output && passiveInputConnection[1] === input), ignoreDuplicates);\n    }\n};\nconst addPassiveInputConnectionToAudioParam = (passiveInputs, [source, output, eventListener], ignoreDuplicates) => {\n    const passiveInputConnections = passiveInputs.get(source);\n    if (passiveInputConnections === undefined) {\n        passiveInputs.set(source, new Set([[output, eventListener]]));\n    }\n    else {\n        insertElementInSet(passiveInputConnections, [output, eventListener], (passiveInputConnection) => (passiveInputConnection[0] === output), ignoreDuplicates);\n    }\n};\nconst deletePassiveInputConnectionToAudioNode = (passiveInputs, source, output, input) => {\n    const passiveInputConnections = getValueForKey(passiveInputs, source);\n    const matchingConnection = pickElementFromSet(passiveInputConnections, (passiveInputConnection) => (passiveInputConnection[0] === output && passiveInputConnection[1] === input));\n    if (passiveInputConnections.size === 0) {\n        passiveInputs.delete(source);\n    }\n    return matchingConnection;\n};\nconst deletePassiveInputConnectionToAudioParam = (passiveInputs, source, output) => {\n    const passiveInputConnections = getValueForKey(passiveInputs, source);\n    const matchingConnection = pickElementFromSet(passiveInputConnections, (passiveInputConnection) => (passiveInputConnection[0] === output));\n    if (passiveInputConnections.size === 0) {\n        passiveInputs.delete(source);\n    }\n    return matchingConnection;\n};\nconst addConnectionToAudioNodeOfAudioContext = (source, destination, output, input) => {\n    const { activeInputs, passiveInputs } = getAudioNodeConnections(destination);\n    const { outputs } = getAudioNodeConnections(source);\n    const eventListeners = getEventListenersOfAudioNode(source);\n    const eventListener = ((isActive) => {\n        const nativeDestinationAudioNode = getNativeAudioNode(destination);\n        const nativeSourceAudioNode = getNativeAudioNode(source);\n        if (isActive) {\n            const partialConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n            addActiveInputConnectionToAudioNode(activeInputs, source, partialConnection, false);\n            if (!isPartOfACycle(source)) {\n                connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n            }\n            if (isPassiveAudioNode(destination)) {\n                setInternalStateToActive(destination);\n            }\n        }\n        else {\n            const partialConnection = deleteActiveInputConnectionToAudioNode(activeInputs, source, output, input);\n            addPassiveInputConnectionToAudioNode(passiveInputs, input, partialConnection, false);\n            if (!isPartOfACycle(source)) {\n                disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n            }\n            if (isActiveAudioNode(destination)) {\n                setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n            }\n        }\n    });\n    if (insertElementInSet(outputs, [destination, output, input], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input), true)) {\n        eventListeners.add(eventListener);\n        if (isActiveAudioNode(source)) {\n            addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, eventListener], true);\n        }\n        else {\n            addPassiveInputConnectionToAudioNode(passiveInputs, input, [source, output, eventListener], true);\n        }\n        return true;\n    }\n    return false;\n};\nconst addConnectionToAudioNodeOfOfflineAudioContext = (source, destination, output, input) => {\n    const { outputs } = getAudioNodeConnections(source);\n    if (insertElementInSet(outputs, [destination, output, input], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input), true)) {\n        const { activeInputs } = getAudioNodeConnections(destination);\n        addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, null], true);\n        return true;\n    }\n    return false;\n};\nconst addConnectionToAudioParamOfAudioContext = (source, destination, output) => {\n    const { activeInputs, passiveInputs } = getAudioParamConnections(destination);\n    const { outputs } = getAudioNodeConnections(source);\n    const eventListeners = getEventListenersOfAudioNode(source);\n    const eventListener = ((isActive) => {\n        const nativeAudioNode = getNativeAudioNode(source);\n        const nativeAudioParam = getNativeAudioParam(destination);\n        if (isActive) {\n            const partialConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n            addActiveInputConnectionToAudioParam(activeInputs, source, partialConnection, false);\n            if (!isPartOfACycle(source)) {\n                nativeAudioNode.connect(nativeAudioParam, output);\n            }\n        }\n        else {\n            const partialConnection = deleteActiveInputConnectionToAudioParam(activeInputs, source, output);\n            addPassiveInputConnectionToAudioParam(passiveInputs, partialConnection, false);\n            if (!isPartOfACycle(source)) {\n                nativeAudioNode.disconnect(nativeAudioParam, output);\n            }\n        }\n    });\n    if (insertElementInSet(outputs, [destination, output], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output), true)) {\n        eventListeners.add(eventListener);\n        if (isActiveAudioNode(source)) {\n            addActiveInputConnectionToAudioParam(activeInputs, source, [output, eventListener], true);\n        }\n        else {\n            addPassiveInputConnectionToAudioParam(passiveInputs, [source, output, eventListener], true);\n        }\n        return true;\n    }\n    return false;\n};\nconst addConnectionToAudioParamOfOfflineAudioContext = (source, destination, output) => {\n    const { outputs } = getAudioNodeConnections(source);\n    if (insertElementInSet(outputs, [destination, output], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output), true)) {\n        const { activeInputs } = getAudioParamConnections(destination);\n        addActiveInputConnectionToAudioParam(activeInputs, source, [output, null], true);\n        return true;\n    }\n    return false;\n};\nconst deleteActiveInputConnection = (activeInputConnections, source, output) => {\n    for (const activeInputConnection of activeInputConnections) {\n        if (activeInputConnection[0] === source && activeInputConnection[1] === output) {\n            activeInputConnections.delete(activeInputConnection);\n            return activeInputConnection;\n        }\n    }\n    return null;\n};\nconst deleteInputConnectionOfAudioNode = (source, destination, output, input) => {\n    const { activeInputs, passiveInputs } = getAudioNodeConnections(destination);\n    const activeInputConnection = deleteActiveInputConnection(activeInputs[input], source, output);\n    if (activeInputConnection === null) {\n        const passiveInputConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n        return [passiveInputConnection[2], false];\n    }\n    return [activeInputConnection[2], true];\n};\nconst deleteInputConnectionOfAudioParam = (source, destination, output) => {\n    const { activeInputs, passiveInputs } = getAudioParamConnections(destination);\n    const activeInputConnection = deleteActiveInputConnection(activeInputs, source, output);\n    if (activeInputConnection === null) {\n        const passiveInputConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n        return [passiveInputConnection[1], false];\n    }\n    return [activeInputConnection[2], true];\n};\nconst deleteInputsOfAudioNode = (source, destination, output, input) => {\n    const [listener, isActive] = deleteInputConnectionOfAudioNode(source, destination, output, input);\n    if (listener !== null) {\n        deleteEventListenerOfAudioNode(source, listener);\n        if (isActive && !isPartOfACycle(source)) {\n            disconnectNativeAudioNodeFromNativeAudioNode(getNativeAudioNode(source), getNativeAudioNode(destination), output, input);\n        }\n    }\n    if (isActiveAudioNode(destination)) {\n        const { activeInputs } = getAudioNodeConnections(destination);\n        setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n    }\n};\nconst deleteInputsOfAudioParam = (source, destination, output) => {\n    const [listener, isActive] = deleteInputConnectionOfAudioParam(source, destination, output);\n    if (listener !== null) {\n        deleteEventListenerOfAudioNode(source, listener);\n        if (isActive && !isPartOfACycle(source)) {\n            getNativeAudioNode(source)\n                .disconnect(getNativeAudioParam(destination), output);\n        }\n    }\n};\nconst deleteAnyConnection = (source) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    const destinations = [];\n    for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n        if (isAudioNodeOutputConnection(outputConnection)) {\n            deleteInputsOfAudioNode(source, ...outputConnection);\n        }\n        else {\n            deleteInputsOfAudioParam(source, ...outputConnection);\n        }\n        destinations.push(outputConnection[0]);\n    }\n    audioNodeConnectionsOfSource.outputs.clear();\n    return destinations;\n};\nconst deleteConnectionAtOutput = (source, output) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    const destinations = [];\n    for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n        if (outputConnection[1] === output) {\n            if (isAudioNodeOutputConnection(outputConnection)) {\n                deleteInputsOfAudioNode(source, ...outputConnection);\n            }\n            else {\n                deleteInputsOfAudioParam(source, ...outputConnection);\n            }\n            destinations.push(outputConnection[0]);\n            audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n        }\n    }\n    return destinations;\n};\nconst deleteConnectionToDestination = (source, destination, output, input) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    return Array\n        .from(audioNodeConnectionsOfSource.outputs)\n        .filter((outputConnection) => (outputConnection[0] === destination\n        && (output === undefined || outputConnection[1] === output)\n        && (input === undefined || outputConnection[2] === input)))\n        .map((outputConnection) => {\n        if (isAudioNodeOutputConnection(outputConnection)) {\n            deleteInputsOfAudioNode(source, ...outputConnection);\n        }\n        else {\n            deleteInputsOfAudioParam(source, ...outputConnection);\n        }\n        audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n        return outputConnection[0];\n    });\n};\nexport const createAudioNodeConstructor = (addAudioNodeConnections, auxiliaryGainNodeStore, cacheTestResult, createIncrementCycleCounter, createIndexSizeError, createInvalidAccessError, createNotSupportedError, decrementCycleCounter, detectCycles, eventTargetConstructor, getNativeContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext) => {\n    return class AudioNode extends eventTargetConstructor {\n        constructor(context, isActive, nativeAudioNode, audioNodeRenderer) {\n            super(nativeAudioNode);\n            this._context = context;\n            this._nativeAudioNode = nativeAudioNode;\n            const nativeContext = getNativeContext(context);\n            // Bug #12: Safari does not support to disconnect a specific destination.\n            // @todo Make sure this is not used with an OfflineAudioContext.\n            if (!isNativeOfflineAudioContext(nativeContext) && true !== cacheTestResult(testAudioNodeDisconnectMethodSupport, () => {\n                return testAudioNodeDisconnectMethodSupport(nativeContext);\n            })) {\n                wrapAudioNodeDisconnectMethod(nativeAudioNode);\n            }\n            AUDIO_NODE_STORE.set(this, nativeAudioNode);\n            EVENT_LISTENERS.set(this, new Set());\n            if (isActive) {\n                setInternalStateToActive(this);\n            }\n            addAudioNodeConnections(this, audioNodeRenderer, nativeAudioNode);\n        }\n        get channelCount() {\n            return this._nativeAudioNode.channelCount;\n        }\n        set channelCount(value) {\n            this._nativeAudioNode.channelCount = value;\n        }\n        get channelCountMode() {\n            return this._nativeAudioNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            this._nativeAudioNode.channelCountMode = value;\n        }\n        get channelInterpretation() {\n            return this._nativeAudioNode.channelInterpretation;\n        }\n        set channelInterpretation(value) {\n            this._nativeAudioNode.channelInterpretation = value;\n        }\n        get context() {\n            return this._context;\n        }\n        get numberOfInputs() {\n            return this._nativeAudioNode.numberOfInputs;\n        }\n        get numberOfOutputs() {\n            return this._nativeAudioNode.numberOfOutputs;\n        }\n        connect(destination, output = 0, input = 0) {\n            const nativeContext = getNativeContext(this._context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            if (isNativeAudioNode(destination) || isNativeAudioParam(destination)) {\n                throw createInvalidAccessError();\n            }\n            if (isAudioNode(destination)) {\n                const nativeDestinationAudioNode = getNativeAudioNode(destination);\n                try {\n                    const connection = connectNativeAudioNodeToNativeAudioNode(this._nativeAudioNode, nativeDestinationAudioNode, output, input);\n                    if (isOffline || isPassiveAudioNode(this)) {\n                        this._nativeAudioNode.disconnect(...connection);\n                    }\n                    else if (isPassiveAudioNode(destination)) {\n                        setInternalStateToActive(destination);\n                    }\n                    // An AudioWorklet needs a connection because it otherwise may truncate the input array.\n                    // @todo Count the number of connections which depend on this auxiliary GainNode to know when it can be removed again.\n                    if (isAudioWorkletNode(destination)) {\n                        const auxiliaryGainNodes = auxiliaryGainNodeStore.get(nativeDestinationAudioNode);\n                        if (auxiliaryGainNodes === undefined) {\n                            const nativeGainNode = nativeContext.createGain();\n                            nativeGainNode.connect(connection[0], 0, connection[2]);\n                            auxiliaryGainNodeStore.set(nativeDestinationAudioNode, new Map([[input, nativeGainNode]]));\n                        }\n                        else if (auxiliaryGainNodes.get(input) === undefined) {\n                            const nativeGainNode = nativeContext.createGain();\n                            nativeGainNode.connect(connection[0], 0, connection[2]);\n                            auxiliaryGainNodes.set(input, nativeGainNode);\n                        }\n                    }\n                }\n                catch (err) {\n                    // Bug #41: Only Chrome, Firefox and Opera throw the correct exception by now.\n                    if (err.code === 12) {\n                        throw createInvalidAccessError();\n                    }\n                    throw err; // tslint:disable-line:rxjs-throw-error\n                }\n                const isNewConnectionToAudioNode = (isOffline)\n                    ? addConnectionToAudioNodeOfOfflineAudioContext(this, destination, output, input)\n                    : addConnectionToAudioNodeOfAudioContext(this, destination, output, input);\n                // Bug #164: Only Firefox detects cycles so far.\n                if (isNewConnectionToAudioNode) {\n                    const cycles = detectCycles([this], destination);\n                    visitEachAudioNodeOnce(cycles, createIncrementCycleCounter(isOffline));\n                }\n                return destination;\n            }\n            const nativeAudioParam = getNativeAudioParam(destination);\n            /*\n             * Bug #147 & #153: Safari does not support to connect an input signal to the playbackRate AudioParam of an\n             * AudioBufferSourceNode. This can't be easily detected and that's why the outdated name property is used here to identify\n             * Safari.\n             */\n            if (nativeAudioParam.name === 'playbackRate') {\n                throw createNotSupportedError();\n            }\n            try {\n                this._nativeAudioNode.connect(nativeAudioParam, output);\n                if (isOffline || isPassiveAudioNode(this)) {\n                    this._nativeAudioNode.disconnect(nativeAudioParam, output);\n                }\n            }\n            catch (err) {\n                // Bug #58: Only Firefox does throw an InvalidStateError yet.\n                if (err.code === 12) {\n                    throw createInvalidAccessError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            }\n            const isNewConnectionToAudioParam = (isOffline)\n                ? addConnectionToAudioParamOfOfflineAudioContext(this, destination, output)\n                : addConnectionToAudioParamOfAudioContext(this, destination, output);\n            // Bug #164: Only Firefox detects cycles so far.\n            if (isNewConnectionToAudioParam) {\n                const cycles = detectCycles([this], destination);\n                visitEachAudioNodeOnce(cycles, createIncrementCycleCounter(isOffline));\n            }\n        }\n        disconnect(destinationOrOutput, output, input) {\n            let destinations;\n            if (destinationOrOutput === undefined) {\n                destinations = deleteAnyConnection(this);\n            }\n            else if (typeof destinationOrOutput === 'number') {\n                if (destinationOrOutput < 0 || destinationOrOutput >= this.numberOfOutputs) {\n                    throw createIndexSizeError();\n                }\n                destinations = deleteConnectionAtOutput(this, destinationOrOutput);\n            }\n            else {\n                if (output !== undefined && (output < 0 || output >= this.numberOfOutputs)) {\n                    throw createIndexSizeError();\n                }\n                if (isAudioNode(destinationOrOutput)\n                    && input !== undefined\n                    && (input < 0 || input >= destinationOrOutput.numberOfInputs)) {\n                    throw createIndexSizeError();\n                }\n                destinations = deleteConnectionToDestination(this, destinationOrOutput, output, input);\n                if (destinations.length === 0) {\n                    throw createInvalidAccessError();\n                }\n            }\n            // Bug #164: Only Firefox detects cycles so far.\n            for (const destination of destinations) {\n                const cycles = detectCycles([this], destination);\n                visitEachAudioNodeOnce(cycles, decrementCycleCounter);\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}