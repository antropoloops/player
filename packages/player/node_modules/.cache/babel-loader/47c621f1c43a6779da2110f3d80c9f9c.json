{"ast":null,"code":"import debounce from\"lodash.debounce\";import ResizeObserver from\"resize-observer-polyfill\";export function addResizeObserver(element,callback){var debouncedCallback=debounce(callback,250);var resizeObserver=new ResizeObserver(function(entries){if(!Array.isArray(entries)){return;}// Since we only observe the one element, we don't need to loop over the array\nif(!entries.length){return;}var entry=entries[0];var width=entry.contentRect.width;var height=entry.contentRect.height;debouncedCallback(width,height);});resizeObserver.observe(element);return function(){return resizeObserver.unobserve(element);};}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/packages/player/src/add-resize-observer/index.ts"],"names":["debounce","ResizeObserver","addResizeObserver","element","callback","debouncedCallback","resizeObserver","entries","Array","isArray","length","entry","width","contentRect","height","observe","unobserve"],"mappings":"AAAA,MAAOA,CAAAA,QAAP,KAAqB,iBAArB,CACA,MAAOC,CAAAA,cAAP,KAA2B,0BAA3B,CAIA,MAAO,SAASC,CAAAA,iBAAT,CAA2BC,OAA3B,CAAyCC,QAAzC,CAAmE,CACxE,GAAMC,CAAAA,iBAAiB,CAAGL,QAAQ,CAACI,QAAD,CAAW,GAAX,CAAlC,CACA,GAAME,CAAAA,cAAc,CAAG,GAAIL,CAAAA,cAAJ,CAAmB,SAACM,OAAD,CAAa,CACrD,GAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,OAAd,CAAL,CAA6B,CAC3B,OACD,CACD;AACA,GAAI,CAACA,OAAO,CAACG,MAAb,CAAqB,CACnB,OACD,CACD,GAAMC,CAAAA,KAAK,CAAGJ,OAAO,CAAC,CAAD,CAArB,CACA,GAAMK,CAAAA,KAAK,CAAGD,KAAK,CAACE,WAAN,CAAkBD,KAAhC,CACA,GAAME,CAAAA,MAAM,CAAGH,KAAK,CAACE,WAAN,CAAkBC,MAAjC,CACAT,iBAAiB,CAACO,KAAD,CAAQE,MAAR,CAAjB,CACD,CAZsB,CAAvB,CAaAR,cAAc,CAACS,OAAf,CAAuBZ,OAAvB,EACA,MAAO,kBAAMG,CAAAA,cAAc,CAACU,SAAf,CAAyBb,OAAzB,CAAN,EAAP,CACD","sourcesContent":["import debounce from \"lodash.debounce\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\ntype ResizeListener = (width: number, height: number) => void;\n\nexport function addResizeObserver(element: any, callback: ResizeListener) {\n  const debouncedCallback = debounce(callback, 250);\n  const resizeObserver = new ResizeObserver((entries) => {\n    if (!Array.isArray(entries)) {\n      return;\n    }\n    // Since we only observe the one element, we don't need to loop over the array\n    if (!entries.length) {\n      return;\n    }\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    debouncedCallback(width, height);\n  });\n  resizeObserver.observe(element);\n  return () => resizeObserver.unobserve(element);\n}\n"]},"metadata":{},"sourceType":"module"}