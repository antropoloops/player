{"ast":null,"code":"import debug from \"debug\";\nimport { AudioContext } from \"standardized-audio-context\";\nconst log = debug(\"atpls:context\");\nconst activeListeners = [];\nconst context = new AudioContext();\ncontext.onstatechange = handleStateChange;\nhandleStateChange();\nautoUnlockAudio();\n\nfunction handleStateChange() {\n  const state = context.state;\n  log(\"state %s\", state);\n\n  if (state === \"running\") {\n    const listeners = activeListeners.slice();\n    activeListeners.length = 0;\n    listeners.forEach(listener => listener(context));\n  }\n}\n\nfunction autoUnlockAudio() {\n  function unlock() {\n    context.resume().then(startAudioContext);\n  }\n\n  function detach() {\n    // Remove the touch start listener.\n    document.removeEventListener(\"touchstart\", unlock, true);\n    document.removeEventListener(\"touchend\", unlock, true);\n    document.removeEventListener(\"click\", unlock, true);\n  } // Setup a touch start listener to attempt an unlock in.\n\n\n  document.addEventListener(\"touchstart\", unlock, true);\n  document.addEventListener(\"touchend\", unlock, true);\n  document.addEventListener(\"click\", unlock, true);\n}\n/**\n * @see https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio\n */\n\n\nexport function getActiveAudioContext() {\n  if (context.state === \"running\") {\n    return Promise.resolve(context);\n  } else {\n    return new Promise(resolve => {\n      activeListeners.push(resolve);\n    });\n  }\n}\n\nfunction startAudioContext() {\n  return new Promise(resolve => {\n    log(\"start context\"); // iOS hack. See https://github.com/tambien/StartAudioContext/blob/master/StartAudioContext.js\n\n    const buffer = context.createBuffer(1, 1, context.sampleRate);\n    const source = context.createBufferSource();\n    source.buffer = buffer;\n    source.connect(context.destination);\n    source.start(0);\n\n    source.onended = function () {\n      source.disconnect(0);\n    };\n  });\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/AudioContext.ts"],"names":["debug","AudioContext","log","activeListeners","context","onstatechange","handleStateChange","autoUnlockAudio","state","listeners","slice","length","forEach","listener","unlock","resume","then","startAudioContext","detach","document","removeEventListener","addEventListener","getActiveAudioContext","Promise","resolve","push","buffer","createBuffer","sampleRate","source","createBufferSource","connect","destination","start","onended","disconnect"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,4BAA7B;AAEA,MAAMC,GAAG,GAAGF,KAAK,CAAC,eAAD,CAAjB;AAGA,MAAMG,eAAiC,GAAG,EAA1C;AACA,MAAMC,OAAO,GAAG,IAAIH,YAAJ,EAAhB;AACAG,OAAO,CAACC,aAAR,GAAwBC,iBAAxB;AAEAA,iBAAiB;AACjBC,eAAe;;AAEf,SAASD,iBAAT,GAA6B;AAC3B,QAAME,KAAK,GAAGJ,OAAO,CAACI,KAAtB;AACAN,EAAAA,GAAG,CAAC,UAAD,EAAaM,KAAb,CAAH;;AACA,MAAIA,KAAK,KAAK,SAAd,EAAyB;AACvB,UAAMC,SAAS,GAAGN,eAAe,CAACO,KAAhB,EAAlB;AACAP,IAAAA,eAAe,CAACQ,MAAhB,GAAyB,CAAzB;AACAF,IAAAA,SAAS,CAACG,OAAV,CAAkBC,QAAQ,IAAIA,QAAQ,CAACT,OAAD,CAAtC;AACD;AACF;;AAED,SAASG,eAAT,GAA2B;AACzB,WAASO,MAAT,GAAkB;AAChBV,IAAAA,OAAO,CAACW,MAAR,GAAiBC,IAAjB,CAAsBC,iBAAtB;AACD;;AAED,WAASC,MAAT,GAAkB;AAChB;AACAC,IAAAA,QAAQ,CAACC,mBAAT,CAA6B,YAA7B,EAA2CN,MAA3C,EAAmD,IAAnD;AACAK,IAAAA,QAAQ,CAACC,mBAAT,CAA6B,UAA7B,EAAyCN,MAAzC,EAAiD,IAAjD;AACAK,IAAAA,QAAQ,CAACC,mBAAT,CAA6B,OAA7B,EAAsCN,MAAtC,EAA8C,IAA9C;AACD,GAVwB,CAYzB;;;AACAK,EAAAA,QAAQ,CAACE,gBAAT,CAA0B,YAA1B,EAAwCP,MAAxC,EAAgD,IAAhD;AACAK,EAAAA,QAAQ,CAACE,gBAAT,CAA0B,UAA1B,EAAsCP,MAAtC,EAA8C,IAA9C;AACAK,EAAAA,QAAQ,CAACE,gBAAT,CAA0B,OAA1B,EAAmCP,MAAnC,EAA2C,IAA3C;AACD;AAED;;;;;AAGA,OAAO,SAASQ,qBAAT,GAAwD;AAC7D,MAAIlB,OAAO,CAACI,KAAR,KAAkB,SAAtB,EAAiC;AAC/B,WAAOe,OAAO,CAACC,OAAR,CAAgBpB,OAAhB,CAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAImB,OAAJ,CAA0BC,OAAO,IAAI;AAC1CrB,MAAAA,eAAe,CAACsB,IAAhB,CAAqBD,OAArB;AACD,KAFM,CAAP;AAGD;AACF;;AAED,SAASP,iBAAT,GAAoD;AAClD,SAAO,IAAIM,OAAJ,CAAYC,OAAO,IAAI;AAC5BtB,IAAAA,GAAG,CAAC,eAAD,CAAH,CAD4B,CAE5B;;AACA,UAAMwB,MAAM,GAAGtB,OAAO,CAACuB,YAAR,CAAqB,CAArB,EAAwB,CAAxB,EAA2BvB,OAAO,CAACwB,UAAnC,CAAf;AACA,UAAMC,MAAM,GAAGzB,OAAO,CAAC0B,kBAAR,EAAf;AACAD,IAAAA,MAAM,CAACH,MAAP,GAAgBA,MAAhB;AACAG,IAAAA,MAAM,CAACE,OAAP,CAAe3B,OAAO,CAAC4B,WAAvB;AACAH,IAAAA,MAAM,CAACI,KAAP,CAAa,CAAb;;AACAJ,IAAAA,MAAM,CAACK,OAAP,GAAiB,YAAW;AAC1BL,MAAAA,MAAM,CAACM,UAAP,CAAkB,CAAlB;AACD,KAFD;AAGD,GAXM,CAAP;AAYD","sourcesContent":["import debug from \"debug\";\nimport { AudioContext } from \"standardized-audio-context\";\n\nconst log = debug(\"atpls:context\");\n\ntype ResolveContext = (value: AudioContext) => void;\nconst activeListeners: ResolveContext[] = [];\nconst context = new AudioContext();\ncontext.onstatechange = handleStateChange;\n\nhandleStateChange();\nautoUnlockAudio();\n\nfunction handleStateChange() {\n  const state = context.state;\n  log(\"state %s\", state);\n  if (state === \"running\") {\n    const listeners = activeListeners.slice();\n    activeListeners.length = 0;\n    listeners.forEach(listener => listener(context));\n  }\n}\n\nfunction autoUnlockAudio() {\n  function unlock() {\n    context.resume().then(startAudioContext);\n  }\n\n  function detach() {\n    // Remove the touch start listener.\n    document.removeEventListener(\"touchstart\", unlock, true);\n    document.removeEventListener(\"touchend\", unlock, true);\n    document.removeEventListener(\"click\", unlock, true);\n  }\n\n  // Setup a touch start listener to attempt an unlock in.\n  document.addEventListener(\"touchstart\", unlock, true);\n  document.addEventListener(\"touchend\", unlock, true);\n  document.addEventListener(\"click\", unlock, true);\n}\n\n/**\n * @see https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio\n */\nexport function getActiveAudioContext(): Promise<AudioContext> {\n  if (context.state === \"running\") {\n    return Promise.resolve(context);\n  } else {\n    return new Promise<AudioContext>(resolve => {\n      activeListeners.push(resolve);\n    });\n  }\n}\n\nfunction startAudioContext(): Promise<AudioContext> {\n  return new Promise(resolve => {\n    log(\"start context\");\n    // iOS hack. See https://github.com/tambien/StartAudioContext/blob/master/StartAudioContext.js\n    const buffer = context.createBuffer(1, 1, context.sampleRate);\n    const source = context.createBufferSource();\n    source.buffer = buffer;\n    source.connect(context.destination);\n    source.start(0);\n    source.onended = function() {\n      source.disconnect(0);\n    };\n  });\n}\n"]},"metadata":{},"sourceType":"module"}