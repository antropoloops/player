{"ast":null,"code":"var _jsxFileName = \"/Users/dani/Antropoloops/atpls-player/src/ui/Player/Player.tsx\";\nimport React, { useEffect } from \"react\";\nimport { autoUnlockAudio } from \"../../player/AudioContext\";\nimport { Spinner } from \"../shared/Spinner\";\nimport { useDeviceType } from \"../useDeviceType\";\nimport { Controller } from \"./Controller\";\nimport { Session } from \"./Session\";\nimport { Sidebar } from \"./Sidebar\";\nimport { useFullscreen } from \"./useFullscreen\";\nimport { useKeyboardListener } from \"./useKeyboardListener\";\nimport { usePlayer } from \"./usePlayer\";\nimport { useSession } from \"./useSession\";\n\nconst SessionHeader = ({\n  title\n}) => React.createElement(\"div\", {\n  className: \"Header\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23\n  },\n  __self: this\n}, React.createElement(\"button\", {\n  className: \"btn-link\",\n  onClick: session.toggle,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24\n  },\n  __self: this\n}, title));\n\nexport const Player = ({\n  audioset\n}) => {\n  var _player$control;\n\n  const session = useSession(audioset);\n  const player = usePlayer(audioset, session.loader);\n\n  const _useFullscreen = useFullscreen(),\n        isFullscreen = _useFullscreen.isFullscreen,\n        toggleFullscreen = _useFullscreen.toggleFullscreen;\n\n  const _useDeviceType = useDeviceType(),\n        isDesktop = _useDeviceType.isDesktop;\n\n  useKeyboardListener((_player$control = player.control) === null || _player$control === void 0 ? void 0 : _player$control.keyboard);\n  useEffect(() => {\n    autoUnlockAudio();\n  }, []);\n  const areVisualsVisible = isDesktop || session.started;\n  const isSidebarVisible = !isFullscreen;\n  const showControl = true;\n  const title = audioset.meta.title;\n\n  const Header = () => React.createElement(SessionHeader, {\n    title: title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  });\n\n  return React.createElement(\"div\", {\n    className: \"App Player\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, isSidebarVisible && React.createElement(Sidebar, {\n    header: Header,\n    audioset: audioset,\n    onFullscreen: toggleFullscreen,\n    onStopAll: () => {\n      var _player$control2;\n\n      return player === null || player === void 0 ? void 0 : (_player$control2 = player.control) === null || _player$control2 === void 0 ? void 0 : _player$control2.stopAll(0);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, session.loading && React.createElement(\"div\", {\n    className: \"spin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  })), session.visible && React.createElement(Session, {\n    audioset: audioset,\n    isStarted: session.started,\n    onStart: () => session.start(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), showControl && React.createElement(Controller, {\n    audioset: audioset,\n    state: player.state,\n    control: session.started ? player.control : undefined,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  })), areVisualsVisible && React.createElement(\"div\", {\n    className: \"visuals\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"visuals\",\n    ref: player.visualsRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  })));\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/Player.tsx"],"names":["React","useEffect","autoUnlockAudio","Spinner","useDeviceType","Controller","Session","Sidebar","useFullscreen","useKeyboardListener","usePlayer","useSession","SessionHeader","title","session","toggle","Player","audioset","player","loader","isFullscreen","toggleFullscreen","isDesktop","control","keyboard","areVisualsVisible","started","isSidebarVisible","showControl","meta","Header","stopAll","loading","visible","start","state","undefined","visualsRef"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { Audioset } from \"../../audioset\";\nimport { autoUnlockAudio } from \"../../player/AudioContext\";\nimport { BundleHeaderProps } from \"../shared/Header\";\nimport { Spinner } from \"../shared/Spinner\";\nimport { useDeviceType } from \"../useDeviceType\";\nimport { Controller } from \"./Controller\";\nimport { Session } from \"./Session\";\nimport { Sidebar } from \"./Sidebar\";\nimport { useFullscreen } from \"./useFullscreen\";\nimport { useKeyboardListener } from \"./useKeyboardListener\";\nimport { usePlayer } from \"./usePlayer\";\nimport { useSession } from \"./useSession\";\n\nexport interface PlayerProps {\n  audioset: Audioset;\n}\n\ninterface SessionHeaderProps {\n  title: string;\n}\nconst SessionHeader = ({ title }: BundleHeaderProps) => (\n  <div className=\"Header\">\n    <button className=\"btn-link\" onClick={session.toggle}>\n      {title}\n    </button>\n  </div>\n);\nexport const Player = ({ audioset }: PlayerProps) => {\n  const session = useSession(audioset);\n  const player = usePlayer(audioset, session.loader);\n  const { isFullscreen, toggleFullscreen } = useFullscreen();\n  const { isDesktop } = useDeviceType();\n  useKeyboardListener(player.control?.keyboard);\n\n  useEffect(() => {\n    autoUnlockAudio();\n  }, []);\n\n  const areVisualsVisible = isDesktop || session.started;\n  const isSidebarVisible = !isFullscreen;\n\n  const showControl = true;\n\n  const { title } = audioset.meta;\n  const Header = () => <SessionHeader title={title} />;\n\n  return (\n    <div className=\"App Player\">\n      {isSidebarVisible && (\n        <Sidebar\n          header={Header}\n          audioset={audioset}\n          onFullscreen={toggleFullscreen}\n          onStopAll={() => player?.control?.stopAll(0)}\n        >\n          {session.loading && (\n            <div className=\"spin\">\n              <Spinner />\n            </div>\n          )}\n          {session.visible && (\n            <Session\n              audioset={audioset}\n              isStarted={session.started}\n              onStart={() => session.start()}\n            />\n          )}\n          {showControl && (\n            <Controller\n              audioset={audioset}\n              state={player.state}\n              control={session.started ? player.control : undefined}\n            />\n          )}\n        </Sidebar>\n      )}\n      {areVisualsVisible && (\n        <div className=\"visuals\">\n          <div id=\"visuals\" ref={player.visualsRef} />\n        </div>\n      )}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}