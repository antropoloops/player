{"ast":null,"code":"const DEFAULT_OPTIONS = {\n  attack: 0.003,\n  channelCount: 2,\n  channelCountMode: 'clamped-max',\n  channelInterpretation: 'speakers',\n  knee: 30,\n  ratio: 12,\n  release: 0.25,\n  threshold: -24\n};\nexport const createDynamicsCompressorNodeConstructor = (audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext) => {\n  return class DynamicsCompressorNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const dynamicsCompressorNodeRenderer = isOffline ? createDynamicsCompressorNodeRenderer() : null;\n      super(context, false, nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer); // Bug #110: Edge does not export the correct values for maxValue and minValue.\n\n      this._attack = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.attack, 1, 0);\n      this._knee = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.knee, 40, 0);\n      this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;\n      this._ratio = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.ratio, 20, 1);\n      this._release = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.release, 1, 0);\n      this._threshold = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.threshold, 0, -100);\n    }\n\n    get attack() {\n      return this._attack;\n    }\n    /*\n     * Bug #108: Only Chrome, Firefox and Opera disallow a channelCount of three and above yet which is why the getter and setter needs\n     * to be overwritten here.\n     */\n\n\n    get channelCount() {\n      return this._nativeDynamicsCompressorNode.channelCount;\n    }\n\n    set channelCount(value) {\n      const previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;\n      this._nativeDynamicsCompressorNode.channelCount = value;\n\n      if (value > 2) {\n        this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;\n        throw createNotSupportedError();\n      }\n    }\n    /*\n     * Bug #109: Only Chrome, Firefox and Opera disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be\n     * overwritten here.\n     */\n\n\n    get channelCountMode() {\n      return this._nativeDynamicsCompressorNode.channelCountMode;\n    }\n\n    set channelCountMode(value) {\n      const previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;\n      this._nativeDynamicsCompressorNode.channelCountMode = value;\n\n      if (value === 'max') {\n        this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;\n        throw createNotSupportedError();\n      }\n    }\n\n    get knee() {\n      return this._knee;\n    }\n\n    get ratio() {\n      return this._ratio;\n    }\n\n    get reduction() {\n      // Bug #111: Safari returns an AudioParam instead of a number.\n      if (typeof this._nativeDynamicsCompressorNode.reduction.value === 'number') {\n        return this._nativeDynamicsCompressorNode.reduction.value;\n      }\n\n      return this._nativeDynamicsCompressorNode.reduction;\n    }\n\n    get release() {\n      return this._release;\n    }\n\n    get threshold() {\n      return this._threshold;\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/dynamics-compressor-node-constructor.js"],"names":["DEFAULT_OPTIONS","attack","channelCount","channelCountMode","channelInterpretation","knee","ratio","release","threshold","createDynamicsCompressorNodeConstructor","audioNodeConstructor","createAudioParam","createDynamicsCompressorNodeRenderer","createNativeDynamicsCompressorNode","createNotSupportedError","getNativeContext","isNativeOfflineAudioContext","DynamicsCompressorNode","constructor","context","options","nativeContext","mergedOptions","nativeDynamicsCompressorNode","isOffline","dynamicsCompressorNodeRenderer","_attack","_knee","_nativeDynamicsCompressorNode","_ratio","_release","_threshold","value","previousChannelCount","reduction"],"mappings":"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","sourcesContent":["const DEFAULT_OPTIONS = {\n    attack: 0.003,\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    knee: 30,\n    ratio: 12,\n    release: 0.25,\n    threshold: -24\n};\nexport const createDynamicsCompressorNodeConstructor = (audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext) => {\n    return class DynamicsCompressorNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const dynamicsCompressorNodeRenderer = ((isOffline)\n                ? createDynamicsCompressorNodeRenderer()\n                : null);\n            super(context, false, nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer);\n            // Bug #110: Edge does not export the correct values for maxValue and minValue.\n            this._attack = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.attack, 1, 0);\n            this._knee = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.knee, 40, 0);\n            this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;\n            this._ratio = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.ratio, 20, 1);\n            this._release = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.release, 1, 0);\n            this._threshold = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.threshold, 0, -100);\n        }\n        get attack() {\n            return this._attack;\n        }\n        /*\n         * Bug #108: Only Chrome, Firefox and Opera disallow a channelCount of three and above yet which is why the getter and setter needs\n         * to be overwritten here.\n         */\n        get channelCount() {\n            return this._nativeDynamicsCompressorNode.channelCount;\n        }\n        set channelCount(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;\n            this._nativeDynamicsCompressorNode.channelCount = value;\n            if (value > 2) {\n                this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;\n                throw createNotSupportedError();\n            }\n        }\n        /*\n         * Bug #109: Only Chrome, Firefox and Opera disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be\n         * overwritten here.\n         */\n        get channelCountMode() {\n            return this._nativeDynamicsCompressorNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;\n            this._nativeDynamicsCompressorNode.channelCountMode = value;\n            if (value === 'max') {\n                this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;\n                throw createNotSupportedError();\n            }\n        }\n        get knee() {\n            return this._knee;\n        }\n        get ratio() {\n            return this._ratio;\n        }\n        get reduction() {\n            // Bug #111: Safari returns an AudioParam instead of a number.\n            if (typeof this._nativeDynamicsCompressorNode.reduction.value === 'number') {\n                return this._nativeDynamicsCompressorNode.reduction.value;\n            }\n            return this._nativeDynamicsCompressorNode.reduction;\n        }\n        get release() {\n            return this._release;\n        }\n        get threshold() {\n            return this._threshold;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/dynamics-compressor-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}