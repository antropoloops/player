{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createDelayNodeRendererFactory = function createDelayNodeRendererFactory(connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function (maxDelayTime) {\n    var renderedNativeDelayNodes = new WeakMap();\n\n    var createDelayNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext, trace) {\n        var nativeDelayNode, nativeDelayNodeIsOwnedByContext, options;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeDelayNode = getNativeAudioNode(proxy); // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n                nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n\n                if (!nativeDelayNodeIsOwnedByContext) {\n                  options = {\n                    channelCount: nativeDelayNode.channelCount,\n                    channelCountMode: nativeDelayNode.channelCountMode,\n                    channelInterpretation: nativeDelayNode.channelInterpretation,\n                    delayTime: nativeDelayNode.delayTime.value,\n                    maxDelayTime: maxDelayTime\n                  };\n                  nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n                }\n\n                renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n\n                if (nativeDelayNodeIsOwnedByContext) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 7;\n                return renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime, trace);\n\n              case 7:\n                _context.next = 11;\n                break;\n\n              case 9:\n                _context.next = 11;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime, trace);\n\n              case 11:\n                _context.next = 13;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode, trace);\n\n              case 13:\n                return _context.abrupt(\"return\", nativeDelayNode);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createDelayNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext, trace) {\n        var renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeDelayNode !== undefined) {\n          return Promise.resolve(renderedNativeDelayNode);\n        }\n\n        return createDelayNode(proxy, nativeOfflineAudioContext, trace);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/delay-node-renderer-factory.js"],"names":["isOwnedByContext","createDelayNodeRendererFactory","connectAudioParam","createNativeDelayNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","maxDelayTime","renderedNativeDelayNodes","WeakMap","createDelayNode","proxy","nativeOfflineAudioContext","trace","nativeDelayNode","nativeDelayNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","delayTime","value","set","render","renderedNativeDelayNode","get","undefined","Promise","resolve"],"mappings":";;AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AACA,OAAO,IAAMC,8BAA8B,GAAG,SAAjCA,8BAAiC,CAACC,iBAAD,EAAoBC,qBAApB,EAA2CC,kBAA3C,EAA+DC,gBAA/D,EAAiFC,uBAAjF,EAA6G;AACvJ,SAAO,UAACC,YAAD,EAAkB;AACrB,QAAMC,wBAAwB,GAAG,IAAIC,OAAJ,EAAjC;;AACA,QAAMC,eAAe;AAAA,0EAAG,iBAAOC,KAAP,EAAcC,yBAAd,EAAyCC,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,gBAAAA,eADgB,GACEV,kBAAkB,CAACO,KAAD,CADpB,EAEpB;;AACMI,gBAAAA,+BAHc,GAGoBf,gBAAgB,CAACc,eAAD,EAAkBF,yBAAlB,CAHpC;;AAIpB,oBAAI,CAACG,+BAAL,EAAsC;AAC5BC,kBAAAA,OAD4B,GAClB;AACZC,oBAAAA,YAAY,EAAEH,eAAe,CAACG,YADlB;AAEZC,oBAAAA,gBAAgB,EAAEJ,eAAe,CAACI,gBAFtB;AAGZC,oBAAAA,qBAAqB,EAAEL,eAAe,CAACK,qBAH3B;AAIZC,oBAAAA,SAAS,EAAEN,eAAe,CAACM,SAAhB,CAA0BC,KAJzB;AAKZd,oBAAAA,YAAY,EAAZA;AALY,mBADkB;AAQlCO,kBAAAA,eAAe,GAAGX,qBAAqB,CAACS,yBAAD,EAA4BI,OAA5B,CAAvC;AACH;;AACDR,gBAAAA,wBAAwB,CAACc,GAAzB,CAA6BV,yBAA7B,EAAwDE,eAAxD;;AAdoB,oBAefC,+BAfe;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAgBVV,gBAAgB,CAACO,yBAAD,EAA4BD,KAAK,CAACS,SAAlC,EAA6CN,eAAe,CAACM,SAA7D,EAAwEP,KAAxE,CAhBN;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAmBVX,iBAAiB,CAACU,yBAAD,EAA4BD,KAAK,CAACS,SAAlC,EAA6CN,eAAe,CAACM,SAA7D,EAAwEP,KAAxE,CAnBP;;AAAA;AAAA;AAAA,uBAqBdP,uBAAuB,CAACK,KAAD,EAAQC,yBAAR,EAAmCE,eAAnC,EAAoDD,KAApD,CArBT;;AAAA;AAAA,iDAsBbC,eAtBa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAfJ,eAAe;AAAA;AAAA;AAAA,OAArB;;AAwBA,WAAO;AACHa,MAAAA,MADG,kBACIZ,KADJ,EACWC,yBADX,EACsCC,KADtC,EAC6C;AAC5C,YAAMW,uBAAuB,GAAGhB,wBAAwB,CAACiB,GAAzB,CAA6Bb,yBAA7B,CAAhC;;AACA,YAAIY,uBAAuB,KAAKE,SAAhC,EAA2C;AACvC,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,uBAAhB,CAAP;AACH;;AACD,eAAOd,eAAe,CAACC,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,CAAtB;AACH;AAPE,KAAP;AASH,GAnCD;AAoCH,CArCM","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDelayNodeRendererFactory = (connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return (maxDelayTime) => {\n        const renderedNativeDelayNodes = new WeakMap();\n        const createDelayNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeDelayNode = getNativeAudioNode(proxy);\n            // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n            if (!nativeDelayNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeDelayNode.channelCount,\n                    channelCountMode: nativeDelayNode.channelCountMode,\n                    channelInterpretation: nativeDelayNode.channelInterpretation,\n                    delayTime: nativeDelayNode.delayTime.value,\n                    maxDelayTime\n                };\n                nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n            if (!nativeDelayNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode, trace);\n            return nativeDelayNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeDelayNode !== undefined) {\n                    return Promise.resolve(renderedNativeDelayNode);\n                }\n                return createDelayNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/delay-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}