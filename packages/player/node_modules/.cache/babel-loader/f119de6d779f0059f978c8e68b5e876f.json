{"ast":null,"code":"// Given a hash of GeoJSON objects, returns a hash of GeoJSON geometry objects.\n// Any null input geometry objects are represented as {type: null} in the output.\n// Any feature.{id,properties,bbox} are transferred to the output geometry object.\n// Each output geometry object is a shallow copy of the input (e.g., properties, coordinates)!\nexport default function (inputs) {\n  var outputs = {},\n      key;\n\n  for (key in inputs) outputs[key] = geomifyObject(inputs[key]);\n\n  return outputs;\n}\n\nfunction geomifyObject(input) {\n  return input == null ? {\n    type: null\n  } : (input.type === \"FeatureCollection\" ? geomifyFeatureCollection : input.type === \"Feature\" ? geomifyFeature : geomifyGeometry)(input);\n}\n\nfunction geomifyFeatureCollection(input) {\n  var output = {\n    type: \"GeometryCollection\",\n    geometries: input.features.map(geomifyFeature)\n  };\n  if (input.bbox != null) output.bbox = input.bbox;\n  return output;\n}\n\nfunction geomifyFeature(input) {\n  var output = geomifyGeometry(input.geometry),\n      key; // eslint-disable-line no-unused-vars\n\n  if (input.id != null) output.id = input.id;\n  if (input.bbox != null) output.bbox = input.bbox;\n\n  for (key in input.properties) {\n    output.properties = input.properties;\n    break;\n  }\n\n  return output;\n}\n\nfunction geomifyGeometry(input) {\n  if (input == null) return {\n    type: null\n  };\n  var output = input.type === \"GeometryCollection\" ? {\n    type: \"GeometryCollection\",\n    geometries: input.geometries.map(geomifyGeometry)\n  } : input.type === \"Point\" || input.type === \"MultiPoint\" ? {\n    type: input.type,\n    coordinates: input.coordinates\n  } : {\n    type: input.type,\n    arcs: input.coordinates\n  }; // TODO Check for unknown types?\n\n  if (input.bbox != null) output.bbox = input.bbox;\n  return output;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/topojson-server/src/geometry.js"],"names":["inputs","outputs","key","geomifyObject","input","type","geomifyFeatureCollection","geomifyFeature","geomifyGeometry","output","geometries","features","map","bbox","geometry","id","properties","coordinates","arcs"],"mappings":"AAAA;AACA;AACA;AACA;AACA,eAAe,UAASA,MAAT,EAAiB;AAC9B,MAAIC,OAAO,GAAG,EAAd;AAAA,MAAkBC,GAAlB;;AACA,OAAKA,GAAL,IAAYF,MAAZ,EAAoBC,OAAO,CAACC,GAAD,CAAP,GAAeC,aAAa,CAACH,MAAM,CAACE,GAAD,CAAP,CAA5B;;AACpB,SAAOD,OAAP;AACD;;AAED,SAASE,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,SAAOA,KAAK,IAAI,IAAT,GAAgB;AAACC,IAAAA,IAAI,EAAE;AAAP,GAAhB,GACD,CAACD,KAAK,CAACC,IAAN,KAAe,mBAAf,GAAqCC,wBAArC,GACDF,KAAK,CAACC,IAAN,KAAe,SAAf,GAA2BE,cAA3B,GACAC,eAFA,EAEiBJ,KAFjB,CADN;AAID;;AAED,SAASE,wBAAT,CAAkCF,KAAlC,EAAyC;AACvC,MAAIK,MAAM,GAAG;AAACJ,IAAAA,IAAI,EAAE,oBAAP;AAA6BK,IAAAA,UAAU,EAAEN,KAAK,CAACO,QAAN,CAAeC,GAAf,CAAmBL,cAAnB;AAAzC,GAAb;AACA,MAAIH,KAAK,CAACS,IAAN,IAAc,IAAlB,EAAwBJ,MAAM,CAACI,IAAP,GAAcT,KAAK,CAACS,IAApB;AACxB,SAAOJ,MAAP;AACD;;AAED,SAASF,cAAT,CAAwBH,KAAxB,EAA+B;AAC7B,MAAIK,MAAM,GAAGD,eAAe,CAACJ,KAAK,CAACU,QAAP,CAA5B;AAAA,MAA8CZ,GAA9C,CAD6B,CACsB;;AACnD,MAAIE,KAAK,CAACW,EAAN,IAAY,IAAhB,EAAsBN,MAAM,CAACM,EAAP,GAAYX,KAAK,CAACW,EAAlB;AACtB,MAAIX,KAAK,CAACS,IAAN,IAAc,IAAlB,EAAwBJ,MAAM,CAACI,IAAP,GAAcT,KAAK,CAACS,IAApB;;AACxB,OAAKX,GAAL,IAAYE,KAAK,CAACY,UAAlB,EAA8B;AAAEP,IAAAA,MAAM,CAACO,UAAP,GAAoBZ,KAAK,CAACY,UAA1B;AAAsC;AAAQ;;AAC9E,SAAOP,MAAP;AACD;;AAED,SAASD,eAAT,CAAyBJ,KAAzB,EAAgC;AAC9B,MAAIA,KAAK,IAAI,IAAb,EAAmB,OAAO;AAACC,IAAAA,IAAI,EAAE;AAAP,GAAP;AACnB,MAAII,MAAM,GAAGL,KAAK,CAACC,IAAN,KAAe,oBAAf,GAAsC;AAACA,IAAAA,IAAI,EAAE,oBAAP;AAA6BK,IAAAA,UAAU,EAAEN,KAAK,CAACM,UAAN,CAAiBE,GAAjB,CAAqBJ,eAArB;AAAzC,GAAtC,GACPJ,KAAK,CAACC,IAAN,KAAe,OAAf,IAA0BD,KAAK,CAACC,IAAN,KAAe,YAAzC,GAAwD;AAACA,IAAAA,IAAI,EAAED,KAAK,CAACC,IAAb;AAAmBY,IAAAA,WAAW,EAAEb,KAAK,CAACa;AAAtC,GAAxD,GACA;AAACZ,IAAAA,IAAI,EAAED,KAAK,CAACC,IAAb;AAAmBa,IAAAA,IAAI,EAAEd,KAAK,CAACa;AAA/B,GAFN,CAF8B,CAIqB;;AACnD,MAAIb,KAAK,CAACS,IAAN,IAAc,IAAlB,EAAwBJ,MAAM,CAACI,IAAP,GAAcT,KAAK,CAACS,IAApB;AACxB,SAAOJ,MAAP;AACD","sourcesContent":["// Given a hash of GeoJSON objects, returns a hash of GeoJSON geometry objects.\n// Any null input geometry objects are represented as {type: null} in the output.\n// Any feature.{id,properties,bbox} are transferred to the output geometry object.\n// Each output geometry object is a shallow copy of the input (e.g., properties, coordinates)!\nexport default function(inputs) {\n  var outputs = {}, key;\n  for (key in inputs) outputs[key] = geomifyObject(inputs[key]);\n  return outputs;\n}\n\nfunction geomifyObject(input) {\n  return input == null ? {type: null}\n      : (input.type === \"FeatureCollection\" ? geomifyFeatureCollection\n      : input.type === \"Feature\" ? geomifyFeature\n      : geomifyGeometry)(input);\n}\n\nfunction geomifyFeatureCollection(input) {\n  var output = {type: \"GeometryCollection\", geometries: input.features.map(geomifyFeature)};\n  if (input.bbox != null) output.bbox = input.bbox;\n  return output;\n}\n\nfunction geomifyFeature(input) {\n  var output = geomifyGeometry(input.geometry), key; // eslint-disable-line no-unused-vars\n  if (input.id != null) output.id = input.id;\n  if (input.bbox != null) output.bbox = input.bbox;\n  for (key in input.properties) { output.properties = input.properties; break; }\n  return output;\n}\n\nfunction geomifyGeometry(input) {\n  if (input == null) return {type: null};\n  var output = input.type === \"GeometryCollection\" ? {type: \"GeometryCollection\", geometries: input.geometries.map(geomifyGeometry)}\n      : input.type === \"Point\" || input.type === \"MultiPoint\" ? {type: input.type, coordinates: input.coordinates}\n      : {type: input.type, arcs: input.coordinates}; // TODO Check for unknown types?\n  if (input.bbox != null) output.bbox = input.bbox;\n  return output;\n}\n"]},"metadata":{},"sourceType":"module"}