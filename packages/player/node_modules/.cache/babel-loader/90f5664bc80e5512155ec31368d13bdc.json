{"ast":null,"code":"import { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nexport var createDecrementCycleCounter = function createDecrementCycleCounter(connectNativeAudioNodeToNativeAudioNode, cycleCounters, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext) {\n  return function (audioNode, count) {\n    var cycleCounter = cycleCounters.get(audioNode);\n\n    if (cycleCounter === undefined) {\n      throw new Error('Missing the expected cycle count.');\n    }\n\n    var nativeContext = getNativeContext(audioNode.context);\n    var isOffline = isNativeOfflineAudioContext(nativeContext);\n\n    if (cycleCounter === count) {\n      cycleCounters.delete(audioNode);\n\n      if (!isOffline && isActiveAudioNode(audioNode)) {\n        var nativeSourceAudioNode = getNativeAudioNode(audioNode);\n\n        var _getAudioNodeConnecti = getAudioNodeConnections(audioNode),\n            outputs = _getAudioNodeConnecti.outputs;\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = outputs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var output = _step.value;\n\n            if (isAudioNodeOutputConnection(output)) {\n              var nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n              connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n            } else {\n              var nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n              nativeSourceAudioNode.connect(nativeDestinationAudioParam, output[1]);\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n    } else {\n      cycleCounters.set(audioNode, cycleCounter - count);\n    }\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/decrement-cycle-counter.js"],"names":["isAudioNodeOutputConnection","createDecrementCycleCounter","connectNativeAudioNodeToNativeAudioNode","cycleCounters","getAudioNodeConnections","getNativeAudioNode","getNativeAudioParam","getNativeContext","isActiveAudioNode","isNativeOfflineAudioContext","audioNode","count","cycleCounter","get","undefined","Error","nativeContext","context","isOffline","delete","nativeSourceAudioNode","outputs","output","nativeDestinationAudioNode","nativeDestinationAudioParam","connect","set"],"mappings":"AAAA,SAASA,2BAAT,QAA4C,wCAA5C;AACA,OAAO,IAAMC,2BAA2B,GAAG,SAA9BA,2BAA8B,CAACC,uCAAD,EAA0CC,aAA1C,EAAyDC,uBAAzD,EAAkFC,kBAAlF,EAAsGC,mBAAtG,EAA2HC,gBAA3H,EAA6IC,iBAA7I,EAAgKC,2BAAhK,EAAgM;AACvO,SAAO,UAACC,SAAD,EAAYC,KAAZ,EAAsB;AACzB,QAAMC,YAAY,GAAGT,aAAa,CAACU,GAAd,CAAkBH,SAAlB,CAArB;;AACA,QAAIE,YAAY,KAAKE,SAArB,EAAgC;AAC5B,YAAM,IAAIC,KAAJ,CAAU,mCAAV,CAAN;AACH;;AACD,QAAMC,aAAa,GAAGT,gBAAgB,CAACG,SAAS,CAACO,OAAX,CAAtC;AACA,QAAMC,SAAS,GAAGT,2BAA2B,CAACO,aAAD,CAA7C;;AACA,QAAIJ,YAAY,KAAKD,KAArB,EAA4B;AACxBR,MAAAA,aAAa,CAACgB,MAAd,CAAqBT,SAArB;;AACA,UAAI,CAACQ,SAAD,IAAcV,iBAAiB,CAACE,SAAD,CAAnC,EAAgD;AAC5C,YAAMU,qBAAqB,GAAGf,kBAAkB,CAACK,SAAD,CAAhD;;AAD4C,oCAExBN,uBAAuB,CAACM,SAAD,CAFC;AAAA,YAEpCW,OAFoC,yBAEpCA,OAFoC;;AAAA;AAAA;AAAA;;AAAA;AAG5C,+BAAqBA,OAArB,8HAA8B;AAAA,gBAAnBC,MAAmB;;AAC1B,gBAAItB,2BAA2B,CAACsB,MAAD,CAA/B,EAAyC;AACrC,kBAAMC,0BAA0B,GAAGlB,kBAAkB,CAACiB,MAAM,CAAC,CAAD,CAAP,CAArD;AACApB,cAAAA,uCAAuC,CAACkB,qBAAD,EAAwBG,0BAAxB,EAAoDD,MAAM,CAAC,CAAD,CAA1D,EAA+DA,MAAM,CAAC,CAAD,CAArE,CAAvC;AACH,aAHD,MAIK;AACD,kBAAME,2BAA2B,GAAGlB,mBAAmB,CAACgB,MAAM,CAAC,CAAD,CAAP,CAAvD;AACAF,cAAAA,qBAAqB,CAACK,OAAtB,CAA8BD,2BAA9B,EAA2DF,MAAM,CAAC,CAAD,CAAjE;AACH;AACJ;AAZ2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAa/C;AACJ,KAhBD,MAiBK;AACDnB,MAAAA,aAAa,CAACuB,GAAd,CAAkBhB,SAAlB,EAA6BE,YAAY,GAAGD,KAA5C;AACH;AACJ,GA3BD;AA4BH,CA7BM","sourcesContent":["import { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nexport const createDecrementCycleCounter = (connectNativeAudioNodeToNativeAudioNode, cycleCounters, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext) => {\n    return (audioNode, count) => {\n        const cycleCounter = cycleCounters.get(audioNode);\n        if (cycleCounter === undefined) {\n            throw new Error('Missing the expected cycle count.');\n        }\n        const nativeContext = getNativeContext(audioNode.context);\n        const isOffline = isNativeOfflineAudioContext(nativeContext);\n        if (cycleCounter === count) {\n            cycleCounters.delete(audioNode);\n            if (!isOffline && isActiveAudioNode(audioNode)) {\n                const nativeSourceAudioNode = getNativeAudioNode(audioNode);\n                const { outputs } = getAudioNodeConnections(audioNode);\n                for (const output of outputs) {\n                    if (isAudioNodeOutputConnection(output)) {\n                        const nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n                        connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n                    }\n                    else {\n                        const nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n                        nativeSourceAudioNode.connect(nativeDestinationAudioParam, output[1]);\n                    }\n                }\n            }\n        }\n        else {\n            cycleCounters.set(audioNode, cycleCounter - count);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/decrement-cycle-counter.js.map"]},"metadata":{},"sourceType":"module"}