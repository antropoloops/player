{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { atan, cos, sqrtPi, tan } from \"./math.js\";\nexport function foucautRaw(lambda, phi) {\n  var k = phi / 2,\n      cosk = cos(k);\n  return [2 * lambda / sqrtPi * cos(phi) * cosk * cosk, sqrtPi * tan(k)];\n}\n\nfoucautRaw.invert = function (x, y) {\n  var k = atan(y / sqrtPi),\n      cosk = cos(k),\n      phi = 2 * k;\n  return [x * sqrtPi / 2 / (cos(phi) * cosk * cosk), phi];\n};\n\nexport default function () {\n  return projection(foucautRaw).scale(135.264);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/foucaut.js"],"names":["geoProjection","projection","atan","cos","sqrtPi","tan","foucautRaw","lambda","phi","k","cosk","invert","x","y","scale"],"mappings":"AAAA,SAAQA,aAAa,IAAIC,UAAzB,QAA0C,QAA1C;AACA,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,MAAnB,EAA2BC,GAA3B,QAAqC,WAArC;AAEA,OAAO,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,GAA5B,EAAiC;AACtC,MAAIC,CAAC,GAAGD,GAAG,GAAG,CAAd;AAAA,MAAiBE,IAAI,GAAGP,GAAG,CAACM,CAAD,CAA3B;AACA,SAAO,CAAE,IAAIF,MAAJ,GAAaH,MAAb,GAAsBD,GAAG,CAACK,GAAD,CAAzB,GAAiCE,IAAjC,GAAwCA,IAA1C,EAAgDN,MAAM,GAAGC,GAAG,CAACI,CAAD,CAA5D,CAAP;AACD;;AAEDH,UAAU,CAACK,MAAX,GAAoB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACjC,MAAIJ,CAAC,GAAGP,IAAI,CAACW,CAAC,GAAGT,MAAL,CAAZ;AAAA,MAA0BM,IAAI,GAAGP,GAAG,CAACM,CAAD,CAApC;AAAA,MAAyCD,GAAG,GAAG,IAAIC,CAAnD;AACA,SAAO,CAACG,CAAC,GAAGR,MAAJ,GAAa,CAAb,IAAkBD,GAAG,CAACK,GAAD,CAAH,GAAWE,IAAX,GAAkBA,IAApC,CAAD,EAA4CF,GAA5C,CAAP;AACD,CAHD;;AAKA,eAAe,YAAW;AACxB,SAAOP,UAAU,CAACK,UAAD,CAAV,CACFQ,KADE,CACI,OADJ,CAAP;AAED","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {atan, cos, sqrtPi, tan} from \"./math.js\";\n\nexport function foucautRaw(lambda, phi) {\n  var k = phi / 2, cosk = cos(k);\n  return [ 2 * lambda / sqrtPi * cos(phi) * cosk * cosk, sqrtPi * tan(k)];\n}\n\nfoucautRaw.invert = function(x, y) {\n  var k = atan(y / sqrtPi), cosk = cos(k), phi = 2 * k;\n  return [x * sqrtPi / 2 / (cos(phi) * cosk * cosk), phi];\n};\n\nexport default function() {\n  return projection(foucautRaw)\n      .scale(135.264);\n}\n"]},"metadata":{},"sourceType":"module"}