{"ast":null,"code":"/**\n * Creates an AudioEngine instance\n * @param context\n */\nexport function createAudioEngine(context) {\n  return new AudioContextEngine(context);\n}\n\nclass AudioContextEngine {\n  constructor(context) {\n    this.context = context;\n    this.output = void 0;\n    this.output = context.destination;\n  }\n\n  createAudioSource(props) {\n    const source = this.context.createBufferSource();\n    source.buffer = props.buffer;\n    source.loop = true;\n    source.connect(props.output);\n    return source;\n  }\n\n  createTrack(props) {\n    const track = this.context.createGain();\n    track.gain.value = props.volume;\n    track.connect(props.output);\n    return track;\n  }\n\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/sampler/AudioEngine.ts"],"names":["createAudioEngine","context","AudioContextEngine","constructor","output","destination","createAudioSource","props","source","createBufferSource","buffer","loop","connect","createTrack","track","createGain","gain","value","volume"],"mappings":"AAGA;;;;AAIA,OAAO,SAASA,iBAAT,CACLC,OADK,EAEmB;AACxB,SAAO,IAAIC,kBAAJ,CAAuBD,OAAvB,CAAP;AACD;;AA0BD,MAAMC,kBAAN,CAA2D;AAEzDC,EAAAA,WAAW,CAASF,OAAT,EAAiC;AAAA,SAAxBA,OAAwB,GAAxBA,OAAwB;AAAA,SADrCG,MACqC;AAC1C,SAAKA,MAAL,GAAcH,OAAO,CAACI,WAAtB;AACD;;AAEMC,EAAAA,iBAAP,CACEC,KADF,EAEe;AACb,UAAMC,MAAM,GAAG,KAAKP,OAAL,CAAaQ,kBAAb,EAAf;AACAD,IAAAA,MAAM,CAACE,MAAP,GAAgBH,KAAK,CAACG,MAAtB;AACAF,IAAAA,MAAM,CAACG,IAAP,GAAc,IAAd;AACAH,IAAAA,MAAM,CAACI,OAAP,CAAeL,KAAK,CAACH,MAArB;AACA,WAAOI,MAAP;AACD;;AACMK,EAAAA,WAAP,CAAmBN,KAAnB,EAAkE;AAChE,UAAMO,KAAK,GAAG,KAAKb,OAAL,CAAac,UAAb,EAAd;AACAD,IAAAA,KAAK,CAACE,IAAN,CAAWC,KAAX,GAAmBV,KAAK,CAACW,MAAzB;AACAJ,IAAAA,KAAK,CAACF,OAAN,CAAcL,KAAK,CAACH,MAApB;AACA,WAAOU,KAAP;AACD;;AApBwD","sourcesContent":["import { IAudioContext, IAudioNode } from \"standardized-audio-context\";\n\ntype AudioNode = IAudioNode<IAudioContext>;\n/**\n * Creates an AudioEngine instance\n * @param context\n */\nexport function createAudioEngine(\n  context: IAudioContext,\n): AudioEngine<AudioNode> {\n  return new AudioContextEngine(context);\n}\nexport interface AudioEngine<T> {\n  output: T;\n  createTrack: (props: AudioTrackProps<T>) => AudioTrack;\n  createAudioSource: (props: AudioSourceProperties<T>) => AudioSource;\n}\n\nexport interface AudioTrackProps<T> {\n  output: T;\n  volume: number;\n}\nexport interface AudioSourceProperties<T> {\n  output: T;\n  buffer: any;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface AudioTrack {\n  disconnect(): void;\n}\n\nexport interface AudioSource {\n  start: (time: number) => void;\n  stop: (time: number) => void;\n}\n\nclass AudioContextEngine implements AudioEngine<AudioNode> {\n  public output: any;\n  constructor(private context: IAudioContext) {\n    this.output = context.destination;\n  }\n\n  public createAudioSource(\n    props: AudioSourceProperties<AudioNode>,\n  ): AudioSource {\n    const source = this.context.createBufferSource();\n    source.buffer = props.buffer;\n    source.loop = true;\n    source.connect(props.output);\n    return source;\n  }\n  public createTrack(props: AudioTrackProps<AudioNode>): AudioTrack {\n    const track = this.context.createGain();\n    track.gain.value = props.volume;\n    track.connect(props.output);\n    return track;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}