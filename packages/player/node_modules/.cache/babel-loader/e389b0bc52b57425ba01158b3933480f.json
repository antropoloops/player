{"ast":null,"code":"import prune from \"./prune\";\nexport default function (topology, filter) {\n  var oldObjects = topology.objects,\n      newObjects = {},\n      key;\n  if (filter == null) filter = filterTrue;\n\n  function filterGeometry(input) {\n    var output, arcs;\n\n    switch (input.type) {\n      case \"Polygon\":\n        {\n          arcs = filterRings(input.arcs);\n          output = arcs ? {\n            type: \"Polygon\",\n            arcs: arcs\n          } : {\n            type: null\n          };\n          break;\n        }\n\n      case \"MultiPolygon\":\n        {\n          arcs = input.arcs.map(filterRings).filter(filterIdentity);\n          output = arcs.length ? {\n            type: \"MultiPolygon\",\n            arcs: arcs\n          } : {\n            type: null\n          };\n          break;\n        }\n\n      case \"GeometryCollection\":\n        {\n          arcs = input.geometries.map(filterGeometry).filter(filterNotNull);\n          output = arcs.length ? {\n            type: \"GeometryCollection\",\n            geometries: arcs\n          } : {\n            type: null\n          };\n          break;\n        }\n\n      default:\n        return input;\n    }\n\n    if (input.id != null) output.id = input.id;\n    if (input.bbox != null) output.bbox = input.bbox;\n    if (input.properties != null) output.properties = input.properties;\n    return output;\n  }\n\n  function filterRings(arcs) {\n    return arcs.length && filterExteriorRing(arcs[0]) // if the exterior is small, ignore any holes\n    ? [arcs[0]].concat(arcs.slice(1).filter(filterInteriorRing)) : null;\n  }\n\n  function filterExteriorRing(ring) {\n    return filter(ring, false);\n  }\n\n  function filterInteriorRing(ring) {\n    return filter(ring, true);\n  }\n\n  for (key in oldObjects) {\n    newObjects[key] = filterGeometry(oldObjects[key]);\n  }\n\n  return prune({\n    type: \"Topology\",\n    bbox: topology.bbox,\n    transform: topology.transform,\n    objects: newObjects,\n    arcs: topology.arcs\n  });\n}\n\nfunction filterTrue() {\n  return true;\n}\n\nfunction filterIdentity(x) {\n  return x;\n}\n\nfunction filterNotNull(geometry) {\n  return geometry.type != null;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/topojson-simplify/src/filter.js"],"names":["prune","topology","filter","oldObjects","objects","newObjects","key","filterTrue","filterGeometry","input","output","arcs","type","filterRings","map","filterIdentity","length","geometries","filterNotNull","id","bbox","properties","filterExteriorRing","concat","slice","filterInteriorRing","ring","transform","x","geometry"],"mappings":"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","sourcesContent":["import prune from \"./prune\";\n\nexport default function(topology, filter) {\n  var oldObjects = topology.objects,\n      newObjects = {},\n      key;\n\n  if (filter == null) filter = filterTrue;\n\n  function filterGeometry(input) {\n    var output, arcs;\n    switch (input.type) {\n      case \"Polygon\": {\n        arcs = filterRings(input.arcs);\n        output = arcs ? {type: \"Polygon\", arcs: arcs} : {type: null};\n        break;\n      }\n      case \"MultiPolygon\": {\n        arcs = input.arcs.map(filterRings).filter(filterIdentity);\n        output = arcs.length ? {type: \"MultiPolygon\", arcs: arcs} : {type: null};\n        break;\n      }\n      case \"GeometryCollection\": {\n        arcs = input.geometries.map(filterGeometry).filter(filterNotNull);\n        output = arcs.length ? {type: \"GeometryCollection\", geometries: arcs} : {type: null};\n        break;\n      }\n      default: return input;\n    }\n    if (input.id != null) output.id = input.id;\n    if (input.bbox != null) output.bbox = input.bbox;\n    if (input.properties != null) output.properties = input.properties;\n    return output;\n  }\n\n  function filterRings(arcs) {\n    return arcs.length && filterExteriorRing(arcs[0]) // if the exterior is small, ignore any holes\n        ? [arcs[0]].concat(arcs.slice(1).filter(filterInteriorRing))\n        : null;\n  }\n\n  function filterExteriorRing(ring) {\n    return filter(ring, false);\n  }\n\n  function filterInteriorRing(ring) {\n    return filter(ring, true);\n  }\n\n  for (key in oldObjects) {\n    newObjects[key] = filterGeometry(oldObjects[key]);\n  }\n\n  return prune({\n    type: \"Topology\",\n    bbox: topology.bbox,\n    transform: topology.transform,\n    objects: newObjects,\n    arcs: topology.arcs\n  });\n}\n\nfunction filterTrue() {\n  return true;\n}\n\nfunction filterIdentity(x) {\n  return x;\n}\n\nfunction filterNotNull(geometry) {\n  return geometry.type != null;\n}\n"]},"metadata":{},"sourceType":"module"}