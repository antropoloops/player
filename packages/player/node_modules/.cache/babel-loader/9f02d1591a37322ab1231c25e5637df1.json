{"ast":null,"code":"import _classCallCheck from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import{AudiosetLoader}from\"../Audioset/AudiosetLoader\";import{EmptyAudioset}from\"../Audioset\";import{AudiosetControl}from\"./AudiosetControl\";import{Sampler}from\"./Sampler\";import{DebugAudioEngine}from\"./Audio\";import{ResourceLoader}from\"./ResourceLoader\";var Emitter=/*#__PURE__*/function(){function Emitter(){_classCallCheck(this,Emitter);this.listeners=[];}_createClass(Emitter,[{key:\"emit\",value:function emit(event){this.listeners.forEach(function(listen){return listen(event);});}},{key:\"on\",value:function on(listener){var _this=this;this.listeners.push(listener);return function(){return _this.off(listener);};}},{key:\"off\",value:function off(listener){var index=this.listeners.indexOf(listener);if(index>-1)this.listeners.splice(index,1);}}]);return Emitter;}();/**\n * A player is the facade for the rest of the components:\n * - Loader: load audioset and resources\n * - Control: determines how to play clips\n * - Pads: receive pad events\n * - Params: receive param change events\n * - Keyboard: receive keyboard events\n * - Sampler: play the audio\n */export var Player=/*#__PURE__*/function(){function Player(){var _this2=this;_classCallCheck(this,Player);this.loader=void 0;this.control=void 0;this.sampler=void 0;this.resources=void 0;this._noSampler=void 0;this._noControl=void 0;this._noResources=void 0;this.controlListener=void 0;this.resourceListener=void 0;this.audiosetChanged=new Emitter();this.audiosetLoadStatusChanged=new Emitter();this.controlStateChanged=new Emitter();this.controlCommand=new Emitter();this.resourceStatusChanged=new Emitter();this.fetchAudio=void 0;this.audio=new DebugAudioEngine();this.audioset=EmptyAudioset;this.loader=new AudiosetLoader(function(status){return _this2.setAudiosetLoadStatus(status);});this.controlListener={onControlStateChanged:function onControlStateChanged(state){return _this2.emitControlState(state);},onControlCommand:function onControlCommand(command){return _this2.runCommand(command);}};this.resourceListener=function(status){_this2.resourceStatusChanged.emit(status);};this._noControl=this.control=new AudiosetControl(this.audioset,this.controlListener);this._noResources=this.resources=new ResourceLoader(this.audioset,this.resourceListener);this._noSampler=this.sampler=new Sampler(this.audioset,this.resources,this.audio);}_createClass(Player,[{key:\"setFetchAudio\",value:function setFetchAudio(fetch){this.fetchAudio=fetch;this.resources.fetch=fetch;}},{key:\"setAudioEngine\",value:function setAudioEngine(audio){this.audio=audio;// this.sampler.dispose()\nthis.sampler=new Sampler(this.audioset,this.resources,this.audio);}},{key:\"onResourceStatusChanged\",value:function onResourceStatusChanged(listener){return this.resourceStatusChanged.on(listener);}},{key:\"onControlStateChanged\",value:function onControlStateChanged(listener){return this.controlStateChanged.on(listener);}},{key:\"onCommand\",value:function onCommand(listener){return this.controlCommand.on(listener);}//// PRIVATE /////k\n// allow pub/sub of contro state\n},{key:\"emitControlState\",value:function emitControlState(controlState){this.controlStateChanged.emit(controlState);}// allows pub/sub of commands (for visuals)\n},{key:\"runCommand\",value:function runCommand(command){this.sampler.run(command);this.controlCommand.emit(command);}},{key:\"setAudiosetLoadStatus\",value:function setAudiosetLoadStatus(status){this.audiosetLoadStatusChanged.emit(status);if(status.status===\"ready\"){this.setDelegates(status.audioset);this.audiosetChanged.emit(status.audioset);}}},{key:\"setDelegates\",value:function setDelegates(audioset){if(isAudiosetPlay(audioset)){this.audioset=audioset;this.control=new AudiosetControl(audioset,this.controlListener);this.resources=new ResourceLoader(audioset,this.resourceListener);this.sampler=new Sampler(audioset,this.resources,this.audio);}else{this.control=this._noControl;this.sampler=this._noSampler;this.resources=this._noResources;}if(this.fetchAudio)this.resources.fetch=this.fetchAudio;}}]);return Player;}();function isAudiosetPlay(audioset){return audioset.type===\"audioset\";}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/Player/Player.ts"],"names":["AudiosetLoader","EmptyAudioset","AudiosetControl","Sampler","DebugAudioEngine","ResourceLoader","Emitter","listeners","event","forEach","listen","listener","push","off","index","indexOf","splice","Player","loader","control","sampler","resources","_noSampler","_noControl","_noResources","controlListener","resourceListener","audiosetChanged","audiosetLoadStatusChanged","controlStateChanged","controlCommand","resourceStatusChanged","fetchAudio","audio","audioset","status","setAudiosetLoadStatus","onControlStateChanged","state","emitControlState","onControlCommand","command","runCommand","emit","fetch","on","controlState","run","setDelegates","isAudiosetPlay","type"],"mappings":"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","sourcesContent":["import { AudiosetLoader, AudiosetLoadStatus } from \"../Audioset/AudiosetLoader\";\nimport { Audioset, AudiosetData, EmptyAudioset } from \"../Audioset\";\nimport { AudiosetControl, ControlListener, ControlState, ControlCommand } from \"./AudiosetControl\";\nimport { Sampler } from \"./Sampler\";\nimport { AudioEngine, DebugAudioEngine } from \"./Audio\";\nimport { ResourceLoader, ResourceLoadStatus, FetchAudio } from \"./ResourceLoader\";\n\ntype Listener<T> = (event: T) => void;\nclass Emitter<T> {\n  private readonly listeners: Listener<T>[] = [];\n\n  emit(event: T) {\n    this.listeners.forEach((listen) => listen(event));\n  }\n\n  on(listener: Listener<T>) {\n    this.listeners.push(listener);\n    return () => this.off(listener);\n  }\n\n  off(listener: Listener<T>) {\n    const index = this.listeners.indexOf(listener);\n    if (index > -1) this.listeners.splice(index, 1);\n  }\n}\n\n/**\n * A player is the facade for the rest of the components:\n * - Loader: load audioset and resources\n * - Control: determines how to play clips\n * - Pads: receive pad events\n * - Params: receive param change events\n * - Keyboard: receive keyboard events\n * - Sampler: play the audio\n */\nexport class Player {\n  public readonly loader: AudiosetLoader;\n  public control: AudiosetControl;\n  private sampler: Sampler;\n  public resources: ResourceLoader;\n\n  private _noSampler: Sampler;\n  private _noControl: AudiosetControl;\n  private _noResources: ResourceLoader;\n\n  private readonly controlListener: ControlListener;\n  private readonly resourceListener: (status: ResourceLoadStatus) => void;\n\n  private readonly audiosetChanged = new Emitter<AudiosetData>();\n  private readonly audiosetLoadStatusChanged = new Emitter<AudiosetLoadStatus>();\n  private readonly controlStateChanged = new Emitter<ControlState>();\n  private readonly controlCommand = new Emitter<ControlCommand>();\n  private readonly resourceStatusChanged = new Emitter<ResourceLoadStatus>();\n\n  private fetchAudio?: FetchAudio;\n  private audio: AudioEngine = new DebugAudioEngine();\n  private audioset: Audioset = EmptyAudioset;\n\n  constructor() {\n    this.loader = new AudiosetLoader((status) => this.setAudiosetLoadStatus(status));\n    this.controlListener = {\n      onControlStateChanged: (state) => this.emitControlState(state),\n      onControlCommand: (command) => this.runCommand(command),\n    };\n    this.resourceListener = (status: ResourceLoadStatus) => {\n      this.resourceStatusChanged.emit(status);\n    };\n    this._noControl = this.control = new AudiosetControl(this.audioset, this.controlListener);\n    this._noResources = this.resources = new ResourceLoader(this.audioset, this.resourceListener);\n    this._noSampler = this.sampler = new Sampler(this.audioset, this.resources, this.audio);\n  }\n\n  public setFetchAudio(fetch: FetchAudio) {\n    this.fetchAudio = fetch;\n    this.resources.fetch = fetch;\n  }\n\n  public setAudioEngine(audio: AudioEngine) {\n    this.audio = audio;\n    // this.sampler.dispose()\n    this.sampler = new Sampler(this.audioset, this.resources, this.audio);\n  }\n\n  public onResourceStatusChanged(listener: Listener<ResourceLoadStatus>) {\n    return this.resourceStatusChanged.on(listener);\n  }\n\n  public onControlStateChanged(listener: Listener<ControlState>) {\n    return this.controlStateChanged.on(listener);\n  }\n\n  public onCommand(listener: Listener<ControlCommand>) {\n    return this.controlCommand.on(listener);\n  }\n\n  //// PRIVATE /////k\n\n  // allow pub/sub of contro state\n  private emitControlState(controlState: ControlState) {\n    this.controlStateChanged.emit(controlState);\n  }\n\n  // allows pub/sub of commands (for visuals)\n  private runCommand(command: ControlCommand) {\n    this.sampler.run(command);\n    this.controlCommand.emit(command);\n  }\n  private setAudiosetLoadStatus(status: AudiosetLoadStatus) {\n    this.audiosetLoadStatusChanged.emit(status);\n    if (status.status === \"ready\") {\n      this.setDelegates(status.audioset);\n      this.audiosetChanged.emit(status.audioset);\n    }\n  }\n\n  private setDelegates(audioset: AudiosetData) {\n    if (isAudiosetPlay(audioset)) {\n      this.audioset = audioset;\n      this.control = new AudiosetControl(audioset, this.controlListener);\n      this.resources = new ResourceLoader(audioset, this.resourceListener);\n      this.sampler = new Sampler(audioset, this.resources, this.audio);\n    } else {\n      this.control = this._noControl;\n      this.sampler = this._noSampler;\n      this.resources = this._noResources;\n    }\n    if (this.fetchAudio) this.resources.fetch = this.fetchAudio;\n  }\n}\n\nfunction isAudiosetPlay(audioset: AudiosetData): audioset is Audioset {\n  return audioset.type === \"audioset\";\n}\n"]},"metadata":{},"sourceType":"module"}