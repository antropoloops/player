{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { abs, epsilon } from \"./math.js\"; // Based on Java implementation by Bojan Savric.\n// https://github.com/OSUCartography/JMapProjLib/blob/master/src/com/jhlabs/map/proj/PattersonProjection.java\n\nvar pattersonK1 = 1.0148,\n    pattersonK2 = 0.23185,\n    pattersonK3 = -0.14499,\n    pattersonK4 = 0.02406,\n    pattersonC1 = pattersonK1,\n    pattersonC2 = 5 * pattersonK2,\n    pattersonC3 = 7 * pattersonK3,\n    pattersonC4 = 9 * pattersonK4,\n    pattersonYmax = 1.790857183;\nexport function pattersonRaw(lambda, phi) {\n  var phi2 = phi * phi;\n  return [lambda, phi * (pattersonK1 + phi2 * phi2 * (pattersonK2 + phi2 * (pattersonK3 + pattersonK4 * phi2)))];\n}\n\npattersonRaw.invert = function (x, y) {\n  if (y > pattersonYmax) y = pattersonYmax;else if (y < -pattersonYmax) y = -pattersonYmax;\n  var yc = y,\n      delta;\n\n  do {\n    // Newton-Raphson\n    var y2 = yc * yc;\n    yc -= delta = (yc * (pattersonK1 + y2 * y2 * (pattersonK2 + y2 * (pattersonK3 + pattersonK4 * y2))) - y) / (pattersonC1 + y2 * y2 * (pattersonC2 + y2 * (pattersonC3 + pattersonC4 * y2)));\n  } while (abs(delta) > epsilon);\n\n  return [x, yc];\n};\n\nexport default function () {\n  return projection(pattersonRaw).scale(139.319);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/patterson.js"],"names":["geoProjection","projection","abs","epsilon","pattersonK1","pattersonK2","pattersonK3","pattersonK4","pattersonC1","pattersonC2","pattersonC3","pattersonC4","pattersonYmax","pattersonRaw","lambda","phi","phi2","invert","x","y","yc","delta","y2","scale"],"mappings":"AAAA,SAAQA,aAAa,IAAIC,UAAzB,QAA0C,QAA1C;AACA,SAAQC,GAAR,EAAaC,OAAb,QAA2B,WAA3B,C,CAEA;AACA;;AAEA,IAAIC,WAAW,GAAG,MAAlB;AAAA,IACIC,WAAW,GAAG,OADlB;AAAA,IAEIC,WAAW,GAAG,CAAC,OAFnB;AAAA,IAGIC,WAAW,GAAG,OAHlB;AAAA,IAIIC,WAAW,GAAGJ,WAJlB;AAAA,IAKIK,WAAW,GAAG,IAAIJ,WALtB;AAAA,IAMIK,WAAW,GAAG,IAAIJ,WANtB;AAAA,IAOIK,WAAW,GAAG,IAAIJ,WAPtB;AAAA,IAQIK,aAAa,GAAG,WARpB;AAUA,OAAO,SAASC,YAAT,CAAsBC,MAAtB,EAA8BC,GAA9B,EAAmC;AACxC,MAAIC,IAAI,GAAGD,GAAG,GAAGA,GAAjB;AACA,SAAO,CACLD,MADK,EAELC,GAAG,IAAIX,WAAW,GAAGY,IAAI,GAAGA,IAAP,IAAeX,WAAW,GAAGW,IAAI,IAAIV,WAAW,GAAGC,WAAW,GAAGS,IAAhC,CAAjC,CAAlB,CAFE,CAAP;AAID;;AAEDH,YAAY,CAACI,MAAb,GAAsB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACnC,MAAIA,CAAC,GAAGP,aAAR,EAAuBO,CAAC,GAAGP,aAAJ,CAAvB,KACK,IAAIO,CAAC,GAAG,CAACP,aAAT,EAAwBO,CAAC,GAAG,CAACP,aAAL;AAC7B,MAAIQ,EAAE,GAAGD,CAAT;AAAA,MAAYE,KAAZ;;AAEA,KAAG;AAAE;AACH,QAAIC,EAAE,GAAGF,EAAE,GAAGA,EAAd;AACAA,IAAAA,EAAE,IAAIC,KAAK,GAAG,CAAED,EAAE,IAAIhB,WAAW,GAAGkB,EAAE,GAAGA,EAAL,IAAWjB,WAAW,GAAGiB,EAAE,IAAIhB,WAAW,GAAGC,WAAW,GAAGe,EAAhC,CAA3B,CAAlB,CAAH,GAAyFH,CAA1F,KAAgGX,WAAW,GAAGc,EAAE,GAAGA,EAAL,IAAWb,WAAW,GAAGa,EAAE,IAAIZ,WAAW,GAAGC,WAAW,GAAGW,EAAhC,CAA3B,CAA9G,CAAd;AACD,GAHD,QAGSpB,GAAG,CAACmB,KAAD,CAAH,GAAalB,OAHtB;;AAKA,SAAO,CAACe,CAAD,EAAIE,EAAJ,CAAP;AACD,CAXD;;AAaA,eAAe,YAAW;AACxB,SAAOnB,UAAU,CAACY,YAAD,CAAV,CACFU,KADE,CACI,OADJ,CAAP;AAED","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math.js\";\n\n// Based on Java implementation by Bojan Savric.\n// https://github.com/OSUCartography/JMapProjLib/blob/master/src/com/jhlabs/map/proj/PattersonProjection.java\n\nvar pattersonK1 = 1.0148,\n    pattersonK2 = 0.23185,\n    pattersonK3 = -0.14499,\n    pattersonK4 = 0.02406,\n    pattersonC1 = pattersonK1,\n    pattersonC2 = 5 * pattersonK2,\n    pattersonC3 = 7 * pattersonK3,\n    pattersonC4 = 9 * pattersonK4,\n    pattersonYmax = 1.790857183;\n\nexport function pattersonRaw(lambda, phi) {\n  var phi2 = phi * phi;\n  return [\n    lambda,\n    phi * (pattersonK1 + phi2 * phi2 * (pattersonK2 + phi2 * (pattersonK3 + pattersonK4 * phi2)))\n  ];\n}\n\npattersonRaw.invert = function(x, y) {\n  if (y > pattersonYmax) y = pattersonYmax;\n  else if (y < -pattersonYmax) y = -pattersonYmax;\n  var yc = y, delta;\n\n  do { // Newton-Raphson\n    var y2 = yc * yc;\n    yc -= delta = ((yc * (pattersonK1 + y2 * y2 * (pattersonK2 + y2 * (pattersonK3 + pattersonK4 * y2)))) - y) / (pattersonC1 + y2 * y2 * (pattersonC2 + y2 * (pattersonC3 + pattersonC4 * y2)));\n  } while (abs(delta) > epsilon);\n\n  return [x, yc];\n};\n\nexport default function() {\n  return projection(pattersonRaw)\n      .scale(139.319);\n}\n"]},"metadata":{},"sourceType":"module"}