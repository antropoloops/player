{"ast":null,"code":"import _toConsumableArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { isAudioNode } from '../guards/audio-node';\nimport { isDelayNode } from '../guards/delay-node';\nexport var createDetectCycles = function createDetectCycles(audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey) {\n  return function detectCycles(chain, nextLink) {\n    var audioNode = isAudioNode(nextLink) ? nextLink : getValueForKey(audioParamAudioNodeStore, nextLink);\n\n    if (isDelayNode(audioNode)) {\n      return [];\n    }\n\n    if (chain[0] === audioNode) {\n      return [chain];\n    }\n\n    if (chain.includes(audioNode)) {\n      return [];\n    }\n\n    var _getAudioNodeConnecti = getAudioNodeConnections(audioNode),\n        outputs = _getAudioNodeConnecti.outputs;\n\n    return Array.from(outputs).map(function (outputConnection) {\n      return detectCycles([].concat(_toConsumableArray(chain), [audioNode]), outputConnection[0]);\n    }).reduce(function (mergedCycles, nestedCycles) {\n      return mergedCycles.concat(nestedCycles);\n    }, []);\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/detect-cycles.js"],"names":["isAudioNode","isDelayNode","createDetectCycles","audioParamAudioNodeStore","getAudioNodeConnections","getValueForKey","detectCycles","chain","nextLink","audioNode","includes","outputs","Array","from","map","outputConnection","reduce","mergedCycles","nestedCycles","concat"],"mappings":";AAAA,SAASA,WAAT,QAA4B,sBAA5B;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,wBAAD,EAA2BC,uBAA3B,EAAoDC,cAApD,EAAuE;AACrG,SAAO,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,QAA7B,EAAuC;AAC1C,QAAMC,SAAS,GAAIT,WAAW,CAACQ,QAAD,CAAZ,GACZA,QADY,GAEZH,cAAc,CAACF,wBAAD,EAA2BK,QAA3B,CAFpB;;AAGA,QAAIP,WAAW,CAACQ,SAAD,CAAf,EAA4B;AACxB,aAAO,EAAP;AACH;;AACD,QAAIF,KAAK,CAAC,CAAD,CAAL,KAAaE,SAAjB,EAA4B;AACxB,aAAO,CAACF,KAAD,CAAP;AACH;;AACD,QAAIA,KAAK,CAACG,QAAN,CAAeD,SAAf,CAAJ,EAA+B;AAC3B,aAAO,EAAP;AACH;;AAZyC,gCAatBL,uBAAuB,CAACK,SAAD,CAbD;AAAA,QAalCE,OAbkC,yBAalCA,OAbkC;;AAc1C,WAAOC,KAAK,CACPC,IADE,CACGF,OADH,EAEFG,GAFE,CAEE,UAACC,gBAAD;AAAA,aAAsBT,YAAY,8BAAKC,KAAL,IAAYE,SAAZ,IAAwBM,gBAAgB,CAAC,CAAD,CAAxC,CAAlC;AAAA,KAFF,EAGFC,MAHE,CAGK,UAACC,YAAD,EAAeC,YAAf;AAAA,aAAgCD,YAAY,CAACE,MAAb,CAAoBD,YAApB,CAAhC;AAAA,KAHL,EAGwE,EAHxE,CAAP;AAIH,GAlBD;AAmBH,CApBM","sourcesContent":["import { isAudioNode } from '../guards/audio-node';\nimport { isDelayNode } from '../guards/delay-node';\nexport const createDetectCycles = (audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey) => {\n    return function detectCycles(chain, nextLink) {\n        const audioNode = (isAudioNode(nextLink))\n            ? nextLink\n            : getValueForKey(audioParamAudioNodeStore, nextLink);\n        if (isDelayNode(audioNode)) {\n            return [];\n        }\n        if (chain[0] === audioNode) {\n            return [chain];\n        }\n        if (chain.includes(audioNode)) {\n            return [];\n        }\n        const { outputs } = getAudioNodeConnections(audioNode);\n        return Array\n            .from(outputs)\n            .map((outputConnection) => detectCycles([...chain, audioNode], outputConnection[0]))\n            .reduce((mergedCycles, nestedCycles) => mergedCycles.concat(nestedCycles), []);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/detect-cycles.js.map"]},"metadata":{},"sourceType":"module"}