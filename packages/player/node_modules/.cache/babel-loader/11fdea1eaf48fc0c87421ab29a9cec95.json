{"ast":null,"code":"import { EmptyAudioset } from \"../audioset\";\nimport { AudiosetLoader } from \"../audioset/AudiosetLoader\";\nimport { DebugAudioEngine } from \"./Audio\";\nimport { AudiosetControl } from \"./AudiosetControl\";\nimport { Emitter } from \"./Emitter\";\nimport { ResourceLoader } from \"./ResourceLoader\";\nimport { Sampler } from \"./Sampler\";\n/**\n * A player is the facade for the rest of the components:\n * - Loader: load audioset and resources\n * - Control: determines how to play clips\n * - Pads: receive pad events\n * - Params: receive param change events\n * - Keyboard: receive keyboard events\n * - Sampler: play the audio\n */\n\nexport class Player {\n  // private //\n  constructor() {\n    this.loader = void 0;\n    this.control = void 0;\n    this.resources = void 0;\n    this.sampler = void 0;\n    this.noSampler = void 0;\n    this.noControl = void 0;\n    this.noResources = void 0;\n    this.controlListener = void 0;\n    this.resourceListener = void 0;\n    this.audiosetChanged = new Emitter();\n    this.audiosetLoadStatusChanged = new Emitter();\n    this.controlStateChanged = new Emitter();\n    this.controlCommand = new Emitter();\n    this.resourceStatusChanged = new Emitter();\n    this.fetchAudio = void 0;\n    this.audio = new DebugAudioEngine();\n    this.audioset = EmptyAudioset;\n    this.loader = new AudiosetLoader(status => this.setAudiosetLoadStatus(status));\n    this.controlListener = {\n      onControlStateChanged: state => this.emitControlState(state),\n      onControlCommand: command => this.runCommand(command)\n    };\n\n    this.resourceListener = status => {\n      this.resourceStatusChanged.emit(status);\n    };\n\n    this.noControl = this.control = new AudiosetControl(this.audioset, this.controlListener);\n    this.noResources = this.resources = new ResourceLoader(this.audioset, this.resourceListener);\n    this.noSampler = this.sampler = new Sampler(this.audioset, this.resources, this.audio);\n  }\n\n  setFetchAudio(fetch) {\n    this.fetchAudio = fetch;\n    this.resources.fetch = fetch;\n  }\n\n  setAudioEngine(audio) {\n    this.audio = audio; // this.sampler.dispose()\n\n    this.sampler = new Sampler(this.audioset, this.resources, this.audio);\n  }\n\n  onResourceStatusChanged(listener) {\n    return this.resourceStatusChanged.on(listener);\n  }\n\n  onControlStateChanged(listener) {\n    return this.controlStateChanged.on(listener);\n  }\n\n  onCommand(listener) {\n    return this.controlCommand.on(listener);\n  } //// PRIVATE /////\n  // allow pub/sub of contro state\n\n\n  emitControlState(controlState) {\n    this.controlStateChanged.emit(controlState);\n  } // allows pub/sub of commands (for visuals)\n\n\n  runCommand(command) {\n    this.sampler.run(command);\n    this.controlCommand.emit(command);\n  }\n\n  setAudiosetLoadStatus(status) {\n    this.audiosetLoadStatusChanged.emit(status);\n\n    if (status.status === \"ready\") {\n      this.setDelegates(status.audioset);\n      this.audiosetChanged.emit(status.audioset);\n    }\n  }\n\n  setDelegates(audioset) {\n    if (isAudiosetPlay(audioset)) {\n      this.audioset = audioset;\n      this.control = new AudiosetControl(audioset, this.controlListener);\n      this.resources = new ResourceLoader(audioset, this.resourceListener);\n      this.sampler = new Sampler(audioset, this.resources, this.audio);\n    } else {\n      this.control = this.noControl;\n      this.sampler = this.noSampler;\n      this.resources = this.noResources;\n    }\n\n    if (this.fetchAudio) {\n      this.resources.fetch = this.fetchAudio;\n    }\n  }\n\n}\n\nfunction isAudiosetPlay(audioset) {\n  return audioset.type === \"audioset\";\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/Player.ts"],"names":["EmptyAudioset","AudiosetLoader","DebugAudioEngine","AudiosetControl","Emitter","ResourceLoader","Sampler","Player","constructor","loader","control","resources","sampler","noSampler","noControl","noResources","controlListener","resourceListener","audiosetChanged","audiosetLoadStatusChanged","controlStateChanged","controlCommand","resourceStatusChanged","fetchAudio","audio","audioset","status","setAudiosetLoadStatus","onControlStateChanged","state","emitControlState","onControlCommand","command","runCommand","emit","setFetchAudio","fetch","setAudioEngine","onResourceStatusChanged","listener","on","onCommand","controlState","run","setDelegates","isAudiosetPlay","type"],"mappings":"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","sourcesContent":["import { Audioset, AudiosetData, EmptyAudioset } from \"../audioset\";\nimport { AudiosetLoader, AudiosetLoadStatus } from \"../audioset/AudiosetLoader\";\nimport { AudioEngine, DebugAudioEngine } from \"./Audio\";\nimport {\n  AudiosetControl,\n  ControlCommand,\n  ControlListener,\n  ControlState,\n} from \"./AudiosetControl\";\nimport { Emitter, Listener } from \"./Emitter\";\nimport {\n  FetchAudio,\n  ResourceLoader,\n  ResourceLoadStatus,\n} from \"./ResourceLoader\";\nimport { Sampler } from \"./Sampler\";\n\n/**\n * A player is the facade for the rest of the components:\n * - Loader: load audioset and resources\n * - Control: determines how to play clips\n * - Pads: receive pad events\n * - Params: receive param change events\n * - Keyboard: receive keyboard events\n * - Sampler: play the audio\n */\nexport class Player {\n  public readonly loader: AudiosetLoader;\n  public control: AudiosetControl;\n  public resources: ResourceLoader;\n\n  // private //\n  private sampler: Sampler;\n\n  private noSampler: Sampler;\n  private noControl: AudiosetControl;\n  private noResources: ResourceLoader;\n\n  private readonly controlListener: ControlListener;\n  private readonly resourceListener: (status: ResourceLoadStatus) => void;\n\n  private readonly audiosetChanged = new Emitter<AudiosetData>();\n  private readonly audiosetLoadStatusChanged = new Emitter<\n    AudiosetLoadStatus\n  >();\n  private readonly controlStateChanged = new Emitter<ControlState>();\n  private readonly controlCommand = new Emitter<ControlCommand>();\n  private readonly resourceStatusChanged = new Emitter<ResourceLoadStatus>();\n\n  private fetchAudio?: FetchAudio;\n  private audio: AudioEngine = new DebugAudioEngine();\n  private audioset: Audioset = EmptyAudioset;\n\n  constructor() {\n    this.loader = new AudiosetLoader(status =>\n      this.setAudiosetLoadStatus(status),\n    );\n    this.controlListener = {\n      onControlStateChanged: state => this.emitControlState(state),\n      onControlCommand: command => this.runCommand(command),\n    };\n    this.resourceListener = (status: ResourceLoadStatus) => {\n      this.resourceStatusChanged.emit(status);\n    };\n    this.noControl = this.control = new AudiosetControl(\n      this.audioset,\n      this.controlListener,\n    );\n    this.noResources = this.resources = new ResourceLoader(\n      this.audioset,\n      this.resourceListener,\n    );\n    this.noSampler = this.sampler = new Sampler(\n      this.audioset,\n      this.resources,\n      this.audio,\n    );\n  }\n\n  public setFetchAudio(fetch: FetchAudio) {\n    this.fetchAudio = fetch;\n    this.resources.fetch = fetch;\n  }\n\n  public setAudioEngine(audio: AudioEngine) {\n    this.audio = audio;\n    // this.sampler.dispose()\n    this.sampler = new Sampler(this.audioset, this.resources, this.audio);\n  }\n\n  public onResourceStatusChanged(listener: Listener<ResourceLoadStatus>) {\n    return this.resourceStatusChanged.on(listener);\n  }\n\n  public onControlStateChanged(listener: Listener<ControlState>) {\n    return this.controlStateChanged.on(listener);\n  }\n\n  public onCommand(listener: Listener<ControlCommand>) {\n    return this.controlCommand.on(listener);\n  }\n\n  //// PRIVATE /////\n\n  // allow pub/sub of contro state\n  private emitControlState(controlState: ControlState) {\n    this.controlStateChanged.emit(controlState);\n  }\n\n  // allows pub/sub of commands (for visuals)\n  private runCommand(command: ControlCommand) {\n    this.sampler.run(command);\n    this.controlCommand.emit(command);\n  }\n  private setAudiosetLoadStatus(status: AudiosetLoadStatus) {\n    this.audiosetLoadStatusChanged.emit(status);\n    if (status.status === \"ready\") {\n      this.setDelegates(status.audioset);\n      this.audiosetChanged.emit(status.audioset);\n    }\n  }\n\n  private setDelegates(audioset: AudiosetData) {\n    if (isAudiosetPlay(audioset)) {\n      this.audioset = audioset;\n      this.control = new AudiosetControl(audioset, this.controlListener);\n      this.resources = new ResourceLoader(audioset, this.resourceListener);\n      this.sampler = new Sampler(audioset, this.resources, this.audio);\n    } else {\n      this.control = this.noControl;\n      this.sampler = this.noSampler;\n      this.resources = this.noResources;\n    }\n    if (this.fetchAudio) {\n      this.resources.fetch = this.fetchAudio;\n    }\n  }\n}\n\nfunction isAudiosetPlay(audioset: AudiosetData): audioset is Audioset {\n  return audioset.type === \"audioset\";\n}\n"]},"metadata":{},"sourceType":"module"}