{"ast":null,"code":"import { AudiosetLoader } from \"../Audioset/AudiosetLoader\";\nimport { EmptyAudioset } from \"../Audioset\";\nimport { AudiosetControl } from \"./AudiosetControl\";\nimport { Sampler } from \"./Sampler\";\nimport { DebugAudioEngine } from \"./Audio\";\nimport { ResourceLoader } from \"./ResourceLoader\";\n\nclass Emitter {\n  constructor() {\n    this.listeners = [];\n  }\n\n  emit(event) {\n    this.listeners.forEach(listen => listen(event));\n  }\n\n  on(listener) {\n    this.listeners.push(listener);\n    return () => this.off(listener);\n  }\n\n  off(listener) {\n    const index = this.listeners.indexOf(listener);\n    if (index > -1) this.listeners.splice(index, 1);\n  }\n\n}\n/**\n * A player is the facade for the rest of the components:\n * - Loader: load audioset and resources\n * - Control: determines how to play clips\n * - Pads: receive pad events\n * - Params: receive param change events\n * - Keyboard: receive keyboard events\n * - Sampler: play the audio\n */\n\n\nexport class Player {\n  constructor() {\n    this.loader = void 0;\n    this.control = void 0;\n    this.sampler = void 0;\n    this.resources = void 0;\n    this._noSampler = void 0;\n    this._noControl = void 0;\n    this._noResources = void 0;\n    this.controlListener = void 0;\n    this.resourceListener = void 0;\n    this.audiosetChanged = new Emitter();\n    this.audiosetLoadStatusChanged = new Emitter();\n    this.controlStateChanged = new Emitter();\n    this.controlCommand = new Emitter();\n    this.resourceStatusChanged = new Emitter();\n    this.fetchAudio = void 0;\n    this.audio = new DebugAudioEngine();\n    this.audioset = EmptyAudioset;\n    this.loader = new AudiosetLoader(status => this.setAudiosetLoadStatus(status));\n    this.controlListener = {\n      onControlStateChanged: state => this.emitControlState(state),\n      onControlCommand: command => this.runCommand(command)\n    };\n\n    this.resourceListener = status => {\n      this.resourceStatusChanged.emit(status);\n    };\n\n    this._noControl = this.control = new AudiosetControl(this.audioset, this.controlListener);\n    this._noResources = this.resources = new ResourceLoader(this.audioset, this.resourceListener);\n    this._noSampler = this.sampler = new Sampler(this.audioset, this.resources, this.audio);\n  }\n\n  setFetchAudio(fetch) {\n    this.fetchAudio = fetch;\n    this.resources.fetch = fetch;\n  }\n\n  setAudioEngine(audio) {\n    this.audio = audio; // this.sampler.dispose()\n\n    this.sampler = new Sampler(this.audioset, this.resources, this.audio);\n  }\n\n  onResourceStatusChanged(listener) {\n    return this.resourceStatusChanged.on(listener);\n  }\n\n  onControlStateChanged(listener) {\n    return this.controlStateChanged.on(listener);\n  }\n\n  onCommand(listener) {\n    return this.controlCommand.on(listener);\n  } //// PRIVATE /////k\n  // allow pub/sub of contro state\n\n\n  emitControlState(controlState) {\n    this.controlStateChanged.emit(controlState);\n  } // allows pub/sub of commands (for visuals)\n\n\n  runCommand(command) {\n    this.sampler.run(command);\n    this.controlCommand.emit(command);\n  }\n\n  setAudiosetLoadStatus(status) {\n    this.audiosetLoadStatusChanged.emit(status);\n\n    if (status.status === \"ready\") {\n      this.setDelegates(status.audioset);\n      this.audiosetChanged.emit(status.audioset);\n    }\n  }\n\n  setDelegates(audioset) {\n    if (isAudiosetPlay(audioset)) {\n      this.audioset = audioset;\n      this.control = new AudiosetControl(audioset, this.controlListener);\n      this.resources = new ResourceLoader(audioset, this.resourceListener);\n      this.sampler = new Sampler(audioset, this.resources, this.audio);\n    } else {\n      this.control = this._noControl;\n      this.sampler = this._noSampler;\n      this.resources = this._noResources;\n    }\n\n    if (this.fetchAudio) this.resources.fetch = this.fetchAudio;\n  }\n\n}\n\nfunction isAudiosetPlay(audioset) {\n  return audioset.type === \"audioset\";\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/Player/Player.ts"],"names":["AudiosetLoader","EmptyAudioset","AudiosetControl","Sampler","DebugAudioEngine","ResourceLoader","Emitter","listeners","emit","event","forEach","listen","on","listener","push","off","index","indexOf","splice","Player","constructor","loader","control","sampler","resources","_noSampler","_noControl","_noResources","controlListener","resourceListener","audiosetChanged","audiosetLoadStatusChanged","controlStateChanged","controlCommand","resourceStatusChanged","fetchAudio","audio","audioset","status","setAudiosetLoadStatus","onControlStateChanged","state","emitControlState","onControlCommand","command","runCommand","setFetchAudio","fetch","setAudioEngine","onResourceStatusChanged","onCommand","controlState","run","setDelegates","isAudiosetPlay","type"],"mappings":"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","sourcesContent":["import { AudiosetLoader, AudiosetLoadStatus } from \"../Audioset/AudiosetLoader\";\nimport { Audioset, AudiosetData, EmptyAudioset } from \"../Audioset\";\nimport { AudiosetControl, ControlListener, ControlState, ControlCommand } from \"./AudiosetControl\";\nimport { Sampler } from \"./Sampler\";\nimport { AudioEngine, DebugAudioEngine } from \"./Audio\";\nimport { ResourceLoader, ResourceLoadStatus, FetchAudio } from \"./ResourceLoader\";\n\ntype Listener<T> = (event: T) => void;\nclass Emitter<T> {\n  private readonly listeners: Listener<T>[] = [];\n\n  emit(event: T) {\n    this.listeners.forEach((listen) => listen(event));\n  }\n\n  on(listener: Listener<T>) {\n    this.listeners.push(listener);\n    return () => this.off(listener);\n  }\n\n  off(listener: Listener<T>) {\n    const index = this.listeners.indexOf(listener);\n    if (index > -1) this.listeners.splice(index, 1);\n  }\n}\n\n/**\n * A player is the facade for the rest of the components:\n * - Loader: load audioset and resources\n * - Control: determines how to play clips\n * - Pads: receive pad events\n * - Params: receive param change events\n * - Keyboard: receive keyboard events\n * - Sampler: play the audio\n */\nexport class Player {\n  public readonly loader: AudiosetLoader;\n  public control: AudiosetControl;\n  private sampler: Sampler;\n  public resources: ResourceLoader;\n\n  private _noSampler: Sampler;\n  private _noControl: AudiosetControl;\n  private _noResources: ResourceLoader;\n\n  private readonly controlListener: ControlListener;\n  private readonly resourceListener: (status: ResourceLoadStatus) => void;\n\n  private readonly audiosetChanged = new Emitter<AudiosetData>();\n  private readonly audiosetLoadStatusChanged = new Emitter<AudiosetLoadStatus>();\n  private readonly controlStateChanged = new Emitter<ControlState>();\n  private readonly controlCommand = new Emitter<ControlCommand>();\n  private readonly resourceStatusChanged = new Emitter<ResourceLoadStatus>();\n\n  private fetchAudio?: FetchAudio;\n  private audio: AudioEngine = new DebugAudioEngine();\n  private audioset: Audioset = EmptyAudioset;\n\n  constructor() {\n    this.loader = new AudiosetLoader((status) => this.setAudiosetLoadStatus(status));\n    this.controlListener = {\n      onControlStateChanged: (state) => this.emitControlState(state),\n      onControlCommand: (command) => this.runCommand(command),\n    };\n    this.resourceListener = (status: ResourceLoadStatus) => {\n      this.resourceStatusChanged.emit(status);\n    };\n    this._noControl = this.control = new AudiosetControl(this.audioset, this.controlListener);\n    this._noResources = this.resources = new ResourceLoader(this.audioset, this.resourceListener);\n    this._noSampler = this.sampler = new Sampler(this.audioset, this.resources, this.audio);\n  }\n\n  public setFetchAudio(fetch: FetchAudio) {\n    this.fetchAudio = fetch;\n    this.resources.fetch = fetch;\n  }\n\n  public setAudioEngine(audio: AudioEngine) {\n    this.audio = audio;\n    // this.sampler.dispose()\n    this.sampler = new Sampler(this.audioset, this.resources, this.audio);\n  }\n\n  public onResourceStatusChanged(listener: Listener<ResourceLoadStatus>) {\n    return this.resourceStatusChanged.on(listener);\n  }\n\n  public onControlStateChanged(listener: Listener<ControlState>) {\n    return this.controlStateChanged.on(listener);\n  }\n\n  public onCommand(listener: Listener<ControlCommand>) {\n    return this.controlCommand.on(listener);\n  }\n\n  //// PRIVATE /////k\n\n  // allow pub/sub of contro state\n  private emitControlState(controlState: ControlState) {\n    this.controlStateChanged.emit(controlState);\n  }\n\n  // allows pub/sub of commands (for visuals)\n  private runCommand(command: ControlCommand) {\n    this.sampler.run(command);\n    this.controlCommand.emit(command);\n  }\n  private setAudiosetLoadStatus(status: AudiosetLoadStatus) {\n    this.audiosetLoadStatusChanged.emit(status);\n    if (status.status === \"ready\") {\n      this.setDelegates(status.audioset);\n      this.audiosetChanged.emit(status.audioset);\n    }\n  }\n\n  private setDelegates(audioset: AudiosetData) {\n    if (isAudiosetPlay(audioset)) {\n      this.audioset = audioset;\n      this.control = new AudiosetControl(audioset, this.controlListener);\n      this.resources = new ResourceLoader(audioset, this.resourceListener);\n      this.sampler = new Sampler(audioset, this.resources, this.audio);\n    } else {\n      this.control = this._noControl;\n      this.sampler = this._noSampler;\n      this.resources = this._noResources;\n    }\n    if (this.fetchAudio) this.resources.fetch = this.fetchAudio;\n  }\n}\n\nfunction isAudiosetPlay(audioset: AudiosetData): audioset is Audioset {\n  return audioset.type === \"audioset\";\n}\n"]},"metadata":{},"sourceType":"module"}