{"ast":null,"code":"export const createBaseAudioContextConstructor = (addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) => {\n  return class BaseAudioContext extends minimalBaseAudioContextConstructor {\n    constructor(_nativeContext, numberOfChannels) {\n      super(_nativeContext, numberOfChannels);\n      this._nativeContext = _nativeContext;\n      this._audioWorklet = addAudioWorkletModule === undefined ? undefined : {\n        addModule: (moduleURL, options) => addAudioWorkletModule(this, moduleURL, options)\n      };\n    }\n\n    get audioWorklet() {\n      return this._audioWorklet;\n    }\n\n    createAnalyser() {\n      return new analyserNodeConstructor(this);\n    }\n\n    createBiquadFilter() {\n      return new biquadFilterNodeConstructor(this);\n    }\n\n    createBuffer(numberOfChannels, length, sampleRate) {\n      return new audioBufferConstructor({\n        length,\n        numberOfChannels,\n        sampleRate\n      });\n    }\n\n    createBufferSource() {\n      return new audioBufferSourceNodeConstructor(this);\n    }\n\n    createChannelMerger(numberOfInputs = 6) {\n      return new channelMergerNodeConstructor(this, {\n        numberOfInputs\n      });\n    }\n\n    createChannelSplitter(numberOfOutputs = 6) {\n      return new channelSplitterNodeConstructor(this, {\n        numberOfOutputs\n      });\n    }\n\n    createConstantSource() {\n      return new constantSourceNodeConstructor(this);\n    }\n\n    createConvolver() {\n      return new convolverNodeConstructor(this);\n    }\n\n    createDelay(maxDelayTime = 1) {\n      return new delayNodeConstructor(this, {\n        maxDelayTime\n      });\n    }\n\n    createDynamicsCompressor() {\n      return new dynamicsCompressorNodeConstructor(this);\n    }\n\n    createGain() {\n      return new gainNodeConstructor(this);\n    }\n\n    createIIRFilter(feedforward, feedback) {\n      return new iIRFilterNodeConstructor(this, {\n        feedback,\n        feedforward\n      });\n    }\n\n    createOscillator() {\n      return new oscillatorNodeConstructor(this);\n    }\n\n    createPanner() {\n      return new pannerNodeConstructor(this);\n    }\n\n    createPeriodicWave(real, imag, constraints = {\n      disableNormalization: false\n    }) {\n      return new periodicWaveConstructor(this, { ...constraints,\n        imag,\n        real\n      });\n    }\n\n    createStereoPanner() {\n      return new stereoPannerNodeConstructor(this);\n    }\n\n    createWaveShaper() {\n      return new waveShaperNodeConstructor(this);\n    }\n\n    decodeAudioData(audioData, successCallback, errorCallback) {\n      return decodeAudioData(this._nativeContext, audioData).then(audioBuffer => {\n        if (typeof successCallback === 'function') {\n          successCallback(audioBuffer);\n        }\n\n        return audioBuffer;\n      }).catch(err => {\n        if (typeof errorCallback === 'function') {\n          errorCallback(err);\n        }\n\n        throw err; // tslint:disable-line:rxjs-throw-error\n      });\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/base-audio-context-constructor.js"],"names":["createBaseAudioContextConstructor","addAudioWorkletModule","analyserNodeConstructor","audioBufferConstructor","audioBufferSourceNodeConstructor","biquadFilterNodeConstructor","channelMergerNodeConstructor","channelSplitterNodeConstructor","constantSourceNodeConstructor","convolverNodeConstructor","decodeAudioData","delayNodeConstructor","dynamicsCompressorNodeConstructor","gainNodeConstructor","iIRFilterNodeConstructor","minimalBaseAudioContextConstructor","oscillatorNodeConstructor","pannerNodeConstructor","periodicWaveConstructor","stereoPannerNodeConstructor","waveShaperNodeConstructor","BaseAudioContext","constructor","_nativeContext","numberOfChannels","_audioWorklet","undefined","addModule","moduleURL","options","audioWorklet","createAnalyser","createBiquadFilter","createBuffer","length","sampleRate","createBufferSource","createChannelMerger","numberOfInputs","createChannelSplitter","numberOfOutputs","createConstantSource","createConvolver","createDelay","maxDelayTime","createDynamicsCompressor","createGain","createIIRFilter","feedforward","feedback","createOscillator","createPanner","createPeriodicWave","real","imag","constraints","disableNormalization","createStereoPanner","createWaveShaper","audioData","successCallback","errorCallback","then","audioBuffer","catch","err"],"mappings":"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","sourcesContent":["export const createBaseAudioContextConstructor = (addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) => {\n    return class BaseAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(_nativeContext, numberOfChannels) {\n            super(_nativeContext, numberOfChannels);\n            this._nativeContext = _nativeContext;\n            this._audioWorklet = (addAudioWorkletModule === undefined) ?\n                undefined :\n                { addModule: (moduleURL, options) => addAudioWorkletModule(this, moduleURL, options) };\n        }\n        get audioWorklet() {\n            return this._audioWorklet;\n        }\n        createAnalyser() {\n            return new analyserNodeConstructor(this);\n        }\n        createBiquadFilter() {\n            return new biquadFilterNodeConstructor(this);\n        }\n        createBuffer(numberOfChannels, length, sampleRate) {\n            return new audioBufferConstructor({ length, numberOfChannels, sampleRate });\n        }\n        createBufferSource() {\n            return new audioBufferSourceNodeConstructor(this);\n        }\n        createChannelMerger(numberOfInputs = 6) {\n            return new channelMergerNodeConstructor(this, { numberOfInputs });\n        }\n        createChannelSplitter(numberOfOutputs = 6) {\n            return new channelSplitterNodeConstructor(this, { numberOfOutputs });\n        }\n        createConstantSource() {\n            return new constantSourceNodeConstructor(this);\n        }\n        createConvolver() {\n            return new convolverNodeConstructor(this);\n        }\n        createDelay(maxDelayTime = 1) {\n            return new delayNodeConstructor(this, { maxDelayTime });\n        }\n        createDynamicsCompressor() {\n            return new dynamicsCompressorNodeConstructor(this);\n        }\n        createGain() {\n            return new gainNodeConstructor(this);\n        }\n        createIIRFilter(feedforward, feedback) {\n            return new iIRFilterNodeConstructor(this, { feedback, feedforward });\n        }\n        createOscillator() {\n            return new oscillatorNodeConstructor(this);\n        }\n        createPanner() {\n            return new pannerNodeConstructor(this);\n        }\n        createPeriodicWave(real, imag, constraints = { disableNormalization: false }) {\n            return new periodicWaveConstructor(this, { ...constraints, imag, real });\n        }\n        createStereoPanner() {\n            return new stereoPannerNodeConstructor(this);\n        }\n        createWaveShaper() {\n            return new waveShaperNodeConstructor(this);\n        }\n        decodeAudioData(audioData, successCallback, errorCallback) {\n            return decodeAudioData(this._nativeContext, audioData)\n                .then((audioBuffer) => {\n                if (typeof successCallback === 'function') {\n                    successCallback(audioBuffer);\n                }\n                return audioBuffer;\n            })\n                .catch((err) => {\n                if (typeof errorCallback === 'function') {\n                    errorCallback(err);\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/base-audio-context-constructor.js.map"]},"metadata":{},"sourceType":"module"}