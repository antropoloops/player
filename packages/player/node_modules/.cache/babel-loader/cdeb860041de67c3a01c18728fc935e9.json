{"ast":null,"code":"import _classCallCheck from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";// TODO: abstract (LoadPending, LoadProgress, LoadReady, LoadError)\nexport var AudiosetLoader=/*#__PURE__*/function(){function AudiosetLoader(onAudiosetStatusChange){_classCallCheck(this,AudiosetLoader);this.onAudiosetStatusChange=onAudiosetStatusChange;this.status={status:\"pending\"};this.fetch=function(){return Promise.reject();};}_createClass(AudiosetLoader,[{key:\"loadAudioset\",value:function loadAudioset(audiosetId){var _this=this;this.setStatus({status:\"loading\",audiosetId:audiosetId});return this.fetch(audiosetId).then(function(audioset){return _this.setStatus({status:\"ready\",audioset:audioset});}).catch(function(error){return _this.setStatus({status:\"error\",error:error});});}},{key:\"setStatus\",value:function setStatus(status){this.status=status;this.onAudiosetStatusChange(status);return status;}}]);return AudiosetLoader;}();","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/Audioset/AudiosetLoader.ts"],"names":["AudiosetLoader","onAudiosetStatusChange","status","fetch","Promise","reject","audiosetId","setStatus","then","audioset","catch","error"],"mappings":"sTAEA;AAYA,UAAaA,CAAAA,cAAb,yBAIE,wBAAoBC,sBAApB,CAA0D,2CAAtCA,sBAAsC,CAAtCA,sBAAsC,MAHlDC,MAGkD,CAHrB,CAAEA,MAAM,CAAE,SAAV,CAGqB,MAFnDC,KAEmD,CAF5B,iBAAMC,CAAAA,OAAO,CAACC,MAAR,EAAN,EAE4B,CAAE,CAJ9D,6EAMeC,UANf,CAMgE,gBAC5D,KAAKC,SAAL,CAAe,CAAEL,MAAM,CAAE,SAAV,CAAqBI,UAAU,CAAVA,UAArB,CAAf,EACA,MAAO,MAAKH,KAAL,CAAWG,UAAX,EACJE,IADI,CACC,SAACC,QAAD,QAAc,CAAA,KAAI,CAACF,SAAL,CAAe,CAAEL,MAAM,CAAE,OAAV,CAAmBO,QAAQ,CAARA,QAAnB,CAAf,CAAd,EADD,EAEJC,KAFI,CAEE,SAACC,KAAD,QAAW,CAAA,KAAI,CAACJ,SAAL,CAAe,CAAEL,MAAM,CAAE,OAAV,CAAmBS,KAAK,CAALA,KAAnB,CAAf,CAAX,EAFF,CAAP,CAGD,CAXH,4CAaoBT,MAbpB,CAagD,CAC5C,KAAKA,MAAL,CAAcA,MAAd,CACA,KAAKD,sBAAL,CAA4BC,MAA5B,EACA,MAAOA,CAAAA,MAAP,CACD,CAjBH","sourcesContent":["import { AudiosetData } from \".\";\n\n// TODO: abstract (LoadPending, LoadProgress, LoadReady, LoadError)\ntype LoadPending = { readonly status: \"pending\" };\ntype LoadingAudioset = { readonly status: \"loading\"; readonly audiosetId: string };\ntype AudiosetLoaded = { readonly status: \"ready\"; readonly audioset: AudiosetData };\ntype AudiosetLoadError = { readonly status: \"error\"; readonly error: any };\n\nexport type AudiosetLoadStatus = LoadPending | LoadingAudioset | AudiosetLoaded | AudiosetLoadError;\n\nexport type FetchAudioset = (id: string) => Promise<AudiosetData>;\n\ntype LoadListener = (status: AudiosetLoadStatus) => void;\n\nexport class AudiosetLoader {\n  private status: AudiosetLoadStatus = { status: \"pending\" };\n  public fetch: FetchAudioset = () => Promise.reject();\n\n  constructor(private onAudiosetStatusChange: LoadListener) {}\n\n  loadAudioset(audiosetId: string): Promise<AudiosetLoadStatus> {\n    this.setStatus({ status: \"loading\", audiosetId });\n    return this.fetch(audiosetId)\n      .then((audioset) => this.setStatus({ status: \"ready\", audioset }))\n      .catch((error) => this.setStatus({ status: \"error\", error }));\n  }\n\n  private setStatus(status: AudiosetLoadStatus) {\n    this.status = status;\n    this.onAudiosetStatusChange(status);\n    return status;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}