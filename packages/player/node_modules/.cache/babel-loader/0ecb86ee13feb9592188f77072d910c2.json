{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createConstantSourceNodeRendererFactory = function createConstantSourceNodeRendererFactory(connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeConstantSourceNodes = new WeakMap();\n    var start = null;\n    var stop = null;\n\n    var createConstantSourceNode = function createConstantSourceNode(proxy, nativeOfflineAudioContext, trace) {\n      var nativeConstantSourceNode, nativeConstantSourceNodeIsOwnedByContext, options;\n      return _regeneratorRuntime.async(function createConstantSourceNode$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              nativeConstantSourceNode = getNativeAudioNode(proxy);\n              /*\n               * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n               * again.\n               */\n\n              nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n\n              if (!nativeConstantSourceNodeIsOwnedByContext) {\n                options = {\n                  channelCount: nativeConstantSourceNode.channelCount,\n                  channelCountMode: nativeConstantSourceNode.channelCountMode,\n                  channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n                  offset: nativeConstantSourceNode.offset.value\n                };\n                nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n\n                if (start !== null) {\n                  nativeConstantSourceNode.start(start);\n                }\n\n                if (stop !== null) {\n                  nativeConstantSourceNode.stop(stop);\n                }\n              }\n\n              renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n\n              if (nativeConstantSourceNodeIsOwnedByContext) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace));\n\n            case 7:\n              _context.next = 11;\n              break;\n\n            case 9:\n              _context.next = 11;\n              return _regeneratorRuntime.awrap(connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace));\n\n            case 11:\n              _context.next = 13;\n              return _regeneratorRuntime.awrap(renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode, trace));\n\n            case 13:\n              return _context.abrupt(\"return\", nativeConstantSourceNode);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    return {\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render: function render(proxy, nativeOfflineAudioContext, trace) {\n        var renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeConstantSourceNode !== undefined) {\n          return Promise.resolve(renderedNativeConstantSourceNode);\n        }\n\n        return createConstantSourceNode(proxy, nativeOfflineAudioContext, trace);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/constant-source-node-renderer-factory.js"],"names":["isOwnedByContext","createConstantSourceNodeRendererFactory","connectAudioParam","createNativeConstantSourceNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeConstantSourceNodes","WeakMap","start","stop","createConstantSourceNode","proxy","nativeOfflineAudioContext","trace","nativeConstantSourceNode","nativeConstantSourceNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","offset","value","set","render","renderedNativeConstantSourceNode","get","undefined","Promise","resolve"],"mappings":";AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AACA,OAAO,IAAMC,uCAAuC,GAAG,SAA1CA,uCAA0C,CAACC,iBAAD,EAAoBC,8BAApB,EAAoDC,kBAApD,EAAwEC,gBAAxE,EAA0FC,uBAA1F,EAAsH;AACzK,SAAO,YAAM;AACT,QAAMC,iCAAiC,GAAG,IAAIC,OAAJ,EAA1C;AACA,QAAIC,KAAK,GAAG,IAAZ;AACA,QAAIC,IAAI,GAAG,IAAX;;AACA,QAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAOC,KAAP,EAAcC,yBAAd,EAAyCC,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AACzBC,cAAAA,wBADyB,GACEX,kBAAkB,CAACQ,KAAD,CADpB;AAE7B;;;;;AAIMI,cAAAA,wCANuB,GAMoBhB,gBAAgB,CAACe,wBAAD,EAA2BF,yBAA3B,CANpC;;AAO7B,kBAAI,CAACG,wCAAL,EAA+C;AACrCC,gBAAAA,OADqC,GAC3B;AACZC,kBAAAA,YAAY,EAAEH,wBAAwB,CAACG,YAD3B;AAEZC,kBAAAA,gBAAgB,EAAEJ,wBAAwB,CAACI,gBAF/B;AAGZC,kBAAAA,qBAAqB,EAAEL,wBAAwB,CAACK,qBAHpC;AAIZC,kBAAAA,MAAM,EAAEN,wBAAwB,CAACM,MAAzB,CAAgCC;AAJ5B,iBAD2B;AAO3CP,gBAAAA,wBAAwB,GAAGZ,8BAA8B,CAACU,yBAAD,EAA4BI,OAA5B,CAAzD;;AACA,oBAAIR,KAAK,KAAK,IAAd,EAAoB;AAChBM,kBAAAA,wBAAwB,CAACN,KAAzB,CAA+BA,KAA/B;AACH;;AACD,oBAAIC,IAAI,KAAK,IAAb,EAAmB;AACfK,kBAAAA,wBAAwB,CAACL,IAAzB,CAA8BA,IAA9B;AACH;AACJ;;AACDH,cAAAA,iCAAiC,CAACgB,GAAlC,CAAsCV,yBAAtC,EAAiEE,wBAAjE;;AAtB6B,kBAuBxBC,wCAvBwB;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAwBnBX,gBAAgB,CAACQ,yBAAD,EAA4BD,KAAK,CAACS,MAAlC,EAA0CN,wBAAwB,CAACM,MAAnE,EAA2EP,KAA3E,CAxBG;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,+CA2BnBZ,iBAAiB,CAACW,yBAAD,EAA4BD,KAAK,CAACS,MAAlC,EAA0CN,wBAAwB,CAACM,MAAnE,EAA2EP,KAA3E,CA3BE;;AAAA;AAAA;AAAA,+CA6BvBR,uBAAuB,CAACM,KAAD,EAAQC,yBAAR,EAAmCE,wBAAnC,EAA6DD,KAA7D,CA7BA;;AAAA;AAAA,+CA8BtBC,wBA9BsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjC;;AAgCA,WAAO;AACH,UAAIN,KAAJ,CAAUa,KAAV,EAAiB;AACbb,QAAAA,KAAK,GAAGa,KAAR;AACH,OAHE;;AAIH,UAAIZ,IAAJ,CAASY,KAAT,EAAgB;AACZZ,QAAAA,IAAI,GAAGY,KAAP;AACH,OANE;;AAOHE,MAAAA,MAPG,kBAOIZ,KAPJ,EAOWC,yBAPX,EAOsCC,KAPtC,EAO6C;AAC5C,YAAMW,gCAAgC,GAAGlB,iCAAiC,CAACmB,GAAlC,CAAsCb,yBAAtC,CAAzC;;AACA,YAAIY,gCAAgC,KAAKE,SAAzC,EAAoD;AAChD,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,gCAAhB,CAAP;AACH;;AACD,eAAOd,wBAAwB,CAACC,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,CAA/B;AACH;AAbE,KAAP;AAeH,GAnDD;AAoDH,CArDM","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConstantSourceNodeRendererFactory = (connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeConstantSourceNodes = new WeakMap();\n        let start = null;\n        let stop = null;\n        const createConstantSourceNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeConstantSourceNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeConstantSourceNode.channelCount,\n                    channelCountMode: nativeConstantSourceNode.channelCountMode,\n                    channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n                    offset: nativeConstantSourceNode.offset.value\n                };\n                nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeConstantSourceNode.start(start);\n                }\n                if (stop !== null) {\n                    nativeConstantSourceNode.stop(stop);\n                }\n            }\n            renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode, trace);\n            return nativeConstantSourceNode;\n        };\n        return {\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeConstantSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeConstantSourceNode);\n                }\n                return createConstantSourceNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/constant-source-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}