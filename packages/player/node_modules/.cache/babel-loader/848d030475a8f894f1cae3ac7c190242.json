{"ast":null,"code":"import { EmptyAudioset } from \"../audioset\";\nimport { AudiosetLoader } from \"../audioset/AudiosetLoader\";\nimport { DebugAudioEngine } from \"./Audio\";\nimport { AudiosetControl } from \"./AudiosetControl\";\nimport { Emitter } from \"./Emitter\";\nimport { ResourceLoader } from \"./ResourceLoader\";\nimport { Sampler } from \"./Sampler\";\n\nconst NoOp = param => undefined;\n\nconst NoControl = new AudiosetControl(EmptyAudioset, {\n  onControlCommand: NoOp,\n  onControlStateChanged: NoOp\n});\nconst NoResources = new ResourceLoader(EmptyAudioset, NoOp);\nconst NoEngine = new DebugAudioEngine();\nconst NoSampler = new Sampler(EmptyAudioset, NoResources, NoEngine);\nconst NoPlayer = {\n  control: NoControl,\n  resources: NoResources,\n  sampler: NoSampler\n};\n\nclass EmptyPlayer {\n  constructor() {\n    this.control = NoControl;\n  }\n\n}\n\nclass AudiosetPlayer extends EmptyPlayer {\n  constructor() {\n    super();\n    this.resources = NoResources;\n    this.audioset = EmptyAudioset;\n    this.resourceListener = void 0;\n    this.resourceStatusChanged = new Emitter();\n\n    this.resourceListener = status => {\n      this.handleResourceChanged(status);\n    };\n  }\n\n  getAudioset() {\n    return this.audioset;\n  }\n\n  setAudioset(audioset) {\n    this.audioset = audioset;\n    this.resources = new ResourceLoader(audioset, this.resourceListener);\n  }\n\n  onResourceStatusChanged(listener) {\n    return this.resourceStatusChanged.on(listener);\n  } // PRIVATE //\n\n\n  handleResourceChanged(status) {\n    this.resourceStatusChanged.emit(status);\n  }\n\n}\n/**\n * A player is the facade for the rest of the components:\n * - Loader: load audioset and resources\n * - Control: determines how to play clips\n * - Pads: receive pad events\n * - Params: receive param change events\n * - Keyboard: receive keyboard events\n * - Sampler: play the audio\n */\n\n\nexport class ControlPlayer extends AudiosetPlayer {\n  constructor() {\n    super();\n    this.controlListener = void 0;\n    this.controlStateChanged = new Emitter();\n    this.controlCommand = new Emitter();\n    this.controlListener = {\n      onControlStateChanged: state => this.handleControlStateChanged(state),\n      onControlCommand: command => this.handleControlCommand(command)\n    };\n  }\n\n  onControlStateChanged(listener) {\n    return this.controlStateChanged.on(listener);\n  }\n\n  onCommand(listener) {\n    return this.controlCommand.on(listener);\n  }\n\n  handleControlStateChanged(controlState) {\n    this.controlStateChanged.emit(controlState);\n  }\n\n  handleControlCommand(command) {\n    this.sampler.run(command);\n    this.controlCommand.emit(command);\n  }\n\n}\n\nclass AudioPlayer extends ControlPlayer {\n  constructor(...args) {\n    super(...args);\n    this.audio = new DebugAudioEngine();\n    this.sampler = NoSampler;\n  }\n\n  setAudioEngine(audio) {\n    this.audio = audio; // this.sampler.dispose()\n\n    this.sampler = new Sampler(this.getAudioset(), this.resources, this.audio);\n  }\n\n}\n/**\n * A player with a audioset loader.\n * The idea is a player with state, but not well modelled\n */\n\n\nexport class PlayerState extends AudioPlayer {\n  constructor() {\n    super();\n    this.loader = void 0;\n    this.audiosetLoadStatusChanged = new Emitter();\n    this.loader = new AudiosetLoader(status => this.handleLoadStatusChanged(status));\n  }\n\n  handleLoadStatusChanged(status) {\n    this.audiosetLoadStatusChanged.emit(status);\n\n    if (status.stage === \"ready\") {\n      this.setAudiosetData(status.audioset);\n    }\n  }\n\n  setAudiosetData(audioset) {\n    this.control.stopAll(0);\n\n    if (isAudiosetPlay(audioset)) {\n      this.control = new AudiosetControl(audioset, this.controlListener);\n      this.sampler = new Sampler(audioset, this.resources, this.audio);\n      this.setAudioset(audioset);\n    } else {\n      Object.assign(this, NoPlayer);\n    }\n  }\n\n}\n\nfunction isAudiosetPlay(audioset) {\n  return audioset.type === \"audioset\";\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/Player.ts"],"names":["EmptyAudioset","AudiosetLoader","DebugAudioEngine","AudiosetControl","Emitter","ResourceLoader","Sampler","NoOp","param","undefined","NoControl","onControlCommand","onControlStateChanged","NoResources","NoEngine","NoSampler","NoPlayer","control","resources","sampler","EmptyPlayer","AudiosetPlayer","constructor","audioset","resourceListener","resourceStatusChanged","status","handleResourceChanged","getAudioset","setAudioset","onResourceStatusChanged","listener","on","emit","ControlPlayer","controlListener","controlStateChanged","controlCommand","state","handleControlStateChanged","command","handleControlCommand","onCommand","controlState","run","AudioPlayer","audio","setAudioEngine","PlayerState","loader","audiosetLoadStatusChanged","handleLoadStatusChanged","stage","setAudiosetData","stopAll","isAudiosetPlay","Object","assign","type"],"mappings":"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","sourcesContent":["import { Audioset, AudiosetData, EmptyAudioset } from \"../audioset\";\nimport { AudiosetLoader, AudiosetLoadStatus } from \"../audioset/AudiosetLoader\";\nimport { AudioEngine, DebugAudioEngine } from \"./Audio\";\nimport {\n  AudiosetControl,\n  ControlCommand,\n  ControlListener,\n  ControlState,\n} from \"./AudiosetControl\";\nimport { Emitter, Listener } from \"./Emitter\";\nimport {\n  ResourceLoader,\n  ResourceLoadStatus,\n  Resources,\n} from \"./ResourceLoader\";\nimport { Sampler } from \"./Sampler\";\n\nconst NoOp = (param: any) => undefined;\nconst NoControl = new AudiosetControl(EmptyAudioset, {\n  onControlCommand: NoOp,\n  onControlStateChanged: NoOp,\n});\nconst NoResources = new ResourceLoader(EmptyAudioset, NoOp);\nconst NoEngine = new DebugAudioEngine();\nconst NoSampler = new Sampler(EmptyAudioset, NoResources, NoEngine);\n\nconst NoPlayer = {\n  control: NoControl,\n  resources: NoResources,\n  sampler: NoSampler,\n};\n\nclass EmptyPlayer {\n  public control: AudiosetControl = NoControl;\n}\n\nclass AudiosetPlayer extends EmptyPlayer {\n  public resources: Resources = NoResources;\n  private audioset: Audioset = EmptyAudioset;\n  private readonly resourceListener: (status: ResourceLoadStatus) => void;\n  private readonly resourceStatusChanged = new Emitter<ResourceLoadStatus>();\n\n  public constructor() {\n    super();\n    this.resourceListener = (status: ResourceLoadStatus) => {\n      this.handleResourceChanged(status);\n    };\n  }\n\n  public getAudioset() {\n    return this.audioset;\n  }\n\n  public setAudioset(audioset: Audioset) {\n    this.audioset = audioset;\n    this.resources = new ResourceLoader(audioset, this.resourceListener);\n  }\n\n  public onResourceStatusChanged(listener: Listener<ResourceLoadStatus>) {\n    return this.resourceStatusChanged.on(listener);\n  }\n\n  // PRIVATE //\n  private handleResourceChanged(status: ResourceLoadStatus) {\n    this.resourceStatusChanged.emit(status);\n  }\n}\n\n/**\n * A player is the facade for the rest of the components:\n * - Loader: load audioset and resources\n * - Control: determines how to play clips\n * - Pads: receive pad events\n * - Params: receive param change events\n * - Keyboard: receive keyboard events\n * - Sampler: play the audio\n */\nexport class ControlPlayer extends AudiosetPlayer {\n  protected readonly controlListener: ControlListener;\n\n  private readonly controlStateChanged = new Emitter<ControlState>();\n  private readonly controlCommand = new Emitter<ControlCommand>();\n\n  constructor() {\n    super();\n    this.controlListener = {\n      onControlStateChanged: state => this.handleControlStateChanged(state),\n      onControlCommand: command => this.handleControlCommand(command),\n    };\n  }\n\n  public onControlStateChanged(listener: Listener<ControlState>) {\n    return this.controlStateChanged.on(listener);\n  }\n\n  public onCommand(listener: Listener<ControlCommand>) {\n    return this.controlCommand.on(listener);\n  }\n\n  private handleControlStateChanged(controlState: ControlState) {\n    this.controlStateChanged.emit(controlState);\n  }\n\n  private handleControlCommand(command: ControlCommand) {\n    this.sampler.run(command);\n    this.controlCommand.emit(command);\n  }\n}\n\nclass AudioPlayer extends ControlPlayer {\n  protected audio: AudioEngine = new DebugAudioEngine();\n  private sampler: Sampler = NoSampler;\n\n  public setAudioEngine(audio: AudioEngine) {\n    this.audio = audio;\n    // this.sampler.dispose()\n    this.sampler = new Sampler(this.getAudioset(), this.resources, this.audio);\n  }\n}\n\n/**\n * A player with a audioset loader.\n * The idea is a player with state, but not well modelled\n */\nexport class PlayerState extends AudioPlayer {\n  public readonly loader: AudiosetLoader;\n  private readonly audiosetLoadStatusChanged = new Emitter<\n    AudiosetLoadStatus\n  >();\n\n  constructor() {\n    super();\n    this.loader = new AudiosetLoader(status =>\n      this.handleLoadStatusChanged(status),\n    );\n  }\n\n  private handleLoadStatusChanged(status: AudiosetLoadStatus) {\n    this.audiosetLoadStatusChanged.emit(status);\n    if (status.stage === \"ready\") {\n      this.setAudiosetData(status.audioset);\n    }\n  }\n\n  private setAudiosetData(audioset: AudiosetData) {\n    this.control.stopAll(0);\n    if (isAudiosetPlay(audioset)) {\n      this.control = new AudiosetControl(audioset, this.controlListener);\n      this.sampler = new Sampler(audioset, this.resources, this.audio);\n      this.setAudioset(audioset);\n    } else {\n      Object.assign(this, NoPlayer);\n    }\n  }\n}\n\nfunction isAudiosetPlay(audioset: AudiosetData): audioset is Audioset {\n  return audioset.type === \"audioset\";\n}\n\n"]},"metadata":{},"sourceType":"module"}