{"ast":null,"code":"export var createWrapAudioBufferCopyChannelMethods = function createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError) {\n  return function (audioBuffer) {\n    audioBuffer.copyFromChannel = function (destination, channelNumberAsNumber) {\n      var bufferOffsetAsNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n      var channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n      if (channelNumber >= audioBuffer.numberOfChannels) {\n        throw createIndexSizeError();\n      }\n\n      var audioBufferLength = audioBuffer.length;\n      var channelData = audioBuffer.getChannelData(channelNumber);\n      var destinationLength = destination.length;\n\n      for (var i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < destinationLength; i += 1) {\n        destination[i] = channelData[i + bufferOffset];\n      }\n    };\n\n    audioBuffer.copyToChannel = function (source, channelNumberAsNumber) {\n      var bufferOffsetAsNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n      var channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n      if (channelNumber >= audioBuffer.numberOfChannels) {\n        throw createIndexSizeError();\n      }\n\n      var audioBufferLength = audioBuffer.length;\n      var channelData = audioBuffer.getChannelData(channelNumber);\n      var sourceLength = source.length;\n\n      for (var i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < sourceLength; i += 1) {\n        channelData[i + bufferOffset] = source[i];\n      }\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/wrap-audio-buffer-copy-channel-methods.js"],"names":["createWrapAudioBufferCopyChannelMethods","convertNumberToUnsignedLong","createIndexSizeError","audioBuffer","copyFromChannel","destination","channelNumberAsNumber","bufferOffsetAsNumber","bufferOffset","channelNumber","numberOfChannels","audioBufferLength","length","channelData","getChannelData","destinationLength","i","copyToChannel","source","sourceLength"],"mappings":"AAAA,OAAO,IAAMA,uCAAuC,GAAG,SAA1CA,uCAA0C,CAACC,2BAAD,EAA8BC,oBAA9B,EAAuD;AAC1G,SAAO,UAACC,WAAD,EAAiB;AACpBA,IAAAA,WAAW,CAACC,eAAZ,GAA8B,UAACC,WAAD,EAAcC,qBAAd,EAAkE;AAAA,UAA7BC,oBAA6B,uEAAN,CAAM;AAC5F,UAAMC,YAAY,GAAGP,2BAA2B,CAACM,oBAAD,CAAhD;AACA,UAAME,aAAa,GAAGR,2BAA2B,CAACK,qBAAD,CAAjD;;AACA,UAAIG,aAAa,IAAIN,WAAW,CAACO,gBAAjC,EAAmD;AAC/C,cAAMR,oBAAoB,EAA1B;AACH;;AACD,UAAMS,iBAAiB,GAAGR,WAAW,CAACS,MAAtC;AACA,UAAMC,WAAW,GAAGV,WAAW,CAACW,cAAZ,CAA2BL,aAA3B,CAApB;AACA,UAAMM,iBAAiB,GAAGV,WAAW,CAACO,MAAtC;;AACA,WAAK,IAAII,CAAC,GAAIR,YAAY,GAAG,CAAhB,GAAqB,CAACA,YAAtB,GAAqC,CAAlD,EAAqDQ,CAAC,GAAGR,YAAJ,GAAmBG,iBAAnB,IAAwCK,CAAC,GAAGD,iBAAjG,EAAoHC,CAAC,IAAI,CAAzH,EAA4H;AACxHX,QAAAA,WAAW,CAACW,CAAD,CAAX,GAAiBH,WAAW,CAACG,CAAC,GAAGR,YAAL,CAA5B;AACH;AACJ,KAZD;;AAaAL,IAAAA,WAAW,CAACc,aAAZ,GAA4B,UAACC,MAAD,EAASZ,qBAAT,EAA6D;AAAA,UAA7BC,oBAA6B,uEAAN,CAAM;AACrF,UAAMC,YAAY,GAAGP,2BAA2B,CAACM,oBAAD,CAAhD;AACA,UAAME,aAAa,GAAGR,2BAA2B,CAACK,qBAAD,CAAjD;;AACA,UAAIG,aAAa,IAAIN,WAAW,CAACO,gBAAjC,EAAmD;AAC/C,cAAMR,oBAAoB,EAA1B;AACH;;AACD,UAAMS,iBAAiB,GAAGR,WAAW,CAACS,MAAtC;AACA,UAAMC,WAAW,GAAGV,WAAW,CAACW,cAAZ,CAA2BL,aAA3B,CAApB;AACA,UAAMU,YAAY,GAAGD,MAAM,CAACN,MAA5B;;AACA,WAAK,IAAII,CAAC,GAAIR,YAAY,GAAG,CAAhB,GAAqB,CAACA,YAAtB,GAAqC,CAAlD,EAAqDQ,CAAC,GAAGR,YAAJ,GAAmBG,iBAAnB,IAAwCK,CAAC,GAAGG,YAAjG,EAA+GH,CAAC,IAAI,CAApH,EAAuH;AACnHH,QAAAA,WAAW,CAACG,CAAC,GAAGR,YAAL,CAAX,GAAgCU,MAAM,CAACF,CAAD,CAAtC;AACH;AACJ,KAZD;AAaH,GA3BD;AA4BH,CA7BM","sourcesContent":["export const createWrapAudioBufferCopyChannelMethods = (convertNumberToUnsignedLong, createIndexSizeError) => {\n    return (audioBuffer) => {\n        audioBuffer.copyFromChannel = (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n            const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n            const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n            if (channelNumber >= audioBuffer.numberOfChannels) {\n                throw createIndexSizeError();\n            }\n            const audioBufferLength = audioBuffer.length;\n            const channelData = audioBuffer.getChannelData(channelNumber);\n            const destinationLength = destination.length;\n            for (let i = (bufferOffset < 0) ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < destinationLength; i += 1) {\n                destination[i] = channelData[i + bufferOffset];\n            }\n        };\n        audioBuffer.copyToChannel = (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n            const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n            const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n            if (channelNumber >= audioBuffer.numberOfChannels) {\n                throw createIndexSizeError();\n            }\n            const audioBufferLength = audioBuffer.length;\n            const channelData = audioBuffer.getChannelData(channelNumber);\n            const sourceLength = source.length;\n            for (let i = (bufferOffset < 0) ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < sourceLength; i += 1) {\n                channelData[i + bufferOffset] = source[i];\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wrap-audio-buffer-copy-channel-methods.js.map"]},"metadata":{},"sourceType":"module"}