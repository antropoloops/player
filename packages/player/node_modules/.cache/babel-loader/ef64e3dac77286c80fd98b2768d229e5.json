{"ast":null,"code":"import _objectSpread from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { testPromiseSupport } from '../helpers/test-promise-support';\nvar DEFAULT_OPTIONS = {\n  numberOfChannels: 1\n};\nexport var createMinimalOfflineAudioContextConstructor = function createMinimalOfflineAudioContextConstructor(cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, _startRendering) {\n  return /*#__PURE__*/function (_minimalBaseAudioCont) {\n    _inherits(MinimalOfflineAudioContext, _minimalBaseAudioCont);\n\n    var _super = _createSuper(MinimalOfflineAudioContext);\n\n    function MinimalOfflineAudioContext(options) {\n      var _this;\n\n      _classCallCheck(this, MinimalOfflineAudioContext);\n\n      var _DEFAULT_OPTIONS$opti = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options),\n          length = _DEFAULT_OPTIONS$opti.length,\n          numberOfChannels = _DEFAULT_OPTIONS$opti.numberOfChannels,\n          sampleRate = _DEFAULT_OPTIONS$opti.sampleRate;\n\n      var nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate); // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n\n      if (!cacheTestResult(testPromiseSupport, function () {\n        return testPromiseSupport(nativeOfflineAudioContext);\n      })) {\n        nativeOfflineAudioContext.addEventListener('statechange', function () {\n          var i = 0;\n\n          var delayStateChangeEvent = function delayStateChangeEvent(event) {\n            if (_this._state === 'running') {\n              if (i > 0) {\n                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                event.stopImmediatePropagation();\n\n                _this._waitForThePromiseToSettle(event);\n              } else {\n                i += 1;\n              }\n            }\n          };\n\n          return delayStateChangeEvent;\n        }());\n      }\n\n      _this = _super.call(this, nativeOfflineAudioContext, numberOfChannels);\n      _this._length = length;\n      _this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n      _this._state = null;\n      return _this;\n    }\n\n    _createClass(MinimalOfflineAudioContext, [{\n      key: \"startRendering\",\n      value: function startRendering() {\n        var _this2 = this;\n\n        /*\n         * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n         * the state of the nativeOfflineAudioContext might no transition to running immediately.\n         */\n        if (this._state === 'running') {\n          return Promise.reject(createInvalidStateError());\n        }\n\n        this._state = 'running';\n        return _startRendering(this.destination, this._nativeOfflineAudioContext).then(function (audioBuffer) {\n          _this2._state = null;\n          /*\n           * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n           * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n           */\n\n          return audioBuffer;\n        }) // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n        .catch(function (err) {\n          _this2._state = null;\n          /*\n           * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n           * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n           */\n\n          throw err; // tslint:disable-line:rxjs-throw-error\n        });\n      }\n    }, {\n      key: \"_waitForThePromiseToSettle\",\n      value: function _waitForThePromiseToSettle(event) {\n        var _this3 = this;\n\n        if (this._state === null) {\n          this._nativeOfflineAudioContext.dispatchEvent(event);\n        } else {\n          setTimeout(function () {\n            return _this3._waitForThePromiseToSettle(event);\n          });\n        }\n      }\n    }, {\n      key: \"length\",\n      get: function get() {\n        // Bug #17: Safari does not yet expose the length.\n        if (this._nativeOfflineAudioContext.length === undefined) {\n          return this._length;\n        }\n\n        return this._nativeOfflineAudioContext.length;\n      }\n    }, {\n      key: \"state\",\n      get: function get() {\n        return this._state === null ? this._nativeOfflineAudioContext.state : this._state;\n      }\n    }]);\n\n    return MinimalOfflineAudioContext;\n  }(minimalBaseAudioContextConstructor);\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/minimal-offline-audio-context-constructor.js"],"names":["testPromiseSupport","DEFAULT_OPTIONS","numberOfChannels","createMinimalOfflineAudioContextConstructor","cacheTestResult","createInvalidStateError","createNativeOfflineAudioContext","minimalBaseAudioContextConstructor","startRendering","options","length","sampleRate","nativeOfflineAudioContext","addEventListener","i","delayStateChangeEvent","event","_state","removeEventListener","stopImmediatePropagation","_waitForThePromiseToSettle","_length","_nativeOfflineAudioContext","Promise","reject","destination","then","audioBuffer","catch","err","dispatchEvent","setTimeout","undefined","state"],"mappings":"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","sourcesContent":["import { testPromiseSupport } from '../helpers/test-promise-support';\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n};\nexport const createMinimalOfflineAudioContextConstructor = (cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering) => {\n    return class MinimalOfflineAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(options) {\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n            const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);\n            // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n            if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n                nativeOfflineAudioContext.addEventListener('statechange', (() => {\n                    let i = 0;\n                    const delayStateChangeEvent = (event) => {\n                        if (this._state === 'running') {\n                            if (i > 0) {\n                                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                                event.stopImmediatePropagation();\n                                this._waitForThePromiseToSettle(event);\n                            }\n                            else {\n                                i += 1;\n                            }\n                        }\n                    };\n                    return delayStateChangeEvent;\n                })());\n            }\n            super(nativeOfflineAudioContext, numberOfChannels);\n            this._length = length;\n            this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n            this._state = null;\n        }\n        get length() {\n            // Bug #17: Safari does not yet expose the length.\n            if (this._nativeOfflineAudioContext.length === undefined) {\n                return this._length;\n            }\n            return this._nativeOfflineAudioContext.length;\n        }\n        get state() {\n            return (this._state === null) ? this._nativeOfflineAudioContext.state : this._state;\n        }\n        startRendering() {\n            /*\n             * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n             * the state of the nativeOfflineAudioContext might no transition to running immediately.\n             */\n            if (this._state === 'running') {\n                return Promise.reject(createInvalidStateError());\n            }\n            this._state = 'running';\n            return startRendering(this.destination, this._nativeOfflineAudioContext)\n                .then((audioBuffer) => {\n                this._state = null;\n                /*\n                 * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n                 * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n                 */\n                return audioBuffer;\n            })\n                // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n                .catch((err) => {\n                this._state = null;\n                /*\n                 * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n                 * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n                 */\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n        _waitForThePromiseToSettle(event) {\n            if (this._state === null) {\n                this._nativeOfflineAudioContext.dispatchEvent(event);\n            }\n            else {\n                setTimeout(() => this._waitForThePromiseToSettle(event));\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/minimal-offline-audio-context-constructor.js.map"]},"metadata":{},"sourceType":"module"}