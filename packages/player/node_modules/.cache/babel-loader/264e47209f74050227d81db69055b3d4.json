{"ast":null,"code":"import { useEffect, useMemo, useState } from \"react\";\nimport { getActiveAudioContext } from \"../../../active-audio-context\";\nimport { ResourceLoader } from \"../../../player/Loader\";\nimport { scrollToTop } from \"../../shared/useScroll\";\nexport function useSession(audioset) {\n  const [started, setStarted] = useState(false);\n  const [loaded, setLoaded] = useState(false);\n  const loader = useMemo(() => new ResourceLoader(audioset, status => {\n    if (status.stage === \"ready\") {\n      setLoaded(true);\n    }\n  }), [audioset]);\n  const loading = started && !loaded;\n  const [visible, setVisible] = useState(true);\n  useEffect(() => {\n    if (visible) {\n      scrollToTop();\n    }\n  }, [visible]);\n\n  async function start() {\n    setVisible(false);\n\n    if (!started) {\n      setStarted(true);\n      const ctx = await getActiveAudioContext();\n      await loader.load(ctx);\n    }\n  }\n\n  function toggle() {\n    if (started) {\n      setVisible(!visible);\n    }\n  }\n\n  return {\n    visible,\n    loading,\n    loaded,\n    started,\n    start,\n    loader,\n    toggle\n  };\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/packages/player/src/ui/components/Player/useSession.tsx"],"names":["useEffect","useMemo","useState","getActiveAudioContext","ResourceLoader","scrollToTop","useSession","audioset","started","setStarted","loaded","setLoaded","loader","status","stage","loading","visible","setVisible","start","ctx","load","toggle"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAASC,qBAAT,QAAsC,+BAAtC;AAEA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,WAAT,QAA4B,wBAA5B;AAEA,OAAO,SAASC,UAAT,CAAoBC,QAApB,EAAwC;AAC7C,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,KAAD,CAApC;AACA,QAAMU,MAAM,GAAGX,OAAO,CACpB,MACE,IAAIG,cAAJ,CAAmBG,QAAnB,EAA6BM,MAAM,IAAI;AACrC,QAAIA,MAAM,CAACC,KAAP,KAAiB,OAArB,EAA8B;AAC5BH,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD;AACF,GAJD,CAFkB,EAOpB,CAACJ,QAAD,CAPoB,CAAtB;AASA,QAAMQ,OAAO,GAAGP,OAAO,IAAI,CAACE,MAA5B;AAEA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,IAAD,CAAtC;AACAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,OAAJ,EAAa;AACXX,MAAAA,WAAW;AACZ;AACF,GAJQ,EAIN,CAACW,OAAD,CAJM,CAAT;;AAMA,iBAAeE,KAAf,GAAuB;AACrBD,IAAAA,UAAU,CAAC,KAAD,CAAV;;AACA,QAAI,CAACT,OAAL,EAAc;AACZC,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAMU,GAAG,GAAG,MAAMhB,qBAAqB,EAAvC;AACA,YAAMS,MAAM,CAACQ,IAAP,CAAYD,GAAZ,CAAN;AACD;AACF;;AAED,WAASE,MAAT,GAAkB;AAChB,QAAIb,OAAJ,EAAa;AACXS,MAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD;AACF;;AAED,SAAO;AAAEA,IAAAA,OAAF;AAAWD,IAAAA,OAAX;AAAoBL,IAAAA,MAApB;AAA4BF,IAAAA,OAA5B;AAAqCU,IAAAA,KAArC;AAA4CN,IAAAA,MAA5C;AAAoDS,IAAAA;AAApD,GAAP;AACD","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport { getActiveAudioContext } from \"../../../active-audio-context\";\nimport { Audioset } from \"../../../audioset\";\nimport { ResourceLoader } from \"../../../player/Loader\";\nimport { scrollToTop } from \"../../shared/useScroll\";\n\nexport function useSession(audioset: Audioset) {\n  const [started, setStarted] = useState(false);\n  const [loaded, setLoaded] = useState(false);\n  const loader = useMemo<ResourceLoader>(\n    () =>\n      new ResourceLoader(audioset, status => {\n        if (status.stage === \"ready\") {\n          setLoaded(true);\n        }\n      }),\n    [audioset],\n  );\n  const loading = started && !loaded;\n\n  const [visible, setVisible] = useState(true);\n  useEffect(() => {\n    if (visible) {\n      scrollToTop();\n    }\n  }, [visible]);\n\n  async function start() {\n    setVisible(false);\n    if (!started) {\n      setStarted(true);\n      const ctx = await getActiveAudioContext();\n      await loader.load(ctx);\n    }\n  }\n\n  function toggle() {\n    if (started) {\n      setVisible(!visible);\n    }\n  }\n\n  return { visible, loading, loaded, started, start, loader, toggle };\n}\n"]},"metadata":{},"sourceType":"module"}