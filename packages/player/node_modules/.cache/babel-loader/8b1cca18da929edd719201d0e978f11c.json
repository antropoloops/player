{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createBiquadFilterNodeRendererFactory = (connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeBiquadFilterNodes = new WeakMap();\n\n    const createBiquadFilterNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeBiquadFilterNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n       * again.\n       */\n\n      const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n\n      if (!nativeBiquadFilterNodeIsOwnedByContext) {\n        const options = {\n          Q: nativeBiquadFilterNode.Q.value,\n          channelCount: nativeBiquadFilterNode.channelCount,\n          channelCountMode: nativeBiquadFilterNode.channelCountMode,\n          channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n          detune: nativeBiquadFilterNode.detune.value,\n          frequency: nativeBiquadFilterNode.frequency.value,\n          gain: nativeBiquadFilterNode.gain.value,\n          type: nativeBiquadFilterNode.type\n        };\n        nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n\n      if (!nativeBiquadFilterNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode, trace);\n      return nativeBiquadFilterNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeBiquadFilterNode !== undefined) {\n          return Promise.resolve(renderedNativeBiquadFilterNode);\n        }\n\n        return createBiquadFilterNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/biquad-filter-node-renderer-factory.js"],"names":["isOwnedByContext","createBiquadFilterNodeRendererFactory","connectAudioParam","createNativeBiquadFilterNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeBiquadFilterNodes","WeakMap","createBiquadFilterNode","proxy","nativeOfflineAudioContext","trace","nativeBiquadFilterNode","nativeBiquadFilterNodeIsOwnedByContext","options","Q","value","channelCount","channelCountMode","channelInterpretation","detune","frequency","gain","type","set","render","renderedNativeBiquadFilterNode","get","undefined","Promise","resolve"],"mappings":"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","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createBiquadFilterNodeRendererFactory = (connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeBiquadFilterNodes = new WeakMap();\n        const createBiquadFilterNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeBiquadFilterNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                const options = {\n                    Q: nativeBiquadFilterNode.Q.value,\n                    channelCount: nativeBiquadFilterNode.channelCount,\n                    channelCountMode: nativeBiquadFilterNode.channelCountMode,\n                    channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n                    detune: nativeBiquadFilterNode.detune.value,\n                    frequency: nativeBiquadFilterNode.frequency.value,\n                    gain: nativeBiquadFilterNode.gain.value,\n                    type: nativeBiquadFilterNode.type\n                };\n                nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode, trace);\n            return nativeBiquadFilterNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeBiquadFilterNode !== undefined) {\n                    return Promise.resolve(renderedNativeBiquadFilterNode);\n                }\n                return createBiquadFilterNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/biquad-filter-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}