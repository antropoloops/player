{"ast":null,"code":"import _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport * as screen from \"screenfull\";\n\nconst noop = () => Promise.resolve();\n\nexport function useFullscreen() {\n  let request = noop;\n  let exit = noop;\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        isOpen = _useState2[0],\n        setIsOpen = _useState2[1];\n\n  const detach = useCallback(() => {\n    if (screen.isEnabled) {\n      screen.off(\"change\", setIsOpen);\n    }\n  }, []);\n  useEffect(() => {\n    if (screen.isEnabled) {\n      screen.on(\"change\", setIsOpen);\n      request = screen.request;\n      exit = screen.exit;\n    }\n\n    return detach;\n  }, []);\n  return {\n    isOpen,\n    request,\n    exit\n  };\n}\nexport function useFullscreenOld(onChange) {\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        fullscreen = _useState4[0],\n        setFullscreen = _useState4[1];\n\n  const open = () => setFullscreen(Date.now());\n\n  if (screen.isEnabled) {\n    screen.on(\"change\", () => onChange(screen.isEnabled));\n  }\n\n  useEffect(() => {\n    if (!screen.isEnabled) {\n      return;\n    }\n\n    if (fullscreen) {\n      screen.request();\n    } else {\n      screen.exit();\n    }\n  }, [fullscreen]);\n  return {\n    open\n  };\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/useFullscreen.ts"],"names":["useCallback","useEffect","useState","screen","noop","Promise","resolve","useFullscreen","request","exit","isOpen","setIsOpen","detach","isEnabled","off","on","useFullscreenOld","onChange","fullscreen","setFullscreen","open","Date","now"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,OAAO,KAAKC,MAAZ,MAAwB,YAAxB;;AAEA,MAAMC,IAAgC,GAAG,MAAMC,OAAO,CAACC,OAAR,EAA/C;;AAEA,OAAO,SAASC,aAAT,GAAyB;AAC9B,MAAIC,OAAO,GAAGJ,IAAd;AACA,MAAIK,IAAI,GAAGL,IAAX;;AAF8B,oBAGFF,QAAQ,EAHN;AAAA;AAAA,QAGvBQ,MAHuB;AAAA,QAGfC,SAHe;;AAI9B,QAAMC,MAAM,GAAGZ,WAAW,CAAC,MAAM;AAC/B,QAAIG,MAAM,CAACU,SAAX,EAAsB;AACpBV,MAAAA,MAAM,CAACW,GAAP,CAAW,QAAX,EAAqBH,SAArB;AACD;AACF,GAJyB,EAIvB,EAJuB,CAA1B;AAKAV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIE,MAAM,CAACU,SAAX,EAAsB;AACpBV,MAAAA,MAAM,CAACY,EAAP,CAAU,QAAV,EAAoBJ,SAApB;AACAH,MAAAA,OAAO,GAAGL,MAAM,CAACK,OAAjB;AACAC,MAAAA,IAAI,GAAGN,MAAM,CAACM,IAAd;AACD;;AACD,WAAOG,MAAP;AACD,GAPQ,EAON,EAPM,CAAT;AAQA,SAAO;AAAEF,IAAAA,MAAF;AAAUF,IAAAA,OAAV;AAAmBC,IAAAA;AAAnB,GAAP;AACD;AAED,OAAO,SAASO,gBAAT,CAA0BC,QAA1B,EAA+D;AAAA,qBAChCf,QAAQ,EADwB;AAAA;AAAA,QAC7DgB,UAD6D;AAAA,QACjDC,aADiD;;AAEpE,QAAMC,IAAI,GAAG,MAAMD,aAAa,CAACE,IAAI,CAACC,GAAL,EAAD,CAAhC;;AAEA,MAAInB,MAAM,CAACU,SAAX,EAAsB;AACpBV,IAAAA,MAAM,CAACY,EAAP,CAAU,QAAV,EAAoB,MAAME,QAAQ,CAACd,MAAM,CAACU,SAAR,CAAlC;AACD;;AAEDZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACE,MAAM,CAACU,SAAZ,EAAuB;AACrB;AACD;;AACD,QAAIK,UAAJ,EAAgB;AACdf,MAAAA,MAAM,CAACK,OAAP;AACD,KAFD,MAEO;AACLL,MAAAA,MAAM,CAACM,IAAP;AACD;AACF,GATQ,EASN,CAACS,UAAD,CATM,CAAT;AAWA,SAAO;AAAEE,IAAAA;AAAF,GAAP;AACD","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport * as screen from \"screenfull\";\n\nconst noop: (x?: any) => Promise<void> = () => Promise.resolve();\n\nexport function useFullscreen() {\n  let request = noop;\n  let exit = noop;\n  const [isOpen, setIsOpen] = useState();\n  const detach = useCallback(() => {\n    if (screen.isEnabled) {\n      screen.off(\"change\", setIsOpen);\n    }\n  }, []);\n  useEffect(() => {\n    if (screen.isEnabled) {\n      screen.on(\"change\", setIsOpen);\n      request = screen.request;\n      exit = screen.exit;\n    }\n    return detach;\n  }, []);\n  return { isOpen, request, exit };\n}\n\nexport function useFullscreenOld(onChange: (isOpen: boolean) => void) {\n  const [fullscreen, setFullscreen] = useState();\n  const open = () => setFullscreen(Date.now());\n\n  if (screen.isEnabled) {\n    screen.on(\"change\", () => onChange(screen.isEnabled));\n  }\n\n  useEffect(() => {\n    if (!screen.isEnabled) {\n      return;\n    }\n    if (fullscreen) {\n      screen.request();\n    } else {\n      screen.exit();\n    }\n  }, [fullscreen]);\n\n  return { open };\n}\n"]},"metadata":{},"sourceType":"module"}