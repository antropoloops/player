{"ast":null,"code":"import _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { getActiveAudioContext } from \"../../player\";\nimport { AudioContextEngine } from \"../../player/AudioContextEngine\";\nimport { AudiosetControl, EmptyControlState } from \"../../player/Control\";\nimport { ResourceLoader } from \"../../player/ResourceLoader\";\nimport { Sampler } from \"../../player/Sampler\";\nexport function usePlayer(audioset) {\n  const visuals = useRef(null);\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        control = _useState2[0],\n        setControl = _useState2[1];\n\n  const _useState3 = useState(EmptyControlState),\n        _useState4 = _slicedToArray(_useState3, 2),\n        state = _useState4[0],\n        setState = _useState4[1];\n\n  useEffect(() => {\n    let cancelled = false;\n    let sampler;\n\n    async function createPlayer() {\n      const loader = new ResourceLoader(audioset, status => {// TODO: set clip enabled\n      });\n      loader.preload();\n      getActiveAudioContext().then(ctx => {\n        if (cancelled) {\n          return;\n        }\n\n        loader.load();\n        sampler = createSampler(audioset, ctx, loader);\n        const ctl = new AudiosetControl(audioset, {\n          onControlStateChanged: newState => {\n            setState(newState);\n          },\n          onControlCommand: command => {\n            var _sampler;\n\n            (_sampler = sampler) === null || _sampler === void 0 ? void 0 : _sampler.run(command);\n          }\n        });\n        setControl(ctl);\n        setState(ctl.getState());\n      });\n    }\n\n    createPlayer();\n    return () => {\n      var _sampler2;\n\n      cancelled = true;\n      (_sampler2 = sampler) === null || _sampler2 === void 0 ? void 0 : _sampler2.dispose();\n    };\n  }, [audioset]);\n  return {\n    control,\n    state\n  };\n}\n\nfunction createSampler(audioset, ctx, buffers) {\n  const audio = new AudioContextEngine(ctx);\n  const sampler = new Sampler(audioset, buffers, audio);\n  return sampler;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/usePlayer.tsx"],"names":["useEffect","useRef","useState","getActiveAudioContext","AudioContextEngine","AudiosetControl","EmptyControlState","ResourceLoader","Sampler","usePlayer","audioset","visuals","control","setControl","state","setState","cancelled","sampler","createPlayer","loader","status","preload","then","ctx","load","createSampler","ctl","onControlStateChanged","newState","onControlCommand","command","run","getState","dispose","buffers","audio"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AAGA,SAASC,qBAAT,QAAsC,cAAtC;AACA,SAASC,kBAAT,QAAmC,iCAAnC;AACA,SACEC,eADF,EAEEC,iBAFF,QAIO,sBAJP;AAKA,SAASC,cAAT,QAA+B,6BAA/B;AACA,SAASC,OAAT,QAAwB,sBAAxB;AAEA,OAAO,SAASC,SAAT,CAAmBC,QAAnB,EAAuC;AAC5C,QAAMC,OAAO,GAAGV,MAAM,CAAiB,IAAjB,CAAtB;;AAD4C,oBAEdC,QAAQ,CAAuB,IAAvB,CAFM;AAAA;AAAA,QAErCU,OAFqC;AAAA,QAE5BC,UAF4B;;AAAA,qBAGlBX,QAAQ,CAACI,iBAAD,CAHU;AAAA;AAAA,QAGrCQ,KAHqC;AAAA,QAG9BC,QAH8B;;AAK5Cf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,SAAS,GAAG,KAAhB;AACA,QAAIC,OAAJ;;AAEA,mBAAeC,YAAf,GAA8B;AAI9B,YAAMC,MAAM,GAAG,IAAIZ,cAAJ,CAAmBG,QAAnB,EAA6BU,MAAM,IAAI,CACpD;AACD,OAFc,CAAf;AAGAD,MAAAA,MAAM,CAACE,OAAP;AAEAlB,MAAAA,qBAAqB,GAAGmB,IAAxB,CAA6BC,GAAG,IAAI;AAClC,YAAIP,SAAJ,EAAe;AACb;AACD;;AAEDG,QAAAA,MAAM,CAACK,IAAP;AACAP,QAAAA,OAAO,GAAGQ,aAAa,CAACf,QAAD,EAAWa,GAAX,EAAgBJ,MAAhB,CAAvB;AAEA,cAAMO,GAAG,GAAG,IAAIrB,eAAJ,CAAoBK,QAApB,EAA8B;AACxCiB,UAAAA,qBAAqB,EAAEC,QAAQ,IAAI;AACjCb,YAAAA,QAAQ,CAACa,QAAD,CAAR;AACD,WAHuC;AAIxCC,UAAAA,gBAAgB,EAAEC,OAAO,IAAI;AAAA;;AAC3B,wBAAAb,OAAO,UAAP,4CAASc,GAAT,CAAaD,OAAb;AACD;AANuC,SAA9B,CAAZ;AAQAjB,QAAAA,UAAU,CAACa,GAAD,CAAV;AACAX,QAAAA,QAAQ,CAACW,GAAG,CAACM,QAAJ,EAAD,CAAR;AACD,OAlBD;AAoBD;;AACDd,IAAAA,YAAY;AACV,WAAO,MAAM;AAAA;;AACXF,MAAAA,SAAS,GAAG,IAAZ;AACA,mBAAAC,OAAO,UAAP,8CAASgB,OAAT;AACD,KAHD;AAID,GAvCQ,EAuCN,CAACvB,QAAD,CAvCM,CAAT;AAyCA,SAAO;AAAEE,IAAAA,OAAF;AAAWE,IAAAA;AAAX,GAAP;AACD;;AAED,SAASW,aAAT,CACEf,QADF,EAEEa,GAFF,EAGEW,OAHF,EAIW;AACT,QAAMC,KAAK,GAAG,IAAI/B,kBAAJ,CAAuBmB,GAAvB,CAAd;AACA,QAAMN,OAAO,GAAG,IAAIT,OAAJ,CAAYE,QAAZ,EAAsBwB,OAAtB,EAA+BC,KAA/B,CAAhB;AACA,SAAOlB,OAAP;AACD","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport { IAudioContext } from \"standardized-audio-context\";\nimport { Audioset } from \"../../audioset\";\nimport { getActiveAudioContext } from \"../../player\";\nimport { AudioContextEngine } from \"../../player/AudioContextEngine\";\nimport {\n  AudiosetControl,\n  EmptyControlState,\n  PlayerControl,\n} from \"../../player/Control\";\nimport { ResourceLoader } from \"../../player/ResourceLoader\";\nimport { Sampler } from \"../../player/Sampler\";\n\nexport function usePlayer(audioset: Audioset) {\n  const visuals = useRef<HTMLDivElement>(null);\n  const [control, setControl] = useState<PlayerControl | null>(null);\n  const [state, setState] = useState(EmptyControlState);\n\n  useEffect(() => {\n    let cancelled = false;\n    let sampler: Sampler | undefined;\n\n    async function createPlayer() {\n\n\n\n    const loader = new ResourceLoader(audioset, status => {\n      // TODO: set clip enabled\n    });\n    loader.preload();\n\n    getActiveAudioContext().then(ctx => {\n      if (cancelled) {\n        return;\n      }\n\n      loader.load();\n      sampler = createSampler(audioset, ctx, loader);\n\n      const ctl = new AudiosetControl(audioset, {\n        onControlStateChanged: newState => {\n          setState(newState);\n        },\n        onControlCommand: command => {\n          sampler?.run(command);\n        },\n      });\n      setControl(ctl);\n      setState(ctl.getState());\n    });\n\n  }\n  createPlayer()\n    return () => {\n      cancelled = true;\n      sampler?.dispose();\n    };\n  }, [audioset]);\n\n  return { control, state };\n}\n\nfunction createSampler(\n  audioset: Audioset,\n  ctx: IAudioContext,\n  buffers: ResourceLoader,\n): Sampler {\n  const audio = new AudioContextEngine(ctx);\n  const sampler = new Sampler(audioset, buffers, audio);\n  return sampler;\n}\n"]},"metadata":{},"sourceType":"module"}