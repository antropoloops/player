{"ast":null,"code":"import _defineProperty from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport debug from \"debug\";\nimport { KeyboardControler } from \"./KeyboardControler\";\nconst log = debug(\"atpls:control\");\n\nclass ClipTrackManager {\n  constructor() {\n    this.clipStateByClipId = {};\n    this.clipIdsOfTrack = {};\n    this.trackIdOfClip = {};\n    this.trackStateByTrackId = {};\n  }\n\n  addClip(clip) {\n    this.clipStateByClipId[clip.id] = {\n      state: \"stopped\"\n    };\n    this.trackIdOfClip[clip.id] = clip.trackId;\n  }\n\n  addTrack(track) {\n    const volume = track.volume || 1;\n    this.trackStateByTrackId[track.id] = {\n      state: \"stopped\",\n      volume\n    };\n    this.clipIdsOfTrack[track.id] = track.clipIds;\n  }\n\n  getAllClipIds() {\n    return Object.keys(this.clipStateByClipId);\n  }\n\n  getAllTrackIds() {\n    return Object.keys(this.trackStateByTrackId);\n  }\n\n  getClipState(clipId) {\n    return this.clipStateByClipId[clipId];\n  }\n\n  setClipState(clipId, newStsate) {\n    this.clipStateByClipId[clipId] = newStsate;\n  }\n\n  getTrackState(trackId) {\n    return this.trackStateByTrackId[trackId];\n  }\n\n  setTrackState(trackId, state) {\n    this.trackStateByTrackId[trackId] = state;\n  }\n\n  getTrackIdOfClip(clipId) {\n    return this.trackIdOfClip[clipId];\n  }\n\n  getClipIdsOfTrack(trackId) {\n    return this.clipIdsOfTrack[trackId];\n  }\n\n}\n/**\n * Controls the playing state of clips and tracks\n */\n\n\nexport class AudiosetControl extends ClipTrackManager {\n  constructor(audioset, listener) {\n    super();\n    this.listener = listener;\n    this.keyboard = void 0;\n    this.commands = [];\n    this.manager = new ClipTrackManager();\n    this.playingClipsCount = 0;\n    this.playingTracksCount = 0;\n    log(\"create control\");\n    this.keyboard = new KeyboardControler(audioset, this);\n    audioset.clips.forEach(clip => this.manager.addClip(clip));\n    audioset.tracks.forEach(track => this.manager.addTrack(track));\n  }\n\n  toggleClip(clipId, time) {\n    const clipState = this.manager.getClipState(clipId);\n\n    if (!clipState) {\n      return;\n    } else if (clipState.state === \"stopped\") {\n      this.startClip(clipId, time);\n    } else if (clipState.state === \"playing\") {\n      this.stopClip(clipId, time);\n    }\n  }\n  /**\n   * Start a clip\n   * @param clipId\n   */\n\n\n  startClip(clipId, time) {\n    const clipState = this.manager.getClipState(clipId);\n\n    if (!clipState || clipState.state === \"playing\") {\n      return;\n    }\n\n    log(\"start clip %s %o\", clipId, time);\n    const trackId = this.manager.getTrackIdOfClip(clipId);\n    const sameTrackClipIds = this.manager.getClipIdsOfTrack(trackId);\n    sameTrackClipIds.forEach(trackClipId => this.stopClipCommand(trackClipId, time));\n    this.startTrackCommand(trackId, time);\n    this.startClipCommand(clipId, time);\n    this.sendCommands();\n  }\n  /**\n   * Stops a clip\n   */\n\n\n  stopClip(clipId, time) {\n    const clipState = this.manager.getClipState(clipId);\n\n    if (!clipState || clipState.state === \"stopped\") {\n      return;\n    }\n\n    const trackId = this.manager.getTrackIdOfClip(clipId);\n    this.stopClipCommand(clipId, time);\n    this.stopTrackCommand(trackId, time);\n    this.sendCommands();\n  }\n  /**\n   * Stops all clips\n   */\n\n\n  stopAll(time) {\n    this.manager.getAllClipIds().forEach(clipId => this.stopClipCommand(clipId, time));\n    this.manager.getAllTrackIds().forEach(trackId => this.stopTrackCommand(trackId, time));\n    this.sendCommands();\n  }\n\n  getState() {\n    return {\n      playingClipsCount: this.playingClipsCount,\n      playingTracksCount: this.playingTracksCount,\n      clips: _objectSpread({}, this.clipStateByClipId),\n      tracks: _objectSpread({}, this.trackStateByTrackId)\n    };\n  } //// PRIVATE ////\n\n\n  sendCommands() {\n    this.commands.forEach(command => {\n      this.listener.onControlCommand(command);\n    });\n    this.commands = [];\n    this.listener.onControlStateChanged(this.getState());\n  }\n\n  startClipCommand(clipId, time) {\n    const clipState = this.manager.getClipState(clipId);\n\n    if (clipState.state === \"playing\") {\n      return;\n    }\n\n    this.playingClipsCount += 1;\n    this.manager.setClipState(clipId, {\n      state: \"playing\"\n    });\n    this.commands.push({\n      command: \"startClip\",\n      clipId,\n      time\n    });\n  }\n\n  stopClipCommand(clipId, time) {\n    const clipState = this.manager.getClipState(clipId);\n\n    if (clipState.state === \"stopped\") {\n      return;\n    }\n\n    this.playingClipsCount -= 1;\n    this.manager.setClipState(clipId, {\n      state: \"stopped\"\n    });\n    this.commands.push({\n      command: \"stopClip\",\n      clipId,\n      time\n    });\n  }\n\n  startTrackCommand(trackId, time) {\n    const trackState = this.manager.getTrackState(trackId);\n\n    if (trackState.state === \"playing\") {\n      return;\n    }\n\n    this.playingTracksCount += 1;\n    this.setTrackState(trackId, {\n      state: \"playing\",\n      volume: trackState.volume\n    });\n    this.commands.push({\n      command: \"startTrack\",\n      trackId,\n      time\n    });\n  }\n\n  stopTrackCommand(trackId, time) {\n    const trackState = this.manager.getTrackState(trackId);\n\n    if (trackState.state === \"stopped\") {\n      return;\n    }\n\n    this.playingTracksCount -= 1;\n    this.trackStateByTrackId[trackId] = {\n      state: \"stopped\",\n      volume: trackState.volume\n    };\n    this.commands.push({\n      command: \"stopTrack\",\n      trackId,\n      time\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/Control/AudiosetControl.ts"],"names":["debug","KeyboardControler","log","ClipTrackManager","clipStateByClipId","clipIdsOfTrack","trackIdOfClip","trackStateByTrackId","addClip","clip","id","state","trackId","addTrack","track","volume","clipIds","getAllClipIds","Object","keys","getAllTrackIds","getClipState","clipId","setClipState","newStsate","getTrackState","setTrackState","getTrackIdOfClip","getClipIdsOfTrack","AudiosetControl","constructor","audioset","listener","keyboard","commands","manager","playingClipsCount","playingTracksCount","clips","forEach","tracks","toggleClip","time","clipState","startClip","stopClip","sameTrackClipIds","trackClipId","stopClipCommand","startTrackCommand","startClipCommand","sendCommands","stopTrackCommand","stopAll","getState","command","onControlCommand","onControlStateChanged","push","trackState"],"mappings":"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","sourcesContent":["import debug from \"debug\";\nimport { Audioset, Clip, Track } from \"../../audioset\";\nimport { ControlCommand } from \"./ControlCommand\";\nimport {\n  ClipPlayingStateByClipId,\n  ControlState,\n  TrackPlayingStateByTrackId,\n} from \"./ControlState\";\nimport { KeyboardControler } from \"./KeyboardControler\";\nimport { TrackPlayingState, ClipPlayingState } from \"./PlayingState\";\n\nconst log = debug(\"atpls:control\");\n\nexport interface ControlListener {\n  onControlStateChanged: (state: ControlState) => void;\n  onControlCommand: (command: ControlCommand) => void;\n}\n\nexport interface PlayerControl {\n  readonly keyboard: KeyboardControler;\n  getState(): ControlState;\n  toggleClip(clipId: string, time: number): void;\n  stopClip(clipId: string, time: number): void;\n  startClip(clipId: string, time: number): void;\n  stopAll(time: number): void;\n}\n\nclass ClipTrackManager {\n  private clipStateByClipId: ClipPlayingStateByClipId = {};\n  private clipIdsOfTrack: Record<string, string[]> = {};\n  private trackIdOfClip: Record<string, string> = {};\n  private trackStateByTrackId: TrackPlayingStateByTrackId = {};\n\n  public addClip(clip: Clip) {\n    this.clipStateByClipId[clip.id] = { state: \"stopped\" };\n    this.trackIdOfClip[clip.id] = clip.trackId;\n  }\n\n  public addTrack(track: Track) {\n    const volume = track.volume || 1;\n    this.trackStateByTrackId[track.id] = { state: \"stopped\", volume };\n    this.clipIdsOfTrack[track.id] = track.clipIds;\n  }\n\n  public getAllClipIds() {\n    return Object.keys(this.clipStateByClipId);\n  }\n\n  public getAllTrackIds() {\n    return Object.keys(this.trackStateByTrackId);\n  }\n\n  public getClipState(clipId: string) {\n    return this.clipStateByClipId[clipId];\n  }\n\n  public setClipState(clipId: string, newStsate: ClipPlayingState) {\n    this.clipStateByClipId[clipId] = newStsate;\n  }\n  public getTrackState(trackId: string) {\n    return this.trackStateByTrackId[trackId];\n  }\n  public setTrackState(trackId: string, state: TrackPlayingState) {\n    this.trackStateByTrackId[trackId] = state;\n  }\n\n  public getTrackIdOfClip(clipId: string) {\n    return this.trackIdOfClip[clipId];\n  }\n  public getClipIdsOfTrack(trackId: string) {\n    return this.clipIdsOfTrack[trackId];\n  }\n}\n\n/**\n * Controls the playing state of clips and tracks\n */\nexport class AudiosetControl extends ClipTrackManager implements PlayerControl {\n  public readonly keyboard: KeyboardControler;\n  private commands: ControlCommand[] = [];\n  private manager = new ClipTrackManager();\n  private playingClipsCount: number = 0;\n  private playingTracksCount: number = 0;\n\n  constructor(audioset: Audioset, private listener: ControlListener) {\n    super();\n    log(\"create control\");\n    this.keyboard = new KeyboardControler(audioset, this);\n    audioset.clips.forEach((clip: Clip) => this.manager.addClip(clip));\n    audioset.tracks.forEach(track => this.manager.addTrack(track));\n  }\n\n  public toggleClip(clipId: string, time: number) {\n    const clipState = this.manager.getClipState(clipId);\n    if (!clipState) {\n      return;\n    } else if (clipState.state === \"stopped\") {\n      this.startClip(clipId, time);\n    } else if (clipState.state === \"playing\") {\n      this.stopClip(clipId, time);\n    }\n  }\n\n  /**\n   * Start a clip\n   * @param clipId\n   */\n  public startClip(clipId: string, time: number) {\n    const clipState = this.manager.getClipState(clipId);\n    if (!clipState || clipState.state === \"playing\") {\n      return;\n    }\n    log(\"start clip %s %o\", clipId, time);\n\n    const trackId = this.manager.getTrackIdOfClip(clipId);\n    const sameTrackClipIds = this.manager.getClipIdsOfTrack(trackId);\n    sameTrackClipIds.forEach(trackClipId =>\n      this.stopClipCommand(trackClipId, time),\n    );\n    this.startTrackCommand(trackId, time);\n    this.startClipCommand(clipId, time);\n    this.sendCommands();\n  }\n\n  /**\n   * Stops a clip\n   */\n  public stopClip(clipId: string, time: number) {\n    const clipState = this.manager.getClipState(clipId);\n    if (!clipState || clipState.state === \"stopped\") {\n      return;\n    }\n\n    const trackId = this.manager.getTrackIdOfClip(clipId);\n\n    this.stopClipCommand(clipId, time);\n    this.stopTrackCommand(trackId, time);\n    this.sendCommands();\n  }\n\n  /**\n   * Stops all clips\n   */\n  public stopAll(time: number) {\n    this.manager\n      .getAllClipIds()\n      .forEach(clipId => this.stopClipCommand(clipId, time));\n    this.manager\n      .getAllTrackIds()\n      .forEach(trackId => this.stopTrackCommand(trackId, time));\n    this.sendCommands();\n  }\n\n  public getState(): ControlState {\n    return {\n      playingClipsCount: this.playingClipsCount,\n      playingTracksCount: this.playingTracksCount,\n      clips: { ...this.clipStateByClipId },\n      tracks: { ...this.trackStateByTrackId },\n    };\n  }\n\n  //// PRIVATE ////\n  private sendCommands() {\n    this.commands.forEach(command => {\n      this.listener.onControlCommand(command);\n    });\n    this.commands = [];\n\n    this.listener.onControlStateChanged(this.getState());\n  }\n\n  private startClipCommand(clipId: string, time: number) {\n    const clipState = this.manager.getClipState(clipId);\n    if (clipState.state === \"playing\") {\n      return;\n    }\n\n    this.playingClipsCount += 1;\n    this.manager.setClipState(clipId, { state: \"playing\" });\n    this.commands.push({ command: \"startClip\", clipId, time });\n  }\n\n  private stopClipCommand(clipId: string, time: number) {\n    const clipState = this.manager.getClipState(clipId);\n    if (clipState.state === \"stopped\") {\n      return;\n    }\n\n    this.playingClipsCount -= 1;\n    this.manager.setClipState(clipId, { state: \"stopped\" });\n    this.commands.push({ command: \"stopClip\", clipId, time });\n  }\n  private startTrackCommand(trackId: string, time: number) {\n    const trackState = this.manager.getTrackState(trackId);\n    if (trackState.state === \"playing\") {\n      return;\n    }\n\n    this.playingTracksCount += 1;\n    this.setTrackState(trackId, {\n      state: \"playing\",\n      volume: trackState.volume,\n    });\n    this.commands.push({ command: \"startTrack\", trackId, time });\n  }\n\n  private stopTrackCommand(trackId: string, time: number) {\n    const trackState = this.manager.getTrackState(trackId);\n    if (trackState.state === \"stopped\") {\n      return;\n    }\n\n    this.playingTracksCount -= 1;\n    this.trackStateByTrackId[trackId] = {\n      state: \"stopped\",\n      volume: trackState.volume,\n    };\n    this.commands.push({ command: \"stopTrack\", trackId, time });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}