{"ast":null,"code":"import _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from \"react\";\nimport * as screen from \"screenfull\";\n\nconst request = () => screen.isEnabled && screen.request();\n\nconst exit = () => screen.isEnabled && screen.exit();\n\nexport function useFullscreen() {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isFull = _useState2[0],\n        setIsFull = _useState2[1];\n\n  useEffect(() => {\n    if (screen.isEnabled) {\n      isFull ? screen.request() : screen.exit();\n    }\n  }, [isFull]);\n  return {\n    isFull,\n    request,\n    exit\n  };\n}\nexport function useFullscreenOld(onChange) {\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        fullscreen = _useState4[0],\n        setFullscreen = _useState4[1];\n\n  const open = () => setFullscreen(Date.now());\n\n  if (screen.isEnabled) {\n    screen.on(\"change\", () => onChange(screen.isEnabled));\n  }\n\n  useEffect(() => {\n    if (!screen.isEnabled) {\n      return;\n    }\n\n    if (fullscreen) {\n      screen.request();\n    } else {\n      screen.exit();\n    }\n  }, [fullscreen]);\n  return {\n    open\n  };\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/useFullscreen.ts"],"names":["useEffect","useState","screen","request","isEnabled","exit","useFullscreen","isFull","setIsFull","useFullscreenOld","onChange","fullscreen","setFullscreen","open","Date","now","on"],"mappings":";AAAA,SAAsBA,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,OAAO,KAAKC,MAAZ,MAAwB,YAAxB;;AAEA,MAAMC,OAAO,GAAG,MAAMD,MAAM,CAACE,SAAP,IAAoBF,MAAM,CAACC,OAAP,EAA1C;;AACA,MAAME,IAAI,GAAG,MAAMH,MAAM,CAACE,SAAP,IAAoBF,MAAM,CAACG,IAAP,EAAvC;;AAEA,OAAO,SAASC,aAAT,GAAyB;AAAA,oBACFL,QAAQ,CAAC,KAAD,CADN;AAAA;AAAA,QACvBM,MADuB;AAAA,QACfC,SADe;;AAE9BR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIE,MAAM,CAACE,SAAX,EAAsB;AACpBG,MAAAA,MAAM,GAAGL,MAAM,CAACC,OAAP,EAAH,GAAsBD,MAAM,CAACG,IAAP,EAA5B;AACD;AACF,GAJQ,EAIN,CAACE,MAAD,CAJM,CAAT;AAKA,SAAO;AAAEA,IAAAA,MAAF;AAAUJ,IAAAA,OAAV;AAAmBE,IAAAA;AAAnB,GAAP;AACD;AAED,OAAO,SAASI,gBAAT,CAA0BC,QAA1B,EAA+D;AAAA,qBAChCT,QAAQ,EADwB;AAAA;AAAA,QAC7DU,UAD6D;AAAA,QACjDC,aADiD;;AAEpE,QAAMC,IAAI,GAAG,MAAMD,aAAa,CAACE,IAAI,CAACC,GAAL,EAAD,CAAhC;;AAEA,MAAIb,MAAM,CAACE,SAAX,EAAsB;AACpBF,IAAAA,MAAM,CAACc,EAAP,CAAU,QAAV,EAAoB,MAAMN,QAAQ,CAACR,MAAM,CAACE,SAAR,CAAlC;AACD;;AAEDJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACE,MAAM,CAACE,SAAZ,EAAuB;AACrB;AACD;;AACD,QAAIO,UAAJ,EAAgB;AACdT,MAAAA,MAAM,CAACC,OAAP;AACD,KAFD,MAEO;AACLD,MAAAA,MAAM,CAACG,IAAP;AACD;AACF,GATQ,EASN,CAACM,UAAD,CATM,CAAT;AAWA,SAAO;AAAEE,IAAAA;AAAF,GAAP;AACD","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport * as screen from \"screenfull\";\n\nconst request = () => screen.isEnabled && screen.request();\nconst exit = () => screen.isEnabled && screen.exit();\n\nexport function useFullscreen() {\n  const [isFull, setIsFull] = useState(false);\n  useEffect(() => {\n    if (screen.isEnabled) {\n      isFull ? screen.request() : screen.exit();\n    }\n  }, [isFull]);\n  return { isFull, request, exit };\n}\n\nexport function useFullscreenOld(onChange: (isFull: boolean) => void) {\n  const [fullscreen, setFullscreen] = useState();\n  const open = () => setFullscreen(Date.now());\n\n  if (screen.isEnabled) {\n    screen.on(\"change\", () => onChange(screen.isEnabled));\n  }\n\n  useEffect(() => {\n    if (!screen.isEnabled) {\n      return;\n    }\n    if (fullscreen) {\n      screen.request();\n    } else {\n      screen.exit();\n    }\n  }, [fullscreen]);\n\n  return { open };\n}\n"]},"metadata":{},"sourceType":"module"}