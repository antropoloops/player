{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createAudioBufferSourceNodeRendererFactory = function createAudioBufferSourceNodeRendererFactory(connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeAudioBufferSourceNodes = new WeakMap();\n    var start = null;\n    var stop = null;\n\n    var createAudioBufferSourceNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext, trace) {\n        var nativeAudioBufferSourceNode, nativeAudioBufferSourceNodeIsOwnedByContext, options, _nativeAudioBufferSou;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeAudioBufferSourceNode = getNativeAudioNode(proxy);\n                /*\n                 * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n                 * again.\n                 */\n\n                nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n\n                if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                  options = {\n                    buffer: nativeAudioBufferSourceNode.buffer,\n                    channelCount: nativeAudioBufferSourceNode.channelCount,\n                    channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n                    channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n                    // Bug #149: Safari does not yet support the detune AudioParam.\n                    loop: nativeAudioBufferSourceNode.loop,\n                    loopEnd: nativeAudioBufferSourceNode.loopEnd,\n                    loopStart: nativeAudioBufferSourceNode.loopStart,\n                    playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n                  };\n                  nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n\n                  if (start !== null) {\n                    (_nativeAudioBufferSou = nativeAudioBufferSourceNode).start.apply(_nativeAudioBufferSou, _toConsumableArray(start));\n                  }\n\n                  if (stop !== null) {\n                    nativeAudioBufferSourceNode.stop(stop);\n                  }\n                }\n\n                renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n\n                if (nativeAudioBufferSourceNodeIsOwnedByContext) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 7;\n                return renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate, trace);\n\n              case 7:\n                _context.next = 11;\n                break;\n\n              case 9:\n                _context.next = 11;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate, trace);\n\n              case 11:\n                _context.next = 13;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode, trace);\n\n              case 13:\n                return _context.abrupt(\"return\", nativeAudioBufferSourceNode);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createAudioBufferSourceNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render: function render(proxy, nativeOfflineAudioContext, trace) {\n        var renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioBufferSourceNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioBufferSourceNode);\n        }\n\n        return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext, trace);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/audio-buffer-source-node-renderer-factory.js"],"names":["isOwnedByContext","createAudioBufferSourceNodeRendererFactory","connectAudioParam","createNativeAudioBufferSourceNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeAudioBufferSourceNodes","WeakMap","start","stop","createAudioBufferSourceNode","proxy","nativeOfflineAudioContext","trace","nativeAudioBufferSourceNode","nativeAudioBufferSourceNodeIsOwnedByContext","options","buffer","channelCount","channelCountMode","channelInterpretation","loop","loopEnd","loopStart","playbackRate","value","set","render","renderedNativeAudioBufferSourceNode","get","undefined","Promise","resolve"],"mappings":"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","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAudioBufferSourceNodeRendererFactory = (connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeAudioBufferSourceNodes = new WeakMap();\n        let start = null;\n        let stop = null;\n        const createAudioBufferSourceNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeAudioBufferSourceNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeAudioBufferSourceNode.buffer,\n                    channelCount: nativeAudioBufferSourceNode.channelCount,\n                    channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n                    channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n                    // Bug #149: Safari does not yet support the detune AudioParam.\n                    loop: nativeAudioBufferSourceNode.loop,\n                    loopEnd: nativeAudioBufferSourceNode.loopEnd,\n                    loopStart: nativeAudioBufferSourceNode.loopStart,\n                    playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n                };\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeAudioBufferSourceNode.start(...start);\n                }\n                if (stop !== null) {\n                    nativeAudioBufferSourceNode.stop(stop);\n                }\n            }\n            renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate, trace);\n            }\n            else {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode, trace);\n            return nativeAudioBufferSourceNode;\n        };\n        return {\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioBufferSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioBufferSourceNode);\n                }\n                return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-buffer-source-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}