{"ast":null,"code":"import bounds from \"./bounds\";\nimport cut from \"./cut\";\nimport dedup from \"./dedup\";\nimport delta from \"./delta\";\nimport extract from \"./extract\";\nimport geometry from \"./geometry\";\nimport hashmap from \"./hash/hashmap\";\nimport prequantize from \"./prequantize\"; // Constructs the TopoJSON Topology for the specified hash of features.\n// Each object in the specified hash must be a GeoJSON object,\n// meaning FeatureCollection, a Feature or a geometry object.\n\nexport default function (objects, quantization) {\n  var bbox = bounds(objects = geometry(objects)),\n      transform = quantization > 0 && bbox && prequantize(objects, bbox, quantization),\n      topology = dedup(cut(extract(objects))),\n      coordinates = topology.coordinates,\n      indexByArc = hashmap(topology.arcs.length * 1.4, hashArc, equalArc);\n  objects = topology.objects; // for garbage collection\n\n  topology.bbox = bbox;\n  topology.arcs = topology.arcs.map(function (arc, i) {\n    indexByArc.set(arc, i);\n    return coordinates.slice(arc[0], arc[1] + 1);\n  });\n  delete topology.coordinates;\n  coordinates = null;\n\n  function indexGeometry(geometry) {\n    if (geometry && indexGeometryType.hasOwnProperty(geometry.type)) indexGeometryType[geometry.type](geometry);\n  }\n\n  var indexGeometryType = {\n    GeometryCollection: function GeometryCollection(o) {\n      o.geometries.forEach(indexGeometry);\n    },\n    LineString: function LineString(o) {\n      o.arcs = indexArcs(o.arcs);\n    },\n    MultiLineString: function MultiLineString(o) {\n      o.arcs = o.arcs.map(indexArcs);\n    },\n    Polygon: function Polygon(o) {\n      o.arcs = o.arcs.map(indexArcs);\n    },\n    MultiPolygon: function MultiPolygon(o) {\n      o.arcs = o.arcs.map(indexMultiArcs);\n    }\n  };\n\n  function indexArcs(arc) {\n    var indexes = [];\n\n    do {\n      var index = indexByArc.get(arc);\n      indexes.push(arc[0] < arc[1] ? index : ~index);\n    } while (arc = arc.next);\n\n    return indexes;\n  }\n\n  function indexMultiArcs(arcs) {\n    return arcs.map(indexArcs);\n  }\n\n  for (var key in objects) {\n    indexGeometry(objects[key]);\n  }\n\n  if (transform) {\n    topology.transform = transform;\n    topology.arcs = delta(topology.arcs);\n  }\n\n  return topology;\n}\n\nfunction hashArc(arc) {\n  var i = arc[0],\n      j = arc[1],\n      t;\n  if (j < i) t = i, i = j, j = t;\n  return i + 31 * j;\n}\n\nfunction equalArc(arcA, arcB) {\n  var ia = arcA[0],\n      ja = arcA[1],\n      ib = arcB[0],\n      jb = arcB[1],\n      t;\n  if (ja < ia) t = ia, ia = ja, ja = t;\n  if (jb < ib) t = ib, ib = jb, jb = t;\n  return ia === ib && ja === jb;\n}","map":null,"metadata":{},"sourceType":"module"}