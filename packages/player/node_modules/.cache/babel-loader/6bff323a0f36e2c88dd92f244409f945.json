{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, cos, epsilon, halfPi, pi, sin, sqrt } from \"./math.js\";\nexport function mtFlatPolarSinusoidalRaw(lambda, phi) {\n  var A = sqrt(6 / (4 + pi)),\n      k = (1 + pi / 4) * sin(phi),\n      theta = phi / 2;\n\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (theta / 2 + sin(theta) - k) / (0.5 + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n\n  return [A * (0.5 + cos(theta)) * lambda / 1.5, A * theta];\n}\n\nmtFlatPolarSinusoidalRaw.invert = function (x, y) {\n  var A = sqrt(6 / (4 + pi)),\n      theta = y / A;\n  if (abs(abs(theta) - halfPi) < epsilon) theta = theta < 0 ? -halfPi : halfPi;\n  return [1.5 * x / (A * (0.5 + cos(theta))), asin((theta / 2 + sin(theta)) / (1 + pi / 4))];\n};\n\nexport default function () {\n  return projection(mtFlatPolarSinusoidalRaw).scale(166.518);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/mtFlatPolarSinusoidal.js"],"names":["geoProjection","projection","abs","asin","cos","epsilon","halfPi","pi","sin","sqrt","mtFlatPolarSinusoidalRaw","lambda","phi","A","k","theta","i","delta","invert","x","y","scale"],"mappings":"AAAA,SAAQA,aAAa,IAAIC,UAAzB,QAA0C,QAA1C;AACA,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,OAAxB,EAAiCC,MAAjC,EAAyCC,EAAzC,EAA6CC,GAA7C,EAAkDC,IAAlD,QAA6D,WAA7D;AAEA,OAAO,SAASC,wBAAT,CAAkCC,MAAlC,EAA0CC,GAA1C,EAA+C;AACpD,MAAIC,CAAC,GAAGJ,IAAI,CAAC,KAAK,IAAIF,EAAT,CAAD,CAAZ;AAAA,MACIO,CAAC,GAAG,CAAC,IAAIP,EAAE,GAAG,CAAV,IAAeC,GAAG,CAACI,GAAD,CAD1B;AAAA,MAEIG,KAAK,GAAGH,GAAG,GAAG,CAFlB;;AAGA,OAAK,IAAII,CAAC,GAAG,CAAR,EAAWC,KAAhB,EAAuBD,CAAC,GAAG,EAA3B,EAA+BA,CAAC,EAAhC,EAAoC;AAClCD,IAAAA,KAAK,IAAIE,KAAK,GAAG,CAACF,KAAK,GAAG,CAAR,GAAYP,GAAG,CAACO,KAAD,CAAf,GAAyBD,CAA1B,KAAgC,MAAMV,GAAG,CAACW,KAAD,CAAzC,CAAjB;AACA,QAAIb,GAAG,CAACe,KAAD,CAAH,GAAaZ,OAAjB,EAA0B;AAC3B;;AACD,SAAO,CACLQ,CAAC,IAAI,MAAMT,GAAG,CAACW,KAAD,CAAb,CAAD,GAAyBJ,MAAzB,GAAkC,GAD7B,EAELE,CAAC,GAAGE,KAFC,CAAP;AAID;;AAEDL,wBAAwB,CAACQ,MAAzB,GAAkC,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC/C,MAAIP,CAAC,GAAGJ,IAAI,CAAC,KAAK,IAAIF,EAAT,CAAD,CAAZ;AAAA,MACIQ,KAAK,GAAGK,CAAC,GAAGP,CADhB;AAEA,MAAIX,GAAG,CAACA,GAAG,CAACa,KAAD,CAAH,GAAaT,MAAd,CAAH,GAA2BD,OAA/B,EAAwCU,KAAK,GAAGA,KAAK,GAAG,CAAR,GAAY,CAACT,MAAb,GAAsBA,MAA9B;AACxC,SAAO,CACL,MAAMa,CAAN,IAAWN,CAAC,IAAI,MAAMT,GAAG,CAACW,KAAD,CAAb,CAAZ,CADK,EAELZ,IAAI,CAAC,CAACY,KAAK,GAAG,CAAR,GAAYP,GAAG,CAACO,KAAD,CAAhB,KAA4B,IAAIR,EAAE,GAAG,CAArC,CAAD,CAFC,CAAP;AAID,CARD;;AAUA,eAAe,YAAW;AACxB,SAAON,UAAU,CAACS,wBAAD,CAAV,CACFW,KADE,CACI,OADJ,CAAP;AAED","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math.js\";\n\nexport function mtFlatPolarSinusoidalRaw(lambda, phi) {\n  var A = sqrt(6 / (4 + pi)),\n      k = (1 + pi / 4) * sin(phi),\n      theta = phi / 2;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (theta / 2 + sin(theta) - k) / (0.5 + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [\n    A * (0.5 + cos(theta)) * lambda / 1.5,\n    A * theta\n  ];\n}\n\nmtFlatPolarSinusoidalRaw.invert = function(x, y) {\n  var A = sqrt(6 / (4 + pi)),\n      theta = y / A;\n  if (abs(abs(theta) - halfPi) < epsilon) theta = theta < 0 ? -halfPi : halfPi;\n  return [\n    1.5 * x / (A * (0.5 + cos(theta))),\n    asin((theta / 2 + sin(theta)) / (1 + pi / 4))\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarSinusoidalRaw)\n      .scale(166.518);\n}\n"]},"metadata":{},"sourceType":"module"}