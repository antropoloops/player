{"ast":null,"code":"export var wrapAudioScheduledSourceNodeStartMethodNegativeParameters = function wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeAudioScheduledSourceNode) {\n  nativeAudioScheduledSourceNode.start = function (start) {\n    return function () {\n      var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var duration = arguments.length > 2 ? arguments[2] : undefined;\n\n      if (typeof duration === 'number' && duration < 0 || offset < 0 || when < 0) {\n        throw new RangeError(\"The parameters can't be negative.\");\n      } // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n\n\n      start.call(nativeAudioScheduledSourceNode, when, offset, duration);\n    };\n  }(nativeAudioScheduledSourceNode.start);\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js"],"names":["wrapAudioScheduledSourceNodeStartMethodNegativeParameters","nativeAudioScheduledSourceNode","start","when","offset","duration","RangeError","call"],"mappings":"AAAA,OAAO,IAAMA,yDAAyD,GAAG,SAA5DA,yDAA4D,CAACC,8BAAD,EAAoC;AACzGA,EAAAA,8BAA8B,CAACC,KAA/B,GAAwC,UAACA,KAAD,EAAW;AAC/C,WAAO,YAAoC;AAAA,UAAnCC,IAAmC,uEAA5B,CAA4B;AAAA,UAAzBC,MAAyB,uEAAhB,CAAgB;AAAA,UAAbC,QAAa;;AACvC,UAAK,OAAOA,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,GAAG,CAA5C,IAAkDD,MAAM,GAAG,CAA3D,IAAgED,IAAI,GAAG,CAA3E,EAA8E;AAC1E,cAAM,IAAIG,UAAJ,CAAe,mCAAf,CAAN;AACH,OAHsC,CAIvC;;;AACAJ,MAAAA,KAAK,CAACK,IAAN,CAAWN,8BAAX,EAA2CE,IAA3C,EAAiDC,MAAjD,EAAyDC,QAAzD;AACH,KAND;AAOH,GARsC,CAQpCJ,8BAA8B,CAACC,KARK,CAAvC;AASH,CAVM","sourcesContent":["export const wrapAudioScheduledSourceNodeStartMethodNegativeParameters = (nativeAudioScheduledSourceNode) => {\n    nativeAudioScheduledSourceNode.start = ((start) => {\n        return (when = 0, offset = 0, duration) => {\n            if ((typeof duration === 'number' && duration < 0) || offset < 0 || when < 0) {\n                throw new RangeError(\"The parameters can't be negative.\");\n            }\n            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n            start.call(nativeAudioScheduledSourceNode, when, offset, duration);\n        };\n    })(nativeAudioScheduledSourceNode.start);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js.map"]},"metadata":{},"sourceType":"module"}