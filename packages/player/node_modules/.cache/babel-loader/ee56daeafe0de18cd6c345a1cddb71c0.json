{"ast":null,"code":"import debug from \"debug\";\nimport { getActiveAudioContext } from \"./AudioContext\";\nconst log = debug(\"atpls:time\");\nexport class TimeManager {\n  constructor(config) {\n    this.bpm = void 0;\n    this.quantize = void 0;\n    this.count = 0;\n    this.startedAt = 0;\n    this.context = void 0;\n    log(\"time %o\", config);\n    this.bpm = config.bpm;\n    this.quantize = config.quantize || 1;\n    getActiveAudioContext().then(ctx => this.context = ctx);\n  }\n\n  startTime(time) {\n    var _this$context;\n\n    if (!this.context) {\n      return time;\n    }\n\n    const startTime = this.nextTime(time);\n    this.count += 1;\n\n    if (this.count === 1) {\n      this.startedAt = startTime;\n    }\n\n    console.log(\"joder\", time, startTime, (_this$context = this.context) === null || _this$context === void 0 ? void 0 : _this$context.currentTime);\n    return startTime;\n  }\n\n  stopTime(time) {\n    if (!this.context) {\n      return time;\n    }\n\n    time = this.nextTime(time);\n    this.count -= 1;\n\n    if (this.count === 0) {\n      this.startedAt = 0;\n    }\n\n    return time;\n  }\n\n  nextTime(time) {\n    if (!this.context) {\n      return time;\n    }\n\n    const now = this.context.currentTime;\n\n    if (this.startedAt === 0) {\n      return now;\n    }\n\n    return now + quantizeTime(this.bpm, now, this.startedAt, this.quantize);\n  }\n\n}\nconst BEATS = 1;\n/**\n * Calculate the time remaining until the next beat\n *\n * @param {*} bpm\n * @param {*} now\n * @param {*} startedAt\n * @param {*} beats\n */\n\nexport function quantizeTime(bpm, now, startedAt, beats = BEATS) {\n  const factor = bpm / (60 * beats);\n  const absolute = now - startedAt;\n\n  if (absolute === 0) {\n    return 0;\n  }\n\n  const inBeats = absolute * factor;\n  const mod = inBeats % 1;\n  const offsetTime = (1 - mod) / factor;\n  return offsetTime;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/TimeManager.ts"],"names":["debug","getActiveAudioContext","log","TimeManager","constructor","config","bpm","quantize","count","startedAt","context","then","ctx","startTime","time","nextTime","console","currentTime","stopTime","now","quantizeTime","BEATS","beats","factor","absolute","inBeats","mod","offsetTime"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,qBAAT,QAAsC,gBAAtC;AAEA,MAAMC,GAAG,GAAGF,KAAK,CAAC,YAAD,CAAjB;AAOA,OAAO,MAAMG,WAAN,CAAkB;AAOvBC,EAAAA,WAAW,CAACC,MAAD,EAAiB;AAAA,SANrBC,GAMqB;AAAA,SALrBC,QAKqB;AAAA,SAJpBC,KAIoB,GAJJ,CAII;AAAA,SAHpBC,SAGoB,GAHA,CAGA;AAAA,SAFpBC,OAEoB;AAC1BR,IAAAA,GAAG,CAAC,SAAD,EAAYG,MAAZ,CAAH;AACA,SAAKC,GAAL,GAAWD,MAAM,CAACC,GAAlB;AACA,SAAKC,QAAL,GAAgBF,MAAM,CAACE,QAAP,IAAmB,CAAnC;AACAN,IAAAA,qBAAqB,GAAGU,IAAxB,CAA6BC,GAAG,IAAK,KAAKF,OAAL,GAAeE,GAApD;AACD;;AAEMC,EAAAA,SAAP,CAAiBC,IAAjB,EAA+B;AAAA;;AAC7B,QAAI,CAAC,KAAKJ,OAAV,EAAmB;AACjB,aAAOI,IAAP;AACD;;AAED,UAAMD,SAAS,GAAG,KAAKE,QAAL,CAAcD,IAAd,CAAlB;AACA,SAAKN,KAAL,IAAc,CAAd;;AAEA,QAAI,KAAKA,KAAL,KAAe,CAAnB,EAAsB;AACpB,WAAKC,SAAL,GAAiBI,SAAjB;AACD;;AACDG,IAAAA,OAAO,CAACd,GAAR,CAAY,OAAZ,EAAqBY,IAArB,EAA2BD,SAA3B,mBAAsC,KAAKH,OAA3C,kDAAsC,cAAcO,WAApD;AACA,WAAOJ,SAAP;AACD;;AAEMK,EAAAA,QAAP,CAAgBJ,IAAhB,EAA8B;AAC5B,QAAI,CAAC,KAAKJ,OAAV,EAAmB;AACjB,aAAOI,IAAP;AACD;;AAEDA,IAAAA,IAAI,GAAG,KAAKC,QAAL,CAAcD,IAAd,CAAP;AACA,SAAKN,KAAL,IAAc,CAAd;;AAEA,QAAI,KAAKA,KAAL,KAAe,CAAnB,EAAsB;AACpB,WAAKC,SAAL,GAAiB,CAAjB;AACD;;AACD,WAAOK,IAAP;AACD;;AAEOC,EAAAA,QAAR,CAAiBD,IAAjB,EAA+B;AAC7B,QAAI,CAAC,KAAKJ,OAAV,EAAmB;AACjB,aAAOI,IAAP;AACD;;AAED,UAAMK,GAAG,GAAG,KAAKT,OAAL,CAAaO,WAAzB;;AACA,QAAI,KAAKR,SAAL,KAAmB,CAAvB,EAA0B;AACxB,aAAOU,GAAP;AACD;;AAED,WAAOA,GAAG,GAAGC,YAAY,CAAC,KAAKd,GAAN,EAAWa,GAAX,EAAgB,KAAKV,SAArB,EAAgC,KAAKF,QAArC,CAAzB;AACD;;AAtDsB;AAwDzB,MAAMc,KAAK,GAAG,CAAd;AAEA;;;;;;;;;AAQA,OAAO,SAASD,YAAT,CACLd,GADK,EAELa,GAFK,EAGLV,SAHK,EAILa,KAAK,GAAGD,KAJH,EAKG;AACR,QAAME,MAAM,GAAGjB,GAAG,IAAI,KAAKgB,KAAT,CAAlB;AACA,QAAME,QAAQ,GAAGL,GAAG,GAAGV,SAAvB;;AACA,MAAIe,QAAQ,KAAK,CAAjB,EAAoB;AAClB,WAAO,CAAP;AACD;;AACD,QAAMC,OAAO,GAAGD,QAAQ,GAAGD,MAA3B;AACA,QAAMG,GAAG,GAAGD,OAAO,GAAG,CAAtB;AACA,QAAME,UAAU,GAAG,CAAC,IAAID,GAAL,IAAYH,MAA/B;AACA,SAAOI,UAAP;AACD","sourcesContent":["import debug from \"debug\";\nimport { IAudioContext } from \"standardized-audio-context\";\nimport { getActiveAudioContext } from \"./AudioContext\";\n\nconst log = debug(\"atpls:time\");\n\ninterface Config {\n  bpm: number;\n  quantize: number;\n}\n\nexport class TimeManager {\n  public bpm: number;\n  public quantize: number;\n  private count: number = 0;\n  private startedAt: number = 0;\n  private context?: IAudioContext;\n\n  constructor(config: Config) {\n    log(\"time %o\", config);\n    this.bpm = config.bpm;\n    this.quantize = config.quantize || 1;\n    getActiveAudioContext().then(ctx => (this.context = ctx));\n  }\n\n  public startTime(time: number) {\n    if (!this.context) {\n      return time;\n    }\n\n    const startTime = this.nextTime(time);\n    this.count += 1;\n\n    if (this.count === 1) {\n      this.startedAt = startTime;\n    }\n    console.log(\"joder\", time, startTime, this.context?.currentTime);\n    return startTime;\n  }\n\n  public stopTime(time: number) {\n    if (!this.context) {\n      return time;\n    }\n\n    time = this.nextTime(time);\n    this.count -= 1;\n\n    if (this.count === 0) {\n      this.startedAt = 0;\n    }\n    return time;\n  }\n\n  private nextTime(time: number) {\n    if (!this.context) {\n      return time;\n    }\n\n    const now = this.context.currentTime;\n    if (this.startedAt === 0) {\n      return now;\n    }\n\n    return now + quantizeTime(this.bpm, now, this.startedAt, this.quantize);\n  }\n}\nconst BEATS = 1;\n\n/**\n * Calculate the time remaining until the next beat\n *\n * @param {*} bpm\n * @param {*} now\n * @param {*} startedAt\n * @param {*} beats\n */\nexport function quantizeTime(\n  bpm: number,\n  now: number,\n  startedAt: number,\n  beats = BEATS,\n): number {\n  const factor = bpm / (60 * beats);\n  const absolute = now - startedAt;\n  if (absolute === 0) {\n    return 0;\n  }\n  const inBeats = absolute * factor;\n  const mod = inBeats % 1;\n  const offsetTime = (1 - mod) / factor;\n  return offsetTime;\n}\n"]},"metadata":{},"sourceType":"module"}