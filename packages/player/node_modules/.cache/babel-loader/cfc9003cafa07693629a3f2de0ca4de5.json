{"ast":null,"code":"import _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/dani/Antropoloops/atpls-player/src/ui/Player/Player.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { getActiveAudioContext } from \"../../player\";\nimport { AudiosetControl } from \"../../player/AudiosetControl\";\nimport { useDeviceType } from \"../useDeviceType\";\nimport { Controller } from \"./Controller\";\nimport { Preview } from \"./Preview\";\nimport { Sidebar } from \"./Sidebar\";\nimport { useFullscreen } from \"./useFullscreen\";\nimport { useKeyboardListener } from \"./useKeyboardListener\";\nimport { Visuals } from \"./Visuals\";\nexport const Player = ({\n  audioset\n}) => {\n  const _usePlayer = usePlayer(audioset),\n        player = _usePlayer.player;\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isReady = _useState2[0],\n        setReady = _useState2[1];\n\n  const _useFullscreen = useFullscreen(),\n        isFullscreen = _useFullscreen.isFullscreen,\n        toggleFullscreen = _useFullscreen.toggleFullscreen;\n\n  const _useDeviceType = useDeviceType(),\n        isDesktop = _useDeviceType.isDesktop;\n\n  useKeyboardListener();\n  const isVisual = isDesktop || isReady;\n  const isSidebarVisible = !isFullscreen; // useAutoStartAudio(isReady, audioset, handleStart);\n\n  return React.createElement(\"div\", {\n    className: \"App Player\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, isSidebarVisible && React.createElement(Sidebar, {\n    audioset: audioset,\n    onFullscreen: toggleFullscreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, isReady ? React.createElement(Controller, {\n    audioset: audioset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }) : React.createElement(Preview, {\n    audioset: audioset,\n    isReady: isReady,\n    onStart: () => setReady(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  })), isVisual && React.createElement(\"div\", {\n    className: \"visuals\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(Visuals, {\n    audioset: audioset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  })));\n};\n\nfunction usePlayer(audioset) {\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        player = _useState4[0],\n        setPlayer = _useState4[1];\n\n  const _useState5 = useState({\n    clips: {},\n    tracks: {}\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        playerState = _useState6[0],\n        setPlayerState = _useState6[1];\n\n  useEffect(() => {\n    getActiveAudioContext().then(ctx => {\n      const player = new AudiosetControl(audioset, {\n        onControlStateChanged: state => {\n          setPlayerState(state);\n        },\n        onControlCommand: command => {\n          console.log(\"command!\", command);\n        }\n      });\n      setPlayer(player);\n    });\n  }, [audioset]);\n  return {\n    player,\n    playerState\n  };\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/Player.tsx"],"names":["React","useEffect","useState","getActiveAudioContext","AudiosetControl","useDeviceType","Controller","Preview","Sidebar","useFullscreen","useKeyboardListener","Visuals","Player","audioset","usePlayer","player","isReady","setReady","isFullscreen","toggleFullscreen","isDesktop","isVisual","isSidebarVisible","setPlayer","clips","tracks","playerState","setPlayerState","then","ctx","onControlStateChanged","state","onControlCommand","command","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Audioset } from \"../../audioset\";\nimport { getActiveAudioContext } from \"../../player\";\nimport { AudiosetControl } from \"../../player/AudiosetControl\";\nimport { ControlState } from \"../../player/Control\";\nimport { useDeviceType } from \"../useDeviceType\";\nimport { Controller } from \"./Controller\";\nimport { Preview } from \"./Preview\";\nimport { Sidebar } from \"./Sidebar\";\nimport { useFullscreen } from \"./useFullscreen\";\nimport { useKeyboardListener } from \"./useKeyboardListener\";\nimport { Visuals } from \"./Visuals\";\n\nexport interface PlayerProps {\n  audioset: Audioset;\n}\n\nexport const Player = ({ audioset }: PlayerProps) => {\n  const { player } = usePlayer(audioset);\n  const [isReady, setReady] = useState<boolean>(false);\n  const { isFullscreen, toggleFullscreen } = useFullscreen();\n  const { isDesktop } = useDeviceType();\n  useKeyboardListener();\n\n  const isVisual = isDesktop || isReady;\n\n  const isSidebarVisible = !isFullscreen;\n  // useAutoStartAudio(isReady, audioset, handleStart);\n\n  return (\n    <div className=\"App Player\">\n      {isSidebarVisible && (\n        <Sidebar audioset={audioset} onFullscreen={toggleFullscreen}>\n          {isReady ? (\n            <Controller audioset={audioset} />\n          ) : (\n            <Preview\n              audioset={audioset}\n              isReady={isReady}\n              onStart={() => setReady(true)}\n            />\n          )}\n        </Sidebar>\n      )}\n      {isVisual && (\n        <div className=\"visuals\">{<Visuals audioset={audioset} />}</div>\n      )}\n    </div>\n  );\n};\n\nfunction usePlayer(audioset: Audioset) {\n  const [player, setPlayer] = useState<any>(null);\n  const [playerState, setPlayerState] = useState<ControlState>({\n    clips: {},\n    tracks: {},\n  });\n\n  useEffect(() => {\n    getActiveAudioContext().then(ctx => {\n      const player = new AudiosetControl(audioset, {\n        onControlStateChanged: state => {\n          setPlayerState(state);\n        },\n        onControlCommand: command => {\n          console.log(\"command!\", command);\n        },\n      });\n      setPlayer(player);\n    });\n  }, [audioset]);\n\n  return { player, playerState };\n}\n"]},"metadata":{},"sourceType":"module"}