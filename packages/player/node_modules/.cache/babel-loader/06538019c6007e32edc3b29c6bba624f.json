{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nexport var createIsSupportedPromise = function createIsSupportedPromise(cacheTestResult, testAudioBufferCopyChannelMethodsSubarraySupport, testAudioContextCloseMethodSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextOptionsSupport, testAudioNodeConnectMethodSupport, testAudioWorkletProcessorNoOutputsSupport, testConstantSourceNodeAccurateSchedulingSupport, testConvolverNodeBufferReassignabilitySupport, testIsSecureContextSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testStereoPannerNodeDefaultValueSupport, testTransferablesSupport) {\n  var results;\n  return _regeneratorRuntime.async(function createIsSupportedPromise$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, testAudioBufferCopyChannelMethodsSubarraySupport) && cacheTestResult(testAudioContextCloseMethodSupport, testAudioContextCloseMethodSupport) && cacheTestResult(testAudioContextOptionsSupport, testAudioContextOptionsSupport) && cacheTestResult(testAudioNodeConnectMethodSupport, testAudioNodeConnectMethodSupport) && cacheTestResult(testConstantSourceNodeAccurateSchedulingSupport, testConstantSourceNodeAccurateSchedulingSupport) && cacheTestResult(testConvolverNodeBufferReassignabilitySupport, testConvolverNodeBufferReassignabilitySupport) && cacheTestResult(testIsSecureContextSupport, testIsSecureContextSupport) && cacheTestResult(testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport))) {\n            _context.next = 5;\n            break;\n          }\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(Promise.all([cacheTestResult(testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport), cacheTestResult(testAudioWorkletProcessorNoOutputsSupport, testAudioWorkletProcessorNoOutputsSupport), cacheTestResult(testStereoPannerNodeDefaultValueSupport, testStereoPannerNodeDefaultValueSupport), cacheTestResult(testTransferablesSupport, testTransferablesSupport)]));\n\n        case 3:\n          results = _context.sent;\n          return _context.abrupt(\"return\", results.every(function (result) {\n            return result;\n          }));\n\n        case 5:\n          return _context.abrupt(\"return\", false);\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/is-supported-promise.js"],"names":["createIsSupportedPromise","cacheTestResult","testAudioBufferCopyChannelMethodsSubarraySupport","testAudioContextCloseMethodSupport","testAudioContextDecodeAudioDataMethodTypeErrorSupport","testAudioContextOptionsSupport","testAudioNodeConnectMethodSupport","testAudioWorkletProcessorNoOutputsSupport","testConstantSourceNodeAccurateSchedulingSupport","testConvolverNodeBufferReassignabilitySupport","testIsSecureContextSupport","testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport","testStereoPannerNodeDefaultValueSupport","testTransferablesSupport","Promise","all","results","every","result"],"mappings":";AAAA,OAAO,IAAMA,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAOC,eAAP,EAAwBC,gDAAxB,EAA0EC,kCAA1E,EAA8GC,qDAA9G,EAAqKC,8BAArK,EAAqMC,iCAArM,EAAwOC,yCAAxO,EAAmRC,+CAAnR,EAAoUC,6CAApU,EAAmXC,0BAAnX,EAA+YC,iEAA/Y,EAAkdC,uCAAld,EAA2fC,wBAA3f;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAChCZ,eAAe,CAACC,gDAAD,EAAmDA,gDAAnD,CAAf,IACGD,eAAe,CAACE,kCAAD,EAAqCA,kCAArC,CADlB,IAEGF,eAAe,CAACI,8BAAD,EAAiCA,8BAAjC,CAFlB,IAGGJ,eAAe,CAACK,iCAAD,EAAoCA,iCAApC,CAHlB,IAIGL,eAAe,CAACO,+CAAD,EAAkDA,+CAAlD,CAJlB,IAKGP,eAAe,CAACQ,6CAAD,EAAgDA,6CAAhD,CALlB,IAMGR,eAAe,CAACS,0BAAD,EAA6BA,0BAA7B,CANlB,IAOGT,eAAe,CAACU,iEAAD,EAAoEA,iEAApE,CARc;AAAA;AAAA;AAAA;;AAAA;AAAA,2CASVG,OAAO,CACxBC,GADiB,CACb,CACLd,eAAe,CAACG,qDAAD,EAAwDA,qDAAxD,CADV,EAELH,eAAe,CAACM,yCAAD,EAA4CA,yCAA5C,CAFV,EAGLN,eAAe,CAACW,uCAAD,EAA0CA,uCAA1C,CAHV,EAILX,eAAe,CAACY,wBAAD,EAA2BA,wBAA3B,CAJV,CADa,CATU;;AAAA;AAS1BG,UAAAA,OAT0B;AAAA,2CAgBzBA,OAAO,CAACC,KAAR,CAAc,UAACC,MAAD;AAAA,mBAAYA,MAAZ;AAAA,WAAd,CAhByB;;AAAA;AAAA,2CAkB7B,KAlB6B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjC","sourcesContent":["export const createIsSupportedPromise = async (cacheTestResult, testAudioBufferCopyChannelMethodsSubarraySupport, testAudioContextCloseMethodSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextOptionsSupport, testAudioNodeConnectMethodSupport, testAudioWorkletProcessorNoOutputsSupport, testConstantSourceNodeAccurateSchedulingSupport, testConvolverNodeBufferReassignabilitySupport, testIsSecureContextSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testStereoPannerNodeDefaultValueSupport, testTransferablesSupport) => {\n    if (cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, testAudioBufferCopyChannelMethodsSubarraySupport)\n        && cacheTestResult(testAudioContextCloseMethodSupport, testAudioContextCloseMethodSupport)\n        && cacheTestResult(testAudioContextOptionsSupport, testAudioContextOptionsSupport)\n        && cacheTestResult(testAudioNodeConnectMethodSupport, testAudioNodeConnectMethodSupport)\n        && cacheTestResult(testConstantSourceNodeAccurateSchedulingSupport, testConstantSourceNodeAccurateSchedulingSupport)\n        && cacheTestResult(testConvolverNodeBufferReassignabilitySupport, testConvolverNodeBufferReassignabilitySupport)\n        && cacheTestResult(testIsSecureContextSupport, testIsSecureContextSupport)\n        && cacheTestResult(testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport)) {\n        const results = await Promise\n            .all([\n            cacheTestResult(testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport),\n            cacheTestResult(testAudioWorkletProcessorNoOutputsSupport, testAudioWorkletProcessorNoOutputsSupport),\n            cacheTestResult(testStereoPannerNodeDefaultValueSupport, testStereoPannerNodeDefaultValueSupport),\n            cacheTestResult(testTransferablesSupport, testTransferablesSupport)\n        ]);\n        return results.every((result) => result);\n    }\n    return false;\n};\n//# sourceMappingURL=/build/es2018/factories/is-supported-promise.js.map"]},"metadata":{},"sourceType":"module"}