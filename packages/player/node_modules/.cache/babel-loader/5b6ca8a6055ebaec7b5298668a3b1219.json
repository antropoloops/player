{"ast":null,"code":"import { EmptyAudioset } from \"../audioset\";\nimport { AudiosetLoader } from \"../audioset/AudiosetLoader\";\nimport { DebugAudioEngine } from \"./Audio\";\nimport { AudiosetControl } from \"./AudiosetControl\";\nimport { Emitter } from \"./Emitter\";\nimport { ResourceLoader } from \"./ResourceLoader\";\nimport { Sampler } from \"./Sampler\";\n\nconst NoOp = param => undefined;\n\nconst NoControl = new AudiosetControl(EmptyAudioset, {\n  onControlCommand: NoOp,\n  onControlStateChanged: NoOp\n});\nconst NoResources = new ResourceLoader(EmptyAudioset, NoOp);\nconst NoEngine = new DebugAudioEngine();\nconst NoSampler = new Sampler(EmptyAudioset, NoResources, NoEngine);\nconst NoPlayer = {\n  control: NoControl,\n  resources: NoResources,\n  sampler: NoSampler\n};\n\nclass AudiosetPlayer {\n  constructor() {\n    this.loader = void 0;\n    this.control = NoControl;\n    this.resources = NoResources;\n    this.sampler = NoSampler;\n    this.audioset = EmptyAudioset;\n    this.loader = new AudiosetLoader(status => this.onLoadStatusChanged(status));\n  }\n\n  onLoadStatusChanged(status) {}\n\n}\n/**\n * A player is the facade for the rest of the components:\n * - Loader: load audioset and resources\n * - Control: determines how to play clips\n * - Pads: receive pad events\n * - Params: receive param change events\n * - Keyboard: receive keyboard events\n * - Sampler: play the audio\n */\n\n\nexport class Player extends AudiosetPlayer {\n  constructor() {\n    super();\n    this.controlListener = void 0;\n    this.resourceListener = void 0;\n    this.audiosetChanged = new Emitter();\n    this.audiosetLoadStatusChanged = new Emitter();\n    this.controlStateChanged = new Emitter();\n    this.controlCommand = new Emitter();\n    this.resourceStatusChanged = new Emitter();\n    this.audio = new DebugAudioEngine();\n    this.controlListener = {\n      onControlStateChanged: state => this.handleControlStateChanged(state),\n      onControlCommand: command => this.handleControlCommand(command)\n    };\n\n    this.resourceListener = status => {\n      this.resourceStatusChanged.emit(status);\n    };\n\n    this.sampler = NoSampler;\n  }\n\n  setAudioEngine(audio) {\n    this.audio = audio; // this.sampler.dispose()\n\n    this.sampler = new Sampler(this.audioset, this.resources, this.audio);\n  }\n\n  onResourceStatusChanged(listener) {\n    return this.resourceStatusChanged.on(listener);\n  }\n\n  onControlStateChanged(listener) {\n    return this.controlStateChanged.on(listener);\n  }\n\n  onCommand(listener) {\n    return this.controlCommand.on(listener);\n  }\n\n  onLoadStatusChanged(status) {\n    this.audiosetLoadStatusChanged.emit(status);\n\n    if (status.stage === \"ready\") {\n      this.setAudioset(status.audioset);\n      this.audiosetChanged.emit(status.audioset);\n    }\n  } //// PRIVATE /////\n\n\n  handleControlStateChanged(controlState) {\n    this.controlStateChanged.emit(controlState);\n  }\n\n  handleControlCommand(command) {\n    this.sampler.run(command);\n    this.controlCommand.emit(command);\n  }\n\n  setAudioset(audioset) {\n    this.control.stopAll(0);\n\n    if (isAudiosetPlay(audioset)) {\n      this.audioset = audioset;\n      this.control = new AudiosetControl(audioset, this.controlListener);\n      this.resources = new ResourceLoader(audioset, this.resourceListener);\n      this.sampler = new Sampler(audioset, this.resources, this.audio);\n    } else {\n      Object.assign(this, NoPlayer);\n    }\n  }\n\n}\nexport class PlayerState extends Player {}\n\nfunction isAudiosetPlay(audioset) {\n  return audioset.type === \"audioset\";\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/PlayerState.ts"],"names":["EmptyAudioset","AudiosetLoader","DebugAudioEngine","AudiosetControl","Emitter","ResourceLoader","Sampler","NoOp","param","undefined","NoControl","onControlCommand","onControlStateChanged","NoResources","NoEngine","NoSampler","NoPlayer","control","resources","sampler","AudiosetPlayer","constructor","loader","audioset","status","onLoadStatusChanged","Player","controlListener","resourceListener","audiosetChanged","audiosetLoadStatusChanged","controlStateChanged","controlCommand","resourceStatusChanged","audio","state","handleControlStateChanged","command","handleControlCommand","emit","setAudioEngine","onResourceStatusChanged","listener","on","onCommand","stage","setAudioset","controlState","run","stopAll","isAudiosetPlay","Object","assign","PlayerState","type"],"mappings":"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","sourcesContent":["import { Audioset, AudiosetData, EmptyAudioset } from \"../audioset\";\nimport { AudiosetLoader, AudiosetLoadStatus } from \"../audioset/AudiosetLoader\";\nimport { AudioEngine, DebugAudioEngine } from \"./Audio\";\nimport {\n  AudiosetControl,\n  ControlCommand,\n  ControlListener,\n  ControlState,\n} from \"./AudiosetControl\";\nimport { Emitter, Listener } from \"./Emitter\";\nimport { ResourceLoader, ResourceLoadStatus } from \"./ResourceLoader\";\nimport { Sampler } from \"./Sampler\";\n\nconst NoOp = (param: any) => undefined;\nconst NoControl = new AudiosetControl(EmptyAudioset, {\n  onControlCommand: NoOp,\n  onControlStateChanged: NoOp,\n});\nconst NoResources = new ResourceLoader(EmptyAudioset, NoOp);\nconst NoEngine = new DebugAudioEngine();\nconst NoSampler = new Sampler(EmptyAudioset, NoResources, NoEngine);\n\ninterface IPlayer {\n  control: AudiosetControl;\n  resources: ResourceLoader;\n  sampler: Sampler;\n}\nconst NoPlayer = {\n  control: NoControl,\n  resources: NoResources,\n  sampler: NoSampler,\n};\n\nclass AudiosetPlayer implements IPlayer {\n  public readonly loader: AudiosetLoader;\n  public control: AudiosetControl = NoControl;\n  public resources: ResourceLoader = NoResources;\n  public sampler: Sampler = NoSampler;\n  public audioset: Audioset = EmptyAudioset;\n\n  constructor() {\n    this.loader = new AudiosetLoader(status =>\n      this.onLoadStatusChanged(status),\n    );\n  }\n  public onLoadStatusChanged(status: AudiosetLoadStatus) {}\n}\n\n/**\n * A player is the facade for the rest of the components:\n * - Loader: load audioset and resources\n * - Control: determines how to play clips\n * - Pads: receive pad events\n * - Params: receive param change events\n * - Keyboard: receive keyboard events\n * - Sampler: play the audio\n */\nexport class Player extends AudiosetPlayer {\n  private readonly controlListener: ControlListener;\n  private readonly resourceListener: (status: ResourceLoadStatus) => void;\n\n  private readonly audiosetChanged = new Emitter<AudiosetData>();\n  private readonly audiosetLoadStatusChanged = new Emitter<\n    AudiosetLoadStatus\n  >();\n  private readonly controlStateChanged = new Emitter<ControlState>();\n  private readonly controlCommand = new Emitter<ControlCommand>();\n  private readonly resourceStatusChanged = new Emitter<ResourceLoadStatus>();\n\n  private audio: AudioEngine = new DebugAudioEngine();\n\n  constructor() {\n    super();\n    this.controlListener = {\n      onControlStateChanged: state => this.handleControlStateChanged(state),\n      onControlCommand: command => this.handleControlCommand(command),\n    };\n    this.resourceListener = (status: ResourceLoadStatus) => {\n      this.resourceStatusChanged.emit(status);\n    };\n    this.sampler = NoSampler;\n  }\n\n  public setAudioEngine(audio: AudioEngine) {\n    this.audio = audio;\n    // this.sampler.dispose()\n    this.sampler = new Sampler(this.audioset, this.resources, this.audio);\n  }\n\n  public onResourceStatusChanged(listener: Listener<ResourceLoadStatus>) {\n    return this.resourceStatusChanged.on(listener);\n  }\n\n  public onControlStateChanged(listener: Listener<ControlState>) {\n    return this.controlStateChanged.on(listener);\n  }\n\n  public onCommand(listener: Listener<ControlCommand>) {\n    return this.controlCommand.on(listener);\n  }\n  public onLoadStatusChanged(status: AudiosetLoadStatus) {\n    this.audiosetLoadStatusChanged.emit(status);\n    if (status.stage === \"ready\") {\n      this.setAudioset(status.audioset);\n      this.audiosetChanged.emit(status.audioset);\n    }\n  }\n\n  //// PRIVATE /////\n\n  private handleControlStateChanged(controlState: ControlState) {\n    this.controlStateChanged.emit(controlState);\n  }\n\n  private handleControlCommand(command: ControlCommand) {\n    this.sampler.run(command);\n    this.controlCommand.emit(command);\n  }\n\n  private setAudioset(audioset: AudiosetData) {\n    this.control.stopAll(0);\n    if (isAudiosetPlay(audioset)) {\n      this.audioset = audioset;\n      this.control = new AudiosetControl(audioset, this.controlListener);\n      this.resources = new ResourceLoader(audioset, this.resourceListener);\n      this.sampler = new Sampler(audioset, this.resources, this.audio);\n    } else {\n      Object.assign(this, NoPlayer);\n    }\n  }\n}\n\nexport class PlayerState extends Player {}\n\nfunction isAudiosetPlay(audioset: AudiosetData): audioset is Audioset {\n  return audioset.type === \"audioset\";\n}\n\n"]},"metadata":{},"sourceType":"module"}