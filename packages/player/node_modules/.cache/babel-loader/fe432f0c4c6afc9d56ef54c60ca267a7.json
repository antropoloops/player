{"ast":null,"code":"export class KeyboardControler {\n  constructor(audioset, control) {\n    this.control = control;\n    this.active = false;\n    this.pressed = {};\n    this.clipIdToKey = {};\n    this.keyToClipId = {};\n    this.mapMode = undefined;\n    audioset.clips.forEach(clip => {\n      const key = clip.keyMap.toUpperCase();\n      this.clipIdToKey[clip.id] = key;\n      this.keyToClipId[key] = clip.id;\n    });\n  }\n\n  startMapMode(clipId, callback) {\n    this.active = false;\n    this.mapMode = {\n      clipId,\n      callback\n    };\n  }\n\n  stopMapMode() {\n    this.active = true;\n    this.mapMode = undefined;\n  }\n\n  setKey(clipId, key) {\n    const oldKey = this.clipIdToKey[clipId];\n\n    if (oldKey) {\n      this.keyToClipId[oldKey] = undefined;\n    }\n\n    key = key.toUpperCase();\n    this.keyToClipId[key] = clipId;\n    this.clipIdToKey[clipId] = key;\n  }\n\n  keyDown(key) {\n    if (!this.active) {\n      return;\n    }\n\n    key = key.toUpperCase();\n\n    if (this.pressed[key]) {\n      return;\n    }\n\n    this.pressed[key] = true;\n    const clipId = this.keyToClipId[key];\n\n    if (clipId) {\n      this.control.startClip(clipId, 0);\n    }\n  }\n\n  keyUp(key) {\n    if (!this.active) {\n      return;\n    }\n\n    key = key.toUpperCase();\n    this.pressed[key] = false;\n    const clipId = this.keyToClipId[key];\n\n    if (clipId) {\n      this.control.stopClip(clipId, 0);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/KeyboardControler.ts"],"names":["KeyboardControler","constructor","audioset","control","active","pressed","clipIdToKey","keyToClipId","mapMode","undefined","clips","forEach","clip","key","keyMap","toUpperCase","id","startMapMode","clipId","callback","stopMapMode","setKey","oldKey","keyDown","startClip","keyUp","stopClip"],"mappings":"AAaA,OAAO,MAAMA,iBAAN,CAAwB;AAO7BC,EAAAA,WAAW,CAACC,QAAD,EAA6BC,OAA7B,EAA+C;AAAA,SAAlBA,OAAkB,GAAlBA,OAAkB;AAAA,SANnDC,MAMmD,GANjC,KAMiC;AAAA,SALnDC,OAKmD,GALhB,EAKgB;AAAA,SAJnDC,WAImD,GAJb,EAIa;AAAA,SAHnDC,WAGmD,GAHD,EAGC;AAAA,SAFlDC,OAEkD,GAF9BC,SAE8B;AACxDP,IAAAA,QAAQ,CAACQ,KAAT,CAAeC,OAAf,CAAuBC,IAAI,IAAI;AAC7B,YAAMC,GAAG,GAAGD,IAAI,CAACE,MAAL,CAAYC,WAAZ,EAAZ;AACA,WAAKT,WAAL,CAAiBM,IAAI,CAACI,EAAtB,IAA4BH,GAA5B;AACA,WAAKN,WAAL,CAAiBM,GAAjB,IAAwBD,IAAI,CAACI,EAA7B;AACD,KAJD;AAKD;;AAEMC,EAAAA,YAAP,CAAoBC,MAApB,EAAoCC,QAApC,EAA+D;AAC7D,SAAKf,MAAL,GAAc,KAAd;AACA,SAAKI,OAAL,GAAe;AAAEU,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAf;AACD;;AACMC,EAAAA,WAAP,GAAqB;AACnB,SAAKhB,MAAL,GAAc,IAAd;AACA,SAAKI,OAAL,GAAeC,SAAf;AACD;;AAEMY,EAAAA,MAAP,CAAcH,MAAd,EAA8BL,GAA9B,EAA2C;AACzC,UAAMS,MAAM,GAAG,KAAKhB,WAAL,CAAiBY,MAAjB,CAAf;;AACA,QAAII,MAAJ,EAAY;AACV,WAAKf,WAAL,CAAiBe,MAAjB,IAA2Bb,SAA3B;AACD;;AACDI,IAAAA,GAAG,GAAGA,GAAG,CAACE,WAAJ,EAAN;AACA,SAAKR,WAAL,CAAiBM,GAAjB,IAAwBK,MAAxB;AACA,SAAKZ,WAAL,CAAiBY,MAAjB,IAA2BL,GAA3B;AACD;;AAEMU,EAAAA,OAAP,CAAeV,GAAf,EAA4B;AAC1B,QAAI,CAAC,KAAKT,MAAV,EAAkB;AAChB;AACD;;AAEDS,IAAAA,GAAG,GAAGA,GAAG,CAACE,WAAJ,EAAN;;AACA,QAAI,KAAKV,OAAL,CAAaQ,GAAb,CAAJ,EAAuB;AACrB;AACD;;AACD,SAAKR,OAAL,CAAaQ,GAAb,IAAoB,IAApB;AAEA,UAAMK,MAAM,GAAG,KAAKX,WAAL,CAAiBM,GAAjB,CAAf;;AACA,QAAIK,MAAJ,EAAY;AACV,WAAKf,OAAL,CAAaqB,SAAb,CAAuBN,MAAvB,EAA+B,CAA/B;AACD;AACF;;AACMO,EAAAA,KAAP,CAAaZ,GAAb,EAA0B;AACxB,QAAI,CAAC,KAAKT,MAAV,EAAkB;AAChB;AACD;;AAEDS,IAAAA,GAAG,GAAGA,GAAG,CAACE,WAAJ,EAAN;AACA,SAAKV,OAAL,CAAaQ,GAAb,IAAoB,KAApB;AAEA,UAAMK,MAAM,GAAG,KAAKX,WAAL,CAAiBM,GAAjB,CAAf;;AACA,QAAIK,MAAJ,EAAY;AACV,WAAKf,OAAL,CAAauB,QAAb,CAAsBR,MAAtB,EAA8B,CAA9B;AACD;AACF;;AA9D4B","sourcesContent":["import { Audioset } from \"../audioset\";\n\nexport interface Control {\n  startClip(clipId: string, time: number): void;\n  stopClip(clipId: string, time: number): void;\n}\n\ntype MapModeCallback = (newKey: string) => void;\ninterface MapMode {\n  clipId: string;\n  callback: MapModeCallback;\n}\n\nexport class KeyboardControler {\n  public active: boolean = false;\n  public pressed: Record<string, boolean> = {};\n  public clipIdToKey: Record<string, string> = {};\n  public keyToClipId: Record<string, string | undefined> = {};\n  private mapMode?: MapMode = undefined;\n\n  constructor(audioset: Audioset, private control: Control) {\n    audioset.clips.forEach(clip => {\n      const key = clip.keyMap.toUpperCase();\n      this.clipIdToKey[clip.id] = key;\n      this.keyToClipId[key] = clip.id;\n    });\n  }\n\n  public startMapMode(clipId: string, callback: MapModeCallback) {\n    this.active = false;\n    this.mapMode = { clipId, callback };\n  }\n  public stopMapMode() {\n    this.active = true;\n    this.mapMode = undefined;\n  }\n\n  public setKey(clipId: string, key: string) {\n    const oldKey = this.clipIdToKey[clipId];\n    if (oldKey) {\n      this.keyToClipId[oldKey] = undefined;\n    }\n    key = key.toUpperCase();\n    this.keyToClipId[key] = clipId;\n    this.clipIdToKey[clipId] = key;\n  }\n\n  public keyDown(key: string) {\n    if (!this.active) {\n      return;\n    }\n\n    key = key.toUpperCase();\n    if (this.pressed[key]) {\n      return;\n    }\n    this.pressed[key] = true;\n\n    const clipId = this.keyToClipId[key];\n    if (clipId) {\n      this.control.startClip(clipId, 0);\n    }\n  }\n  public keyUp(key: string) {\n    if (!this.active) {\n      return;\n    }\n\n    key = key.toUpperCase();\n    this.pressed[key] = false;\n\n    const clipId = this.keyToClipId[key];\n    if (clipId) {\n      this.control.stopClip(clipId, 0);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}