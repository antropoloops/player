{"ast":null,"code":"import { addResizeObserver } from \"./addResizeObserver\";\nimport Display from \"./display\";\nimport Visuals from \"./visuals\";\nexport class VisualControl {\n  constructor(audioset, el) {\n    this.el = el;\n    this.display = void 0;\n    this.visuals = void 0;\n    this.detachers = [];\n    this.display = new Display(el);\n    this.visuals = new Visuals(audioset, this.display);\n    setupVisuals(audioset, this.visuals).then(() => {\n      this.detachers.push(addResizeObserver(el, (width, height) => {\n        console.log(\"resize!\", width, height);\n        this.visuals.resizeSvg(width, height);\n      }));\n    });\n  }\n\n  startClip(clipId) {\n    this.visuals.show(clipId);\n  }\n\n  stopClip(clipId) {\n    this.visuals.hide(clipId);\n  }\n\n  detach() {\n    for (const detach of this.detachers) {\n      detach();\n    }\n  }\n\n}\n\nfunction setupVisuals(audioset, visuals) {\n  if (audioset.visuals.mode === \"map\") {\n    return fetch(audioset.visuals.geomap.url).then(response => response.json()).then(data => visuals.setGeodata(data)).then(() => visuals);\n  } else {\n    visuals.setup();\n    return Promise.resolve(visuals);\n  }\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/visuals/index.ts"],"names":["addResizeObserver","Display","Visuals","VisualControl","constructor","audioset","el","display","visuals","detachers","setupVisuals","then","push","width","height","console","log","resizeSvg","startClip","clipId","show","stopClip","hide","detach","mode","fetch","geomap","url","response","json","data","setGeodata","setup","Promise","resolve"],"mappings":"AACA,SAASA,iBAAT,QAAkC,qBAAlC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAO,MAAMC,aAAN,CAAoB;AAKzBC,EAAAA,WAAW,CAACC,QAAD,EAA6BC,EAA7B,EAAsC;AAAA,SAATA,EAAS,GAATA,EAAS;AAAA,SAJzCC,OAIyC;AAAA,SAHzCC,OAGyC;AAAA,SAFzCC,SAEyC,GAFV,EAEU;AAC/C,SAAKF,OAAL,GAAe,IAAIN,OAAJ,CAAYK,EAAZ,CAAf;AACA,SAAKE,OAAL,GAAe,IAAIN,OAAJ,CAAYG,QAAZ,EAAsB,KAAKE,OAA3B,CAAf;AACAG,IAAAA,YAAY,CAACL,QAAD,EAAW,KAAKG,OAAhB,CAAZ,CAAqCG,IAArC,CAA0C,MAAM;AAC9C,WAAKF,SAAL,CAAeG,IAAf,CACEZ,iBAAiB,CAACM,EAAD,EAAK,CAACO,KAAD,EAAgBC,MAAhB,KAAmC;AACvDC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,KAAvB,EAA8BC,MAA9B;AACA,aAAKN,OAAL,CAAaS,SAAb,CAAuBJ,KAAvB,EAA8BC,MAA9B;AACD,OAHgB,CADnB;AAMD,KAPD;AAQD;;AAEMI,EAAAA,SAAP,CAAiBC,MAAjB,EAAiC;AAC/B,SAAKX,OAAL,CAAaY,IAAb,CAAkBD,MAAlB;AACD;;AAEME,EAAAA,QAAP,CAAgBF,MAAhB,EAAgC;AAC9B,SAAKX,OAAL,CAAac,IAAb,CAAkBH,MAAlB;AACD;;AAEMI,EAAAA,MAAP,GAAgB;AACd,SAAK,MAAMA,MAAX,IAAqB,KAAKd,SAA1B,EAAqC;AACnCc,MAAAA,MAAM;AACP;AACF;;AA9BwB;;AAiC3B,SAASb,YAAT,CAAsBL,QAAtB,EAA0CG,OAA1C,EAA8E;AAC5E,MAAIH,QAAQ,CAACG,OAAT,CAAiBgB,IAAjB,KAA0B,KAA9B,EAAqC;AACnC,WAAOC,KAAK,CAACpB,QAAQ,CAACG,OAAT,CAAiBkB,MAAjB,CAAwBC,GAAzB,CAAL,CACJhB,IADI,CACCiB,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAEJlB,IAFI,CAECmB,IAAI,IAAItB,OAAO,CAACuB,UAAR,CAAmBD,IAAnB,CAFT,EAGJnB,IAHI,CAGC,MAAMH,OAHP,CAAP;AAID,GALD,MAKO;AACLA,IAAAA,OAAO,CAACwB,KAAR;AACA,WAAOC,OAAO,CAACC,OAAR,CAAgB1B,OAAhB,CAAP;AACD;AACF","sourcesContent":["import { Audioset } from \"../audioset\";\nimport { addResizeObserver } from \"./addResizeObserver\";\nimport Display from \"./display\";\nimport Visuals from \"./visuals\";\n\nexport class VisualControl {\n  private display: Display;\n  private visuals: Visuals;\n  private detachers: Array<() => void> = [];\n\n  constructor(audioset: Audioset, private el: any) {\n    this.display = new Display(el);\n    this.visuals = new Visuals(audioset, this.display);\n    setupVisuals(audioset, this.visuals).then(() => {\n      this.detachers.push(\n        addResizeObserver(el, (width: number, height: number) => {\n          console.log(\"resize!\", width, height);\n          this.visuals.resizeSvg(width, height);\n        }),\n      );\n    });\n  }\n\n  public startClip(clipId: string) {\n    this.visuals.show(clipId);\n  }\n\n  public stopClip(clipId: string) {\n    this.visuals.hide(clipId);\n  }\n\n  public detach() {\n    for (const detach of this.detachers) {\n      detach();\n    }\n  }\n}\n\nfunction setupVisuals(audioset: Audioset, visuals: Visuals): Promise<Visuals> {\n  if (audioset.visuals.mode === \"map\") {\n    return fetch(audioset.visuals.geomap.url)\n      .then(response => response.json())\n      .then(data => visuals.setGeodata(data))\n      .then(() => visuals);\n  } else {\n    visuals.setup();\n    return Promise.resolve(visuals);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}