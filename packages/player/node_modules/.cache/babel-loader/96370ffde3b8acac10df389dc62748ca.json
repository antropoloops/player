{"ast":null,"code":"import _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { AudioContextEngine, getActiveAudioContext, Sampler } from \"../../player/Audio\";\nimport { AudiosetControl, EmptyControlState } from \"../../player/Control\";\nexport function usePlayer(audioset, buffers) {\n  // Make visuals render after reference is set: https://dev.to/thekashey/the-same-useref-but-it-will-callback-8bo\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        el = _useState2[0],\n        setReference = _useState2[1];\n\n  const visualsRef = useCallback(newRef => {\n    setReference(newRef);\n  }, []);\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        control = _useState4[0],\n        setControl = _useState4[1];\n\n  const _useState5 = useState(EmptyControlState),\n        _useState6 = _slicedToArray(_useState5, 2),\n        state = _useState6[0],\n        setState = _useState6[1];\n\n  useEffect(() => {\n    let cancelled = false;\n    let sampler;\n    let visuals;\n\n    async function createControl() {\n      const _ref = await import(\"../../visuals/index\"),\n            VisualControl = _ref.VisualControl;\n\n      const ctx = await getActiveAudioContext();\n\n      if (cancelled) {\n        return;\n      }\n\n      sampler = createSampler(audioset, ctx, buffers);\n      visuals = new VisualControl(audioset, el);\n      const ctl = new AudiosetControl(audioset, {\n        onControlStateChanged: newState => {\n          setState(newState);\n        },\n        onControlCommand: command => {\n          var _sampler, _visuals;\n\n          (_sampler = sampler) === null || _sampler === void 0 ? void 0 : _sampler.run(command);\n          (_visuals = visuals) === null || _visuals === void 0 ? void 0 : _visuals.run(command);\n        }\n      });\n      return ctl;\n    }\n\n    if (el) {\n      createControl().then(instance => {\n        if (instance) {\n          setControl(instance);\n          setState(instance.getState());\n        }\n      });\n    }\n\n    return () => {\n      var _visuals2, _sampler2;\n\n      cancelled = true;\n      (_visuals2 = visuals) === null || _visuals2 === void 0 ? void 0 : _visuals2.detach();\n      (_sampler2 = sampler) === null || _sampler2 === void 0 ? void 0 : _sampler2.dispose();\n    };\n  }, [audioset, buffers, el]);\n  return {\n    visualsRef,\n    control,\n    state\n  };\n}\n\nfunction createSampler(audioset, ctx, buffers) {\n  const audio = new AudioContextEngine(ctx);\n  const sampler = new Sampler(audioset, buffers, audio);\n  return sampler;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/usePlayer.tsx"],"names":["useCallback","useEffect","useState","AudioContextEngine","getActiveAudioContext","Sampler","AudiosetControl","EmptyControlState","usePlayer","audioset","buffers","el","setReference","visualsRef","newRef","control","setControl","state","setState","cancelled","sampler","visuals","createControl","VisualControl","ctx","createSampler","ctl","onControlStateChanged","newState","onControlCommand","command","run","then","instance","getState","detach","dispose","audio"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAGA,SACEC,kBADF,EAEEC,qBAFF,EAIEC,OAJF,QAKO,oBALP;AAMA,SACEC,eADF,EAEEC,iBAFF,QAIO,sBAJP;AAOA,OAAO,SAASC,SAAT,CAAmBC,QAAnB,EAAuCC,OAAvC,EAA+D;AACpE;AADoE,oBAEzCR,QAAQ,CAAwB,IAAxB,CAFiC;AAAA;AAAA,QAE7DS,EAF6D;AAAA,QAEzDC,YAFyD;;AAGpE,QAAMC,UAAU,GAAGb,WAAW,CAAEc,MAAD,IAA4B;AACzDF,IAAAA,YAAY,CAACE,MAAD,CAAZ;AACD,GAF6B,EAE3B,EAF2B,CAA9B;;AAHoE,qBAOtCZ,QAAQ,EAP8B;AAAA;AAAA,QAO7Da,OAP6D;AAAA,QAOpDC,UAPoD;;AAAA,qBAQ1Cd,QAAQ,CAACK,iBAAD,CARkC;AAAA;AAAA,QAQ7DU,KAR6D;AAAA,QAQtDC,QARsD;;AAUpEjB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIkB,SAAS,GAAG,KAAhB;AACA,QAAIC,OAAJ;AACA,QAAIC,OAAJ;;AAEA,mBAAeC,aAAf,GAA+B;AAAA,mBACH,MAAM,OAAO,qBAAP,CADH;AAAA,YACrBC,aADqB,QACrBA,aADqB;;AAE7B,YAAMC,GAAG,GAAG,MAAMpB,qBAAqB,EAAvC;;AAEA,UAAIe,SAAJ,EAAe;AACb;AACD;;AAEDC,MAAAA,OAAO,GAAGK,aAAa,CAAChB,QAAD,EAAWe,GAAX,EAAgBd,OAAhB,CAAvB;AAEAW,MAAAA,OAAO,GAAG,IAAIE,aAAJ,CAAkBd,QAAlB,EAA4BE,EAA5B,CAAV;AAEA,YAAMe,GAAG,GAAG,IAAIpB,eAAJ,CAAoBG,QAApB,EAA8B;AACxCkB,QAAAA,qBAAqB,EAAEC,QAAQ,IAAI;AACjCV,UAAAA,QAAQ,CAACU,QAAD,CAAR;AACD,SAHuC;AAIxCC,QAAAA,gBAAgB,EAAEC,OAAO,IAAI;AAAA;;AAC3B,sBAAAV,OAAO,UAAP,4CAASW,GAAT,CAAaD,OAAb;AACA,sBAAAT,OAAO,UAAP,4CAASU,GAAT,CAAaD,OAAb;AACD;AAPuC,OAA9B,CAAZ;AASA,aAAOJ,GAAP;AACD;;AACD,QAAIf,EAAJ,EAAQ;AACNW,MAAAA,aAAa,GAAGU,IAAhB,CAAqBC,QAAQ,IAAI;AAC/B,YAAIA,QAAJ,EAAc;AACZjB,UAAAA,UAAU,CAACiB,QAAD,CAAV;AACAf,UAAAA,QAAQ,CAACe,QAAQ,CAACC,QAAT,EAAD,CAAR;AACD;AACF,OALD;AAMD;;AAED,WAAO,MAAM;AAAA;;AACXf,MAAAA,SAAS,GAAG,IAAZ;AACA,mBAAAE,OAAO,UAAP,8CAASc,MAAT;AACA,mBAAAf,OAAO,UAAP,8CAASgB,OAAT;AACD,KAJD;AAKD,GA1CQ,EA0CN,CAAC3B,QAAD,EAAWC,OAAX,EAAoBC,EAApB,CA1CM,CAAT;AA4CA,SAAO;AAAEE,IAAAA,UAAF;AAAcE,IAAAA,OAAd;AAAuBE,IAAAA;AAAvB,GAAP;AACD;;AAED,SAASQ,aAAT,CACEhB,QADF,EAEEe,GAFF,EAGEd,OAHF,EAIW;AACT,QAAM2B,KAAK,GAAG,IAAIlC,kBAAJ,CAAuBqB,GAAvB,CAAd;AACA,QAAMJ,OAAO,GAAG,IAAIf,OAAJ,CAAYI,QAAZ,EAAsBC,OAAtB,EAA+B2B,KAA/B,CAAhB;AACA,SAAOjB,OAAP;AACD","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport { IAudioContext } from \"standardized-audio-context\";\nimport { Audioset } from \"../../audioset\";\nimport {\n  AudioContextEngine,\n  getActiveAudioContext,\n  SampleBuffers,\n  Sampler,\n} from \"../../player/Audio\";\nimport {\n  AudiosetControl,\n  EmptyControlState,\n  PlayerControl,\n} from \"../../player/Control\";\nimport { VisualControl as VC } from \"../../visuals\";\n\nexport function usePlayer(audioset: Audioset, buffers: SampleBuffers) {\n  // Make visuals render after reference is set: https://dev.to/thekashey/the-same-useref-but-it-will-callback-8bo\n  const [el, setReference] = useState<HTMLDivElement | null>(null);\n  const visualsRef = useCallback((newRef: HTMLDivElement) => {\n    setReference(newRef);\n  }, []);\n\n  const [control, setControl] = useState<PlayerControl | undefined>();\n  const [state, setState] = useState(EmptyControlState);\n\n  useEffect(() => {\n    let cancelled = false;\n    let sampler: Sampler | undefined;\n    let visuals: VC | undefined;\n\n    async function createControl() {\n      const { VisualControl } = await import(\"../../visuals/index\");\n      const ctx = await getActiveAudioContext();\n\n      if (cancelled) {\n        return;\n      }\n\n      sampler = createSampler(audioset, ctx, buffers);\n\n      visuals = new VisualControl(audioset, el);\n\n      const ctl = new AudiosetControl(audioset, {\n        onControlStateChanged: newState => {\n          setState(newState);\n        },\n        onControlCommand: command => {\n          sampler?.run(command);\n          visuals?.run(command);\n        },\n      });\n      return ctl;\n    }\n    if (el) {\n      createControl().then(instance => {\n        if (instance) {\n          setControl(instance);\n          setState(instance.getState());\n        }\n      });\n    }\n\n    return () => {\n      cancelled = true;\n      visuals?.detach();\n      sampler?.dispose();\n    };\n  }, [audioset, buffers, el]);\n\n  return { visualsRef, control, state };\n}\n\nfunction createSampler(\n  audioset: Audioset,\n  ctx: IAudioContext,\n  buffers: SampleBuffers,\n): Sampler {\n  const audio = new AudioContextEngine(ctx);\n  const sampler = new Sampler(audioset, buffers, audio);\n  return sampler;\n}\n"]},"metadata":{},"sourceType":"module"}