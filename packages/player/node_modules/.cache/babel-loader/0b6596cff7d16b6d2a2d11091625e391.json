{"ast":null,"code":"import debug from \"debug\";\nimport { decodeAudioBuffer } from \"./decodeAudioBuffer\";\nconst log = debug(\"atpls:resources\"); // TODO: abstract the loader mechanism: { stage, payload }\n\nexport class ResourceLoader {\n  constructor(audioset, listener) {\n    this.audioset = audioset;\n    this.listener = listener;\n    this.preloadImage = void 0;\n    this.total = void 0;\n    this.completed = void 0;\n    this.buffers = {};\n    log(\"create ResourceLoader %s\", audioset.id);\n    this.status = {\n      stage: \"pending\"\n    };\n    this.total = this.audioset.clips.length;\n    this.completed = 0;\n    this.preloadImage = preloadImage;\n  }\n\n  getBuffer(clipId) {\n    return this.buffers[clipId];\n  }\n\n  preload() {\n    log(\"Preload\");\n    const _this$audioset = this.audioset,\n          visuals = _this$audioset.visuals,\n          clips = _this$audioset.clips;\n\n    if (visuals.mode === \"map\" && visuals.geomap.url) {\n      fetch(visuals.geomap.url);\n    }\n\n    clips.forEach(clip => {\n      this.preloadImage(clip.resources.cover.small);\n    });\n  }\n\n  load() {\n    const total = this.total,\n          completed = this.completed;\n\n    if (total === completed) {\n      return Promise.resolve();\n    }\n\n    this.setStatus({\n      stage: \"loading\",\n      total,\n      completed: 0\n    });\n    const clips = this.audioset.clips;\n    const promises = clips.map(clip => this.loadAudio(clip).catch(err => {\n      this.handleResourceCompleted();\n      log(\"Error %o\", err);\n    }));\n    const result = Promise.all(promises);\n    return Promise.all(promises);\n  } //// PRIVATE ////\n\n\n  setStatus(status) {\n    this.status = status;\n    this.listener(status);\n  }\n\n  async loadAudio(clip) {\n    // TODO: check other formats\n    const url = clip.resources.audio.mp3;\n    const response = await fetch(url);\n    const buffer = await decodeAudioBuffer(response);\n    this.buffers[clip.id] = buffer;\n    this.handleResourceCompleted(url);\n    return buffer;\n  }\n\n  handleResourceCompleted(url) {\n    this.completed += 1;\n    const status = this.completed >= this.total ? {\n      stage: \"ready\",\n      total: this.total\n    } : {\n      stage: \"loading\",\n      total: this.total,\n      completed: this.completed\n    };\n    this.setStatus(status);\n  }\n\n}\n\nfunction preloadImage(url) {\n  if (url && url.length) {\n    return new Promise(resolve => {\n      const image = new Image();\n      image.addEventListener(\"load\", () => {\n        resolve(image);\n      });\n      image.src = url;\n    });\n  }\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/ResourceLoader.ts"],"names":["debug","decodeAudioBuffer","log","ResourceLoader","constructor","audioset","listener","preloadImage","total","completed","buffers","id","status","stage","clips","length","getBuffer","clipId","preload","visuals","mode","geomap","url","fetch","forEach","clip","resources","cover","small","load","Promise","resolve","setStatus","promises","map","loadAudio","catch","err","handleResourceCompleted","result","all","audio","mp3","response","buffer","image","Image","addEventListener","src"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA,MAAMC,GAAG,GAAGF,KAAK,CAAC,iBAAD,CAAjB,C,CAEA;;AA8BA,OAAO,MAAMG,cAAN,CAA0C;AAM/CC,EAAAA,WAAW,CACDC,QADC,EAEDC,QAFC,EAGT;AAAA,SAFQD,QAER,GAFQA,QAER;AAAA,SADQC,QACR,GADQA,QACR;AAAA,SARMC,YAQN;AAAA,SAPMC,KAON;AAAA,SANMC,SAMN;AAAA,SALMC,OAKN,GALqC,EAKrC;AACAR,IAAAA,GAAG,CAAC,0BAAD,EAA6BG,QAAQ,CAACM,EAAtC,CAAH;AACA,SAAKC,MAAL,GAAc;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAd;AACA,SAAKL,KAAL,GAAa,KAAKH,QAAL,CAAcS,KAAd,CAAoBC,MAAjC;AACA,SAAKN,SAAL,GAAiB,CAAjB;AACA,SAAKF,YAAL,GAAoBA,YAApB;AACD;;AAEMS,EAAAA,SAAP,CAAiBC,MAAjB,EAAsC;AACpC,WAAO,KAAKP,OAAL,CAAaO,MAAb,CAAP;AACD;;AAEMC,EAAAA,OAAP,GAAiB;AACfhB,IAAAA,GAAG,CAAC,SAAD,CAAH;AADe,2BAEY,KAAKG,QAFjB;AAAA,UAEPc,OAFO,kBAEPA,OAFO;AAAA,UAEEL,KAFF,kBAEEA,KAFF;;AAGf,QAAIK,OAAO,CAACC,IAAR,KAAiB,KAAjB,IAA0BD,OAAO,CAACE,MAAR,CAAeC,GAA7C,EAAkD;AAChDC,MAAAA,KAAK,CAACJ,OAAO,CAACE,MAAR,CAAeC,GAAhB,CAAL;AACD;;AACDR,IAAAA,KAAK,CAACU,OAAN,CAAcC,IAAI,IAAI;AACpB,WAAKlB,YAAL,CAAkBkB,IAAI,CAACC,SAAL,CAAeC,KAAf,CAAqBC,KAAvC;AACD,KAFD;AAGD;;AAEMC,EAAAA,IAAP,GAAc;AAAA,UACJrB,KADI,GACiB,IADjB,CACJA,KADI;AAAA,UACGC,SADH,GACiB,IADjB,CACGA,SADH;;AAEZ,QAAID,KAAK,KAAKC,SAAd,EAAyB;AACvB,aAAOqB,OAAO,CAACC,OAAR,EAAP;AACD;;AAED,SAAKC,SAAL,CAAe;AAAEnB,MAAAA,KAAK,EAAE,SAAT;AAAoBL,MAAAA,KAApB;AAA2BC,MAAAA,SAAS,EAAE;AAAtC,KAAf;AACA,UAAMK,KAAK,GAAG,KAAKT,QAAL,CAAcS,KAA5B;AACA,UAAMmB,QAAQ,GAAGnB,KAAK,CAACoB,GAAN,CAAUT,IAAI,IAC7B,KAAKU,SAAL,CAAeV,IAAf,EAAqBW,KAArB,CAA2BC,GAAG,IAAI;AAChC,WAAKC,uBAAL;AACApC,MAAAA,GAAG,CAAC,UAAD,EAAamC,GAAb,CAAH;AACD,KAHD,CADe,CAAjB;AAMA,UAAME,MAAM,GAAGT,OAAO,CAACU,GAAR,CAAYP,QAAZ,CAAf;AACA,WAAOH,OAAO,CAACU,GAAR,CAAYP,QAAZ,CAAP;AACD,GAhD8C,CAkD/C;;;AACQD,EAAAA,SAAR,CAAkBpB,MAAlB,EAA8C;AAC5C,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKN,QAAL,CAAcM,MAAd;AACD;;AAED,QAAcuB,SAAd,CAAwBV,IAAxB,EAAoC;AAClC;AACA,UAAMH,GAAG,GAAGG,IAAI,CAACC,SAAL,CAAee,KAAf,CAAqBC,GAAjC;AACA,UAAMC,QAAQ,GAAG,MAAMpB,KAAK,CAACD,GAAD,CAA5B;AACA,UAAMsB,MAAM,GAAG,MAAM3C,iBAAiB,CAAC0C,QAAD,CAAtC;AACA,SAAKjC,OAAL,CAAae,IAAI,CAACd,EAAlB,IAAwBiC,MAAxB;AACA,SAAKN,uBAAL,CAA6BhB,GAA7B;AAEA,WAAOsB,MAAP;AACD;;AAEON,EAAAA,uBAAR,CAAgChB,GAAhC,EAA8C;AAC5C,SAAKb,SAAL,IAAkB,CAAlB;AACA,UAAMG,MAA0B,GAC9B,KAAKH,SAAL,IAAkB,KAAKD,KAAvB,GACI;AAAEK,MAAAA,KAAK,EAAE,OAAT;AAAkBL,MAAAA,KAAK,EAAE,KAAKA;AAA9B,KADJ,GAEI;AAAEK,MAAAA,KAAK,EAAE,SAAT;AAAoBL,MAAAA,KAAK,EAAE,KAAKA,KAAhC;AAAuCC,MAAAA,SAAS,EAAE,KAAKA;AAAvD,KAHN;AAIA,SAAKuB,SAAL,CAAepB,MAAf;AACD;;AA1E8C;;AA6EjD,SAASL,YAAT,CAAsBe,GAAtB,EAAmC;AACjC,MAAIA,GAAG,IAAIA,GAAG,CAACP,MAAf,EAAuB;AACrB,WAAO,IAAIe,OAAJ,CAAYC,OAAO,IAAI;AAC5B,YAAMc,KAAK,GAAG,IAAIC,KAAJ,EAAd;AACAD,MAAAA,KAAK,CAACE,gBAAN,CAAuB,MAAvB,EAA+B,MAAM;AACnChB,QAAAA,OAAO,CAACc,KAAD,CAAP;AACD,OAFD;AAGAA,MAAAA,KAAK,CAACG,GAAN,GAAY1B,GAAZ;AACD,KANM,CAAP;AAOD;AACF","sourcesContent":["import debug from \"debug\";\nimport { Audioset, Clip } from \"../audioset\";\nimport { decodeAudioBuffer } from \"./decodeAudioBuffer\";\n\nconst log = debug(\"atpls:resources\");\n\n// TODO: abstract the loader mechanism: { stage, payload }\nexport interface LoadPending {\n  stage: \"pending\";\n}\nexport interface LoadingResources {\n  stage: \"loading\";\n  total: number;\n  completed: number;\n}\nexport interface ResourcesLoaded {\n  stage: \"ready\";\n  total: number;\n}\nexport interface ResourceLoadError {\n  stage: \"error\";\n  error: any;\n}\n\nexport type ResourceLoadStatus =\n  | LoadPending\n  | LoadingResources\n  | ResourcesLoaded\n  | ResourceLoadError;\n\nexport interface Resources {\n  status: ResourceLoadStatus;\n  getBuffer(clipId: string): any;\n  load(): Promise<any>;\n}\n\nexport class ResourceLoader implements Resources {\n  private preloadImage: (url: string) => void;\n  private total: number;\n  private completed: number;\n  private buffers: Record<string, any> = {};\n\n  constructor(\n    private audioset: Audioset,\n    private listener: (status: ResourceLoadStatus) => void,\n  ) {\n    log(\"create ResourceLoader %s\", audioset.id);\n    this.status = { stage: \"pending\" };\n    this.total = this.audioset.clips.length;\n    this.completed = 0;\n    this.preloadImage = preloadImage;\n  }\n\n  public getBuffer(clipId: string): any {\n    return this.buffers[clipId];\n  }\n\n  public preload() {\n    log(\"Preload\");\n    const { visuals, clips } = this.audioset;\n    if (visuals.mode === \"map\" && visuals.geomap.url) {\n      fetch(visuals.geomap.url);\n    }\n    clips.forEach(clip => {\n      this.preloadImage(clip.resources.cover.small);\n    });\n  }\n\n  public load() {\n    const { total, completed } = this;\n    if (total === completed) {\n      return Promise.resolve();\n    }\n\n    this.setStatus({ stage: \"loading\", total, completed: 0 });\n    const clips = this.audioset.clips;\n    const promises = clips.map(clip =>\n      this.loadAudio(clip).catch(err => {\n        this.handleResourceCompleted();\n        log(\"Error %o\", err);\n      }),\n    );\n    const result = Promise.all(promises);\n    return Promise.all(promises);\n  }\n\n  //// PRIVATE ////\n  private setStatus(status: ResourceLoadStatus) {\n    this.status = status;\n    this.listener(status);\n  }\n\n  private async loadAudio(clip: Clip) {\n    // TODO: check other formats\n    const url = clip.resources.audio.mp3;\n    const response = await fetch(url);\n    const buffer = await decodeAudioBuffer(response);\n    this.buffers[clip.id] = buffer;\n    this.handleResourceCompleted(url);\n\n    return buffer;\n  }\n\n  private handleResourceCompleted(url?: string) {\n    this.completed += 1;\n    const status: ResourceLoadStatus =\n      this.completed >= this.total\n        ? { stage: \"ready\", total: this.total }\n        : { stage: \"loading\", total: this.total, completed: this.completed };\n    this.setStatus(status);\n  }\n}\n\nfunction preloadImage(url: string) {\n  if (url && url.length) {\n    return new Promise(resolve => {\n      const image = new Image();\n      image.addEventListener(\"load\", () => {\n        resolve(image);\n      });\n      image.src = url;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}