{"ast":null,"code":"import _regeneratorRuntime from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import debug from\"debug\";var log=debug(\"atpls:resources\");// TODO: abstract the loader mechanism: { status, payload }\nexport var ResourceLoader=/*#__PURE__*/function(){function ResourceLoader(audioset,listener){_classCallCheck(this,ResourceLoader);this.audioset=audioset;this.listener=listener;this.status=void 0;this.total=void 0;this.completed=void 0;this.buffers={};this.fetch=function(){return Promise.reject();};this.status={status:\"pending\"};this.total=this.audioset.clips.length;this.completed=0;}_createClass(ResourceLoader,[{key:\"getBuffer\",value:function getBuffer(clipId){return this.buffers[clipId];}},{key:\"load\",value:function load(){var _this=this;var total=this.total,completed=this.completed;if(total===completed){return;}this._setStatus({status:\"loading\",total:total,completed:0});var clips=this.audioset.clips;var promises=clips.map(function(clip){return _this._loadAudio(clip).catch(function(err){_this._complete();log(\"Error %o\",err);});});return Promise.all(promises);}//// PRIVATE ////\n},{key:\"_setStatus\",value:function _setStatus(status){this.status=status;this.listener(status);}},{key:\"_loadAudio\",value:function(){var _loadAudio2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(clip){var url,buffer;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// TODO: check other formats\nurl=clip.resources.audio.mp3;_context.next=3;return this.fetch(url);case 3:buffer=_context.sent;this.buffers[clip.id]=buffer;this._complete();return _context.abrupt(\"return\",buffer);case 7:case\"end\":return _context.stop();}}},_callee,this);}));function _loadAudio(_x){return _loadAudio2.apply(this,arguments);}return _loadAudio;}()},{key:\"_complete\",value:function _complete(){this.completed+=1;var status=this.completed===this.total?{status:\"ready\",total:this.total}:{status:\"loading\",total:this.total,completed:this.completed};this._setStatus(status);}}]);return ResourceLoader;}();","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/ResourceLoader.ts"],"names":["debug","log","ResourceLoader","audioset","listener","status","total","completed","buffers","fetch","Promise","reject","clips","length","clipId","_setStatus","promises","map","clip","_loadAudio","catch","err","_complete","all","url","resources","audio","mp3","buffer","id"],"mappings":"2mBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAGA,GAAMC,CAAAA,GAAG,CAAGD,KAAK,CAAC,iBAAD,CAAjB,CAEA;AA0BA,UAAaE,CAAAA,cAAb,yBAME,wBACUC,QADV,CAEUC,QAFV,CAGE,2CAFQD,QAER,CAFQA,QAER,MADQC,QACR,CADQA,QACR,MARKC,MAQL,aAPMC,KAON,aANMC,SAMN,aALMC,OAKN,CALqC,EAKrC,MAKKC,KALL,CAKyB,iBAAMC,CAAAA,OAAO,CAACC,MAAR,EAAN,EALzB,CACA,KAAKN,MAAL,CAAc,CAAEA,MAAM,CAAE,SAAV,CAAd,CACA,KAAKC,KAAL,CAAa,KAAKH,QAAL,CAAcS,KAAd,CAAoBC,MAAjC,CACA,KAAKN,SAAL,CAAiB,CAAjB,CACD,CAbH,uEAgBmBO,MAhBnB,CAgBwC,CACpC,MAAO,MAAKN,OAAL,CAAaM,MAAb,CAAP,CACD,CAlBH,mCAoBgB,mBACJR,CAAAA,KADI,CACiB,IADjB,CACJA,KADI,CACGC,SADH,CACiB,IADjB,CACGA,SADH,CAEZ,GAAID,KAAK,GAAKC,SAAd,CAAyB,CACvB,OACD,CAED,KAAKQ,UAAL,CAAgB,CAAEV,MAAM,CAAE,SAAV,CAAqBC,KAAK,CAALA,KAArB,CAA4BC,SAAS,CAAE,CAAvC,CAAhB,EACA,GAAMK,CAAAA,KAAK,CAAG,KAAKT,QAAL,CAAcS,KAA5B,CACA,GAAMI,CAAAA,QAAQ,CAAGJ,KAAK,CAACK,GAAN,CAAU,SAAAC,IAAI,QAC7B,CAAA,KAAI,CAACC,UAAL,CAAgBD,IAAhB,EAAsBE,KAAtB,CAA4B,SAAAC,GAAG,CAAI,CACjC,KAAI,CAACC,SAAL,GACArB,GAAG,CAAC,UAAD,CAAaoB,GAAb,CAAH,CACD,CAHD,CAD6B,EAAd,CAAjB,CAMA,MAAOX,CAAAA,OAAO,CAACa,GAAR,CAAYP,QAAZ,CAAP,CACD,CAED;AArCF,8CAsCqBX,MAtCrB,CAsCiD,CAC7C,KAAKA,MAAL,CAAcA,MAAd,CACA,KAAKD,QAAL,CAAcC,MAAd,EACD,CAzCH,8HA2C2Ba,IA3C3B,iIA4CI;AACMM,GA7CV,CA6CgBN,IAAI,CAACO,SAAL,CAAeC,KAAf,CAAqBC,GA7CrC,uBA8CyB,MAAKlB,KAAL,CAAWe,GAAX,CA9CzB,QA8CUI,MA9CV,eA+CI,KAAKpB,OAAL,CAAaU,IAAI,CAACW,EAAlB,EAAwBD,MAAxB,CACA,KAAKN,SAAL,GAhDJ,gCAkDWM,MAlDX,oMAqDsB,CAClB,KAAKrB,SAAL,EAAkB,CAAlB,CACA,GAAMF,CAAAA,MAA0B,CAC9B,KAAKE,SAAL,GAAmB,KAAKD,KAAxB,CACI,CAAED,MAAM,CAAE,OAAV,CAAmBC,KAAK,CAAE,KAAKA,KAA/B,CADJ,CAEI,CAAED,MAAM,CAAE,SAAV,CAAqBC,KAAK,CAAE,KAAKA,KAAjC,CAAwCC,SAAS,CAAE,KAAKA,SAAxD,CAHN,CAIA,KAAKQ,UAAL,CAAgBV,MAAhB,EACD,CA5DH","sourcesContent":["import debug from \"debug\";\nimport { Audioset, Clip } from \"../audioset\";\n\nconst log = debug(\"atpls:resources\");\n\n// TODO: abstract the loader mechanism: { status, payload }\nexport interface LoadPending {\n  status: \"pending\";\n}\nexport interface LoadingResources {\n  status: \"loading\";\n  total: number;\n  completed: number;\n}\nexport interface ResourcesLoaded {\n  status: \"ready\";\n  total: number;\n}\nexport interface ResourceLoadError {\n  status: \"error\";\n  error: any;\n}\n\nexport type ResourceLoadStatus =\n  | LoadPending\n  | LoadingResources\n  | ResourcesLoaded\n  | ResourceLoadError;\n\nexport type FetchAudio = (url: string) => Promise<any>;\n\nexport class ResourceLoader {\n  public status: ResourceLoadStatus;\n  private total: number;\n  private completed: number;\n  private buffers: Record<string, any> = {};\n\n  constructor(\n    private audioset: Audioset,\n    private listener: (status: ResourceLoadStatus) => void,\n  ) {\n    this.status = { status: \"pending\" };\n    this.total = this.audioset.clips.length;\n    this.completed = 0;\n  }\n  public fetch: FetchAudio = () => Promise.reject();\n\n  public getBuffer(clipId: string): any {\n    return this.buffers[clipId];\n  }\n\n  public load() {\n    const { total, completed } = this;\n    if (total === completed) {\n      return;\n    }\n\n    this._setStatus({ status: \"loading\", total, completed: 0 });\n    const clips = this.audioset.clips;\n    const promises = clips.map(clip =>\n      this._loadAudio(clip).catch(err => {\n        this._complete();\n        log(\"Error %o\", err);\n      }),\n    );\n    return Promise.all(promises);\n  }\n\n  //// PRIVATE ////\n  private _setStatus(status: ResourceLoadStatus) {\n    this.status = status;\n    this.listener(status);\n  }\n\n  private async _loadAudio(clip: Clip) {\n    // TODO: check other formats\n    const url = clip.resources.audio.mp3;\n    const buffer = await this.fetch(url);\n    this.buffers[clip.id] = buffer;\n    this._complete();\n\n    return buffer;\n  }\n\n  private _complete() {\n    this.completed += 1;\n    const status: ResourceLoadStatus =\n      this.completed === this.total\n        ? { status: \"ready\", total: this.total }\n        : { status: \"loading\", total: this.total, completed: this.completed };\n    this._setStatus(status);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}