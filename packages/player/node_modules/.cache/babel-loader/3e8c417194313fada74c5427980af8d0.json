{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createPannerNodeRendererFactory = function createPannerNodeRendererFactory(connectAudioParam, createNativePannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativePannerNodes = new WeakMap();\n\n    var createPannerNode = function createPannerNode(proxy, nativeOfflineAudioContext, trace) {\n      var nativePannerNode, nativePannerNodeIsOwnedByContext, options;\n      return _regeneratorRuntime.async(function createPannerNode$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              nativePannerNode = getNativeAudioNode(proxy); // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n              nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext);\n\n              if (!nativePannerNodeIsOwnedByContext) {\n                options = {\n                  channelCount: nativePannerNode.channelCount,\n                  channelCountMode: nativePannerNode.channelCountMode,\n                  channelInterpretation: nativePannerNode.channelInterpretation,\n                  coneInnerAngle: nativePannerNode.coneInnerAngle,\n                  coneOuterAngle: nativePannerNode.coneOuterAngle,\n                  coneOuterGain: nativePannerNode.coneOuterGain,\n                  distanceModel: nativePannerNode.distanceModel,\n                  maxDistance: nativePannerNode.maxDistance,\n                  orientationX: nativePannerNode.orientationX.value,\n                  orientationY: nativePannerNode.orientationY.value,\n                  orientationZ: nativePannerNode.orientationZ.value,\n                  panningModel: nativePannerNode.panningModel,\n                  positionX: nativePannerNode.positionX.value,\n                  positionY: nativePannerNode.positionY.value,\n                  positionZ: nativePannerNode.positionZ.value,\n                  refDistance: nativePannerNode.refDistance,\n                  rolloffFactor: nativePannerNode.rolloffFactor\n                };\n                nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n              }\n\n              renderedNativePannerNodes.set(nativeOfflineAudioContext, nativePannerNode);\n\n              if (nativePannerNodeIsOwnedByContext) {\n                _context.next = 19;\n                break;\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace));\n\n            case 7:\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace));\n\n            case 9:\n              _context.next = 11;\n              return _regeneratorRuntime.awrap(renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace));\n\n            case 11:\n              _context.next = 13;\n              return _regeneratorRuntime.awrap(renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace));\n\n            case 13:\n              _context.next = 15;\n              return _regeneratorRuntime.awrap(renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace));\n\n            case 15:\n              _context.next = 17;\n              return _regeneratorRuntime.awrap(renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace));\n\n            case 17:\n              _context.next = 31;\n              break;\n\n            case 19:\n              _context.next = 21;\n              return _regeneratorRuntime.awrap(connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace));\n\n            case 21:\n              _context.next = 23;\n              return _regeneratorRuntime.awrap(connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace));\n\n            case 23:\n              _context.next = 25;\n              return _regeneratorRuntime.awrap(connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace));\n\n            case 25:\n              _context.next = 27;\n              return _regeneratorRuntime.awrap(connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace));\n\n            case 27:\n              _context.next = 29;\n              return _regeneratorRuntime.awrap(connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace));\n\n            case 29:\n              _context.next = 31;\n              return _regeneratorRuntime.awrap(connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace));\n\n            case 31:\n              if (!isNativeAudioNodeFaker(nativePannerNode)) {\n                _context.next = 36;\n                break;\n              }\n\n              _context.next = 34;\n              return _regeneratorRuntime.awrap(renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0], trace));\n\n            case 34:\n              _context.next = 38;\n              break;\n\n            case 36:\n              _context.next = 38;\n              return _regeneratorRuntime.awrap(renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode, trace));\n\n            case 38:\n              return _context.abrupt(\"return\", nativePannerNode);\n\n            case 39:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext, trace) {\n        var renderedNativePannerNode = renderedNativePannerNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativePannerNode !== undefined) {\n          return Promise.resolve(renderedNativePannerNode);\n        }\n\n        return createPannerNode(proxy, nativeOfflineAudioContext, trace);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/panner-node-renderer-factory.js"],"names":["isNativeAudioNodeFaker","isOwnedByContext","createPannerNodeRendererFactory","connectAudioParam","createNativePannerNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativePannerNodes","WeakMap","createPannerNode","proxy","nativeOfflineAudioContext","trace","nativePannerNode","nativePannerNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","orientationX","value","orientationY","orientationZ","panningModel","positionX","positionY","positionZ","refDistance","rolloffFactor","set","inputs","render","renderedNativePannerNode","get","undefined","Promise","resolve"],"mappings":"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","sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createPannerNodeRendererFactory = (connectAudioParam, createNativePannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativePannerNodes = new WeakMap();\n        const createPannerNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativePannerNode = getNativeAudioNode(proxy);\n            // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext);\n            if (!nativePannerNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativePannerNode.channelCount,\n                    channelCountMode: nativePannerNode.channelCountMode,\n                    channelInterpretation: nativePannerNode.channelInterpretation,\n                    coneInnerAngle: nativePannerNode.coneInnerAngle,\n                    coneOuterAngle: nativePannerNode.coneOuterAngle,\n                    coneOuterGain: nativePannerNode.coneOuterGain,\n                    distanceModel: nativePannerNode.distanceModel,\n                    maxDistance: nativePannerNode.maxDistance,\n                    orientationX: nativePannerNode.orientationX.value,\n                    orientationY: nativePannerNode.orientationY.value,\n                    orientationZ: nativePannerNode.orientationZ.value,\n                    panningModel: nativePannerNode.panningModel,\n                    positionX: nativePannerNode.positionX.value,\n                    positionY: nativePannerNode.positionY.value,\n                    positionZ: nativePannerNode.positionZ.value,\n                    refDistance: nativePannerNode.refDistance,\n                    rolloffFactor: nativePannerNode.rolloffFactor\n                };\n                nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativePannerNodes.set(nativeOfflineAudioContext, nativePannerNode);\n            if (!nativePannerNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace);\n            }\n            if (isNativeAudioNodeFaker(nativePannerNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0], trace);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode, trace);\n            }\n            return nativePannerNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativePannerNode = renderedNativePannerNodes.get(nativeOfflineAudioContext);\n                if (renderedNativePannerNode !== undefined) {\n                    return Promise.resolve(renderedNativePannerNode);\n                }\n                return createPannerNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/panner-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}