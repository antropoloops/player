{"ast":null,"code":"import _regeneratorRuntime from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _classCallCheck from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import debug from\"debug\";import{decodeAudioBuffer}from\"./decodeAudioBuffer\";var log=debug(\"atpls:resources\");// TODO: abstract the loader mechanism: { stage, payload }\nexport var ResourceLoader=/*#__PURE__*/function(){function ResourceLoader(audioset,listener){_classCallCheck(this,ResourceLoader);this.audioset=audioset;this.listener=listener;this.status=void 0;this.preloadImage=void 0;this.total=void 0;this.completed=void 0;this.buffers={};log(\"create ResourceLoader %s\",audioset.id);this.status={stage:\"pending\"};this.total=this.audioset.clips.length;this.completed=0;this.preloadImage=preloadImage;}_createClass(ResourceLoader,[{key:\"getStatus\",value:function getStatus(){return this.status;}},{key:\"getBuffer\",value:function getBuffer(clipId){return this.buffers[clipId];}},{key:\"preload\",value:function preload(){var _this=this;log(\"Preload\");var _this$audioset=this.audioset,visuals=_this$audioset.visuals,clips=_this$audioset.clips;var promises=[];if(visuals.mode===\"map\"&&visuals.geomap.url){promises.push(fetch(visuals.geomap.url));}clips.forEach(function(clip){_this.preloadImage(clip.resources.cover.small);});return Promise.all(promises);}},{key:\"load\",value:function load(context){var _this2=this;var total=this.total,completed=this.completed;if(total===completed){return Promise.resolve();}log(\"load audio of %s\",this.audioset.meta.title);this.setStatus({stage:\"loading\",total:total,completed:0});var clips=this.audioset.clips;var promises=clips.map(function(clip){return _this2.loadAudio(clip,context).catch(function(err){_this2.handleResourceCompleted();log(\"Error %o\",err);});});return Promise.all(promises);}//// PRIVATE ////\n},{key:\"setStatus\",value:function setStatus(status){if(status.stage!==\"loading\"){log(\"stage %s\",status.stage);}this.status=status;this.listener(status);}},{key:\"loadAudio\",value:function loadAudio(clip,context){var url,response,buffer;return _regeneratorRuntime.async(function loadAudio$(_context){while(1){switch(_context.prev=_context.next){case 0:// TODO: check other formats\nurl=clip.resources.audio.mp3;_context.next=3;return _regeneratorRuntime.awrap(fetch(url));case 3:response=_context.sent;_context.next=6;return _regeneratorRuntime.awrap(decodeAudioBuffer(response,context));case 6:buffer=_context.sent;this.buffers[clip.id]=buffer;this.handleResourceCompleted(url);return _context.abrupt(\"return\",buffer);case 10:case\"end\":return _context.stop();}}},null,this);}},{key:\"handleResourceCompleted\",value:function handleResourceCompleted(url){this.completed+=1;var status=this.completed>=this.total?{stage:\"ready\",total:this.total}:{stage:\"loading\",total:this.total,completed:this.completed};this.setStatus(status);}}]);return ResourceLoader;}();function preloadImage(url){if(!url||!url.length){return Promise.resolve();}return new Promise(function(resolve){var image=new Image();image.addEventListener(\"load\",function(){resolve(image);});image.src=url;});}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/ResourceLoader.ts"],"names":["debug","decodeAudioBuffer","log","ResourceLoader","audioset","listener","status","preloadImage","total","completed","buffers","id","stage","clips","length","clipId","visuals","promises","mode","geomap","url","push","fetch","forEach","clip","resources","cover","small","Promise","all","context","resolve","meta","title","setStatus","map","loadAudio","catch","err","handleResourceCompleted","audio","mp3","response","buffer","image","Image","addEventListener","src"],"mappings":"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","sourcesContent":["import debug from \"debug\";\nimport { IAudioContext } from \"standardized-audio-context\";\nimport { Audioset, Clip } from \"../audioset\";\nimport { decodeAudioBuffer } from \"./decodeAudioBuffer\";\n\nconst log = debug(\"atpls:resources\");\n\n// TODO: abstract the loader mechanism: { stage, payload }\nexport interface LoadPending {\n  stage: \"pending\";\n}\nexport interface LoadingResources {\n  stage: \"loading\";\n  total: number;\n  completed: number;\n}\nexport interface ResourcesLoaded {\n  stage: \"ready\";\n  total: number;\n}\nexport interface ResourceLoadError {\n  stage: \"error\";\n  error: any;\n}\n\nexport type ResourceLoadStatus =\n  | LoadPending\n  | LoadingResources\n  | ResourcesLoaded\n  | ResourceLoadError;\n\nexport interface Resources {\n  getStatus(): ResourceLoadStatus;\n  getBuffer(clipId: string): any;\n  load(ctx: IAudioContext): Promise<any>;\n  preload(): Promise<any>;\n}\n\nexport class ResourceLoader implements Resources {\n  public status: ResourceLoadStatus;\n  private preloadImage: (url: string) => void;\n  private total: number;\n  private completed: number;\n  private buffers: Record<string, any> = {};\n\n  constructor(\n    private audioset: Audioset,\n    private listener: (status: ResourceLoadStatus) => void,\n  ) {\n    log(\"create ResourceLoader %s\", audioset.id);\n    this.status = { stage: \"pending\" };\n    this.total = this.audioset.clips.length;\n    this.completed = 0;\n    this.preloadImage = preloadImage;\n  }\n\n  public getStatus() {\n    return this.status;\n  }\n\n  public getBuffer(clipId: string): any {\n    return this.buffers[clipId];\n  }\n\n  public preload() {\n    log(\"Preload\");\n    const { visuals, clips } = this.audioset;\n    const promises: Array<Promise<any>> = [];\n    if (visuals.mode === \"map\" && visuals.geomap.url) {\n      promises.push(fetch(visuals.geomap.url));\n    }\n    clips.forEach(clip => {\n      this.preloadImage(clip.resources.cover.small);\n    });\n    return Promise.all(promises);\n  }\n\n  public load(context: IAudioContext) {\n    const { total, completed } = this;\n    if (total === completed) {\n      return Promise.resolve();\n    }\n\n    log(\"load audio of %s\", this.audioset.meta.title);\n    this.setStatus({ stage: \"loading\", total, completed: 0 });\n    const clips = this.audioset.clips;\n    const promises = clips.map(clip =>\n      this.loadAudio(clip, context).catch(err => {\n        this.handleResourceCompleted();\n        log(\"Error %o\", err);\n      }),\n    );\n    return Promise.all(promises);\n  }\n\n  //// PRIVATE ////\n  private setStatus(status: ResourceLoadStatus) {\n    if (status.stage !== \"loading\") {\n      log(\"stage %s\", status.stage);\n    }\n    this.status = status;\n    this.listener(status);\n  }\n\n  private async loadAudio(clip: Clip, context: IAudioContext) {\n    // TODO: check other formats\n    const url = clip.resources.audio.mp3;\n    const response = await fetch(url);\n    const buffer = await decodeAudioBuffer(response, context);\n    this.buffers[clip.id] = buffer;\n    this.handleResourceCompleted(url);\n\n    return buffer;\n  }\n\n  private handleResourceCompleted(url?: string) {\n    this.completed += 1;\n    const status: ResourceLoadStatus =\n      this.completed >= this.total\n        ? { stage: \"ready\", total: this.total }\n        : { stage: \"loading\", total: this.total, completed: this.completed };\n    this.setStatus(status);\n  }\n}\n\nfunction preloadImage(url: string): Promise<any> {\n  if (!url || !url.length) {\n    return Promise.resolve();\n  }\n  return new Promise(resolve => {\n    const image = new Image();\n    image.addEventListener(\"load\", () => {\n      resolve(image);\n    });\n    image.src = url;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}