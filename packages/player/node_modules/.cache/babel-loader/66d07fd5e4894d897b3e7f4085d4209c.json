{"ast":null,"code":"import debug from \"debug\";\nimport { AudioContextEngine } from \"./AudioContextEngine\";\nconst log = debug(\"atpls:sampler\");\nexport function createAudioEffects(audioset, ctx, buffers) {\n  const audio = new AudioContextEngine(ctx);\n  return new AudioEffects(audioset, buffers, audio);\n}\n\nclass AudioEffects {\n  constructor(audioset, buffers, audio) {\n    this.audioset = audioset;\n    this.sampler = void 0;\n    this.sampler = new Sampler(audioset, buffers, audio);\n    this.sampler.initTracks(audioset.tracks);\n  }\n\n  attach() {// nothing to do?\n  }\n\n  detach() {\n    this.sampler.disconnect();\n  }\n\n  run(command) {\n    const time = command.time;\n\n    switch (command.command) {\n      case \"startClip\":\n        const clipId = command.clipId;\n        const trackId = this.audioset.index.trackIdOfClip[clipId];\n        return this.sampler.start(clipId, trackId, time);\n\n      case \"stopClip\":\n        return this.sampler.stop(command.clipId, time);\n\n      default:\n    }\n  }\n\n}\n\nclass Sampler {\n  constructor(audioset, buffers, audio) {\n    this.audioset = audioset;\n    this.buffers = buffers;\n    this.audio = audio;\n    this.master = void 0;\n    this.tracks = {};\n    this.audioSources = {};\n    log(\"create sampler %s\", audioset.meta.title);\n    this.master = audio.createTrack(\"master\", {\n      volume: 0.8\n    });\n    audioset.tracks.forEach(track => {\n      this.tracks[track.id] = audio.createTrack(track.name, {\n        volume: 1\n      }, this.master);\n    });\n  }\n\n  connect() {// nothing to do?\n  }\n\n  disconnect() {\n    Object.keys(this.tracks).forEach(trackId => {\n      this.tracks[trackId].disconnect();\n    });\n  }\n\n  start(clipId, trackId, time) {\n    log(\"start %s\", clipId);\n\n    if (this.audioSources[clipId]) {\n      return;\n    }\n\n    const buffer = this.buffers.getBuffer(clipId);\n    const track = this.tracks[trackId];\n    const source = this.audio.createAudioSource({\n      buffer\n    }, track);\n    this.audioSources[clipId] = source;\n    source.start(time);\n  }\n\n  stop(clipId, time) {\n    log(\"stop %s\", clipId);\n    const source = this.audioSources[clipId];\n\n    if (source !== undefined) {\n      source.stop(time);\n    }\n\n    this.audioSources[clipId] = undefined;\n  }\n\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/Audio/Sampler.ts"],"names":["debug","AudioContextEngine","log","createAudioEffects","audioset","ctx","buffers","audio","AudioEffects","constructor","sampler","Sampler","initTracks","tracks","attach","detach","disconnect","run","command","time","clipId","trackId","index","trackIdOfClip","start","stop","master","audioSources","meta","title","createTrack","volume","forEach","track","id","name","connect","Object","keys","buffer","getBuffer","source","createAudioSource","undefined"],"mappings":"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","sourcesContent":["import debug from \"debug\";\nimport { IAudioContext } from \"standardized-audio-context\";\nimport { Audioset } from \"../../audioset\";\nimport { ControlCommand, Effects } from \"../Control\";\nimport { AudioEngine, AudioSource, AudioTrack } from \"./Audio\";\nimport { AudioContextEngine } from \"./AudioContextEngine\";\n\nconst log = debug(\"atpls:sampler\");\n\nexport interface SampleBuffers {\n  getBuffer(clipId: string): any;\n}\n\nexport function createAudioEffects(\n  audioset: Audioset,\n  ctx: IAudioContext,\n  buffers: SampleBuffers,\n): AudioEffects {\n  const audio = new AudioContextEngine(ctx);\n  return new AudioEffects(audioset, buffers, audio);\n}\n\nclass AudioEffects implements Effects {\n  public sampler: Sampler;\n  constructor(\n    private audioset: Audioset,\n    buffers: SampleBuffers,\n    audio: AudioEngine,\n  ) {\n    this.sampler = new Sampler(audioset, buffers, audio);\n    this.sampler.initTracks(audioset.tracks);\n  }\n\n  public attach() {\n    // nothing to do?\n  }\n\n  public detach() {\n    this.sampler.disconnect();\n  }\n\n  public run(command: ControlCommand) {\n    const time = command.time;\n    switch (command.command) {\n      case \"startClip\":\n        const clipId = command.clipId;\n        const trackId = this.audioset.index.trackIdOfClip[clipId];\n        return this.sampler.start(clipId, trackId, time);\n      case \"stopClip\":\n        return this.sampler.stop(command.clipId, time);\n      default:\n    }\n  }\n}\nclass Sampler {\n  private master: AudioTrack;\n  private tracks: Record<string, AudioTrack> = {};\n  private audioSources: Record<string, AudioSource | undefined> = {};\n\n  constructor(\n    private audioset: Audioset,\n    private buffers: SampleBuffers,\n    private audio: AudioEngine,\n  ) {\n    log(\"create sampler %s\", audioset.meta.title);\n    this.master = audio.createTrack(\"master\", { volume: 0.8 });\n    audioset.tracks.forEach(track => {\n      this.tracks[track.id] = audio.createTrack(\n        track.name,\n        { volume: 1 },\n        this.master,\n      );\n    });\n  }\n  public connect() {\n    // nothing to do?\n  }\n\n  public disconnect() {\n    Object.keys(this.tracks).forEach(trackId => {\n      this.tracks[trackId].disconnect();\n    });\n  }\n\n  public start(clipId: string, trackId: string, time: number) {\n    log(\"start %s\", clipId);\n    if (this.audioSources[clipId]) {\n      return;\n    }\n\n    const buffer = this.buffers.getBuffer(clipId);\n    const track = this.tracks[trackId];\n    const source = this.audio.createAudioSource({ buffer }, track);\n    this.audioSources[clipId] = source;\n\n    source.start(time);\n  }\n\n  public stop(clipId: string, time: number) {\n    log(\"stop %s\", clipId);\n    const source = this.audioSources[clipId];\n    if (source !== undefined) {\n      source.stop(time);\n    }\n    this.audioSources[clipId] = undefined;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}