{"ast":null,"code":"import _objectSpread from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar DEFAULT_OPTIONS = {\n  buffer: null,\n  channelCount: 2,\n  channelCountMode: 'clamped-max',\n  channelInterpretation: 'speakers',\n  disableNormalization: false\n};\nexport var createConvolverNodeConstructor = function createConvolverNodeConstructor(audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(ConvolverNode, _audioNodeConstructor);\n\n    var _super = _createSuper(ConvolverNode);\n\n    function ConvolverNode(context) {\n      var _this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_OPTIONS;\n\n      _classCallCheck(this, ConvolverNode);\n\n      var nativeContext = getNativeContext(context);\n\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n      var nativeConvolverNode = createNativeConvolverNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var convolverNodeRenderer = isOffline ? createConvolverNodeRenderer() : null;\n      _this = _super.call(this, context, false, nativeConvolverNode, convolverNodeRenderer);\n      _this._isBufferNullified = false;\n      _this._nativeConvolverNode = nativeConvolverNode;\n      return _this;\n    }\n\n    _createClass(ConvolverNode, [{\n      key: \"buffer\",\n      get: function get() {\n        if (this._isBufferNullified) {\n          return null;\n        }\n\n        return this._nativeConvolverNode.buffer;\n      },\n      set: function set(value) {\n        this._nativeConvolverNode.buffer = value; // Bug #115: Safari does not allow to set the buffer to null.\n\n        if (value === null && this._nativeConvolverNode.buffer !== null) {\n          var nativeContext = this._nativeConvolverNode.context;\n          this._nativeConvolverNode.buffer = nativeContext.createBuffer(1, 1, nativeContext.sampleRate);\n          this._isBufferNullified = true;\n        } else {\n          this._isBufferNullified = false;\n        }\n      }\n    }, {\n      key: \"normalize\",\n      get: function get() {\n        return this._nativeConvolverNode.normalize;\n      },\n      set: function set(value) {\n        this._nativeConvolverNode.normalize = value;\n      }\n    }]);\n\n    return ConvolverNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/convolver-node-constructor.js"],"names":["DEFAULT_OPTIONS","buffer","channelCount","channelCountMode","channelInterpretation","disableNormalization","createConvolverNodeConstructor","audioNodeConstructor","createConvolverNodeRenderer","createNativeConvolverNode","getNativeContext","isNativeOfflineAudioContext","context","options","nativeContext","mergedOptions","nativeConvolverNode","isOffline","convolverNodeRenderer","_isBufferNullified","_nativeConvolverNode","value","createBuffer","sampleRate","normalize"],"mappings":";;;;;AAAA,IAAMA,eAAe,GAAG;AACpBC,EAAAA,MAAM,EAAE,IADY;AAEpBC,EAAAA,YAAY,EAAE,CAFM;AAGpBC,EAAAA,gBAAgB,EAAE,aAHE;AAIpBC,EAAAA,qBAAqB,EAAE,UAJH;AAKpBC,EAAAA,oBAAoB,EAAE;AALF,CAAxB;AAOA,OAAO,IAAMC,8BAA8B,GAAG,SAAjCA,8BAAiC,CAACC,oBAAD,EAAuBC,2BAAvB,EAAoDC,yBAApD,EAA+EC,gBAA/E,EAAiGC,2BAAjG,EAAiI;AAC3K;AAAA;;AAAA;;AACI,2BAAYC,OAAZ,EAAgD;AAAA;;AAAA,UAA3BC,OAA2B,uEAAjBb,eAAiB;;AAAA;;AAC5C,UAAMc,aAAa,GAAGJ,gBAAgB,CAACE,OAAD,CAAtC;;AACA,UAAMG,aAAa,mCAAQf,eAAR,GAA4Ba,OAA5B,CAAnB;;AACA,UAAMG,mBAAmB,GAAGP,yBAAyB,CAACK,aAAD,EAAgBC,aAAhB,CAArD;AACA,UAAME,SAAS,GAAGN,2BAA2B,CAACG,aAAD,CAA7C;AACA,UAAMI,qBAAqB,GAAKD,SAAD,GAAcT,2BAA2B,EAAzC,GAA8C,IAA7E;AACA,gCAAMI,OAAN,EAAe,KAAf,EAAsBI,mBAAtB,EAA2CE,qBAA3C;AACA,YAAKC,kBAAL,GAA0B,KAA1B;AACA,YAAKC,oBAAL,GAA4BJ,mBAA5B;AAR4C;AAS/C;;AAVL;AAAA;AAAA,0BAWiB;AACT,YAAI,KAAKG,kBAAT,EAA6B;AACzB,iBAAO,IAAP;AACH;;AACD,eAAO,KAAKC,oBAAL,CAA0BnB,MAAjC;AACH,OAhBL;AAAA,wBAiBeoB,KAjBf,EAiBsB;AACd,aAAKD,oBAAL,CAA0BnB,MAA1B,GAAmCoB,KAAnC,CADc,CAEd;;AACA,YAAIA,KAAK,KAAK,IAAV,IAAkB,KAAKD,oBAAL,CAA0BnB,MAA1B,KAAqC,IAA3D,EAAiE;AAC7D,cAAMa,aAAa,GAAG,KAAKM,oBAAL,CAA0BR,OAAhD;AACA,eAAKQ,oBAAL,CAA0BnB,MAA1B,GAAmCa,aAAa,CAACQ,YAAd,CAA2B,CAA3B,EAA8B,CAA9B,EAAiCR,aAAa,CAACS,UAA/C,CAAnC;AACA,eAAKJ,kBAAL,GAA0B,IAA1B;AACH,SAJD,MAKK;AACD,eAAKA,kBAAL,GAA0B,KAA1B;AACH;AACJ;AA5BL;AAAA;AAAA,0BA6BoB;AACZ,eAAO,KAAKC,oBAAL,CAA0BI,SAAjC;AACH,OA/BL;AAAA,wBAgCkBH,KAhClB,EAgCyB;AACjB,aAAKD,oBAAL,CAA0BI,SAA1B,GAAsCH,KAAtC;AACH;AAlCL;;AAAA;AAAA,IAAmCd,oBAAnC;AAoCH,CArCM","sourcesContent":["const DEFAULT_OPTIONS = {\n    buffer: null,\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    disableNormalization: false\n};\nexport const createConvolverNodeConstructor = (audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class ConvolverNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeConvolverNode = createNativeConvolverNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const convolverNodeRenderer = ((isOffline) ? createConvolverNodeRenderer() : null);\n            super(context, false, nativeConvolverNode, convolverNodeRenderer);\n            this._isBufferNullified = false;\n            this._nativeConvolverNode = nativeConvolverNode;\n        }\n        get buffer() {\n            if (this._isBufferNullified) {\n                return null;\n            }\n            return this._nativeConvolverNode.buffer;\n        }\n        set buffer(value) {\n            this._nativeConvolverNode.buffer = value;\n            // Bug #115: Safari does not allow to set the buffer to null.\n            if (value === null && this._nativeConvolverNode.buffer !== null) {\n                const nativeContext = this._nativeConvolverNode.context;\n                this._nativeConvolverNode.buffer = nativeContext.createBuffer(1, 1, nativeContext.sampleRate);\n                this._isBufferNullified = true;\n            }\n            else {\n                this._isBufferNullified = false;\n            }\n        }\n        get normalize() {\n            return this._nativeConvolverNode.normalize;\n        }\n        set normalize(value) {\n            this._nativeConvolverNode.normalize = value;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/convolver-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}