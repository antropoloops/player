{"ast":null,"code":"var pi = Math.PI,\n    tau = 2 * pi,\n    quarterPi = pi / 4,\n    radians = pi / 180,\n    abs = Math.abs,\n    atan2 = Math.atan2,\n    cos = Math.cos,\n    sin = Math.sin;\n\nfunction halfArea(ring, closed) {\n  var i = 0,\n      n = ring.length,\n      sum = 0,\n      point = ring[closed ? i++ : n - 1],\n      lambda0,\n      lambda1 = point[0] * radians,\n      phi1 = point[1] * radians / 2 + quarterPi,\n      cosPhi0,\n      cosPhi1 = cos(phi1),\n      sinPhi0,\n      sinPhi1 = sin(phi1);\n\n  for (; i < n; ++i) {\n    point = ring[i];\n    lambda0 = lambda1, lambda1 = point[0] * radians;\n    phi1 = point[1] * radians / 2 + quarterPi;\n    cosPhi0 = cosPhi1, cosPhi1 = cos(phi1);\n    sinPhi0 = sinPhi1, sinPhi1 = sin(phi1); // Spherical excess E for a spherical triangle with vertices: south pole,\n    // previous point, current point.  Uses a formula derived from Cagnoli’s\n    // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n    // See https://github.com/d3/d3-geo/blob/master/README.md#geoArea\n\n    var dLambda = lambda1 - lambda0,\n        sdLambda = dLambda >= 0 ? 1 : -1,\n        adLambda = sdLambda * dLambda,\n        k = sinPhi0 * sinPhi1,\n        u = cosPhi0 * cosPhi1 + k * cos(adLambda),\n        v = k * sdLambda * sin(adLambda);\n    sum += atan2(v, u);\n  }\n\n  return sum;\n}\n\nexport function sphericalRingArea(ring, interior) {\n  var sum = halfArea(ring, true);\n  if (interior) sum *= -1;\n  return (sum < 0 ? tau + sum : sum) * 2;\n}\nexport function sphericalTriangleArea(t) {\n  return abs(halfArea(t, false)) * 2;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/topojson-simplify/src/spherical.js"],"names":["pi","Math","PI","tau","quarterPi","radians","abs","atan2","cos","sin","halfArea","ring","closed","i","n","length","sum","point","lambda0","lambda1","phi1","cosPhi0","cosPhi1","sinPhi0","sinPhi1","dLambda","sdLambda","adLambda","k","u","v","sphericalRingArea","interior","sphericalTriangleArea","t"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,IAAI,CAACC,EAAd;AAAA,IACIC,GAAG,GAAG,IAAIH,EADd;AAAA,IAEII,SAAS,GAAGJ,EAAE,GAAG,CAFrB;AAAA,IAGIK,OAAO,GAAGL,EAAE,GAAG,GAHnB;AAAA,IAIIM,GAAG,GAAGL,IAAI,CAACK,GAJf;AAAA,IAKIC,KAAK,GAAGN,IAAI,CAACM,KALjB;AAAA,IAMIC,GAAG,GAAGP,IAAI,CAACO,GANf;AAAA,IAOIC,GAAG,GAAGR,IAAI,CAACQ,GAPf;;AASA,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,MAAxB,EAAgC;AAC9B,MAAIC,CAAC,GAAG,CAAR;AAAA,MACIC,CAAC,GAAGH,IAAI,CAACI,MADb;AAAA,MAEIC,GAAG,GAAG,CAFV;AAAA,MAGIC,KAAK,GAAGN,IAAI,CAACC,MAAM,GAAGC,CAAC,EAAJ,GAASC,CAAC,GAAG,CAApB,CAHhB;AAAA,MAIII,OAJJ;AAAA,MAIaC,OAAO,GAAGF,KAAK,CAAC,CAAD,CAAL,GAAWZ,OAJlC;AAAA,MAKIe,IAAI,GAAIH,KAAK,CAAC,CAAD,CAAL,GAAWZ,OAAZ,GAAuB,CAAvB,GAA2BD,SALtC;AAAA,MAMIiB,OANJ;AAAA,MAMaC,OAAO,GAAGd,GAAG,CAACY,IAAD,CAN1B;AAAA,MAOIG,OAPJ;AAAA,MAOaC,OAAO,GAAGf,GAAG,CAACW,IAAD,CAP1B;;AASA,SAAOP,CAAC,GAAGC,CAAX,EAAc,EAAED,CAAhB,EAAmB;AACjBI,IAAAA,KAAK,GAAGN,IAAI,CAACE,CAAD,CAAZ;AACAK,IAAAA,OAAO,GAAGC,OAAV,EAAmBA,OAAO,GAAGF,KAAK,CAAC,CAAD,CAAL,GAAWZ,OAAxC;AACAe,IAAAA,IAAI,GAAIH,KAAK,CAAC,CAAD,CAAL,GAAWZ,OAAZ,GAAuB,CAAvB,GAA2BD,SAAlC;AACAiB,IAAAA,OAAO,GAAGC,OAAV,EAAmBA,OAAO,GAAGd,GAAG,CAACY,IAAD,CAAhC;AACAG,IAAAA,OAAO,GAAGC,OAAV,EAAmBA,OAAO,GAAGf,GAAG,CAACW,IAAD,CAAhC,CALiB,CAOjB;AACA;AACA;AACA;;AACA,QAAIK,OAAO,GAAGN,OAAO,GAAGD,OAAxB;AAAA,QACIQ,QAAQ,GAAGD,OAAO,IAAI,CAAX,GAAe,CAAf,GAAmB,CAAC,CADnC;AAAA,QAEIE,QAAQ,GAAGD,QAAQ,GAAGD,OAF1B;AAAA,QAGIG,CAAC,GAAGL,OAAO,GAAGC,OAHlB;AAAA,QAIIK,CAAC,GAAGR,OAAO,GAAGC,OAAV,GAAoBM,CAAC,GAAGpB,GAAG,CAACmB,QAAD,CAJnC;AAAA,QAKIG,CAAC,GAAGF,CAAC,GAAGF,QAAJ,GAAejB,GAAG,CAACkB,QAAD,CAL1B;AAMAX,IAAAA,GAAG,IAAIT,KAAK,CAACuB,CAAD,EAAID,CAAJ,CAAZ;AACD;;AAED,SAAOb,GAAP;AACD;;AAED,OAAO,SAASe,iBAAT,CAA2BpB,IAA3B,EAAiCqB,QAAjC,EAA2C;AAChD,MAAIhB,GAAG,GAAGN,QAAQ,CAACC,IAAD,EAAO,IAAP,CAAlB;AACA,MAAIqB,QAAJ,EAAchB,GAAG,IAAI,CAAC,CAAR;AACd,SAAO,CAACA,GAAG,GAAG,CAAN,GAAUb,GAAG,GAAGa,GAAhB,GAAsBA,GAAvB,IAA8B,CAArC;AACD;AAED,OAAO,SAASiB,qBAAT,CAA+BC,CAA/B,EAAkC;AACvC,SAAO5B,GAAG,CAACI,QAAQ,CAACwB,CAAD,EAAI,KAAJ,CAAT,CAAH,GAA0B,CAAjC;AACD","sourcesContent":["var pi = Math.PI,\n    tau = 2 * pi,\n    quarterPi = pi / 4,\n    radians = pi / 180,\n    abs = Math.abs,\n    atan2 = Math.atan2,\n    cos = Math.cos,\n    sin = Math.sin;\n\nfunction halfArea(ring, closed) {\n  var i = 0,\n      n = ring.length,\n      sum = 0,\n      point = ring[closed ? i++ : n - 1],\n      lambda0, lambda1 = point[0] * radians,\n      phi1 = (point[1] * radians) / 2 + quarterPi,\n      cosPhi0, cosPhi1 = cos(phi1),\n      sinPhi0, sinPhi1 = sin(phi1);\n\n  for (; i < n; ++i) {\n    point = ring[i];\n    lambda0 = lambda1, lambda1 = point[0] * radians;\n    phi1 = (point[1] * radians) / 2 + quarterPi;\n    cosPhi0 = cosPhi1, cosPhi1 = cos(phi1);\n    sinPhi0 = sinPhi1, sinPhi1 = sin(phi1);\n\n    // Spherical excess E for a spherical triangle with vertices: south pole,\n    // previous point, current point.  Uses a formula derived from Cagnoli’s\n    // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n    // See https://github.com/d3/d3-geo/blob/master/README.md#geoArea\n    var dLambda = lambda1 - lambda0,\n        sdLambda = dLambda >= 0 ? 1 : -1,\n        adLambda = sdLambda * dLambda,\n        k = sinPhi0 * sinPhi1,\n        u = cosPhi0 * cosPhi1 + k * cos(adLambda),\n        v = k * sdLambda * sin(adLambda);\n    sum += atan2(v, u);\n  }\n\n  return sum;\n}\n\nexport function sphericalRingArea(ring, interior) {\n  var sum = halfArea(ring, true);\n  if (interior) sum *= -1;\n  return (sum < 0 ? tau + sum : sum) * 2;\n}\n\nexport function sphericalTriangleArea(t) {\n  return abs(halfArea(t, false)) * 2;\n}\n"]},"metadata":{},"sourceType":"module"}