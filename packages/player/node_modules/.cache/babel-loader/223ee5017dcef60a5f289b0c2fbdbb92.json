{"ast":null,"code":"import _classCallCheck from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import debug from\"debug\";import{createSampler}from\"../sampler\";var log=debug(\"atpls:sampler\");export function createAudioEffects(audioset,ctx,buffers){return new AudioEffects(audioset,ctx,buffers);}var AudioEffects=/*#__PURE__*/function(){function AudioEffects(audioset,ctx,buffers){var _this=this;_classCallCheck(this,AudioEffects);this.audioset=audioset;this.sampler=void 0;log(\"init AudioEffects %s\",audioset.meta.title);this.sampler=createSampler(buffers,ctx);// init tracks\naudioset.tracks.forEach(function(track){_this.sampler.createTrack(track);});}_createClass(AudioEffects,[{key:\"attach\",value:function attach(){// nothing to do?\n}},{key:\"detach\",value:function detach(){this.sampler.disconnect();}},{key:\"run\",value:function run(command){var time=command.time;switch(command.command){case\"startClip\":var clipId=command.clipId;var trackId=this.audioset.index.trackIdOfClip[clipId];log(\"start %s %s\",clipId,trackId);return this.sampler.start(clipId,trackId,time);case\"stopClip\":log(\"stop %s\",command.clipId);return this.sampler.stop(command.clipId,time);default:}}}]);return AudioEffects;}();","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/packages/player/src/player/AudioEffects.ts"],"names":["debug","createSampler","log","createAudioEffects","audioset","ctx","buffers","AudioEffects","sampler","meta","title","tracks","forEach","track","createTrack","disconnect","command","time","clipId","trackId","index","trackIdOfClip","start","stop"],"mappings":"sTAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAGA,OAASC,aAAT,KAAsD,YAAtD,CAGA,GAAMC,CAAAA,GAAG,CAAGF,KAAK,CAAC,eAAD,CAAjB,CAEA,MAAO,SAASG,CAAAA,kBAAT,CACLC,QADK,CAELC,GAFK,CAGLC,OAHK,CAIS,CACd,MAAO,IAAIC,CAAAA,YAAJ,CAAiBH,QAAjB,CAA2BC,GAA3B,CAAgCC,OAAhC,CAAP,CACD,C,GAEKC,CAAAA,Y,yBAEJ,sBACUH,QADV,CAEEC,GAFF,CAGEC,OAHF,CAIE,wDAHQF,QAGR,CAHQA,QAGR,MALKI,OAKL,QACAN,GAAG,CAAC,sBAAD,CAAyBE,QAAQ,CAACK,IAAT,CAAcC,KAAvC,CAAH,CACA,KAAKF,OAAL,CAAeP,aAAa,CAACK,OAAD,CAAUD,GAAV,CAA5B,CACA;AACAD,QAAQ,CAACO,MAAT,CAAgBC,OAAhB,CAAwB,SAACC,KAAD,CAAW,CACjC,KAAI,CAACL,OAAL,CAAaM,WAAb,CAAyBD,KAAzB,EACD,CAFD,EAGD,C,gEAEe,CACd;AACD,C,uCAEe,CACd,KAAKL,OAAL,CAAaO,UAAb,GACD,C,gCAEUC,O,CAAyB,CAClC,GAAMC,CAAAA,IAAI,CAAGD,OAAO,CAACC,IAArB,CACA,OAAQD,OAAO,CAACA,OAAhB,EACE,IAAK,WAAL,CACE,GAAME,CAAAA,MAAM,CAAGF,OAAO,CAACE,MAAvB,CACA,GAAMC,CAAAA,OAAO,CAAG,KAAKf,QAAL,CAAcgB,KAAd,CAAoBC,aAApB,CAAkCH,MAAlC,CAAhB,CACAhB,GAAG,CAAC,aAAD,CAAgBgB,MAAhB,CAAwBC,OAAxB,CAAH,CACA,MAAO,MAAKX,OAAL,CAAac,KAAb,CAAmBJ,MAAnB,CAA2BC,OAA3B,CAAoCF,IAApC,CAAP,CACF,IAAK,UAAL,CACEf,GAAG,CAAC,SAAD,CAAYc,OAAO,CAACE,MAApB,CAAH,CACA,MAAO,MAAKV,OAAL,CAAae,IAAb,CAAkBP,OAAO,CAACE,MAA1B,CAAkCD,IAAlC,CAAP,CACF,QATF,CAWD,C","sourcesContent":["import debug from \"debug\";\nimport { IAudioContext } from \"standardized-audio-context\";\nimport { Audioset } from \"../audioset\";\nimport { createSampler, SampleBuffers, Sampler } from \"../sampler\";\nimport { ControlCommand, Effects } from \"./Control\";\n\nconst log = debug(\"atpls:sampler\");\n\nexport function createAudioEffects(\n  audioset: Audioset,\n  ctx: IAudioContext,\n  buffers: SampleBuffers\n): AudioEffects {\n  return new AudioEffects(audioset, ctx, buffers);\n}\n\nclass AudioEffects implements Effects {\n  public sampler: Sampler;\n  constructor(\n    private audioset: Audioset,\n    ctx: IAudioContext,\n    buffers: SampleBuffers\n  ) {\n    log(\"init AudioEffects %s\", audioset.meta.title);\n    this.sampler = createSampler(buffers, ctx);\n    // init tracks\n    audioset.tracks.forEach((track) => {\n      this.sampler.createTrack(track);\n    });\n  }\n\n  public attach() {\n    // nothing to do?\n  }\n\n  public detach() {\n    this.sampler.disconnect();\n  }\n\n  public run(command: ControlCommand) {\n    const time = command.time;\n    switch (command.command) {\n      case \"startClip\":\n        const clipId = command.clipId;\n        const trackId = this.audioset.index.trackIdOfClip[clipId];\n        log(\"start %s %s\", clipId, trackId);\n        return this.sampler.start(clipId, trackId, time);\n      case \"stopClip\":\n        log(\"stop %s\", command.clipId);\n        return this.sampler.stop(command.clipId, time);\n      default:\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}