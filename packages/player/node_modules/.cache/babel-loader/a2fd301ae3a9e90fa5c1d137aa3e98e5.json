{"ast":null,"code":"import _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/dani/Antropoloops/atpls-player/src/ui/Player/Controller.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { player } from \"../../player\";\nimport \"./Controller.css\";\nimport { Track } from \"./Track\";\nimport { useKeyboardListener } from \"./useKeyboardListener\";\nexport const Controller = ({\n  audioset\n}) => {\n  useKeyboardListener();\n  const state = useControlState();\n\n  if (!audioset || !audioset.tracks) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"Audioset not loaded\");\n  }\n\n  return React.createElement(\"div\", {\n    className: \"Controller\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, audioset.tracks.map(track => React.createElement(Track, {\n    key: track.id,\n    track: track,\n    audioset: audioset,\n    state: state,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  })));\n};\n\nconst Tracks = ({\n  audioset,\n  state\n}) => React.createElement(React.Fragment, null, audioset.tracks.map(track => React.createElement(Track, {\n  key: track.id,\n  track: track,\n  audioset: audioset,\n  state: state,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38\n  },\n  __self: this\n})));\n\nfunction useControlState() {\n  const _useState = useState(player.control.getState()),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  useEffect(() => player.onControlStateChanged(controlState => {\n    setState(controlState);\n  }));\n  return state;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/Controller.tsx"],"names":["React","useEffect","useState","player","Track","useKeyboardListener","Controller","audioset","state","useControlState","tracks","map","track","id","Tracks","control","getState","setState","onControlStateChanged","controlState"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,SAASC,MAAT,QAAuB,cAAvB;AAEA,OAAO,kBAAP;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,SAASC,mBAAT,QAAoC,uBAApC;AAMA,OAAO,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmC;AAC3DF,EAAAA,mBAAmB;AAEnB,QAAMG,KAAK,GAAGC,eAAe,EAA7B;;AAEA,MAAI,CAACF,QAAD,IAAa,CAACA,QAAQ,CAACG,MAA3B,EAAmC;AACjC,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAP;AACD;;AAED,SACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,QAAQ,CAACG,MAAT,CAAgBC,GAAhB,CAAoBC,KAAK,IACxB,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAEA,KAAK,CAACC,EAAlB;AAAsB,IAAA,KAAK,EAAED,KAA7B;AAAoC,IAAA,QAAQ,EAAEL,QAA9C;AAAwD,IAAA,KAAK,EAAEC,KAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CADF;AAOD,CAhBM;;AAsBP,MAAMM,MAAM,GAAG,CAAC;AAAEP,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KACb,0CACGD,QAAQ,CAACG,MAAT,CAAgBC,GAAhB,CAAoBC,KAAK,IACxB,oBAAC,KAAD;AAAO,EAAA,GAAG,EAAEA,KAAK,CAACC,EAAlB;AAAsB,EAAA,KAAK,EAAED,KAA7B;AAAoC,EAAA,QAAQ,EAAEL,QAA9C;AAAwD,EAAA,KAAK,EAAEC,KAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADD,CADH,CADF;;AAQA,SAASC,eAAT,GAAyC;AAAA,oBACbP,QAAQ,CAACC,MAAM,CAACY,OAAP,CAAeC,QAAf,EAAD,CADK;AAAA;AAAA,QAChCR,KADgC;AAAA,QACzBS,QADyB;;AAGvChB,EAAAA,SAAS,CAAC,MACRE,MAAM,CAACe,qBAAP,CAA6BC,YAAY,IAAI;AAC3CF,IAAAA,QAAQ,CAACE,YAAD,CAAR;AACD,GAFD,CADO,CAAT;AAKA,SAAOX,KAAP;AACD","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Audioset } from \"../../audioset\";\nimport { player } from \"../../player\";\nimport { ControlState } from \"../../player/AudiosetControl\";\nimport \"./Controller.css\";\nimport { Track } from \"./Track\";\nimport { useKeyboardListener } from \"./useKeyboardListener\";\n\ninterface ControllerProps {\n  audioset: Audioset;\n}\n\nexport const Controller = ({ audioset }: ControllerProps) => {\n  useKeyboardListener();\n\n  const state = useControlState();\n\n  if (!audioset || !audioset.tracks) {\n    return <div>Audioset not loaded</div>;\n  }\n\n  return (\n    <div className=\"Controller\">\n      {audioset.tracks.map(track => (\n        <Track key={track.id} track={track} audioset={audioset} state={state} />\n      ))}\n    </div>\n  );\n};\n\ninterface TracksProps {\n  audioset: Audioset;\n  state: ControlState;\n}\nconst Tracks = ({ audioset, state }: ControllerProps) => (\n  <>\n    {audioset.tracks.map(track => (\n      <Track key={track.id} track={track} audioset={audioset} state={state} />\n    ))}\n  </>\n);\n\nfunction useControlState(): ControlState {\n  const [state, setState] = useState(player.control.getState());\n\n  useEffect(() =>\n    player.onControlStateChanged(controlState => {\n      setState(controlState);\n    }),\n  );\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}