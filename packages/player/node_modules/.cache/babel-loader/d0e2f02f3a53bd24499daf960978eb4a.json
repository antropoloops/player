{"ast":null,"code":"export const testAudioNodeDisconnectMethodSupport = nativeAudioContext => {\n  return new Promise(resolve => {\n    const analyzer = nativeAudioContext.createScriptProcessor(256, 1, 1);\n    const dummy = nativeAudioContext.createGain(); // Bug #95: Safari does not play one sample buffers.\n\n    const ones = nativeAudioContext.createBuffer(1, 2, 44100);\n    const channelData = ones.getChannelData(0);\n    channelData[0] = 1;\n    channelData[1] = 1;\n    const source = nativeAudioContext.createBufferSource();\n    source.buffer = ones;\n    source.loop = true;\n    source.connect(analyzer).connect(nativeAudioContext.destination);\n    source.connect(dummy);\n    source.disconnect(dummy);\n\n    analyzer.onaudioprocess = event => {\n      const chnnlDt = event.inputBuffer.getChannelData(0);\n\n      if (Array.prototype.some.call(chnnlDt, sample => sample === 1)) {\n        resolve(true);\n      } else {\n        resolve(false);\n      }\n\n      source.stop();\n      analyzer.onaudioprocess = null; // tslint:disable-line:deprecation\n\n      source.disconnect(analyzer);\n      analyzer.disconnect(nativeAudioContext.destination);\n    };\n\n    source.start();\n  });\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/helpers/test-audio-node-disconnect-method-support.js"],"names":["testAudioNodeDisconnectMethodSupport","nativeAudioContext","Promise","resolve","analyzer","createScriptProcessor","dummy","createGain","ones","createBuffer","channelData","getChannelData","source","createBufferSource","buffer","loop","connect","destination","disconnect","onaudioprocess","event","chnnlDt","inputBuffer","Array","prototype","some","call","sample","stop","start"],"mappings":"AAAA,OAAO,MAAMA,oCAAoC,GAAIC,kBAAD,IAAwB;AACxE,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC5B,UAAMC,QAAQ,GAAGH,kBAAkB,CAACI,qBAAnB,CAAyC,GAAzC,EAA8C,CAA9C,EAAiD,CAAjD,CAAjB;AACA,UAAMC,KAAK,GAAGL,kBAAkB,CAACM,UAAnB,EAAd,CAF4B,CAG5B;;AACA,UAAMC,IAAI,GAAGP,kBAAkB,CAACQ,YAAnB,CAAgC,CAAhC,EAAmC,CAAnC,EAAsC,KAAtC,CAAb;AACA,UAAMC,WAAW,GAAGF,IAAI,CAACG,cAAL,CAAoB,CAApB,CAApB;AACAD,IAAAA,WAAW,CAAC,CAAD,CAAX,GAAiB,CAAjB;AACAA,IAAAA,WAAW,CAAC,CAAD,CAAX,GAAiB,CAAjB;AACA,UAAME,MAAM,GAAGX,kBAAkB,CAACY,kBAAnB,EAAf;AACAD,IAAAA,MAAM,CAACE,MAAP,GAAgBN,IAAhB;AACAI,IAAAA,MAAM,CAACG,IAAP,GAAc,IAAd;AACAH,IAAAA,MAAM,CACDI,OADL,CACaZ,QADb,EAEKY,OAFL,CAEaf,kBAAkB,CAACgB,WAFhC;AAGAL,IAAAA,MAAM,CAACI,OAAP,CAAeV,KAAf;AACAM,IAAAA,MAAM,CAACM,UAAP,CAAkBZ,KAAlB;;AACAF,IAAAA,QAAQ,CAACe,cAAT,GAA2BC,KAAD,IAAW;AACjC,YAAMC,OAAO,GAAGD,KAAK,CAACE,WAAN,CAAkBX,cAAlB,CAAiC,CAAjC,CAAhB;;AACA,UAAIY,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBC,IAArB,CAA0BL,OAA1B,EAAoCM,MAAD,IAAYA,MAAM,KAAK,CAA1D,CAAJ,EAAkE;AAC9DxB,QAAAA,OAAO,CAAC,IAAD,CAAP;AACH,OAFD,MAGK;AACDA,QAAAA,OAAO,CAAC,KAAD,CAAP;AACH;;AACDS,MAAAA,MAAM,CAACgB,IAAP;AACAxB,MAAAA,QAAQ,CAACe,cAAT,GAA0B,IAA1B,CATiC,CASD;;AAChCP,MAAAA,MAAM,CAACM,UAAP,CAAkBd,QAAlB;AACAA,MAAAA,QAAQ,CAACc,UAAT,CAAoBjB,kBAAkB,CAACgB,WAAvC;AACH,KAZD;;AAaAL,IAAAA,MAAM,CAACiB,KAAP;AACH,GA9BM,CAAP;AA+BH,CAhCM","sourcesContent":["export const testAudioNodeDisconnectMethodSupport = (nativeAudioContext) => {\n    return new Promise((resolve) => {\n        const analyzer = nativeAudioContext.createScriptProcessor(256, 1, 1);\n        const dummy = nativeAudioContext.createGain();\n        // Bug #95: Safari does not play one sample buffers.\n        const ones = nativeAudioContext.createBuffer(1, 2, 44100);\n        const channelData = ones.getChannelData(0);\n        channelData[0] = 1;\n        channelData[1] = 1;\n        const source = nativeAudioContext.createBufferSource();\n        source.buffer = ones;\n        source.loop = true;\n        source\n            .connect(analyzer)\n            .connect(nativeAudioContext.destination);\n        source.connect(dummy);\n        source.disconnect(dummy);\n        analyzer.onaudioprocess = (event) => {\n            const chnnlDt = event.inputBuffer.getChannelData(0);\n            if (Array.prototype.some.call(chnnlDt, (sample) => sample === 1)) {\n                resolve(true);\n            }\n            else {\n                resolve(false);\n            }\n            source.stop();\n            analyzer.onaudioprocess = null; // tslint:disable-line:deprecation\n            source.disconnect(analyzer);\n            analyzer.disconnect(nativeAudioContext.destination);\n        };\n        source.start();\n    });\n};\n//# sourceMappingURL=/build/es2018/helpers/test-audio-node-disconnect-method-support.js.map"]},"metadata":{},"sourceType":"module"}