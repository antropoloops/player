{"ast":null,"code":"import _classCallCheck from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import{EmptyAudioset}from\"../audioset\";import{AudiosetLoader}from\"../audioset/AudiosetLoader\";import{DebugAudioEngine}from\"./Audio\";import{AudiosetControl}from\"./AudiosetControl\";import{Emitter}from\"./Emitter\";import{ResourceLoader}from\"./ResourceLoader\";import{Sampler}from\"./Sampler\";/**\n * A player is the facade for the rest of the components:\n * - Loader: load audioset and resources\n * - Control: determines how to play clips\n * - Pads: receive pad events\n * - Params: receive param change events\n * - Keyboard: receive keyboard events\n * - Sampler: play the audio\n */export var Player=/*#__PURE__*/function(){// private //\nfunction Player(){var _this=this;_classCallCheck(this,Player);this.loader=void 0;this.control=void 0;this.resources=void 0;this.sampler=void 0;this.noSampler=void 0;this.noControl=void 0;this.noResources=void 0;this.controlListener=void 0;this.resourceListener=void 0;this.audiosetChanged=new Emitter();this.audiosetLoadStatusChanged=new Emitter();this.controlStateChanged=new Emitter();this.controlCommand=new Emitter();this.resourceStatusChanged=new Emitter();this.fetchAudio=void 0;this.audio=new DebugAudioEngine();this.audioset=EmptyAudioset;this.loader=new AudiosetLoader(function(status){return _this.setAudiosetLoadStatus(status);});this.controlListener={onControlStateChanged:function onControlStateChanged(state){return _this.emitControlState(state);},onControlCommand:function onControlCommand(command){return _this.runCommand(command);}};this.resourceListener=function(status){_this.resourceStatusChanged.emit(status);};this.noControl=this.control=new AudiosetControl(this.audioset,this.controlListener);this.noResources=this.resources=new ResourceLoader(this.audioset,this.resourceListener);this.noSampler=this.sampler=new Sampler(this.audioset,this.resources,this.audio);}_createClass(Player,[{key:\"setFetchAudio\",value:function setFetchAudio(fetch){this.fetchAudio=fetch;this.resources.fetch=fetch;}},{key:\"setAudioEngine\",value:function setAudioEngine(audio){this.audio=audio;// this.sampler.dispose()\nthis.sampler=new Sampler(this.audioset,this.resources,this.audio);}},{key:\"onResourceStatusChanged\",value:function onResourceStatusChanged(listener){return this.resourceStatusChanged.on(listener);}},{key:\"onControlStateChanged\",value:function onControlStateChanged(listener){return this.controlStateChanged.on(listener);}},{key:\"onCommand\",value:function onCommand(listener){return this.controlCommand.on(listener);}//// PRIVATE /////\n// allow pub/sub of contro state\n},{key:\"emitControlState\",value:function emitControlState(controlState){this.controlStateChanged.emit(controlState);}// allows pub/sub of commands (for visuals)\n},{key:\"runCommand\",value:function runCommand(command){this.sampler.run(command);this.controlCommand.emit(command);}},{key:\"setAudiosetLoadStatus\",value:function setAudiosetLoadStatus(status){this.audiosetLoadStatusChanged.emit(status);if(status.status===\"ready\"){this.setDelegates(status.audioset);this.audiosetChanged.emit(status.audioset);}}},{key:\"setDelegates\",value:function setDelegates(audioset){if(isAudiosetPlay(audioset)){this.audioset=audioset;this.control=new AudiosetControl(audioset,this.controlListener);this.resources=new ResourceLoader(audioset,this.resourceListener);this.sampler=new Sampler(audioset,this.resources,this.audio);}else{this.control=this.noControl;this.sampler=this.noSampler;this.resources=this.noResources;}if(this.fetchAudio){this.resources.fetch=this.fetchAudio;}}}]);return Player;}();function isAudiosetPlay(audioset){return audioset.type===\"audioset\";}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/Player.ts"],"names":["EmptyAudioset","AudiosetLoader","DebugAudioEngine","AudiosetControl","Emitter","ResourceLoader","Sampler","Player","loader","control","resources","sampler","noSampler","noControl","noResources","controlListener","resourceListener","audiosetChanged","audiosetLoadStatusChanged","controlStateChanged","controlCommand","resourceStatusChanged","fetchAudio","audio","audioset","status","setAudiosetLoadStatus","onControlStateChanged","state","emitControlState","onControlCommand","command","runCommand","emit","fetch","listener","on","controlState","run","setDelegates","isAudiosetPlay","type"],"mappings":"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","sourcesContent":["import { Audioset, AudiosetData, EmptyAudioset } from \"../audioset\";\nimport { AudiosetLoader, AudiosetLoadStatus } from \"../audioset/AudiosetLoader\";\nimport { AudioEngine, DebugAudioEngine } from \"./Audio\";\nimport {\n  AudiosetControl,\n  ControlCommand,\n  ControlListener,\n  ControlState,\n} from \"./AudiosetControl\";\nimport { Emitter, Listener } from \"./Emitter\";\nimport {\n  FetchAudio,\n  ResourceLoader,\n  ResourceLoadStatus,\n} from \"./ResourceLoader\";\nimport { Sampler } from \"./Sampler\";\n\n/**\n * A player is the facade for the rest of the components:\n * - Loader: load audioset and resources\n * - Control: determines how to play clips\n * - Pads: receive pad events\n * - Params: receive param change events\n * - Keyboard: receive keyboard events\n * - Sampler: play the audio\n */\nexport class Player {\n  public readonly loader: AudiosetLoader;\n  public control: AudiosetControl;\n  public resources: ResourceLoader;\n\n  // private //\n  private sampler: Sampler;\n\n  private noSampler: Sampler;\n  private noControl: AudiosetControl;\n  private noResources: ResourceLoader;\n\n  private readonly controlListener: ControlListener;\n  private readonly resourceListener: (status: ResourceLoadStatus) => void;\n\n  private readonly audiosetChanged = new Emitter<AudiosetData>();\n  private readonly audiosetLoadStatusChanged = new Emitter<\n    AudiosetLoadStatus\n  >();\n  private readonly controlStateChanged = new Emitter<ControlState>();\n  private readonly controlCommand = new Emitter<ControlCommand>();\n  private readonly resourceStatusChanged = new Emitter<ResourceLoadStatus>();\n\n  private fetchAudio?: FetchAudio;\n  private audio: AudioEngine = new DebugAudioEngine();\n  private audioset: Audioset = EmptyAudioset;\n\n  constructor() {\n    this.loader = new AudiosetLoader(status =>\n      this.setAudiosetLoadStatus(status),\n    );\n    this.controlListener = {\n      onControlStateChanged: state => this.emitControlState(state),\n      onControlCommand: command => this.runCommand(command),\n    };\n    this.resourceListener = (status: ResourceLoadStatus) => {\n      this.resourceStatusChanged.emit(status);\n    };\n    this.noControl = this.control = new AudiosetControl(\n      this.audioset,\n      this.controlListener,\n    );\n    this.noResources = this.resources = new ResourceLoader(\n      this.audioset,\n      this.resourceListener,\n    );\n    this.noSampler = this.sampler = new Sampler(\n      this.audioset,\n      this.resources,\n      this.audio,\n    );\n  }\n\n  public setFetchAudio(fetch: FetchAudio) {\n    this.fetchAudio = fetch;\n    this.resources.fetch = fetch;\n  }\n\n  public setAudioEngine(audio: AudioEngine) {\n    this.audio = audio;\n    // this.sampler.dispose()\n    this.sampler = new Sampler(this.audioset, this.resources, this.audio);\n  }\n\n  public onResourceStatusChanged(listener: Listener<ResourceLoadStatus>) {\n    return this.resourceStatusChanged.on(listener);\n  }\n\n  public onControlStateChanged(listener: Listener<ControlState>) {\n    return this.controlStateChanged.on(listener);\n  }\n\n  public onCommand(listener: Listener<ControlCommand>) {\n    return this.controlCommand.on(listener);\n  }\n\n  //// PRIVATE /////\n\n  // allow pub/sub of contro state\n  private emitControlState(controlState: ControlState) {\n    this.controlStateChanged.emit(controlState);\n  }\n\n  // allows pub/sub of commands (for visuals)\n  private runCommand(command: ControlCommand) {\n    this.sampler.run(command);\n    this.controlCommand.emit(command);\n  }\n  private setAudiosetLoadStatus(status: AudiosetLoadStatus) {\n    this.audiosetLoadStatusChanged.emit(status);\n    if (status.status === \"ready\") {\n      this.setDelegates(status.audioset);\n      this.audiosetChanged.emit(status.audioset);\n    }\n  }\n\n  private setDelegates(audioset: AudiosetData) {\n    if (isAudiosetPlay(audioset)) {\n      this.audioset = audioset;\n      this.control = new AudiosetControl(audioset, this.controlListener);\n      this.resources = new ResourceLoader(audioset, this.resourceListener);\n      this.sampler = new Sampler(audioset, this.resources, this.audio);\n    } else {\n      this.control = this.noControl;\n      this.sampler = this.noSampler;\n      this.resources = this.noResources;\n    }\n    if (this.fetchAudio) {\n      this.resources.fetch = this.fetchAudio;\n    }\n  }\n}\n\nfunction isAudiosetPlay(audioset: AudiosetData): audioset is Audioset {\n  return audioset.type === \"audioset\";\n}\n"]},"metadata":{},"sourceType":"module"}