{"ast":null,"code":"import _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as topojson from \"topojson\";\nimport { getAlbumHeight } from \"./dimensions\";\nimport drawAlbum from \"./drawAlbum\";\nimport drawCircle from \"./drawCircle\";\nimport { calculateMapScale, createMapProjector, drawMap } from \"./drawMap\";\nimport { createPanelProjector, drawPanel } from \"./drawPanel\";\nimport drawRefLine from \"./drawRefLine\";\nimport drawWave from \"./drawWave\";\n\nconst remove = (name, group) => {\n  const value = group[name];\n\n  if (value) {\n    value.remove();\n    group[name] = null;\n  }\n};\n\nfunction createProjector(visuals, dimensions) {\n  const width = dimensions.width,\n        height = dimensions.height;\n  const albumsHeight = getAlbumHeight(width);\n  const scale = calculateMapScale(width, height - albumsHeight);\n\n  if (visuals.mode === \"map\") {\n    const _visuals$geomap = visuals.geomap,\n          scaleFactor = _visuals$geomap.scaleFactor,\n          center = _visuals$geomap.center;\n    return createMapProjector(width, height - albumsHeight, scaleFactor * scale, center);\n  } else {\n    return createPanelProjector(width, height - albumsHeight, visuals.image.size.width, visuals.image.size.height);\n  }\n}\n/**\n * It stores the state required to render visualizations\n */\n\n\nexport default class Visuals {\n  constructor(set, display) {\n    this.set = set;\n    this.display = display;\n    this.circles = void 0;\n    this.albums = void 0;\n    this.refLines = void 0;\n    this.countries = void 0;\n    this.backgroundContainer = void 0;\n    this.circlesContainer = void 0;\n    this.albumsContainer = void 0;\n    this.refLinesContainer = void 0;\n    this.wavesContainer = void 0;\n    this.circles = {};\n    this.albums = {};\n    this.refLines = {};\n  }\n\n  setGeodata(geodata) {\n    const collection = topojson.feature(geodata, geodata.objects.countries);\n    this.countries = collection.features.filter(country => country.id !== \"010\");\n    this.setup();\n  }\n\n  show(name) {\n    const clip = this.set.index.clipById[name];\n\n    if (!clip) {\n      return;\n    } // REVIEW: See if there is a better way to get this info (scale, projection)\n    // that is already calculated in drawMap\n\n\n    const dimensions = this.display.getDimensions();\n    const projector = createProjector(this.set.visuals, dimensions);\n\n    const _projector = projector(clip.position),\n          _projector2 = _slicedToArray(_projector, 2),\n          cx = _projector2[0],\n          cy = _projector2[1]; // REVIEW: fix width parameter to draw circles with the proper size\n\n\n    const circle = drawCircle(this.circlesContainer, width, cx, cy, clip);\n    this.circles[name] = circle;\n    const album = drawAlbum(this.albumsContainer, width, clip);\n    this.albums[name] = album;\n    const refLine = drawRefLine(this.refLinesContainer, width, cx, cy, clip);\n    this.refLines[name] = refLine;\n    drawWave(this.wavesContainer, width, cx, cy, clip);\n  }\n\n  hide(name) {\n    remove(name, this.circles);\n    remove(name, this.albums);\n    remove(name, this.refLines);\n  }\n\n  resizeSvg() {\n    // TODO: create a resize function that only changes the svg viewBox\n    this.setup();\n  }\n\n  setup() {\n    this.display.clear();\n    this.display.createSvg();\n    const dimensions = this.display.getDimensions();\n    const backgroundWidth = dimensions.width;\n    const albumsHeight = getAlbumHeight(backgroundWidth);\n    const backgroundHeight = dimensions.height - albumsHeight;\n    const svg = this.display.svg;\n    this.backgroundContainer = createGroup(svg, \"background\", albumsHeight);\n    this.albumsContainer = createGroup(svg, \"albums\", 0);\n    this.refLinesContainer = createGroup(svg, \"refLines\", albumsHeight);\n    this.circlesContainer = createGroup(svg, \"circles\", albumsHeight);\n    this.wavesContainer = createGroup(svg, \"waves\", albumsHeight);\n\n    if (this.set.visuals.mode === \"map\") {\n      drawMap(this.backgroundContainer, this.countries, backgroundWidth, backgroundHeight, this.set.visuals);\n    } else {\n      drawPanel(this.backgroundContainer, backgroundWidth, backgroundHeight, this.set.visuals.image.url);\n    }\n  }\n\n}\n\nfunction createGroup(svg, id, height) {\n  return svg.append(\"g\").attr(\"id\", id).attr(\"transform\", \"translate(0, \".concat(height, \")\"));\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/visuals/visuals.ts"],"names":["topojson","getAlbumHeight","drawAlbum","drawCircle","calculateMapScale","createMapProjector","drawMap","createPanelProjector","drawPanel","drawRefLine","drawWave","remove","name","group","value","createProjector","visuals","dimensions","width","height","albumsHeight","scale","mode","geomap","scaleFactor","center","image","size","Visuals","constructor","set","display","circles","albums","refLines","countries","backgroundContainer","circlesContainer","albumsContainer","refLinesContainer","wavesContainer","setGeodata","geodata","collection","feature","objects","features","filter","country","id","setup","show","clip","index","clipById","getDimensions","projector","position","cx","cy","circle","album","refLine","hide","resizeSvg","clear","createSvg","backgroundWidth","backgroundHeight","svg","createGroup","url","append","attr"],"mappings":"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","sourcesContent":["import * as topojson from \"topojson\";\n\nimport { getAlbumHeight } from \"./dimensions\";\n\nimport { Audioset, AudiosetVisuals } from \"../audioset\";\nimport Display, { Dimension } from \"./display\";\nimport drawAlbum from \"./drawAlbum\";\nimport drawCircle from \"./drawCircle\";\nimport { calculateMapScale, createMapProjector, drawMap } from \"./drawMap\";\nimport { createPanelProjector, drawPanel } from \"./drawPanel\";\nimport drawRefLine from \"./drawRefLine\";\nimport drawWave from \"./drawWave\";\n\nconst remove = (name: string, group: any) => {\n  const value = group[name];\n  if (value) {\n    value.remove();\n    group[name] = null;\n  }\n};\n\nfunction createProjector(visuals: AudiosetVisuals, dimensions: Dimension) {\n  const { width, height } = dimensions;\n  const albumsHeight = getAlbumHeight(width);\n  const scale = calculateMapScale(width, height - albumsHeight);\n  if (visuals.mode === \"map\") {\n    const { scaleFactor, center } = visuals.geomap;\n    return createMapProjector(\n      width,\n      height - albumsHeight,\n      scaleFactor * scale,\n      center,\n    );\n  } else {\n    return createPanelProjector(\n      width,\n      height - albumsHeight,\n      visuals.image.size.width,\n      visuals.image.size.height,\n    );\n  }\n}\n\n/**\n * It stores the state required to render visualizations\n */\nexport default class Visuals {\n  public circles: Record<string, any>;\n  public albums: Record<string, any>;\n  public refLines: Record<string, any>;\n  public countries: any;\n  public backgroundContainer: any;\n  public circlesContainer!: Record<string, any>;\n  public albumsContainer!: Record<string, any>;\n  public refLinesContainer!: Record<string, any>;\n  public wavesContainer!: Record<string, any>;\n\n  constructor(private set: Audioset, private display: Display) {\n    this.circles = {};\n    this.albums = {};\n    this.refLines = {};\n  }\n\n  public setGeodata(geodata: any) {\n    const collection = topojson.feature(\n      geodata,\n      geodata.objects.countries,\n    ) as any;\n    this.countries = collection.features.filter(\n      (country: any) => country.id !== \"010\",\n    );\n    this.setup();\n  }\n\n  public show(name: string) {\n    const clip = this.set.index.clipById[name];\n    if (!clip) {\n      return;\n    }\n\n    // REVIEW: See if there is a better way to get this info (scale, projection)\n    // that is already calculated in drawMap\n    const dimensions = this.display.getDimensions();\n\n    const projector = createProjector(this.set.visuals, dimensions);\n    const [cx, cy] = projector(clip.position);\n\n    // REVIEW: fix width parameter to draw circles with the proper size\n    const circle = drawCircle(this.circlesContainer, width, cx, cy, clip);\n    this.circles[name] = circle;\n\n    const album = drawAlbum(this.albumsContainer, width, clip);\n    this.albums[name] = album;\n\n    const refLine = drawRefLine(this.refLinesContainer, width, cx, cy, clip);\n    this.refLines[name] = refLine;\n\n    drawWave(this.wavesContainer, width, cx, cy, clip);\n  }\n\n  public hide(name: string) {\n    remove(name, this.circles);\n    remove(name, this.albums);\n    remove(name, this.refLines);\n  }\n\n  public resizeSvg() {\n    // TODO: create a resize function that only changes the svg viewBox\n    this.setup();\n  }\n\n  public setup() {\n    this.display.clear();\n    this.display.createSvg();\n\n    const dimensions = this.display.getDimensions();\n    const backgroundWidth = dimensions.width;\n    const albumsHeight = getAlbumHeight(backgroundWidth);\n    const backgroundHeight = dimensions.height - albumsHeight;\n\n    const svg = this.display.svg;\n\n    this.backgroundContainer = createGroup(svg, \"background\", albumsHeight);\n    this.albumsContainer = createGroup(svg, \"albums\", 0);\n    this.refLinesContainer = createGroup(svg, \"refLines\", albumsHeight);\n    this.circlesContainer = createGroup(svg, \"circles\", albumsHeight);\n    this.wavesContainer = createGroup(svg, \"waves\", albumsHeight);\n\n    if (this.set.visuals.mode === \"map\") {\n      drawMap(\n        this.backgroundContainer,\n        this.countries,\n        backgroundWidth,\n        backgroundHeight,\n        this.set.visuals,\n      );\n    } else {\n      drawPanel(\n        this.backgroundContainer,\n        backgroundWidth,\n        backgroundHeight,\n        this.set.visuals.image.url,\n      );\n    }\n  }\n}\n\nfunction createGroup(svg: any, id: string, height: number) {\n  return svg\n    .append(\"g\")\n    .attr(\"id\", id)\n    .attr(\"transform\", `translate(0, ${height})`);\n}\n"]},"metadata":{},"sourceType":"module"}