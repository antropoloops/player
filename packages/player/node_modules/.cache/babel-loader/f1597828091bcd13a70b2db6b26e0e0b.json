{"ast":null,"code":"import _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\n\nconst getUrl = id => \"https://antropoloops-production.s3.eu-west-3.amazonaws.com/files/\".concat(id, \".audioset.json\");\n\nconst indexClips = audioset => {\n  console.log(audioset);\n\n  if (audioset.type === \"audioset\") {\n    audioset.clipsById = {};\n    audioset.clips.forEach(clip => {\n      audioset.clipsById[clip.id] = clip;\n    });\n  }\n\n  return audioset;\n};\n\nexport function useAudioset(id) {\n  const _useState = useState({\n    type: \"loading\"\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        audioset = _useState2[0],\n        setAudioset = _useState2[1];\n\n  useEffect(() => {\n    fetch(getUrl(id)).then(r => r.json()).then(indexClips).then(setAudioset).catch(error => setAudioset({\n      type: \"error\",\n      error\n    }));\n  }, [id]);\n  return audioset;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/App/useAudioset.ts"],"names":["useState","useEffect","getUrl","id","indexClips","audioset","console","log","type","clipsById","clips","forEach","clip","useAudioset","setAudioset","fetch","then","r","json","catch","error"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAGA,MAAMC,MAAM,GAAIC,EAAD,+EACuDA,EADvD,mBAAf;;AAGA,MAAMC,UAAU,GAAIC,QAAD,IAA+B;AAChDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AACA,MAAIA,QAAQ,CAACG,IAAT,KAAkB,UAAtB,EAAkC;AAChCH,IAAAA,QAAQ,CAACI,SAAT,GAAqB,EAArB;AACAJ,IAAAA,QAAQ,CAACK,KAAT,CAAeC,OAAf,CAAuBC,IAAI,IAAI;AAC7BP,MAAAA,QAAQ,CAACI,SAAT,CAAmBG,IAAI,CAACT,EAAxB,IAA8BS,IAA9B;AACD,KAFD;AAGD;;AACD,SAAOP,QAAP;AACD,CATD;;AAoBA,OAAO,SAASQ,WAAT,CAAqBV,EAArB,EAAkD;AAAA,oBACvBH,QAAQ,CAAkB;AACxDQ,IAAAA,IAAI,EAAE;AADkD,GAAlB,CADe;AAAA;AAAA,QAChDH,QADgD;AAAA,QACtCS,WADsC;;AAIvDb,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,KAAK,CAACb,MAAM,CAACC,EAAD,CAAP,CAAL,CACGa,IADH,CACQC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADb,EAEGF,IAFH,CAEQZ,UAFR,EAGGY,IAHH,CAGQF,WAHR,EAIGK,KAJH,CAISC,KAAK,IAAIN,WAAW,CAAC;AAAEN,MAAAA,IAAI,EAAE,OAAR;AAAiBY,MAAAA;AAAjB,KAAD,CAJ7B;AAKD,GANQ,EAMN,CAACjB,EAAD,CANM,CAAT;AAQA,SAAOE,QAAP;AACD","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { Audioset, AudiosetProject } from \"../lib/audioset\";\n\nconst getUrl = (id: string) =>\n  `https://antropoloops-production.s3.eu-west-3.amazonaws.com/files/${id}.audioset.json`;\n\nconst indexClips = (audioset: LoadingAudioset) => {\n  console.log(audioset);\n  if (audioset.type === \"audioset\") {\n    audioset.clipsById = {};\n    audioset.clips.forEach(clip => {\n      audioset.clipsById[clip.id] = clip;\n    });\n  }\n  return audioset;\n};\n\ntype AudiosetLoading = { type: \"loading\" };\ntype AudiosetLoadError = { type: \"error\"; error: any };\n\ntype LoadingAudioset =\n  | Audioset\n  | AudiosetProject\n  | AudiosetLoadError\n  | AudiosetLoading;\n\nexport function useAudioset(id: string): LoadingAudioset {\n  const [audioset, setAudioset] = useState<LoadingAudioset>({\n    type: \"loading\"\n  });\n  useEffect(() => {\n    fetch(getUrl(id))\n      .then(r => r.json())\n      .then(indexClips)\n      .then(setAudioset)\n      .catch(error => setAudioset({ type: \"error\", error }));\n  }, [id]);\n\n  return audioset;\n}\n"]},"metadata":{},"sourceType":"module"}