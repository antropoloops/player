{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createChannelSplitterNodeRendererFactory = (createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAudioNodes = new WeakMap();\n\n    const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeAudioNode = getNativeAudioNode(proxy); // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n\n      if (!nativeAudioNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeAudioNode.channelCount,\n          channelCountMode: nativeAudioNode.channelCountMode,\n          channelInterpretation: nativeAudioNode.channelInterpretation,\n          numberOfOutputs: nativeAudioNode.numberOfOutputs\n        };\n        nativeAudioNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode, trace);\n      return nativeAudioNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/channel-splitter-node-renderer-factory.js"],"names":["isOwnedByContext","createChannelSplitterNodeRendererFactory","createNativeChannelSplitterNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeAudioNodes","WeakMap","createAudioNode","proxy","nativeOfflineAudioContext","trace","nativeAudioNode","nativeAudioNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","numberOfOutputs","set","render","renderedNativeAudioNode","get","undefined","Promise","resolve"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AACA,OAAO,MAAMC,wCAAwC,GAAG,CAACC,+BAAD,EAAkCC,kBAAlC,EAAsDC,uBAAtD,KAAkF;AACtI,SAAO,MAAM;AACT,UAAMC,wBAAwB,GAAG,IAAIC,OAAJ,EAAjC;;AACA,UAAMC,eAAe,GAAG,OAAOC,KAAP,EAAcC,yBAAd,EAAyCC,KAAzC,KAAmD;AACvE,UAAIC,eAAe,GAAGR,kBAAkB,CAACK,KAAD,CAAxC,CADuE,CAEvE;;AACA,YAAMI,+BAA+B,GAAGZ,gBAAgB,CAACW,eAAD,EAAkBF,yBAAlB,CAAxD;;AACA,UAAI,CAACG,+BAAL,EAAsC;AAClC,cAAMC,OAAO,GAAG;AACZC,UAAAA,YAAY,EAAEH,eAAe,CAACG,YADlB;AAEZC,UAAAA,gBAAgB,EAAEJ,eAAe,CAACI,gBAFtB;AAGZC,UAAAA,qBAAqB,EAAEL,eAAe,CAACK,qBAH3B;AAIZC,UAAAA,eAAe,EAAEN,eAAe,CAACM;AAJrB,SAAhB;AAMAN,QAAAA,eAAe,GAAGT,+BAA+B,CAACO,yBAAD,EAA4BI,OAA5B,CAAjD;AACH;;AACDR,MAAAA,wBAAwB,CAACa,GAAzB,CAA6BT,yBAA7B,EAAwDE,eAAxD;AACA,YAAMP,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCE,eAAnC,EAAoDD,KAApD,CAA7B;AACA,aAAOC,eAAP;AACH,KAhBD;;AAiBA,WAAO;AACHQ,MAAAA,MAAM,CAACX,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,EAA0C;AAC5C,cAAMU,uBAAuB,GAAGf,wBAAwB,CAACgB,GAAzB,CAA6BZ,yBAA7B,CAAhC;;AACA,YAAIW,uBAAuB,KAAKE,SAAhC,EAA2C;AACvC,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,uBAAhB,CAAP;AACH;;AACD,eAAOb,eAAe,CAACC,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,CAAtB;AACH;;AAPE,KAAP;AASH,GA5BD;AA6BH,CA9BM","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createChannelSplitterNodeRendererFactory = (createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeAudioNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n            if (!nativeAudioNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfOutputs: nativeAudioNode.numberOfOutputs\n                };\n                nativeAudioNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode, trace);\n            return nativeAudioNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/channel-splitter-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}