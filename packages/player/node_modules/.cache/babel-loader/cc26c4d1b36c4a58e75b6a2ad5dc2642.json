{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAudioBufferSourceNodeRendererFactory = (connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAudioBufferSourceNodes = new WeakMap();\n    let start = null;\n    let stop = null;\n\n    const createAudioBufferSourceNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeAudioBufferSourceNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n       * again.\n       */\n\n      const nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n\n      if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n        const options = {\n          buffer: nativeAudioBufferSourceNode.buffer,\n          channelCount: nativeAudioBufferSourceNode.channelCount,\n          channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n          channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n          // Bug #149: Safari does not yet support the detune AudioParam.\n          loop: nativeAudioBufferSourceNode.loop,\n          loopEnd: nativeAudioBufferSourceNode.loopEnd,\n          loopStart: nativeAudioBufferSourceNode.loopStart,\n          playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n        };\n        nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n\n        if (start !== null) {\n          nativeAudioBufferSourceNode.start(...start);\n        }\n\n        if (stop !== null) {\n          nativeAudioBufferSourceNode.stop(stop);\n        }\n      }\n\n      renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n\n      if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n        // Bug #149: Safari does not yet support the detune AudioParam.\n        await renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate, trace);\n      } else {\n        // Bug #149: Safari does not yet support the detune AudioParam.\n        await connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate, trace);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode, trace);\n      return nativeAudioBufferSourceNode;\n    };\n\n    return {\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioBufferSourceNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioBufferSourceNode);\n        }\n\n        return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/audio-buffer-source-node-renderer-factory.js"],"names":["isOwnedByContext","createAudioBufferSourceNodeRendererFactory","connectAudioParam","createNativeAudioBufferSourceNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeAudioBufferSourceNodes","WeakMap","start","stop","createAudioBufferSourceNode","proxy","nativeOfflineAudioContext","trace","nativeAudioBufferSourceNode","nativeAudioBufferSourceNodeIsOwnedByContext","options","buffer","channelCount","channelCountMode","channelInterpretation","loop","loopEnd","loopStart","playbackRate","value","set","render","renderedNativeAudioBufferSourceNode","get","undefined","Promise","resolve"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AACA,OAAO,MAAMC,0CAA0C,GAAG,CAACC,iBAAD,EAAoBC,iCAApB,EAAuDC,kBAAvD,EAA2EC,gBAA3E,EAA6FC,uBAA7F,KAAyH;AAC/K,SAAO,MAAM;AACT,UAAMC,oCAAoC,GAAG,IAAIC,OAAJ,EAA7C;AACA,QAAIC,KAAK,GAAG,IAAZ;AACA,QAAIC,IAAI,GAAG,IAAX;;AACA,UAAMC,2BAA2B,GAAG,OAAOC,KAAP,EAAcC,yBAAd,EAAyCC,KAAzC,KAAmD;AACnF,UAAIC,2BAA2B,GAAGX,kBAAkB,CAACQ,KAAD,CAApD;AACA;;;;;AAIA,YAAMI,2CAA2C,GAAGhB,gBAAgB,CAACe,2BAAD,EAA8BF,yBAA9B,CAApE;;AACA,UAAI,CAACG,2CAAL,EAAkD;AAC9C,cAAMC,OAAO,GAAG;AACZC,UAAAA,MAAM,EAAEH,2BAA2B,CAACG,MADxB;AAEZC,UAAAA,YAAY,EAAEJ,2BAA2B,CAACI,YAF9B;AAGZC,UAAAA,gBAAgB,EAAEL,2BAA2B,CAACK,gBAHlC;AAIZC,UAAAA,qBAAqB,EAAEN,2BAA2B,CAACM,qBAJvC;AAKZ;AACAC,UAAAA,IAAI,EAAEP,2BAA2B,CAACO,IANtB;AAOZC,UAAAA,OAAO,EAAER,2BAA2B,CAACQ,OAPzB;AAQZC,UAAAA,SAAS,EAAET,2BAA2B,CAACS,SAR3B;AASZC,UAAAA,YAAY,EAAEV,2BAA2B,CAACU,YAA5B,CAAyCC;AAT3C,SAAhB;AAWAX,QAAAA,2BAA2B,GAAGZ,iCAAiC,CAACU,yBAAD,EAA4BI,OAA5B,CAA/D;;AACA,YAAIR,KAAK,KAAK,IAAd,EAAoB;AAChBM,UAAAA,2BAA2B,CAACN,KAA5B,CAAkC,GAAGA,KAArC;AACH;;AACD,YAAIC,IAAI,KAAK,IAAb,EAAmB;AACfK,UAAAA,2BAA2B,CAACL,IAA5B,CAAiCA,IAAjC;AACH;AACJ;;AACDH,MAAAA,oCAAoC,CAACoB,GAArC,CAAyCd,yBAAzC,EAAoEE,2BAApE;;AACA,UAAI,CAACC,2CAAL,EAAkD;AAC9C;AACA,cAAMX,gBAAgB,CAACQ,yBAAD,EAA4BD,KAAK,CAACa,YAAlC,EAAgDV,2BAA2B,CAACU,YAA5E,EAA0FX,KAA1F,CAAtB;AACH,OAHD,MAIK;AACD;AACA,cAAMZ,iBAAiB,CAACW,yBAAD,EAA4BD,KAAK,CAACa,YAAlC,EAAgDV,2BAA2B,CAACU,YAA5E,EAA0FX,KAA1F,CAAvB;AACH;;AACD,YAAMR,uBAAuB,CAACM,KAAD,EAAQC,yBAAR,EAAmCE,2BAAnC,EAAgED,KAAhE,CAA7B;AACA,aAAOC,2BAAP;AACH,KAtCD;;AAuCA,WAAO;AACH,UAAIN,KAAJ,CAAUiB,KAAV,EAAiB;AACbjB,QAAAA,KAAK,GAAGiB,KAAR;AACH,OAHE;;AAIH,UAAIhB,IAAJ,CAASgB,KAAT,EAAgB;AACZhB,QAAAA,IAAI,GAAGgB,KAAP;AACH,OANE;;AAOHE,MAAAA,MAAM,CAAChB,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,EAA0C;AAC5C,cAAMe,mCAAmC,GAAGtB,oCAAoC,CAACuB,GAArC,CAAyCjB,yBAAzC,CAA5C;;AACA,YAAIgB,mCAAmC,KAAKE,SAA5C,EAAuD;AACnD,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,mCAAhB,CAAP;AACH;;AACD,eAAOlB,2BAA2B,CAACC,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,CAAlC;AACH;;AAbE,KAAP;AAeH,GA1DD;AA2DH,CA5DM","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAudioBufferSourceNodeRendererFactory = (connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeAudioBufferSourceNodes = new WeakMap();\n        let start = null;\n        let stop = null;\n        const createAudioBufferSourceNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeAudioBufferSourceNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeAudioBufferSourceNode.buffer,\n                    channelCount: nativeAudioBufferSourceNode.channelCount,\n                    channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n                    channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n                    // Bug #149: Safari does not yet support the detune AudioParam.\n                    loop: nativeAudioBufferSourceNode.loop,\n                    loopEnd: nativeAudioBufferSourceNode.loopEnd,\n                    loopStart: nativeAudioBufferSourceNode.loopStart,\n                    playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n                };\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeAudioBufferSourceNode.start(...start);\n                }\n                if (stop !== null) {\n                    nativeAudioBufferSourceNode.stop(stop);\n                }\n            }\n            renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate, trace);\n            }\n            else {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode, trace);\n            return nativeAudioBufferSourceNode;\n        };\n        return {\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioBufferSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioBufferSourceNode);\n                }\n                return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-buffer-source-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}