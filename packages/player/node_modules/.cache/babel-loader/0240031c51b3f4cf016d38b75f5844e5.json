{"ast":null,"code":"import _slicedToArray from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import*as topojson from\"topojson\";import{getAlbumHeight}from\"./dimensions\";import{Display}from\"./display\";import drawAlbum from\"./drawAlbum\";import drawCircle from\"./drawCircle\";import{calculateMapScale,createMapProjector,drawMap}from\"./drawMap\";import{createPanelProjector,drawPanel}from\"./drawPanel\";import drawRefLine from\"./drawRefLine\";import drawWave from\"./drawWave\";var remove=function remove(name,group){var value=group[name];if(value){value.remove();group[name]=null;}};function createProjector(visuals,dimensions){var width=dimensions.width,height=dimensions.height;var albumsHeight=getAlbumHeight(width);var scale=calculateMapScale(width,height-albumsHeight);if(visuals.mode===\"map\"){var _visuals$geomap=visuals.geomap,scaleFactor=_visuals$geomap.scaleFactor,center=_visuals$geomap.center;return createMapProjector(width,height-albumsHeight,scaleFactor*scale,center);}else{return createPanelProjector(width,height-albumsHeight,visuals.image.size.width,visuals.image.size.height);}}/**\n * It stores the state required to render visualizations\n */export var Visuals=/*#__PURE__*/function(){function Visuals(set,el){_classCallCheck(this,Visuals);this.set=set;this.circles=void 0;this.albums=void 0;this.refLines=void 0;this.countries=void 0;this.backgroundContainer=void 0;this.circlesContainer=void 0;this.albumsContainer=void 0;this.refLinesContainer=void 0;this.wavesContainer=void 0;this.display=void 0;this.display=new Display(el);this.circles={};this.albums={};this.refLines={};}_createClass(Visuals,[{key:\"setGeodata\",value:function setGeodata(geodata){var collection=topojson.feature(geodata,geodata.objects.countries);this.countries=collection.features.filter(function(country){return country.id!==\"010\";});}},{key:\"show\",value:function show(name){var clip=this.set.index.clipById[name];if(!clip){return;}// REVIEW: See if there is a better way to get this info (scale, projection)\n// that is already calculated in drawMap\nvar dimensions=this.display.getDimensions();var width=dimensions.width;var projector=createProjector(this.set.visuals,dimensions);var _projector=projector(clip.position),_projector2=_slicedToArray(_projector,2),cx=_projector2[0],cy=_projector2[1];// REVIEW: fix width parameter to draw circles with the proper size\nvar circle=drawCircle(this.circlesContainer,width,cx,cy,clip);this.circles[name]=circle;var album=drawAlbum(this.albumsContainer,width,clip);this.albums[name]=album;var refLine=drawRefLine(this.refLinesContainer,width,cx,cy,clip);this.refLines[name]=refLine;drawWave(this.wavesContainer,width,cx,cy,clip);}},{key:\"hide\",value:function hide(name){remove(name,this.circles);remove(name,this.albums);remove(name,this.refLines);}},{key:\"resizeSvg\",value:function resizeSvg(width,height){// TODO: create a resize function that only changes the svg viewBox\nthis.setup();}},{key:\"setup\",value:function setup(){this.display.clear();this.display.createSvg();var dimensions=this.display.getDimensions();var backgroundWidth=dimensions.width;var albumsHeight=getAlbumHeight(backgroundWidth);var backgroundHeight=dimensions.height-albumsHeight;var svg=this.display.svg;this.backgroundContainer=createGroup(svg,\"background\",albumsHeight);this.albumsContainer=createGroup(svg,\"albums\",0);this.refLinesContainer=createGroup(svg,\"refLines\",albumsHeight);this.circlesContainer=createGroup(svg,\"circles\",albumsHeight);this.wavesContainer=createGroup(svg,\"waves\",albumsHeight);if(this.set.visuals.mode===\"map\"){if(this.countries){drawMap(this.backgroundContainer,this.countries,backgroundWidth,backgroundHeight,this.set.visuals);}}else{drawPanel(this.backgroundContainer,backgroundWidth,backgroundHeight,this.set.visuals.image.url);}}}]);return Visuals;}();function createGroup(svg,id,height){return svg.append(\"g\").attr(\"id\",id).attr(\"transform\",\"translate(0, \".concat(height,\")\"));}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/visuals/visuals.ts"],"names":["topojson","getAlbumHeight","Display","drawAlbum","drawCircle","calculateMapScale","createMapProjector","drawMap","createPanelProjector","drawPanel","drawRefLine","drawWave","remove","name","group","value","createProjector","visuals","dimensions","width","height","albumsHeight","scale","mode","geomap","scaleFactor","center","image","size","Visuals","set","el","circles","albums","refLines","countries","backgroundContainer","circlesContainer","albumsContainer","refLinesContainer","wavesContainer","display","geodata","collection","feature","objects","features","filter","country","id","clip","index","clipById","getDimensions","projector","position","cx","cy","circle","album","refLine","setup","clear","createSvg","backgroundWidth","backgroundHeight","svg","createGroup","url","append","attr"],"mappings":"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","sourcesContent":["import * as topojson from \"topojson\";\n\nimport { getAlbumHeight } from \"./dimensions\";\n\nimport { Audioset, VisualsMetadata } from \"../audioset\";\nimport { Dimension, Display } from \"./display\";\nimport drawAlbum from \"./drawAlbum\";\nimport drawCircle from \"./drawCircle\";\nimport { calculateMapScale, createMapProjector, drawMap } from \"./drawMap\";\nimport { createPanelProjector, drawPanel } from \"./drawPanel\";\nimport drawRefLine from \"./drawRefLine\";\nimport drawWave from \"./drawWave\";\n\nconst remove = (name: string, group: any) => {\n  const value = group[name];\n  if (value) {\n    value.remove();\n    group[name] = null;\n  }\n};\n\nfunction createProjector(visuals: VisualsMetadata, dimensions: Dimension) {\n  const { width, height } = dimensions;\n  const albumsHeight = getAlbumHeight(width);\n  const scale = calculateMapScale(width, height - albumsHeight);\n  if (visuals.mode === \"map\") {\n    const { scaleFactor, center } = visuals.geomap;\n    return createMapProjector(\n      width,\n      height - albumsHeight,\n      scaleFactor * scale,\n      center,\n    );\n  } else {\n    return createPanelProjector(\n      width,\n      height - albumsHeight,\n      visuals.image.size.width,\n      visuals.image.size.height,\n    );\n  }\n}\n\n/**\n * It stores the state required to render visualizations\n */\nexport class Visuals {\n  public circles: Record<string, any>;\n  public albums: Record<string, any>;\n  public refLines: Record<string, any>;\n  public countries: any;\n  public backgroundContainer: any;\n  public circlesContainer!: Record<string, any>;\n  public albumsContainer!: Record<string, any>;\n  public refLinesContainer!: Record<string, any>;\n  public wavesContainer!: Record<string, any>;\n  private display: Display;\n\n  constructor(private set: Audioset, el: any) {\n    this.display = new Display(el);\n    this.circles = {};\n    this.albums = {};\n    this.refLines = {};\n  }\n\n  public setGeodata(geodata: any) {\n    const collection = topojson.feature(\n      geodata,\n      geodata.objects.countries,\n    ) as any;\n    this.countries = collection.features.filter(\n      (country: any) => country.id !== \"010\",\n    );\n  }\n\n  public show(name: string) {\n    const clip = this.set.index.clipById[name];\n    if (!clip) {\n      return;\n    }\n\n    // REVIEW: See if there is a better way to get this info (scale, projection)\n    // that is already calculated in drawMap\n    const dimensions = this.display.getDimensions();\n    const { width } = dimensions;\n\n    const projector = createProjector(this.set.visuals, dimensions);\n    const [cx, cy] = projector(clip.position);\n\n    // REVIEW: fix width parameter to draw circles with the proper size\n    const circle = drawCircle(this.circlesContainer, width, cx, cy, clip);\n    this.circles[name] = circle;\n\n    const album = drawAlbum(this.albumsContainer, width, clip);\n    this.albums[name] = album;\n\n    const refLine = drawRefLine(this.refLinesContainer, width, cx, cy, clip);\n    this.refLines[name] = refLine;\n\n    drawWave(this.wavesContainer, width, cx, cy, clip);\n  }\n\n  public hide(name: string) {\n    remove(name, this.circles);\n    remove(name, this.albums);\n    remove(name, this.refLines);\n  }\n\n  public resizeSvg(width: number, height: number) {\n    // TODO: create a resize function that only changes the svg viewBox\n    this.setup();\n  }\n\n  public setup() {\n    this.display.clear();\n    this.display.createSvg();\n\n    const dimensions = this.display.getDimensions();\n    const backgroundWidth = dimensions.width;\n    const albumsHeight = getAlbumHeight(backgroundWidth);\n    const backgroundHeight = dimensions.height - albumsHeight;\n\n    const svg = this.display.svg;\n\n    this.backgroundContainer = createGroup(svg, \"background\", albumsHeight);\n    this.albumsContainer = createGroup(svg, \"albums\", 0);\n    this.refLinesContainer = createGroup(svg, \"refLines\", albumsHeight);\n    this.circlesContainer = createGroup(svg, \"circles\", albumsHeight);\n    this.wavesContainer = createGroup(svg, \"waves\", albumsHeight);\n\n    if (this.set.visuals.mode === \"map\") {\n      if (this.countries) {\n        drawMap(\n          this.backgroundContainer,\n          this.countries,\n          backgroundWidth,\n          backgroundHeight,\n          this.set.visuals,\n        );\n      }\n    } else {\n      drawPanel(\n        this.backgroundContainer,\n        backgroundWidth,\n        backgroundHeight,\n        this.set.visuals.image.url,\n      );\n    }\n  }\n}\n\nfunction createGroup(svg: any, id: string, height: number) {\n  return svg\n    .append(\"g\")\n    .attr(\"id\", id)\n    .attr(\"transform\", `translate(0, ${height})`);\n}\n"]},"metadata":{},"sourceType":"module"}