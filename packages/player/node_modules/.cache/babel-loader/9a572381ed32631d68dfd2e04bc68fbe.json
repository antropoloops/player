{"ast":null,"code":"import _slicedToArray from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import*as topojson from\"topojson\";import{getAlbumHeight}from\"./dimensions\";import drawAlbum from\"./drawAlbum\";import drawCircle from\"./drawCircle\";import{calculateMapScale,createMapProjector,drawMap}from\"./drawMap\";import{createPanelProjector,drawPanel}from\"./drawPanel\";import drawRefLine from\"./drawRefLine\";import drawWave from\"./drawWave\";var remove=function remove(name,group){var value=group[name];if(value){value.remove();group[name]=null;}};function createProjector(visuals,dimensions){var width=dimensions.width,height=dimensions.height;var albumsHeight=getAlbumHeight(width);var scale=calculateMapScale(width,height-albumsHeight);if(visuals.mode===\"map\"){var _visuals$geomap=visuals.geomap,scaleFactor=_visuals$geomap.scaleFactor,center=_visuals$geomap.center;return createMapProjector(width,height-albumsHeight,scaleFactor*scale,center);}else{return createPanelProjector(width,height-albumsHeight,visuals.image.size.width,visuals.image.size.height);}}/**\n * It stores the state required to render visualizations\n */var Visuals=/*#__PURE__*/function(){function Visuals(set,display){_classCallCheck(this,Visuals);this.set=set;this.display=display;this.circles=void 0;this.albums=void 0;this.refLines=void 0;this.countries=void 0;this.backgroundContainer=void 0;this.circlesContainer=void 0;this.albumsContainer=void 0;this.refLinesContainer=void 0;this.wavesContainer=void 0;this.circles={};this.albums={};this.refLines={};}_createClass(Visuals,[{key:\"setGeodata\",value:function setGeodata(geodata){var collection=topojson.feature(geodata,geodata.objects.countries);this.countries=collection.features.filter(function(country){return country.id!==\"010\";});this.setup();}},{key:\"show\",value:function show(name){var clip=this.set.index.clipById[name];if(!clip){return;}// REVIEW: See if there is a better way to get this info (scale, projection)\n// that is already calculated in drawMap\nvar width=this.display.dimensions.width;var projector=createProjector(this.set.visuals,this.display.dimensions);var _projector=projector(clip.position),_projector2=_slicedToArray(_projector,2),cx=_projector2[0],cy=_projector2[1];// REVIEW: fix width parameter to draw circles with the proper size\nvar circle=drawCircle(this.circlesContainer,width,cx,cy,clip);this.circles[name]=circle;var album=drawAlbum(this.albumsContainer,width,clip);this.albums[name]=album;var refLine=drawRefLine(this.refLinesContainer,width,cx,cy,clip);this.refLines[name]=refLine;drawWave(this.wavesContainer,width,cx,cy,clip);}},{key:\"hide\",value:function hide(name){remove(name,this.circles);remove(name,this.albums);remove(name,this.refLines);}},{key:\"resizeSvg\",value:function resizeSvg(){// TODO: create a resize function that only changes the svg viewBox\nthis.setup();}},{key:\"setup\",value:function setup(){this.display.clear();this.display.createSvg();var backgroundWidth=this.display.dimensions.width;var albumsHeight=getAlbumHeight(backgroundWidth);var backgroundHeight=this.display.dimensions.height-albumsHeight;var svg=this.display.svg;this.backgroundContainer=createGroup(svg,\"background\",albumsHeight);this.albumsContainer=createGroup(svg,\"albums\",0);this.refLinesContainer=createGroup(svg,\"refLines\",albumsHeight);this.circlesContainer=createGroup(svg,\"circles\",albumsHeight);this.wavesContainer=createGroup(svg,\"waves\",albumsHeight);if(this.set.visuals.mode===\"map\"){drawMap(this.backgroundContainer,this.countries,backgroundWidth,backgroundHeight,this.set.visuals);}else{drawPanel(this.backgroundContainer,backgroundWidth,backgroundHeight,this.set.visuals.image.url);}}}]);return Visuals;}();export{Visuals as default};function createGroup(svg,id,height){return svg.append(\"g\").attr(\"id\",id).attr(\"transform\",\"translate(0, \".concat(height,\")\"));}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/visuals/visuals.ts"],"names":["topojson","getAlbumHeight","drawAlbum","drawCircle","calculateMapScale","createMapProjector","drawMap","createPanelProjector","drawPanel","drawRefLine","drawWave","remove","name","group","value","createProjector","visuals","dimensions","width","height","albumsHeight","scale","mode","geomap","scaleFactor","center","image","size","Visuals","set","display","circles","albums","refLines","countries","backgroundContainer","circlesContainer","albumsContainer","refLinesContainer","wavesContainer","geodata","collection","feature","objects","features","filter","country","id","setup","clip","index","clipById","projector","position","cx","cy","circle","album","refLine","clear","createSvg","backgroundWidth","backgroundHeight","svg","createGroup","url","append","attr"],"mappings":"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","sourcesContent":["import * as topojson from \"topojson\";\n\nimport { getAlbumHeight } from \"./dimensions\";\n\nimport { Audioset, AudiosetVisuals } from \"../Audioset\";\nimport Display, { Dimension } from \"./display\";\nimport drawAlbum from \"./drawAlbum\";\nimport drawCircle from \"./drawCircle\";\nimport { calculateMapScale, createMapProjector, drawMap } from \"./drawMap\";\nimport { createPanelProjector, drawPanel } from \"./drawPanel\";\nimport drawRefLine from \"./drawRefLine\";\nimport drawWave from \"./drawWave\";\n\nconst remove = (name: string, group: any) => {\n  const value = group[name];\n  if (value) {\n    value.remove();\n    group[name] = null;\n  }\n};\n\nfunction createProjector(visuals: AudiosetVisuals, dimensions: Dimension) {\n  const { width, height } = dimensions;\n  const albumsHeight = getAlbumHeight(width);\n  const scale = calculateMapScale(width, height - albumsHeight);\n  if (visuals.mode === \"map\") {\n    const { scaleFactor, center } = visuals.geomap;\n    return createMapProjector(\n      width,\n      height - albumsHeight,\n      scaleFactor * scale,\n      center,\n    );\n  } else {\n    return createPanelProjector(\n      width,\n      height - albumsHeight,\n      visuals.image.size.width,\n      visuals.image.size.height,\n    );\n  }\n}\n\n/**\n * It stores the state required to render visualizations\n */\nexport default class Visuals {\n  public circles: Record<string, any>;\n  public albums: Record<string, any>;\n  public refLines: Record<string, any>;\n  public countries: any;\n  public backgroundContainer: any;\n  public circlesContainer!: Record<string, any>;\n  public albumsContainer!: Record<string, any>;\n  public refLinesContainer!: Record<string, any>;\n  public wavesContainer!: Record<string, any>;\n\n  constructor(private set: Audioset, private display: Display) {\n    this.circles = {};\n    this.albums = {};\n    this.refLines = {};\n  }\n\n  public setGeodata(geodata: any) {\n    const collection = topojson.feature(\n      geodata,\n      geodata.objects.countries,\n    ) as any;\n    this.countries = collection.features.filter(\n      (country: any) => country.id !== \"010\",\n    );\n    this.setup();\n  }\n\n  public show(name: string) {\n    const clip = this.set.index.clipById[name];\n    if (!clip) {\n      return;\n    }\n\n    // REVIEW: See if there is a better way to get this info (scale, projection)\n    // that is already calculated in drawMap\n    const { width } = this.display.dimensions;\n\n    const projector = createProjector(\n      this.set.visuals,\n      this.display.dimensions,\n    );\n    const [cx, cy] = projector(clip.position);\n\n    // REVIEW: fix width parameter to draw circles with the proper size\n    const circle = drawCircle(this.circlesContainer, width, cx, cy, clip);\n    this.circles[name] = circle;\n\n    const album = drawAlbum(this.albumsContainer, width, clip);\n    this.albums[name] = album;\n\n    const refLine = drawRefLine(this.refLinesContainer, width, cx, cy, clip);\n    this.refLines[name] = refLine;\n\n    drawWave(this.wavesContainer, width, cx, cy, clip);\n  }\n\n  public hide(name: string) {\n    remove(name, this.circles);\n    remove(name, this.albums);\n    remove(name, this.refLines);\n  }\n\n  public resizeSvg() {\n    // TODO: create a resize function that only changes the svg viewBox\n    this.setup();\n  }\n\n  public setup() {\n    this.display.clear();\n    this.display.createSvg();\n\n    const backgroundWidth = this.display.dimensions.width;\n    const albumsHeight = getAlbumHeight(backgroundWidth);\n    const backgroundHeight = this.display.dimensions.height - albumsHeight;\n\n    const svg = this.display.svg;\n\n    this.backgroundContainer = createGroup(svg, \"background\", albumsHeight);\n    this.albumsContainer = createGroup(svg, \"albums\", 0);\n    this.refLinesContainer = createGroup(svg, \"refLines\", albumsHeight);\n    this.circlesContainer = createGroup(svg, \"circles\", albumsHeight);\n    this.wavesContainer = createGroup(svg, \"waves\", albumsHeight);\n\n    if (this.set.visuals.mode === \"map\") {\n      drawMap(\n        this.backgroundContainer,\n        this.countries,\n        backgroundWidth,\n        backgroundHeight,\n        this.set.visuals,\n      );\n    } else {\n      drawPanel(\n        this.backgroundContainer,\n        backgroundWidth,\n        backgroundHeight,\n        this.set.visuals.image.url,\n      );\n    }\n  }\n}\n\nfunction createGroup(svg: any, id: string, height: number) {\n  return svg\n    .append(\"g\")\n    .attr(\"id\", id)\n    .attr(\"transform\", `translate(0, ${height})`);\n}\n"]},"metadata":{},"sourceType":"module"}