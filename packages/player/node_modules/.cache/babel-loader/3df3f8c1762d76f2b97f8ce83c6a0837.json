{"ast":null,"code":"var _jsxFileName = \"/Users/dani/Antropoloops/atpls-player/src/ui/Player/Player.tsx\";\nimport React, { useEffect } from \"react\";\nimport { autoUnlockAudio } from \"../../player/Audio\";\nimport { BundleHeader } from \"../shared/Header\";\nimport { Info } from \"../shared/Icons\";\nimport { Spinner } from \"../shared/Spinner\";\nimport { useDeviceType } from \"../useDeviceType\";\nimport { Controller } from \"./Controller\";\nimport { Session } from \"./Session\";\nimport { Sidebar } from \"./Sidebar\";\nimport { useFullscreen } from \"./useFullscreen\";\nimport { useKeyboardListener } from \"./useKeyboardListener\";\nimport { usePlayer } from \"./usePlayer\";\nimport { useSession } from \"./useSession\";\n\nconst SessionHeader = ({\n  meta,\n  session\n}) => React.createElement(\"div\", {\n  className: \"Header\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  className: \"navigation\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26\n  },\n  __self: this\n}, React.createElement(Info, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27\n  },\n  __self: this\n}), React.createElement(\"button\", {\n  className: \"btn-link\",\n  onClick: session.toggle,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 28\n  },\n  __self: this\n}, meta.title)));\n\nexport const Player = ({\n  audioset\n}) => {\n  var _player$control;\n\n  const session = useSession(audioset);\n  const player = usePlayer(audioset, session.loader);\n\n  const _useFullscreen = useFullscreen(),\n        isFullscreen = _useFullscreen.isFullscreen,\n        toggleFullscreen = _useFullscreen.toggleFullscreen;\n\n  const _useDeviceType = useDeviceType(),\n        isDesktop = _useDeviceType.isDesktop,\n        isMobile = _useDeviceType.isMobile;\n\n  useKeyboardListener((_player$control = player.control) === null || _player$control === void 0 ? void 0 : _player$control.keyboard);\n  useEffect(() => {\n    autoUnlockAudio();\n  }, []);\n  const areVisualsVisible = isDesktop || isMobile && !session.visible;\n  const isSidebarVisible = !isFullscreen;\n  const showControl = true;\n\n  const Header = () => session.started && !session.visible ? React.createElement(SessionHeader, {\n    meta: audioset.meta,\n    session: session,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }) : React.createElement(BundleHeader, {\n    meta: audioset.meta,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  });\n\n  return React.createElement(\"div\", {\n    className: \"App Player\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, isSidebarVisible && React.createElement(Sidebar, {\n    header: Header,\n    audioset: audioset,\n    onFullscreen: toggleFullscreen,\n    onStopAll: () => {\n      var _player$control2;\n\n      return player === null || player === void 0 ? void 0 : (_player$control2 = player.control) === null || _player$control2 === void 0 ? void 0 : _player$control2.stopAll(0);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, session.loading && React.createElement(Spinner, {\n    center: \"horizontal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), session.visible && React.createElement(Session, {\n    audioset: audioset,\n    isStarted: session.started,\n    onStart: () => session.start(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), showControl && React.createElement(Controller, {\n    audioset: audioset,\n    state: player.state,\n    control: !session.visible ? player.control : undefined,\n    onResume: session.start,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  })), areVisualsVisible && React.createElement(\"div\", {\n    className: \"visuals\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"visuals\",\n    ref: player.visualsRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })));\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/Player.tsx"],"names":["React","useEffect","autoUnlockAudio","BundleHeader","Info","Spinner","useDeviceType","Controller","Session","Sidebar","useFullscreen","useKeyboardListener","usePlayer","useSession","SessionHeader","meta","session","toggle","title","Player","audioset","player","loader","isFullscreen","toggleFullscreen","isDesktop","isMobile","control","keyboard","areVisualsVisible","visible","isSidebarVisible","showControl","Header","started","stopAll","loading","start","state","undefined","visualsRef"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { Audioset, BundleMetadata } from \"../../audioset\";\nimport { autoUnlockAudio } from \"../../player/Audio\";\nimport { BundleHeader } from \"../shared/Header\";\nimport { Info } from \"../shared/Icons\";\nimport { Spinner } from \"../shared/Spinner\";\nimport { useDeviceType } from \"../useDeviceType\";\nimport { Controller } from \"./Controller\";\nimport { Session } from \"./Session\";\nimport { Sidebar } from \"./Sidebar\";\nimport { useFullscreen } from \"./useFullscreen\";\nimport { useKeyboardListener } from \"./useKeyboardListener\";\nimport { usePlayer } from \"./usePlayer\";\nimport { useSession } from \"./useSession\";\n\nexport interface PlayerProps {\n  audioset: Audioset;\n}\n\ninterface SessionHeaderProps {\n  meta: BundleMetadata;\n  session: any;\n}\nconst SessionHeader = ({ meta, session }: SessionHeaderProps) => (\n  <div className=\"Header\">\n    <div className=\"navigation\">\n      <Info />\n      <button className=\"btn-link\" onClick={session.toggle}>\n        {meta.title}\n      </button>\n    </div>\n  </div>\n);\nexport const Player = ({ audioset }: PlayerProps) => {\n  const session = useSession(audioset);\n  const player = usePlayer(audioset, session.loader);\n  const { isFullscreen, toggleFullscreen } = useFullscreen();\n  const { isDesktop, isMobile } = useDeviceType();\n  useKeyboardListener(player.control?.keyboard);\n\n  useEffect(() => {\n    autoUnlockAudio();\n  }, []);\n\n  const areVisualsVisible = isDesktop || (isMobile && !session.visible);\n  const isSidebarVisible = !isFullscreen;\n\n  const showControl = true;\n\n  const Header = () =>\n    session.started && !session.visible ? (\n      <SessionHeader meta={audioset.meta} session={session} />\n    ) : (\n      <BundleHeader meta={audioset.meta} />\n    );\n\n  return (\n    <div className=\"App Player\">\n      {isSidebarVisible && (\n        <Sidebar\n          header={Header}\n          audioset={audioset}\n          onFullscreen={toggleFullscreen}\n          onStopAll={() => player?.control?.stopAll(0)}\n        >\n          {session.loading && <Spinner center=\"horizontal\" />}\n          {session.visible && (\n            <Session\n              audioset={audioset}\n              isStarted={session.started}\n              onStart={() => session.start()}\n            />\n          )}\n          {showControl && (\n            <Controller\n              audioset={audioset}\n              state={player.state}\n              control={!session.visible ? player.control : undefined}\n              onResume={session.start}\n            />\n          )}\n        </Sidebar>\n      )}\n      {areVisualsVisible && (\n        <div className=\"visuals\">\n          <div id=\"visuals\" ref={player.visualsRef} />\n        </div>\n      )}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}