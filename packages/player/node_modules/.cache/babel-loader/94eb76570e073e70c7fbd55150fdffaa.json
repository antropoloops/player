{"ast":null,"code":"import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeWaveShaperNodeFactory = (createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, overwriteAccessors) => {\n  return (nativeContext, options) => {\n    const nativeWaveShaperNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createWaveShaper());\n\n    try {\n      // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n      // Bug #119: Safari does not correctly map the values. Bug #102 is only used to detect Safari in this case.\n      nativeWaveShaperNode.curve = new Float32Array([1]);\n      return createNativeWaveShaperNodeFaker(nativeContext, options);\n    } catch (\n    /* Ignore errors. */\n    _a) {\n      /* Ignore errors. */\n    }\n\n    assignNativeAudioNodeOptions(nativeWaveShaperNode, options);\n    const curve = options.curve; // Bug #104: Chrome will throw an InvalidAccessError when the curve has less than two samples.\n\n    if (curve !== null && curve.length < 2) {\n      throw createInvalidStateError();\n    }\n\n    assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'curve');\n    assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'oversample');\n    let disconnectNativeAudioBufferSourceNode = null;\n    let isConnected = false;\n    overwriteAccessors(nativeWaveShaperNode, 'curve', get => () => get.call(nativeWaveShaperNode), set => value => {\n      set.call(nativeWaveShaperNode, value);\n\n      if (isConnected) {\n        if (isDCCurve(value) && disconnectNativeAudioBufferSourceNode === null) {\n          disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n        } else if (!isDCCurve(value) && disconnectNativeAudioBufferSourceNode !== null) {\n          disconnectNativeAudioBufferSourceNode();\n          disconnectNativeAudioBufferSourceNode = null;\n        }\n      }\n\n      return value;\n    });\n\n    const whenConnected = () => {\n      isConnected = true;\n\n      if (isDCCurve(nativeWaveShaperNode.curve)) {\n        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n      }\n    };\n\n    const whenDisconnected = () => {\n      isConnected = false;\n\n      if (disconnectNativeAudioBufferSourceNode !== null) {\n        disconnectNativeAudioBufferSourceNode();\n        disconnectNativeAudioBufferSourceNode = null;\n      }\n    };\n\n    return monitorConnections(nativeWaveShaperNode, whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/native-wave-shaper-node-factory.js"],"names":["assignNativeAudioNodeOption","assignNativeAudioNodeOptions","createNativeWaveShaperNodeFactory","createConnectedNativeAudioBufferSourceNode","createInvalidStateError","createNativeAudioNode","createNativeWaveShaperNodeFaker","isDCCurve","monitorConnections","overwriteAccessors","nativeContext","options","nativeWaveShaperNode","ntvCntxt","createWaveShaper","curve","Float32Array","_a","length","disconnectNativeAudioBufferSourceNode","isConnected","get","call","set","value","whenConnected","whenDisconnected"],"mappings":"AAAA,SAASA,2BAAT,QAA4C,4CAA5C;AACA,SAASC,4BAAT,QAA6C,6CAA7C;AACA,OAAO,MAAMC,iCAAiC,GAAG,CAACC,0CAAD,EAA6CC,uBAA7C,EAAsEC,qBAAtE,EAA6FC,+BAA7F,EAA8HC,SAA9H,EAAyIC,kBAAzI,EAA6JC,kBAA7J,KAAoL;AACjO,SAAO,CAACC,aAAD,EAAgBC,OAAhB,KAA4B;AAC/B,UAAMC,oBAAoB,GAAGP,qBAAqB,CAACK,aAAD,EAAiBG,QAAD,IAAcA,QAAQ,CAACC,gBAAT,EAA9B,CAAlD;;AACA,QAAI;AACA;AACA;AACAF,MAAAA,oBAAoB,CAACG,KAArB,GAA6B,IAAIC,YAAJ,CAAiB,CAAC,CAAD,CAAjB,CAA7B;AACA,aAAOV,+BAA+B,CAACI,aAAD,EAAgBC,OAAhB,CAAtC;AACH,KALD,CAMA;AAAQ;AAAoBM,IAAAA,EAA5B,EAAgC;AAAE;AAAsB;;AACxDhB,IAAAA,4BAA4B,CAACW,oBAAD,EAAuBD,OAAvB,CAA5B;AACA,UAAMI,KAAK,GAAGJ,OAAO,CAACI,KAAtB,CAV+B,CAW/B;;AACA,QAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,CAACG,MAAN,GAAe,CAArC,EAAwC;AACpC,YAAMd,uBAAuB,EAA7B;AACH;;AACDJ,IAAAA,2BAA2B,CAACY,oBAAD,EAAuBD,OAAvB,EAAgC,OAAhC,CAA3B;AACAX,IAAAA,2BAA2B,CAACY,oBAAD,EAAuBD,OAAvB,EAAgC,YAAhC,CAA3B;AACA,QAAIQ,qCAAqC,GAAG,IAA5C;AACA,QAAIC,WAAW,GAAG,KAAlB;AACAX,IAAAA,kBAAkB,CAACG,oBAAD,EAAuB,OAAvB,EAAiCS,GAAD,IAAS,MAAMA,GAAG,CAACC,IAAJ,CAASV,oBAAT,CAA/C,EAAgFW,GAAD,IAAUC,KAAD,IAAW;AACjHD,MAAAA,GAAG,CAACD,IAAJ,CAASV,oBAAT,EAA+BY,KAA/B;;AACA,UAAIJ,WAAJ,EAAiB;AACb,YAAIb,SAAS,CAACiB,KAAD,CAAT,IAAoBL,qCAAqC,KAAK,IAAlE,EAAwE;AACpEA,UAAAA,qCAAqC,GAAGhB,0CAA0C,CAACO,aAAD,EAAgBE,oBAAhB,CAAlF;AACH,SAFD,MAGK,IAAI,CAACL,SAAS,CAACiB,KAAD,CAAV,IAAqBL,qCAAqC,KAAK,IAAnE,EAAyE;AAC1EA,UAAAA,qCAAqC;AACrCA,UAAAA,qCAAqC,GAAG,IAAxC;AACH;AACJ;;AACD,aAAOK,KAAP;AACH,KAZiB,CAAlB;;AAaA,UAAMC,aAAa,GAAG,MAAM;AACxBL,MAAAA,WAAW,GAAG,IAAd;;AACA,UAAIb,SAAS,CAACK,oBAAoB,CAACG,KAAtB,CAAb,EAA2C;AACvCI,QAAAA,qCAAqC,GAAGhB,0CAA0C,CAACO,aAAD,EAAgBE,oBAAhB,CAAlF;AACH;AACJ,KALD;;AAMA,UAAMc,gBAAgB,GAAG,MAAM;AAC3BN,MAAAA,WAAW,GAAG,KAAd;;AACA,UAAID,qCAAqC,KAAK,IAA9C,EAAoD;AAChDA,QAAAA,qCAAqC;AACrCA,QAAAA,qCAAqC,GAAG,IAAxC;AACH;AACJ,KAND;;AAOA,WAAOX,kBAAkB,CAACI,oBAAD,EAAuBa,aAAvB,EAAsCC,gBAAtC,CAAzB;AACH,GA9CD;AA+CH,CAhDM","sourcesContent":["import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeWaveShaperNodeFactory = (createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, overwriteAccessors) => {\n    return (nativeContext, options) => {\n        const nativeWaveShaperNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createWaveShaper());\n        try {\n            // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n            // Bug #119: Safari does not correctly map the values. Bug #102 is only used to detect Safari in this case.\n            nativeWaveShaperNode.curve = new Float32Array([1]);\n            return createNativeWaveShaperNodeFaker(nativeContext, options);\n        }\n        catch ( /* Ignore errors. */_a) { /* Ignore errors. */ }\n        assignNativeAudioNodeOptions(nativeWaveShaperNode, options);\n        const curve = options.curve;\n        // Bug #104: Chrome will throw an InvalidAccessError when the curve has less than two samples.\n        if (curve !== null && curve.length < 2) {\n            throw createInvalidStateError();\n        }\n        assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'curve');\n        assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'oversample');\n        let disconnectNativeAudioBufferSourceNode = null;\n        let isConnected = false;\n        overwriteAccessors(nativeWaveShaperNode, 'curve', (get) => () => get.call(nativeWaveShaperNode), (set) => (value) => {\n            set.call(nativeWaveShaperNode, value);\n            if (isConnected) {\n                if (isDCCurve(value) && disconnectNativeAudioBufferSourceNode === null) {\n                    disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n                }\n                else if (!isDCCurve(value) && disconnectNativeAudioBufferSourceNode !== null) {\n                    disconnectNativeAudioBufferSourceNode();\n                    disconnectNativeAudioBufferSourceNode = null;\n                }\n            }\n            return value;\n        });\n        const whenConnected = () => {\n            isConnected = true;\n            if (isDCCurve(nativeWaveShaperNode.curve)) {\n                disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n            }\n        };\n        const whenDisconnected = () => {\n            isConnected = false;\n            if (disconnectNativeAudioBufferSourceNode !== null) {\n                disconnectNativeAudioBufferSourceNode();\n                disconnectNativeAudioBufferSourceNode = null;\n            }\n        };\n        return monitorConnections(nativeWaveShaperNode, whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-wave-shaper-node-factory.js.map"]},"metadata":{},"sourceType":"module"}