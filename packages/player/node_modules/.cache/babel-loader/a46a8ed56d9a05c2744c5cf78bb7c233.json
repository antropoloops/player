{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { abs, degrees, epsilon2, floor, halfPi, max, min, pi, radians } from \"./math.js\";\nvar K = [[0.9986, -0.062], [1.0000, 0.0000], [0.9986, 0.0620], [0.9954, 0.1240], [0.9900, 0.1860], [0.9822, 0.2480], [0.9730, 0.3100], [0.9600, 0.3720], [0.9427, 0.4340], [0.9216, 0.4958], [0.8962, 0.5571], [0.8679, 0.6176], [0.8350, 0.6769], [0.7986, 0.7346], [0.7597, 0.7903], [0.7186, 0.8435], [0.6732, 0.8936], [0.6213, 0.9394], [0.5722, 0.9761], [0.5322, 1.0000]];\nK.forEach(function (d) {\n  d[1] *= 1.0144;\n});\nexport function robinsonRaw(lambda, phi) {\n  var i = min(18, abs(phi) * 36 / pi),\n      i0 = floor(i),\n      di = i - i0,\n      ax = (k = K[i0])[0],\n      ay = k[1],\n      bx = (k = K[++i0])[0],\n      by = k[1],\n      cx = (k = K[min(19, ++i0)])[0],\n      cy = k[1],\n      k;\n  return [lambda * (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2), (phi > 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2)];\n}\n\nrobinsonRaw.invert = function (x, y) {\n  var yy = y / halfPi,\n      phi = yy * 90,\n      i = min(18, abs(phi / 5)),\n      i0 = max(0, floor(i));\n\n  do {\n    var ay = K[i0][1],\n        by = K[i0 + 1][1],\n        cy = K[min(19, i0 + 2)][1],\n        u = cy - ay,\n        v = cy - 2 * by + ay,\n        t = 2 * (abs(yy) - by) / u,\n        c = v / u,\n        di = t * (1 - c * t * (1 - 2 * c * t));\n\n    if (di >= 0 || i0 === 1) {\n      phi = (y >= 0 ? 5 : -5) * (di + i);\n      var j = 50,\n          delta;\n\n      do {\n        i = min(18, abs(phi) / 5);\n        i0 = floor(i);\n        di = i - i0;\n        ay = K[i0][1];\n        by = K[i0 + 1][1];\n        cy = K[min(19, i0 + 2)][1];\n        phi -= (delta = (y >= 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2) - y) * degrees;\n      } while (abs(delta) > epsilon2 && --j > 0);\n\n      break;\n    }\n  } while (--i0 >= 0);\n\n  var ax = K[i0][0],\n      bx = K[i0 + 1][0],\n      cx = K[min(19, i0 + 2)][0];\n  return [x / (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2), phi * radians];\n};\n\nexport default function () {\n  return projection(robinsonRaw).scale(152.63);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/robinson.js"],"names":["geoProjection","projection","abs","degrees","epsilon2","floor","halfPi","max","min","pi","radians","K","forEach","d","robinsonRaw","lambda","phi","i","i0","di","ax","k","ay","bx","by","cx","cy","invert","x","y","yy","u","v","t","c","j","delta","scale"],"mappings":"AAAA,SAAQA,aAAa,IAAIC,UAAzB,QAA0C,QAA1C;AACA,SAAQC,GAAR,EAAaC,OAAb,EAAsBC,QAAtB,EAAgCC,KAAhC,EAAuCC,MAAvC,EAA+CC,GAA/C,EAAoDC,GAApD,EAAyDC,EAAzD,EAA6DC,OAA7D,QAA2E,WAA3E;AAEA,IAAIC,CAAC,GAAG,CACN,CAAC,MAAD,EAAS,CAAC,KAAV,CADM,EAEN,CAAC,MAAD,EAAS,MAAT,CAFM,EAGN,CAAC,MAAD,EAAS,MAAT,CAHM,EAIN,CAAC,MAAD,EAAS,MAAT,CAJM,EAKN,CAAC,MAAD,EAAS,MAAT,CALM,EAMN,CAAC,MAAD,EAAS,MAAT,CANM,EAON,CAAC,MAAD,EAAS,MAAT,CAPM,EAQN,CAAC,MAAD,EAAS,MAAT,CARM,EASN,CAAC,MAAD,EAAS,MAAT,CATM,EAUN,CAAC,MAAD,EAAS,MAAT,CAVM,EAWN,CAAC,MAAD,EAAS,MAAT,CAXM,EAYN,CAAC,MAAD,EAAS,MAAT,CAZM,EAaN,CAAC,MAAD,EAAS,MAAT,CAbM,EAcN,CAAC,MAAD,EAAS,MAAT,CAdM,EAeN,CAAC,MAAD,EAAS,MAAT,CAfM,EAgBN,CAAC,MAAD,EAAS,MAAT,CAhBM,EAiBN,CAAC,MAAD,EAAS,MAAT,CAjBM,EAkBN,CAAC,MAAD,EAAS,MAAT,CAlBM,EAmBN,CAAC,MAAD,EAAS,MAAT,CAnBM,EAoBN,CAAC,MAAD,EAAS,MAAT,CApBM,CAAR;AAuBAA,CAAC,CAACC,OAAF,CAAU,UAASC,CAAT,EAAY;AACpBA,EAAAA,CAAC,CAAC,CAAD,CAAD,IAAQ,MAAR;AACD,CAFD;AAIA,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,GAA7B,EAAkC;AACvC,MAAIC,CAAC,GAAGT,GAAG,CAAC,EAAD,EAAKN,GAAG,CAACc,GAAD,CAAH,GAAW,EAAX,GAAgBP,EAArB,CAAX;AAAA,MACIS,EAAE,GAAGb,KAAK,CAACY,CAAD,CADd;AAAA,MAEIE,EAAE,GAAGF,CAAC,GAAGC,EAFb;AAAA,MAGIE,EAAE,GAAG,CAACC,CAAC,GAAGV,CAAC,CAACO,EAAD,CAAN,EAAY,CAAZ,CAHT;AAAA,MAIII,EAAE,GAAGD,CAAC,CAAC,CAAD,CAJV;AAAA,MAKIE,EAAE,GAAG,CAACF,CAAC,GAAGV,CAAC,CAAC,EAAEO,EAAH,CAAN,EAAc,CAAd,CALT;AAAA,MAMIM,EAAE,GAAGH,CAAC,CAAC,CAAD,CANV;AAAA,MAOII,EAAE,GAAG,CAACJ,CAAC,GAAGV,CAAC,CAACH,GAAG,CAAC,EAAD,EAAK,EAAEU,EAAP,CAAJ,CAAN,EAAuB,CAAvB,CAPT;AAAA,MAQIQ,EAAE,GAAGL,CAAC,CAAC,CAAD,CARV;AAAA,MASIA,CATJ;AAUA,SAAO,CACLN,MAAM,IAAIQ,EAAE,GAAGJ,EAAE,IAAIM,EAAE,GAAGL,EAAT,CAAF,GAAiB,CAAtB,GAA0BD,EAAE,GAAGA,EAAL,IAAWM,EAAE,GAAG,IAAIF,EAAT,GAAcH,EAAzB,IAA+B,CAA7D,CADD,EAEL,CAACJ,GAAG,GAAG,CAAN,GAAUV,MAAV,GAAmB,CAACA,MAArB,KAAgCkB,EAAE,GAAGL,EAAE,IAAIO,EAAE,GAAGJ,EAAT,CAAF,GAAiB,CAAtB,GAA0BH,EAAE,GAAGA,EAAL,IAAWO,EAAE,GAAG,IAAIF,EAAT,GAAcF,EAAzB,IAA+B,CAAzF,CAFK,CAAP;AAID;;AAEDR,WAAW,CAACa,MAAZ,GAAqB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAClC,MAAIC,EAAE,GAAGD,CAAC,GAAGvB,MAAb;AAAA,MACIU,GAAG,GAAGc,EAAE,GAAG,EADf;AAAA,MAEIb,CAAC,GAAGT,GAAG,CAAC,EAAD,EAAKN,GAAG,CAACc,GAAG,GAAG,CAAP,CAAR,CAFX;AAAA,MAGIE,EAAE,GAAGX,GAAG,CAAC,CAAD,EAAIF,KAAK,CAACY,CAAD,CAAT,CAHZ;;AAIA,KAAG;AACD,QAAIK,EAAE,GAAGX,CAAC,CAACO,EAAD,CAAD,CAAM,CAAN,CAAT;AAAA,QACIM,EAAE,GAAGb,CAAC,CAACO,EAAE,GAAG,CAAN,CAAD,CAAU,CAAV,CADT;AAAA,QAEIQ,EAAE,GAAGf,CAAC,CAACH,GAAG,CAAC,EAAD,EAAKU,EAAE,GAAG,CAAV,CAAJ,CAAD,CAAmB,CAAnB,CAFT;AAAA,QAGIa,CAAC,GAAGL,EAAE,GAAGJ,EAHb;AAAA,QAIIU,CAAC,GAAGN,EAAE,GAAG,IAAIF,EAAT,GAAcF,EAJtB;AAAA,QAKIW,CAAC,GAAG,KAAK/B,GAAG,CAAC4B,EAAD,CAAH,GAAUN,EAAf,IAAqBO,CAL7B;AAAA,QAMIG,CAAC,GAAGF,CAAC,GAAGD,CANZ;AAAA,QAOIZ,EAAE,GAAGc,CAAC,IAAI,IAAIC,CAAC,GAAGD,CAAJ,IAAS,IAAI,IAAIC,CAAJ,GAAQD,CAArB,CAAR,CAPV;;AAQA,QAAId,EAAE,IAAI,CAAN,IAAWD,EAAE,KAAK,CAAtB,EAAyB;AACvBF,MAAAA,GAAG,GAAG,CAACa,CAAC,IAAI,CAAL,GAAS,CAAT,GAAa,CAAC,CAAf,KAAqBV,EAAE,GAAGF,CAA1B,CAAN;AACA,UAAIkB,CAAC,GAAG,EAAR;AAAA,UAAYC,KAAZ;;AACA,SAAG;AACDnB,QAAAA,CAAC,GAAGT,GAAG,CAAC,EAAD,EAAKN,GAAG,CAACc,GAAD,CAAH,GAAW,CAAhB,CAAP;AACAE,QAAAA,EAAE,GAAGb,KAAK,CAACY,CAAD,CAAV;AACAE,QAAAA,EAAE,GAAGF,CAAC,GAAGC,EAAT;AACAI,QAAAA,EAAE,GAAGX,CAAC,CAACO,EAAD,CAAD,CAAM,CAAN,CAAL;AACAM,QAAAA,EAAE,GAAGb,CAAC,CAACO,EAAE,GAAG,CAAN,CAAD,CAAU,CAAV,CAAL;AACAQ,QAAAA,EAAE,GAAGf,CAAC,CAACH,GAAG,CAAC,EAAD,EAAKU,EAAE,GAAG,CAAV,CAAJ,CAAD,CAAmB,CAAnB,CAAL;AACAF,QAAAA,GAAG,IAAI,CAACoB,KAAK,GAAG,CAACP,CAAC,IAAI,CAAL,GAASvB,MAAT,GAAkB,CAACA,MAApB,KAA+BkB,EAAE,GAAGL,EAAE,IAAIO,EAAE,GAAGJ,EAAT,CAAF,GAAiB,CAAtB,GAA0BH,EAAE,GAAGA,EAAL,IAAWO,EAAE,GAAG,IAAIF,EAAT,GAAcF,EAAzB,IAA+B,CAAxF,IAA6FO,CAAtG,IAA2G1B,OAAlH;AACD,OARD,QAQSD,GAAG,CAACkC,KAAD,CAAH,GAAahC,QAAb,IAAyB,EAAE+B,CAAF,GAAM,CARxC;;AASA;AACD;AACF,GAvBD,QAuBS,EAAEjB,EAAF,IAAQ,CAvBjB;;AAwBA,MAAIE,EAAE,GAAGT,CAAC,CAACO,EAAD,CAAD,CAAM,CAAN,CAAT;AAAA,MACIK,EAAE,GAAGZ,CAAC,CAACO,EAAE,GAAG,CAAN,CAAD,CAAU,CAAV,CADT;AAAA,MAEIO,EAAE,GAAGd,CAAC,CAACH,GAAG,CAAC,EAAD,EAAKU,EAAE,GAAG,CAAV,CAAJ,CAAD,CAAmB,CAAnB,CAFT;AAGA,SAAO,CACLU,CAAC,IAAIL,EAAE,GAAGJ,EAAE,IAAIM,EAAE,GAAGL,EAAT,CAAF,GAAiB,CAAtB,GAA0BD,EAAE,GAAGA,EAAL,IAAWM,EAAE,GAAG,IAAIF,EAAT,GAAcH,EAAzB,IAA+B,CAA7D,CADI,EAELJ,GAAG,GAAGN,OAFD,CAAP;AAID,CApCD;;AAsCA,eAAe,YAAW;AACxB,SAAOT,UAAU,CAACa,WAAD,CAAV,CACFuB,KADE,CACI,MADJ,CAAP;AAED","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, degrees, epsilon2, floor, halfPi, max, min, pi, radians} from \"./math.js\";\n\nvar K = [\n  [0.9986, -0.062],\n  [1.0000, 0.0000],\n  [0.9986, 0.0620],\n  [0.9954, 0.1240],\n  [0.9900, 0.1860],\n  [0.9822, 0.2480],\n  [0.9730, 0.3100],\n  [0.9600, 0.3720],\n  [0.9427, 0.4340],\n  [0.9216, 0.4958],\n  [0.8962, 0.5571],\n  [0.8679, 0.6176],\n  [0.8350, 0.6769],\n  [0.7986, 0.7346],\n  [0.7597, 0.7903],\n  [0.7186, 0.8435],\n  [0.6732, 0.8936],\n  [0.6213, 0.9394],\n  [0.5722, 0.9761],\n  [0.5322, 1.0000]\n];\n\nK.forEach(function(d) {\n  d[1] *= 1.0144;\n});\n\nexport function robinsonRaw(lambda, phi) {\n  var i = min(18, abs(phi) * 36 / pi),\n      i0 = floor(i),\n      di = i - i0,\n      ax = (k = K[i0])[0],\n      ay = k[1],\n      bx = (k = K[++i0])[0],\n      by = k[1],\n      cx = (k = K[min(19, ++i0)])[0],\n      cy = k[1],\n      k;\n  return [\n    lambda * (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),\n    (phi > 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2)\n  ];\n}\n\nrobinsonRaw.invert = function(x, y) {\n  var yy = y / halfPi,\n      phi = yy * 90,\n      i = min(18, abs(phi / 5)),\n      i0 = max(0, floor(i));\n  do {\n    var ay = K[i0][1],\n        by = K[i0 + 1][1],\n        cy = K[min(19, i0 + 2)][1],\n        u = cy - ay,\n        v = cy - 2 * by + ay,\n        t = 2 * (abs(yy) - by) / u,\n        c = v / u,\n        di = t * (1 - c * t * (1 - 2 * c * t));\n    if (di >= 0 || i0 === 1) {\n      phi = (y >= 0 ? 5 : -5) * (di + i);\n      var j = 50, delta;\n      do {\n        i = min(18, abs(phi) / 5);\n        i0 = floor(i);\n        di = i - i0;\n        ay = K[i0][1];\n        by = K[i0 + 1][1];\n        cy = K[min(19, i0 + 2)][1];\n        phi -= (delta = (y >= 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2) - y) * degrees;\n      } while (abs(delta) > epsilon2 && --j > 0);\n      break;\n    }\n  } while (--i0 >= 0);\n  var ax = K[i0][0],\n      bx = K[i0 + 1][0],\n      cx = K[min(19, i0 + 2)][0];\n  return [\n    x / (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),\n    phi * radians\n  ];\n};\n\nexport default function() {\n  return projection(robinsonRaw)\n      .scale(152.63);\n}\n"]},"metadata":{},"sourceType":"module"}