{"ast":null,"code":"export const wrapAudioBufferSourceNodeStartMethodOffsetClamping = nativeAudioBufferSourceNode => {\n  nativeAudioBufferSourceNode.start = (start => {\n    return (when = 0, offset = 0, duration) => {\n      const buffer = nativeAudioBufferSourceNode.buffer; // Bug #154: Safari does not clamp the offset if it is equal to or greater than the duration of the buffer.\n\n      const clampedOffset = buffer === null ? offset : Math.min(buffer.duration, offset); // Bug #155: Safari does not handle the offset correctly if it would cause the buffer to be not be played at all.\n\n      if (buffer !== null && clampedOffset > buffer.duration - 0.5 / nativeAudioBufferSourceNode.context.sampleRate) {\n        start.call(nativeAudioBufferSourceNode, when, 0, 0);\n      } else {\n        start.call(nativeAudioBufferSourceNode, when, clampedOffset, duration);\n      }\n    };\n  })(nativeAudioBufferSourceNode.start);\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js"],"names":["wrapAudioBufferSourceNodeStartMethodOffsetClamping","nativeAudioBufferSourceNode","start","when","offset","duration","buffer","clampedOffset","Math","min","context","sampleRate","call"],"mappings":"AAAA,OAAO,MAAMA,kDAAkD,GAAIC,2BAAD,IAAiC;AAC/FA,EAAAA,2BAA2B,CAACC,KAA5B,GAAoC,CAAEA,KAAD,IAAW;AAC5C,WAAO,CAACC,IAAI,GAAG,CAAR,EAAWC,MAAM,GAAG,CAApB,EAAuBC,QAAvB,KAAoC;AACvC,YAAMC,MAAM,GAAGL,2BAA2B,CAACK,MAA3C,CADuC,CAEvC;;AACA,YAAMC,aAAa,GAAID,MAAM,KAAK,IAAZ,GAAoBF,MAApB,GAA6BI,IAAI,CAACC,GAAL,CAASH,MAAM,CAACD,QAAhB,EAA0BD,MAA1B,CAAnD,CAHuC,CAIvC;;AACA,UAAIE,MAAM,KAAK,IAAX,IAAmBC,aAAa,GAAGD,MAAM,CAACD,QAAP,GAAmB,MAAMJ,2BAA2B,CAACS,OAA5B,CAAoCC,UAApG,EAAiH;AAC7GT,QAAAA,KAAK,CAACU,IAAN,CAAWX,2BAAX,EAAwCE,IAAxC,EAA8C,CAA9C,EAAiD,CAAjD;AACH,OAFD,MAGK;AACDD,QAAAA,KAAK,CAACU,IAAN,CAAWX,2BAAX,EAAwCE,IAAxC,EAA8CI,aAA9C,EAA6DF,QAA7D;AACH;AACJ,KAXD;AAYH,GAbmC,EAajCJ,2BAA2B,CAACC,KAbK,CAApC;AAcH,CAfM","sourcesContent":["export const wrapAudioBufferSourceNodeStartMethodOffsetClamping = (nativeAudioBufferSourceNode) => {\n    nativeAudioBufferSourceNode.start = ((start) => {\n        return (when = 0, offset = 0, duration) => {\n            const buffer = nativeAudioBufferSourceNode.buffer;\n            // Bug #154: Safari does not clamp the offset if it is equal to or greater than the duration of the buffer.\n            const clampedOffset = (buffer === null) ? offset : Math.min(buffer.duration, offset);\n            // Bug #155: Safari does not handle the offset correctly if it would cause the buffer to be not be played at all.\n            if (buffer !== null && clampedOffset > buffer.duration - (0.5 / nativeAudioBufferSourceNode.context.sampleRate)) {\n                start.call(nativeAudioBufferSourceNode, when, 0, 0);\n            }\n            else {\n                start.call(nativeAudioBufferSourceNode, when, clampedOffset, duration);\n            }\n        };\n    })(nativeAudioBufferSourceNode.start);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js.map"]},"metadata":{},"sourceType":"module"}