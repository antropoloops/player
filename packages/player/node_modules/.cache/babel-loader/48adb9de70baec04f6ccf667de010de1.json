{"ast":null,"code":"import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConvolverNodeRendererFactory = (createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeConvolverNodes = new WeakMap();\n\n    const createConvolverNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeConvolverNode = getNativeAudioNode(proxy); // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n\n      if (!nativeConvolverNodeIsOwnedByContext) {\n        const options = {\n          buffer: nativeConvolverNode.buffer,\n          channelCount: nativeConvolverNode.channelCount,\n          channelCountMode: nativeConvolverNode.channelCountMode,\n          channelInterpretation: nativeConvolverNode.channelInterpretation,\n          disableNormalization: !nativeConvolverNode.normalize\n        };\n        nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n\n      if (isNativeAudioNodeFaker(nativeConvolverNode)) {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0], trace);\n      } else {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode, trace);\n      }\n\n      return nativeConvolverNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeConvolverNode !== undefined) {\n          return Promise.resolve(renderedNativeConvolverNode);\n        }\n\n        return createConvolverNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/convolver-node-renderer-factory.js"],"names":["isNativeAudioNodeFaker","isOwnedByContext","createConvolverNodeRendererFactory","createNativeConvolverNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeConvolverNodes","WeakMap","createConvolverNode","proxy","nativeOfflineAudioContext","trace","nativeConvolverNode","nativeConvolverNodeIsOwnedByContext","options","buffer","channelCount","channelCountMode","channelInterpretation","disableNormalization","normalize","set","inputs","render","renderedNativeConvolverNode","get","undefined","Promise","resolve"],"mappings":"AAAA,SAASA,sBAAT,QAAuC,mCAAvC;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,OAAO,MAAMC,kCAAkC,GAAG,CAACC,yBAAD,EAA4BC,kBAA5B,EAAgDC,uBAAhD,KAA4E;AAC1H,SAAO,MAAM;AACT,UAAMC,4BAA4B,GAAG,IAAIC,OAAJ,EAArC;;AACA,UAAMC,mBAAmB,GAAG,OAAOC,KAAP,EAAcC,yBAAd,EAAyCC,KAAzC,KAAmD;AAC3E,UAAIC,mBAAmB,GAAGR,kBAAkB,CAACK,KAAD,CAA5C,CAD2E,CAE3E;;AACA,YAAMI,mCAAmC,GAAGZ,gBAAgB,CAACW,mBAAD,EAAsBF,yBAAtB,CAA5D;;AACA,UAAI,CAACG,mCAAL,EAA0C;AACtC,cAAMC,OAAO,GAAG;AACZC,UAAAA,MAAM,EAAEH,mBAAmB,CAACG,MADhB;AAEZC,UAAAA,YAAY,EAAEJ,mBAAmB,CAACI,YAFtB;AAGZC,UAAAA,gBAAgB,EAAEL,mBAAmB,CAACK,gBAH1B;AAIZC,UAAAA,qBAAqB,EAAEN,mBAAmB,CAACM,qBAJ/B;AAKZC,UAAAA,oBAAoB,EAAE,CAACP,mBAAmB,CAACQ;AAL/B,SAAhB;AAOAR,QAAAA,mBAAmB,GAAGT,yBAAyB,CAACO,yBAAD,EAA4BI,OAA5B,CAA/C;AACH;;AACDR,MAAAA,4BAA4B,CAACe,GAA7B,CAAiCX,yBAAjC,EAA4DE,mBAA5D;;AACA,UAAIZ,sBAAsB,CAACY,mBAAD,CAA1B,EAAiD;AAC7C,cAAMP,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCE,mBAAmB,CAACU,MAApB,CAA2B,CAA3B,CAAnC,EAAkEX,KAAlE,CAA7B;AACH,OAFD,MAGK;AACD,cAAMN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCE,mBAAnC,EAAwDD,KAAxD,CAA7B;AACH;;AACD,aAAOC,mBAAP;AACH,KAtBD;;AAuBA,WAAO;AACHW,MAAAA,MAAM,CAACd,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,EAA0C;AAC5C,cAAMa,2BAA2B,GAAGlB,4BAA4B,CAACmB,GAA7B,CAAiCf,yBAAjC,CAApC;;AACA,YAAIc,2BAA2B,KAAKE,SAApC,EAA+C;AAC3C,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,2BAAhB,CAAP;AACH;;AACD,eAAOhB,mBAAmB,CAACC,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,CAA1B;AACH;;AAPE,KAAP;AASH,GAlCD;AAmCH,CApCM","sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConvolverNodeRendererFactory = (createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeConvolverNodes = new WeakMap();\n        const createConvolverNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeConvolverNode = getNativeAudioNode(proxy);\n            // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n            if (!nativeConvolverNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeConvolverNode.buffer,\n                    channelCount: nativeConvolverNode.channelCount,\n                    channelCountMode: nativeConvolverNode.channelCountMode,\n                    channelInterpretation: nativeConvolverNode.channelInterpretation,\n                    disableNormalization: !nativeConvolverNode.normalize\n                };\n                nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n            if (isNativeAudioNodeFaker(nativeConvolverNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0], trace);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode, trace);\n            }\n            return nativeConvolverNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeConvolverNode !== undefined) {\n                    return Promise.resolve(renderedNativeConvolverNode);\n                }\n                return createConvolverNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/convolver-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}