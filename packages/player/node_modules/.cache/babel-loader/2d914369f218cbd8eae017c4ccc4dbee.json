{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConstantSourceNodeRendererFactory = (connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeConstantSourceNodes = new WeakMap();\n    let start = null;\n    let stop = null;\n\n    const createConstantSourceNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeConstantSourceNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n       * again.\n       */\n\n      const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n\n      if (!nativeConstantSourceNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeConstantSourceNode.channelCount,\n          channelCountMode: nativeConstantSourceNode.channelCountMode,\n          channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n          offset: nativeConstantSourceNode.offset.value\n        };\n        nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n\n        if (start !== null) {\n          nativeConstantSourceNode.start(start);\n        }\n\n        if (stop !== null) {\n          nativeConstantSourceNode.stop(stop);\n        }\n      }\n\n      renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n\n      if (!nativeConstantSourceNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode, trace);\n      return nativeConstantSourceNode;\n    };\n\n    return {\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeConstantSourceNode !== undefined) {\n          return Promise.resolve(renderedNativeConstantSourceNode);\n        }\n\n        return createConstantSourceNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/constant-source-node-renderer-factory.js"],"names":["isOwnedByContext","createConstantSourceNodeRendererFactory","connectAudioParam","createNativeConstantSourceNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeConstantSourceNodes","WeakMap","start","stop","createConstantSourceNode","proxy","nativeOfflineAudioContext","trace","nativeConstantSourceNode","nativeConstantSourceNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","offset","value","set","render","renderedNativeConstantSourceNode","get","undefined","Promise","resolve"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AACA,OAAO,MAAMC,uCAAuC,GAAG,CAACC,iBAAD,EAAoBC,8BAApB,EAAoDC,kBAApD,EAAwEC,gBAAxE,EAA0FC,uBAA1F,KAAsH;AACzK,SAAO,MAAM;AACT,UAAMC,iCAAiC,GAAG,IAAIC,OAAJ,EAA1C;AACA,QAAIC,KAAK,GAAG,IAAZ;AACA,QAAIC,IAAI,GAAG,IAAX;;AACA,UAAMC,wBAAwB,GAAG,OAAOC,KAAP,EAAcC,yBAAd,EAAyCC,KAAzC,KAAmD;AAChF,UAAIC,wBAAwB,GAAGX,kBAAkB,CAACQ,KAAD,CAAjD;AACA;;;;;AAIA,YAAMI,wCAAwC,GAAGhB,gBAAgB,CAACe,wBAAD,EAA2BF,yBAA3B,CAAjE;;AACA,UAAI,CAACG,wCAAL,EAA+C;AAC3C,cAAMC,OAAO,GAAG;AACZC,UAAAA,YAAY,EAAEH,wBAAwB,CAACG,YAD3B;AAEZC,UAAAA,gBAAgB,EAAEJ,wBAAwB,CAACI,gBAF/B;AAGZC,UAAAA,qBAAqB,EAAEL,wBAAwB,CAACK,qBAHpC;AAIZC,UAAAA,MAAM,EAAEN,wBAAwB,CAACM,MAAzB,CAAgCC;AAJ5B,SAAhB;AAMAP,QAAAA,wBAAwB,GAAGZ,8BAA8B,CAACU,yBAAD,EAA4BI,OAA5B,CAAzD;;AACA,YAAIR,KAAK,KAAK,IAAd,EAAoB;AAChBM,UAAAA,wBAAwB,CAACN,KAAzB,CAA+BA,KAA/B;AACH;;AACD,YAAIC,IAAI,KAAK,IAAb,EAAmB;AACfK,UAAAA,wBAAwB,CAACL,IAAzB,CAA8BA,IAA9B;AACH;AACJ;;AACDH,MAAAA,iCAAiC,CAACgB,GAAlC,CAAsCV,yBAAtC,EAAiEE,wBAAjE;;AACA,UAAI,CAACC,wCAAL,EAA+C;AAC3C,cAAMX,gBAAgB,CAACQ,yBAAD,EAA4BD,KAAK,CAACS,MAAlC,EAA0CN,wBAAwB,CAACM,MAAnE,EAA2EP,KAA3E,CAAtB;AACH,OAFD,MAGK;AACD,cAAMZ,iBAAiB,CAACW,yBAAD,EAA4BD,KAAK,CAACS,MAAlC,EAA0CN,wBAAwB,CAACM,MAAnE,EAA2EP,KAA3E,CAAvB;AACH;;AACD,YAAMR,uBAAuB,CAACM,KAAD,EAAQC,yBAAR,EAAmCE,wBAAnC,EAA6DD,KAA7D,CAA7B;AACA,aAAOC,wBAAP;AACH,KA/BD;;AAgCA,WAAO;AACH,UAAIN,KAAJ,CAAUa,KAAV,EAAiB;AACbb,QAAAA,KAAK,GAAGa,KAAR;AACH,OAHE;;AAIH,UAAIZ,IAAJ,CAASY,KAAT,EAAgB;AACZZ,QAAAA,IAAI,GAAGY,KAAP;AACH,OANE;;AAOHE,MAAAA,MAAM,CAACZ,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,EAA0C;AAC5C,cAAMW,gCAAgC,GAAGlB,iCAAiC,CAACmB,GAAlC,CAAsCb,yBAAtC,CAAzC;;AACA,YAAIY,gCAAgC,KAAKE,SAAzC,EAAoD;AAChD,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,gCAAhB,CAAP;AACH;;AACD,eAAOd,wBAAwB,CAACC,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,CAA/B;AACH;;AAbE,KAAP;AAeH,GAnDD;AAoDH,CArDM","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConstantSourceNodeRendererFactory = (connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeConstantSourceNodes = new WeakMap();\n        let start = null;\n        let stop = null;\n        const createConstantSourceNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeConstantSourceNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeConstantSourceNode.channelCount,\n                    channelCountMode: nativeConstantSourceNode.channelCountMode,\n                    channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n                    offset: nativeConstantSourceNode.offset.value\n                };\n                nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeConstantSourceNode.start(start);\n                }\n                if (stop !== null) {\n                    nativeConstantSourceNode.stop(stop);\n                }\n            }\n            renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode, trace);\n            return nativeConstantSourceNode;\n        };\n        return {\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeConstantSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeConstantSourceNode);\n                }\n                return createConstantSourceNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/constant-source-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}