{"ast":null,"code":"// TODO: abstract (LoadPending, LoadProgress, LoadReady, LoadError)\nexport class AudiosetLoader {\n  constructor(onAudiosetStatusChange) {\n    this.onAudiosetStatusChange = onAudiosetStatusChange;\n    this.status = {\n      status: \"pending\"\n    };\n\n    this.fetch = () => Promise.reject();\n  }\n\n  loadAudioset(audiosetId) {\n    this.setStatus({\n      status: \"loading\",\n      audiosetId\n    });\n    return this.fetch(audiosetId).then(audioset => this.setStatus({\n      status: \"ready\",\n      audioset\n    })).catch(error => this.setStatus({\n      status: \"error\",\n      error\n    }));\n  }\n\n  setStatus(status) {\n    this.status = status;\n    this.onAudiosetStatusChange(status);\n    return status;\n  }\n\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/Audioset/AudiosetLoader.ts"],"names":["AudiosetLoader","constructor","onAudiosetStatusChange","status","fetch","Promise","reject","loadAudioset","audiosetId","setStatus","then","audioset","catch","error"],"mappings":"AAEA;AA2BA,OAAO,MAAMA,cAAN,CAAqB;AAG1BC,EAAAA,WAAW,CAASC,sBAAT,EAA+C;AAAA,SAAtCA,sBAAsC,GAAtCA,sBAAsC;AAAA,SAFnDC,MAEmD,GAFtB;AAAEA,MAAAA,MAAM,EAAE;AAAV,KAEsB;;AAAA,SACnDC,KADmD,GAC5B,MAAMC,OAAO,CAACC,MAAR,EADsB;AAAE;;AAGrDC,EAAAA,YAAP,CAAoBC,UAApB,EAAqE;AACnE,SAAKC,SAAL,CAAe;AAAEN,MAAAA,MAAM,EAAE,SAAV;AAAqBK,MAAAA;AAArB,KAAf;AACA,WAAO,KAAKJ,KAAL,CAAWI,UAAX,EACJE,IADI,CACCC,QAAQ,IAAI,KAAKF,SAAL,CAAe;AAAEN,MAAAA,MAAM,EAAE,OAAV;AAAmBQ,MAAAA;AAAnB,KAAf,CADb,EAEJC,KAFI,CAEEC,KAAK,IAAI,KAAKJ,SAAL,CAAe;AAAEN,MAAAA,MAAM,EAAE,OAAV;AAAmBU,MAAAA;AAAnB,KAAf,CAFX,CAAP;AAGD;;AAEOJ,EAAAA,SAAR,CAAkBN,MAAlB,EAA8C;AAC5C,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKD,sBAAL,CAA4BC,MAA5B;AACA,WAAOA,MAAP;AACD;;AAjByB","sourcesContent":["import { AudiosetData } from \".\";\n\n// TODO: abstract (LoadPending, LoadProgress, LoadReady, LoadError)\ninterface LoadPending {\n  readonly status: \"pending\";\n}\ninterface LoadingAudioset {\n  readonly status: \"loading\";\n  readonly audiosetId: string;\n}\ninterface AudiosetLoaded {\n  readonly status: \"ready\";\n  readonly audioset: AudiosetData;\n}\ninterface AudiosetLoadError {\n  readonly status: \"error\";\n  readonly error: any;\n}\n\nexport type AudiosetLoadStatus =\n  | LoadPending\n  | LoadingAudioset\n  | AudiosetLoaded\n  | AudiosetLoadError;\n\nexport type FetchAudioset = (id: string) => Promise<AudiosetData>;\n\ntype LoadListener = (status: AudiosetLoadStatus) => void;\n\nexport class AudiosetLoader {\n  public status: AudiosetLoadStatus = { status: \"pending\" };\n\n  constructor(private onAudiosetStatusChange: LoadListener) {}\n  public fetch: FetchAudioset = () => Promise.reject();\n\n  public loadAudioset(audiosetId: string): Promise<AudiosetLoadStatus> {\n    this.setStatus({ status: \"loading\", audiosetId });\n    return this.fetch(audiosetId)\n      .then(audioset => this.setStatus({ status: \"ready\", audioset }))\n      .catch(error => this.setStatus({ status: \"error\", error }));\n  }\n\n  private setStatus(status: AudiosetLoadStatus) {\n    this.status = status;\n    this.onAudiosetStatusChange(status);\n    return status;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}