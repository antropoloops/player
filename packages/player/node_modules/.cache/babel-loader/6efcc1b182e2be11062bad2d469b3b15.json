{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createStereoPannerNodeRendererFactory = function createStereoPannerNodeRendererFactory(connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeStereoPannerNodes = new WeakMap();\n\n    var createStereoPannerNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext, trace) {\n        var nativeStereoPannerNode, nativeStereoPannerNodeIsOwnedByContext, options;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeStereoPannerNode = getNativeAudioNode(proxy);\n                /*\n                 * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n                 * again.\n                 */\n\n                nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n\n                if (!nativeStereoPannerNodeIsOwnedByContext) {\n                  options = {\n                    channelCount: nativeStereoPannerNode.channelCount,\n                    channelCountMode: nativeStereoPannerNode.channelCountMode,\n                    channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n                    pan: nativeStereoPannerNode.pan.value\n                  };\n                  nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n                }\n\n                renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n\n                if (nativeStereoPannerNodeIsOwnedByContext) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 7;\n                return renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan, trace);\n\n              case 7:\n                _context.next = 11;\n                break;\n\n              case 9:\n                _context.next = 11;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan, trace);\n\n              case 11:\n                if (!isNativeAudioNodeFaker(nativeStereoPannerNode)) {\n                  _context.next = 16;\n                  break;\n                }\n\n                _context.next = 14;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0], trace);\n\n              case 14:\n                _context.next = 18;\n                break;\n\n              case 16:\n                _context.next = 18;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode, trace);\n\n              case 18:\n                return _context.abrupt(\"return\", nativeStereoPannerNode);\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createStereoPannerNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext, trace) {\n        var renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeStereoPannerNode !== undefined) {\n          return Promise.resolve(renderedNativeStereoPannerNode);\n        }\n\n        return createStereoPannerNode(proxy, nativeOfflineAudioContext, trace);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/stereo-panner-node-renderer-factory.js"],"names":["isNativeAudioNodeFaker","isOwnedByContext","createStereoPannerNodeRendererFactory","connectAudioParam","createNativeStereoPannerNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeStereoPannerNodes","WeakMap","createStereoPannerNode","proxy","nativeOfflineAudioContext","trace","nativeStereoPannerNode","nativeStereoPannerNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","pan","value","set","inputs","render","renderedNativeStereoPannerNode","get","undefined","Promise","resolve"],"mappings":";;AAAA,SAASA,sBAAT,QAAuC,mCAAvC;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,OAAO,IAAMC,qCAAqC,GAAG,SAAxCA,qCAAwC,CAACC,iBAAD,EAAoBC,4BAApB,EAAkDC,kBAAlD,EAAsEC,gBAAtE,EAAwFC,uBAAxF,EAAoH;AACrK,SAAO,YAAM;AACT,QAAMC,+BAA+B,GAAG,IAAIC,OAAJ,EAAxC;;AACA,QAAMC,sBAAsB;AAAA,0EAAG,iBAAOC,KAAP,EAAcC,yBAAd,EAAyCC,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBC,gBAAAA,sBADuB,GACET,kBAAkB,CAACM,KAAD,CADpB;AAE3B;;;;;AAIMI,gBAAAA,sCANqB,GAMoBd,gBAAgB,CAACa,sBAAD,EAAyBF,yBAAzB,CANpC;;AAO3B,oBAAI,CAACG,sCAAL,EAA6C;AACnCC,kBAAAA,OADmC,GACzB;AACZC,oBAAAA,YAAY,EAAEH,sBAAsB,CAACG,YADzB;AAEZC,oBAAAA,gBAAgB,EAAEJ,sBAAsB,CAACI,gBAF7B;AAGZC,oBAAAA,qBAAqB,EAAEL,sBAAsB,CAACK,qBAHlC;AAIZC,oBAAAA,GAAG,EAAEN,sBAAsB,CAACM,GAAvB,CAA2BC;AAJpB,mBADyB;AAOzCP,kBAAAA,sBAAsB,GAAGV,4BAA4B,CAACQ,yBAAD,EAA4BI,OAA5B,CAArD;AACH;;AACDR,gBAAAA,+BAA+B,CAACc,GAAhC,CAAoCV,yBAApC,EAA+DE,sBAA/D;;AAhB2B,oBAiBtBC,sCAjBsB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAkBjBT,gBAAgB,CAACM,yBAAD,EAA4BD,KAAK,CAACS,GAAlC,EAAuCN,sBAAsB,CAACM,GAA9D,EAAmEP,KAAnE,CAlBC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAqBjBV,iBAAiB,CAACS,yBAAD,EAA4BD,KAAK,CAACS,GAAlC,EAAuCN,sBAAsB,CAACM,GAA9D,EAAmEP,KAAnE,CArBA;;AAAA;AAAA,qBAuBvBb,sBAAsB,CAACc,sBAAD,CAvBC;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAwBjBP,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCE,sBAAsB,CAACS,MAAvB,CAA8B,CAA9B,CAAnC,EAAqEV,KAArE,CAxBN;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBA2BjBN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCE,sBAAnC,EAA2DD,KAA3D,CA3BN;;AAAA;AAAA,iDA6BpBC,sBA7BoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAtBJ,sBAAsB;AAAA;AAAA;AAAA,OAA5B;;AA+BA,WAAO;AACHc,MAAAA,MADG,kBACIb,KADJ,EACWC,yBADX,EACsCC,KADtC,EAC6C;AAC5C,YAAMY,8BAA8B,GAAGjB,+BAA+B,CAACkB,GAAhC,CAAoCd,yBAApC,CAAvC;;AACA,YAAIa,8BAA8B,KAAKE,SAAvC,EAAkD;AAC9C,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,8BAAhB,CAAP;AACH;;AACD,eAAOf,sBAAsB,CAACC,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,CAA7B;AACH;AAPE,KAAP;AASH,GA1CD;AA2CH,CA5CM","sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createStereoPannerNodeRendererFactory = (connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeStereoPannerNodes = new WeakMap();\n        const createStereoPannerNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeStereoPannerNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeStereoPannerNode.channelCount,\n                    channelCountMode: nativeStereoPannerNode.channelCountMode,\n                    channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n                    pan: nativeStereoPannerNode.pan.value\n                };\n                nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan, trace);\n            }\n            if (isNativeAudioNodeFaker(nativeStereoPannerNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0], trace);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode, trace);\n            }\n            return nativeStereoPannerNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeStereoPannerNode !== undefined) {\n                    return Promise.resolve(renderedNativeStereoPannerNode);\n                }\n                return createStereoPannerNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/stereo-panner-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}