{"ast":null,"code":"import _regeneratorRuntime from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import{getAudioContext}from\"./AudioContext\";/**\n * Fetch an AudioBuffer from a fetch response\n */export function decodeAudioBuffer(response){var context,arrayBuffer;return _regeneratorRuntime.async(function decodeAudioBuffer$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regeneratorRuntime.awrap(getAudioContext());case 2:context=_context.sent;_context.next=5;return _regeneratorRuntime.awrap(response.arrayBuffer());case 5:arrayBuffer=_context.sent;return _context.abrupt(\"return\",decodeArrayBuffer(context,arrayBuffer));case 7:case\"end\":return _context.stop();}}});}function decodeArrayBuffer(ctx,buffer){return new Promise(function(resolve,reject){ctx.decodeAudioData(buffer,resolve,reject);});}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/decodeAudioBuffer.ts"],"names":["getAudioContext","decodeAudioBuffer","response","context","arrayBuffer","decodeArrayBuffer","ctx","buffer","Promise","resolve","reject","decodeAudioData"],"mappings":"mJACA,OAASA,eAAT,KAAgC,gBAAhC,CAEA;;GAGA,MAAO,SAAeC,CAAAA,iBAAf,CAAiCC,QAAjC,sMACiBF,eAAe,EADhC,SACCG,OADD,gEAEqBD,QAAQ,CAACE,WAAT,EAFrB,SAECA,WAFD,+CAGEC,iBAAiB,CAACF,OAAD,CAAUC,WAAV,CAHnB,gDAMP,QAASC,CAAAA,iBAAT,CACEC,GADF,CAEEC,MAFF,CAGwB,CACtB,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtCJ,GAAG,CAACK,eAAJ,CAAoBJ,MAApB,CAA4BE,OAA5B,CAAqCC,MAArC,EACD,CAFM,CAAP,CAGD","sourcesContent":["import { IAudioContext } from \"standardized-audio-context\";\nimport { getAudioContext } from \"./AudioContext\";\n\n/**\n * Fetch an AudioBuffer from a fetch response\n */\nexport async function decodeAudioBuffer(response: Response) {\n  const context = await getAudioContext();\n  const arrayBuffer = await response.arrayBuffer();\n  return decodeArrayBuffer(context, arrayBuffer);\n}\n\nfunction decodeArrayBuffer(\n  ctx: IAudioContext,\n  buffer: ArrayBuffer,\n): Promise<AudioBuffer> {\n  return new Promise((resolve, reject) => {\n    ctx.decodeAudioData(buffer, resolve, reject);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}