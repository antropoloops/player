{"ast":null,"code":"import _defineProperty from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport debug from \"debug\";\nimport { KeyboardControler } from \"./KeyboardControler\";\nconst log = debug(\"atpls:control\");\n\nclass ClipTrackManager {\n  constructor() {\n    this.clipStateByClipId = {};\n    this.trackIdOfClip = {};\n  }\n\n  addClip(clip) {\n    this.clipStateByClipId[clip.id] = {\n      state: \"stopped\"\n    };\n    this.trackIdOfClip[clip.id] = clip.trackId;\n  }\n\n}\n/**\n * Controls the playing state of clips and tracks\n */\n\n\nexport class AudiosetControl extends ClipTrackManager {\n  constructor(audioset, listener) {\n    super();\n    this.listener = listener;\n    this.keyboard = void 0;\n    this.trackStateByTrackId = {};\n    this.clipIdsOfTrack = {};\n    this.commands = [];\n    this.playingClipsCount = 0;\n    this.playingTracksCount = 0;\n    log(\"create control\");\n    this.keyboard = new KeyboardControler(audioset, this);\n    audioset.clips.forEach(clip => {});\n    audioset.tracks.forEach(track => {\n      const volume = track.volume || 1;\n      this.trackStateByTrackId[track.id] = {\n        state: \"stopped\",\n        volume\n      };\n      this.clipIdsOfTrack[track.id] = track.clipIds;\n    });\n  }\n\n  toggleClip(clipId, time) {\n    const clipState = this.clipStateByClipId[clipId];\n\n    if (!clipState) {\n      return;\n    } else if (clipState.state === \"stopped\") {\n      this.startClip(clipId, time);\n    } else if (clipState.state === \"playing\") {\n      this.stopClip(clipId, time);\n    }\n  }\n  /**\n   * Start a clip\n   * @param clipId\n   */\n\n\n  startClip(clipId, time) {\n    const clipState = this.clipStateByClipId[clipId];\n\n    if (!clipState || clipState.state === \"playing\") {\n      return;\n    }\n\n    log(\"start clip %s %o\", clipId, time);\n    const trackId = this.trackIdOfClip[clipId];\n    const sameTrackClipIds = this.clipIdsOfTrack[trackId];\n    sameTrackClipIds.forEach(trackClipId => this.stopClipCommand(trackClipId, time));\n    this.startTrackCommand(trackId, time);\n    this.startClipCommand(clipId, time);\n    this.sendCommands();\n  }\n  /**\n   * Stops a clip\n   */\n\n\n  stopClip(clipId, time) {\n    const clipState = this.clipStateByClipId[clipId];\n\n    if (!clipState || clipState.state === \"stopped\") {\n      return;\n    }\n\n    const trackId = this.trackIdOfClip[clipId];\n    this.stopClipCommand(clipId, time);\n    this.stopTrackCommand(trackId, time);\n    this.sendCommands();\n  }\n  /**\n   * Stops all clips\n   */\n\n\n  stopAll(time) {\n    Object.keys(this.clipStateByClipId).forEach(clipId => this.stopClipCommand(clipId, time));\n    Object.keys(this.trackStateByTrackId).forEach(trackId => this.stopTrackCommand(trackId, time));\n    this.sendCommands();\n  }\n\n  getState() {\n    return {\n      playingClipsCount: this.playingClipsCount,\n      playingTracksCount: this.playingTracksCount,\n      clips: _objectSpread({}, this.clipStateByClipId),\n      tracks: _objectSpread({}, this.trackStateByTrackId)\n    };\n  } //// PRIVATE ////\n\n\n  sendCommands() {\n    this.commands.forEach(command => {\n      this.listener.onControlCommand(command);\n    });\n    this.commands = [];\n    this.listener.onControlStateChanged(this.getState());\n  }\n\n  startClipCommand(clipId, time) {\n    if (this.clipStateByClipId[clipId].state === \"playing\") {\n      return;\n    }\n\n    this.playingClipsCount += 1;\n    this.clipStateByClipId[clipId] = {\n      state: \"playing\"\n    };\n    this.commands.push({\n      command: \"startClip\",\n      clipId,\n      time\n    });\n  }\n\n  stopClipCommand(clipId, time) {\n    if (this.clipStateByClipId[clipId].state === \"stopped\") {\n      return;\n    }\n\n    this.playingClipsCount -= 1;\n    this.clipStateByClipId[clipId] = {\n      state: \"stopped\"\n    };\n    this.commands.push({\n      command: \"stopClip\",\n      clipId,\n      time\n    });\n  }\n\n  startTrackCommand(trackId, time) {\n    const trackState = this.trackStateByTrackId[trackId];\n\n    if (trackState.state === \"playing\") {\n      return;\n    }\n\n    this.playingTracksCount += 1;\n    this.trackStateByTrackId[trackId] = {\n      state: \"playing\",\n      volume: trackState.volume\n    };\n    this.commands.push({\n      command: \"startTrack\",\n      trackId,\n      time\n    });\n  }\n\n  stopTrackCommand(trackId, time) {\n    const trackState = this.trackStateByTrackId[trackId];\n\n    if (trackState.state === \"stopped\") {\n      return;\n    }\n\n    this.playingTracksCount -= 1;\n    this.trackStateByTrackId[trackId] = {\n      state: \"stopped\",\n      volume: trackState.volume\n    };\n    this.commands.push({\n      command: \"stopTrack\",\n      trackId,\n      time\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/Control/AudiosetControl.ts"],"names":["debug","KeyboardControler","log","ClipTrackManager","constructor","clipStateByClipId","trackIdOfClip","addClip","clip","id","state","trackId","AudiosetControl","audioset","listener","keyboard","trackStateByTrackId","clipIdsOfTrack","commands","playingClipsCount","playingTracksCount","clips","forEach","tracks","track","volume","clipIds","toggleClip","clipId","time","clipState","startClip","stopClip","sameTrackClipIds","trackClipId","stopClipCommand","startTrackCommand","startClipCommand","sendCommands","stopTrackCommand","stopAll","Object","keys","getState","command","onControlCommand","onControlStateChanged","push","trackState"],"mappings":"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","sourcesContent":["import debug from \"debug\";\nimport { Audioset, Clip } from \"../../audioset\";\nimport { ControlCommand } from \"./ControlCommand\";\nimport {\n  ClipPlayingStateByClipId,\n  ControlState,\n  TrackPlayingStateByTrackId,\n} from \"./ControlState\";\nimport { KeyboardControler } from \"./KeyboardControler\";\n\nconst log = debug(\"atpls:control\");\n\nexport interface ControlListener {\n  onControlStateChanged: (state: ControlState) => void;\n  onControlCommand: (command: ControlCommand) => void;\n}\n\nexport interface PlayerControl {\n  readonly keyboard: KeyboardControler;\n  getState(): ControlState;\n  toggleClip(clipId: string, time: number): void;\n  stopClip(clipId: string, time: number): void;\n  startClip(clipId: string, time: number): void;\n  stopAll(time: number): void;\n}\n\nclass ClipTrackManager {\n  private clipStateByClipId: ClipPlayingStateByClipId = {};\n  private trackIdOfClip: Record<string, string> = {};\n\n  constructor() {}\n\n  public addClip(clip: Clip) {\n    this.clipStateByClipId[clip.id] = { state: \"stopped\" };\n    this.trackIdOfClip[clip.id] = clip.trackId;\n  }\n}\n\n/**\n * Controls the playing state of clips and tracks\n */\nexport class AudiosetControl extends ClipTrackManager implements PlayerControl {\n  public readonly keyboard: KeyboardControler;\n  private trackStateByTrackId: TrackPlayingStateByTrackId = {};\n  private clipIdsOfTrack: Record<string, string[]> = {};\n  private commands: ControlCommand[] = [];\n  private playingClipsCount: number = 0;\n  private playingTracksCount: number = 0;\n\n  constructor(audioset: Audioset, private listener: ControlListener) {\n    super();\n    log(\"create control\");\n    this.keyboard = new KeyboardControler(audioset, this);\n    audioset.clips.forEach((clip: Clip) => {});\n    audioset.tracks.forEach(track => {\n      const volume = track.volume || 1;\n      this.trackStateByTrackId[track.id] = { state: \"stopped\", volume };\n      this.clipIdsOfTrack[track.id] = track.clipIds;\n    });\n  }\n\n  public toggleClip(clipId: string, time: number) {\n    const clipState = this.clipStateByClipId[clipId];\n    if (!clipState) {\n      return;\n    } else if (clipState.state === \"stopped\") {\n      this.startClip(clipId, time);\n    } else if (clipState.state === \"playing\") {\n      this.stopClip(clipId, time);\n    }\n  }\n\n  /**\n   * Start a clip\n   * @param clipId\n   */\n  public startClip(clipId: string, time: number) {\n    const clipState = this.clipStateByClipId[clipId];\n    if (!clipState || clipState.state === \"playing\") {\n      return;\n    }\n    log(\"start clip %s %o\", clipId, time);\n\n    const trackId = this.trackIdOfClip[clipId];\n    const sameTrackClipIds = this.clipIdsOfTrack[trackId];\n    sameTrackClipIds.forEach(trackClipId =>\n      this.stopClipCommand(trackClipId, time),\n    );\n    this.startTrackCommand(trackId, time);\n    this.startClipCommand(clipId, time);\n    this.sendCommands();\n  }\n\n  /**\n   * Stops a clip\n   */\n  public stopClip(clipId: string, time: number) {\n    const clipState = this.clipStateByClipId[clipId];\n    if (!clipState || clipState.state === \"stopped\") {\n      return;\n    }\n\n    const trackId = this.trackIdOfClip[clipId];\n\n    this.stopClipCommand(clipId, time);\n    this.stopTrackCommand(trackId, time);\n    this.sendCommands();\n  }\n\n  /**\n   * Stops all clips\n   */\n  public stopAll(time: number) {\n    Object.keys(this.clipStateByClipId).forEach(clipId =>\n      this.stopClipCommand(clipId, time),\n    );\n    Object.keys(this.trackStateByTrackId).forEach(trackId =>\n      this.stopTrackCommand(trackId, time),\n    );\n    this.sendCommands();\n  }\n\n  public getState(): ControlState {\n    return {\n      playingClipsCount: this.playingClipsCount,\n      playingTracksCount: this.playingTracksCount,\n      clips: { ...this.clipStateByClipId },\n      tracks: { ...this.trackStateByTrackId },\n    };\n  }\n\n  //// PRIVATE ////\n  private sendCommands() {\n    this.commands.forEach(command => {\n      this.listener.onControlCommand(command);\n    });\n    this.commands = [];\n\n    this.listener.onControlStateChanged(this.getState());\n  }\n\n  private startClipCommand(clipId: string, time: number) {\n    if (this.clipStateByClipId[clipId].state === \"playing\") {\n      return;\n    }\n\n    this.playingClipsCount += 1;\n    this.clipStateByClipId[clipId] = { state: \"playing\" };\n    this.commands.push({ command: \"startClip\", clipId, time });\n  }\n  private stopClipCommand(clipId: string, time: number) {\n    if (this.clipStateByClipId[clipId].state === \"stopped\") {\n      return;\n    }\n\n    this.playingClipsCount -= 1;\n    this.clipStateByClipId[clipId] = { state: \"stopped\" };\n    this.commands.push({ command: \"stopClip\", clipId, time });\n  }\n  private startTrackCommand(trackId: string, time: number) {\n    const trackState = this.trackStateByTrackId[trackId];\n    if (trackState.state === \"playing\") {\n      return;\n    }\n\n    this.playingTracksCount += 1;\n    this.trackStateByTrackId[trackId] = {\n      state: \"playing\",\n      volume: trackState.volume,\n    };\n    this.commands.push({ command: \"startTrack\", trackId, time });\n  }\n  private stopTrackCommand(trackId: string, time: number) {\n    const trackState = this.trackStateByTrackId[trackId];\n    if (trackState.state === \"stopped\") {\n      return;\n    }\n\n    this.playingTracksCount -= 1;\n    this.trackStateByTrackId[trackId] = {\n      state: \"stopped\",\n      volume: trackState.volume,\n    };\n    this.commands.push({ command: \"stopTrack\", trackId, time });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}