{"ast":null,"code":"import _objectSpread from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nexport var createBaseAudioContextConstructor = function createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, _decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) {\n  return /*#__PURE__*/function (_minimalBaseAudioCont) {\n    _inherits(BaseAudioContext, _minimalBaseAudioCont);\n\n    var _super = _createSuper(BaseAudioContext);\n\n    function BaseAudioContext(_nativeContext, numberOfChannels) {\n      var _this;\n\n      _classCallCheck(this, BaseAudioContext);\n\n      _this = _super.call(this, _nativeContext, numberOfChannels);\n      _this._nativeContext = _nativeContext;\n      _this._audioWorklet = addAudioWorkletModule === undefined ? undefined : {\n        addModule: function addModule(moduleURL, options) {\n          return addAudioWorkletModule(_assertThisInitialized(_this), moduleURL, options);\n        }\n      };\n      return _this;\n    }\n\n    _createClass(BaseAudioContext, [{\n      key: \"createAnalyser\",\n      value: function createAnalyser() {\n        return new analyserNodeConstructor(this);\n      }\n    }, {\n      key: \"createBiquadFilter\",\n      value: function createBiquadFilter() {\n        return new biquadFilterNodeConstructor(this);\n      }\n    }, {\n      key: \"createBuffer\",\n      value: function createBuffer(numberOfChannels, length, sampleRate) {\n        return new audioBufferConstructor({\n          length: length,\n          numberOfChannels: numberOfChannels,\n          sampleRate: sampleRate\n        });\n      }\n    }, {\n      key: \"createBufferSource\",\n      value: function createBufferSource() {\n        return new audioBufferSourceNodeConstructor(this);\n      }\n    }, {\n      key: \"createChannelMerger\",\n      value: function createChannelMerger() {\n        var numberOfInputs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n        return new channelMergerNodeConstructor(this, {\n          numberOfInputs: numberOfInputs\n        });\n      }\n    }, {\n      key: \"createChannelSplitter\",\n      value: function createChannelSplitter() {\n        var numberOfOutputs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n        return new channelSplitterNodeConstructor(this, {\n          numberOfOutputs: numberOfOutputs\n        });\n      }\n    }, {\n      key: \"createConstantSource\",\n      value: function createConstantSource() {\n        return new constantSourceNodeConstructor(this);\n      }\n    }, {\n      key: \"createConvolver\",\n      value: function createConvolver() {\n        return new convolverNodeConstructor(this);\n      }\n    }, {\n      key: \"createDelay\",\n      value: function createDelay() {\n        var maxDelayTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return new delayNodeConstructor(this, {\n          maxDelayTime: maxDelayTime\n        });\n      }\n    }, {\n      key: \"createDynamicsCompressor\",\n      value: function createDynamicsCompressor() {\n        return new dynamicsCompressorNodeConstructor(this);\n      }\n    }, {\n      key: \"createGain\",\n      value: function createGain() {\n        return new gainNodeConstructor(this);\n      }\n    }, {\n      key: \"createIIRFilter\",\n      value: function createIIRFilter(feedforward, feedback) {\n        return new iIRFilterNodeConstructor(this, {\n          feedback: feedback,\n          feedforward: feedforward\n        });\n      }\n    }, {\n      key: \"createOscillator\",\n      value: function createOscillator() {\n        return new oscillatorNodeConstructor(this);\n      }\n    }, {\n      key: \"createPanner\",\n      value: function createPanner() {\n        return new pannerNodeConstructor(this);\n      }\n    }, {\n      key: \"createPeriodicWave\",\n      value: function createPeriodicWave(real, imag) {\n        var constraints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n          disableNormalization: false\n        };\n        return new periodicWaveConstructor(this, _objectSpread(_objectSpread({}, constraints), {}, {\n          imag: imag,\n          real: real\n        }));\n      }\n    }, {\n      key: \"createStereoPanner\",\n      value: function createStereoPanner() {\n        return new stereoPannerNodeConstructor(this);\n      }\n    }, {\n      key: \"createWaveShaper\",\n      value: function createWaveShaper() {\n        return new waveShaperNodeConstructor(this);\n      }\n    }, {\n      key: \"decodeAudioData\",\n      value: function decodeAudioData(audioData, successCallback, errorCallback) {\n        return _decodeAudioData(this._nativeContext, audioData).then(function (audioBuffer) {\n          if (typeof successCallback === 'function') {\n            successCallback(audioBuffer);\n          }\n\n          return audioBuffer;\n        }).catch(function (err) {\n          if (typeof errorCallback === 'function') {\n            errorCallback(err);\n          }\n\n          throw err; // tslint:disable-line:rxjs-throw-error\n        });\n      }\n    }, {\n      key: \"audioWorklet\",\n      get: function get() {\n        return this._audioWorklet;\n      }\n    }]);\n\n    return BaseAudioContext;\n  }(minimalBaseAudioContextConstructor);\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/base-audio-context-constructor.js"],"names":["createBaseAudioContextConstructor","addAudioWorkletModule","analyserNodeConstructor","audioBufferConstructor","audioBufferSourceNodeConstructor","biquadFilterNodeConstructor","channelMergerNodeConstructor","channelSplitterNodeConstructor","constantSourceNodeConstructor","convolverNodeConstructor","decodeAudioData","delayNodeConstructor","dynamicsCompressorNodeConstructor","gainNodeConstructor","iIRFilterNodeConstructor","minimalBaseAudioContextConstructor","oscillatorNodeConstructor","pannerNodeConstructor","periodicWaveConstructor","stereoPannerNodeConstructor","waveShaperNodeConstructor","_nativeContext","numberOfChannels","_audioWorklet","undefined","addModule","moduleURL","options","length","sampleRate","numberOfInputs","numberOfOutputs","maxDelayTime","feedforward","feedback","real","imag","constraints","disableNormalization","audioData","successCallback","errorCallback","then","audioBuffer","catch","err"],"mappings":"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","sourcesContent":["export const createBaseAudioContextConstructor = (addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) => {\n    return class BaseAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(_nativeContext, numberOfChannels) {\n            super(_nativeContext, numberOfChannels);\n            this._nativeContext = _nativeContext;\n            this._audioWorklet = (addAudioWorkletModule === undefined) ?\n                undefined :\n                { addModule: (moduleURL, options) => addAudioWorkletModule(this, moduleURL, options) };\n        }\n        get audioWorklet() {\n            return this._audioWorklet;\n        }\n        createAnalyser() {\n            return new analyserNodeConstructor(this);\n        }\n        createBiquadFilter() {\n            return new biquadFilterNodeConstructor(this);\n        }\n        createBuffer(numberOfChannels, length, sampleRate) {\n            return new audioBufferConstructor({ length, numberOfChannels, sampleRate });\n        }\n        createBufferSource() {\n            return new audioBufferSourceNodeConstructor(this);\n        }\n        createChannelMerger(numberOfInputs = 6) {\n            return new channelMergerNodeConstructor(this, { numberOfInputs });\n        }\n        createChannelSplitter(numberOfOutputs = 6) {\n            return new channelSplitterNodeConstructor(this, { numberOfOutputs });\n        }\n        createConstantSource() {\n            return new constantSourceNodeConstructor(this);\n        }\n        createConvolver() {\n            return new convolverNodeConstructor(this);\n        }\n        createDelay(maxDelayTime = 1) {\n            return new delayNodeConstructor(this, { maxDelayTime });\n        }\n        createDynamicsCompressor() {\n            return new dynamicsCompressorNodeConstructor(this);\n        }\n        createGain() {\n            return new gainNodeConstructor(this);\n        }\n        createIIRFilter(feedforward, feedback) {\n            return new iIRFilterNodeConstructor(this, { feedback, feedforward });\n        }\n        createOscillator() {\n            return new oscillatorNodeConstructor(this);\n        }\n        createPanner() {\n            return new pannerNodeConstructor(this);\n        }\n        createPeriodicWave(real, imag, constraints = { disableNormalization: false }) {\n            return new periodicWaveConstructor(this, { ...constraints, imag, real });\n        }\n        createStereoPanner() {\n            return new stereoPannerNodeConstructor(this);\n        }\n        createWaveShaper() {\n            return new waveShaperNodeConstructor(this);\n        }\n        decodeAudioData(audioData, successCallback, errorCallback) {\n            return decodeAudioData(this._nativeContext, audioData)\n                .then((audioBuffer) => {\n                if (typeof successCallback === 'function') {\n                    successCallback(audioBuffer);\n                }\n                return audioBuffer;\n            })\n                .catch((err) => {\n                if (typeof errorCallback === 'function') {\n                    errorCallback(err);\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/base-audio-context-constructor.js.map"]},"metadata":{},"sourceType":"module"}