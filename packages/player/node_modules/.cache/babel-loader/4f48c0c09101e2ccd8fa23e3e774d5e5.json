{"ast":null,"code":"import _objectSpread from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nvar DEFAULT_OPTIONS = {\n  buffer: null,\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  // Bug #149: Safari does not yet support the detune AudioParam.\n  loop: false,\n  loopEnd: 0,\n  loopStart: 0,\n  playbackRate: 1\n};\nexport var createAudioBufferSourceNodeConstructor = function createAudioBufferSourceNodeConstructor(audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(AudioBufferSourceNode, _audioNodeConstructor);\n\n    var _super = _createSuper(AudioBufferSourceNode);\n\n    function AudioBufferSourceNode(context) {\n      var _this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_OPTIONS;\n\n      _classCallCheck(this, AudioBufferSourceNode);\n\n      var nativeContext = getNativeContext(context);\n\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n      var nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var audioBufferSourceNodeRenderer = isOffline ? createAudioBufferSourceNodeRenderer() : null;\n      _this = _super.call(this, context, false, nativeAudioBufferSourceNode, audioBufferSourceNodeRenderer);\n      _this._audioBufferSourceNodeRenderer = audioBufferSourceNodeRenderer;\n      _this._isBufferNullified = false;\n      _this._isBufferSet = options.buffer !== null && options.buffer !== undefined;\n      _this._nativeAudioBufferSourceNode = nativeAudioBufferSourceNode;\n      _this._onended = null; // Bug #73: Edge & Safari do not export the correct values for maxValue and minValue.\n\n      _this._playbackRate = createAudioParam(_assertThisInitialized(_this), isOffline, nativeAudioBufferSourceNode.playbackRate, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      return _this;\n    }\n\n    _createClass(AudioBufferSourceNode, [{\n      key: \"start\",\n      value: function start() {\n        var _this2 = this;\n\n        var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var duration = arguments.length > 2 ? arguments[2] : undefined;\n\n        this._nativeAudioBufferSourceNode.start(when, offset, duration);\n\n        if (this._audioBufferSourceNodeRenderer !== null) {\n          this._audioBufferSourceNodeRenderer.start = duration === undefined ? [when, offset] : [when, offset, duration];\n        } else {\n          setInternalStateToActive(this);\n\n          var resetInternalStateToPassive = function resetInternalStateToPassive() {\n            _this2._nativeAudioBufferSourceNode.removeEventListener('ended', resetInternalStateToPassive); // @todo Determine a meaningful delay instead of just using one second.\n\n\n            setTimeout(function () {\n              return setInternalStateToPassive(_this2);\n            }, 1000);\n          };\n\n          this._nativeAudioBufferSourceNode.addEventListener('ended', resetInternalStateToPassive);\n        }\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n        this._nativeAudioBufferSourceNode.stop(when);\n\n        if (this._audioBufferSourceNodeRenderer !== null) {\n          this._audioBufferSourceNodeRenderer.stop = when;\n        }\n      }\n    }, {\n      key: \"buffer\",\n      get: function get() {\n        if (this._isBufferNullified) {\n          return null;\n        }\n\n        return this._nativeAudioBufferSourceNode.buffer;\n      },\n      set: function set(value) {\n        // Bug #71: Edge does not allow to set the buffer to null.\n        try {\n          this._nativeAudioBufferSourceNode.buffer = value;\n        } catch (err) {\n          if (value !== null || err.code !== 17) {\n            throw err; // tslint:disable-line:rxjs-throw-error\n          } // This will modify the buffer in place. Luckily that works in Edge and has the same effect as setting the buffer to null.\n\n\n          if (this._nativeAudioBufferSourceNode.buffer !== null) {\n            var buffer = this._nativeAudioBufferSourceNode.buffer;\n            var numberOfChannels = buffer.numberOfChannels;\n\n            for (var i = 0; i < numberOfChannels; i += 1) {\n              buffer.getChannelData(i).fill(0);\n            }\n\n            this._isBufferNullified = true;\n          }\n        } // Bug #72: Only Chrome, Edge & Opera do not allow to reassign the buffer yet.\n\n\n        if (value !== null) {\n          if (this._isBufferSet) {\n            throw createInvalidStateError();\n          }\n\n          this._isBufferSet = true;\n        }\n      }\n    }, {\n      key: \"onended\",\n      get: function get() {\n        return this._onended;\n      },\n      set: function set(value) {\n        var wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n        this._nativeAudioBufferSourceNode.onended = wrappedListener;\n        var nativeOnEnded = this._nativeAudioBufferSourceNode.onended;\n        this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n      }\n    }, {\n      key: \"loop\",\n      get: function get() {\n        return this._nativeAudioBufferSourceNode.loop;\n      },\n      set: function set(value) {\n        this._nativeAudioBufferSourceNode.loop = value;\n      }\n    }, {\n      key: \"loopEnd\",\n      get: function get() {\n        return this._nativeAudioBufferSourceNode.loopEnd;\n      },\n      set: function set(value) {\n        this._nativeAudioBufferSourceNode.loopEnd = value;\n      }\n    }, {\n      key: \"loopStart\",\n      get: function get() {\n        return this._nativeAudioBufferSourceNode.loopStart;\n      },\n      set: function set(value) {\n        this._nativeAudioBufferSourceNode.loopStart = value;\n      }\n    }, {\n      key: \"playbackRate\",\n      get: function get() {\n        return this._playbackRate;\n      }\n    }]);\n\n    return AudioBufferSourceNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/audio-buffer-source-node-constructor.js"],"names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","setInternalStateToActive","setInternalStateToPassive","DEFAULT_OPTIONS","buffer","channelCount","channelCountMode","channelInterpretation","loop","loopEnd","loopStart","playbackRate","createAudioBufferSourceNodeConstructor","audioNodeConstructor","createAudioBufferSourceNodeRenderer","createAudioParam","createInvalidStateError","createNativeAudioBufferSourceNode","getNativeContext","isNativeOfflineAudioContext","wrapEventListener","context","options","nativeContext","mergedOptions","nativeAudioBufferSourceNode","isOffline","audioBufferSourceNodeRenderer","_audioBufferSourceNodeRenderer","_isBufferNullified","_isBufferSet","undefined","_nativeAudioBufferSourceNode","_onended","_playbackRate","when","offset","duration","start","resetInternalStateToPassive","removeEventListener","setTimeout","addEventListener","stop","value","err","code","numberOfChannels","i","getChannelData","fill","wrappedListener","onended","nativeOnEnded"],"mappings":"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","sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n    buffer: null,\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    // Bug #149: Safari does not yet support the detune AudioParam.\n    loop: false,\n    loopEnd: 0,\n    loopStart: 0,\n    playbackRate: 1\n};\nexport const createAudioBufferSourceNodeConstructor = (audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n    return class AudioBufferSourceNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const audioBufferSourceNodeRenderer = ((isOffline)\n                ? createAudioBufferSourceNodeRenderer()\n                : null);\n            super(context, false, nativeAudioBufferSourceNode, audioBufferSourceNodeRenderer);\n            this._audioBufferSourceNodeRenderer = audioBufferSourceNodeRenderer;\n            this._isBufferNullified = false;\n            this._isBufferSet = (options.buffer !== null && options.buffer !== undefined);\n            this._nativeAudioBufferSourceNode = nativeAudioBufferSourceNode;\n            this._onended = null;\n            // Bug #73: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._playbackRate = createAudioParam(this, isOffline, nativeAudioBufferSourceNode.playbackRate, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n        get buffer() {\n            if (this._isBufferNullified) {\n                return null;\n            }\n            return this._nativeAudioBufferSourceNode.buffer;\n        }\n        set buffer(value) {\n            // Bug #71: Edge does not allow to set the buffer to null.\n            try {\n                this._nativeAudioBufferSourceNode.buffer = value;\n            }\n            catch (err) {\n                if (value !== null || err.code !== 17) {\n                    throw err; // tslint:disable-line:rxjs-throw-error\n                }\n                // This will modify the buffer in place. Luckily that works in Edge and has the same effect as setting the buffer to null.\n                if (this._nativeAudioBufferSourceNode.buffer !== null) {\n                    const buffer = this._nativeAudioBufferSourceNode.buffer;\n                    const numberOfChannels = buffer.numberOfChannels;\n                    for (let i = 0; i < numberOfChannels; i += 1) {\n                        buffer\n                            .getChannelData(i)\n                            .fill(0);\n                    }\n                    this._isBufferNullified = true;\n                }\n            }\n            // Bug #72: Only Chrome, Edge & Opera do not allow to reassign the buffer yet.\n            if (value !== null) {\n                if (this._isBufferSet) {\n                    throw createInvalidStateError();\n                }\n                this._isBufferSet = true;\n            }\n        }\n        get onended() {\n            return this._onended;\n        }\n        set onended(value) {\n            const wrappedListener = (typeof value === 'function') ? wrapEventListener(this, value) : null;\n            this._nativeAudioBufferSourceNode.onended = wrappedListener;\n            const nativeOnEnded = this._nativeAudioBufferSourceNode.onended;\n            this._onended = (nativeOnEnded !== null && nativeOnEnded === wrappedListener) ? value : nativeOnEnded;\n        }\n        get loop() {\n            return this._nativeAudioBufferSourceNode.loop;\n        }\n        set loop(value) {\n            this._nativeAudioBufferSourceNode.loop = value;\n        }\n        get loopEnd() {\n            return this._nativeAudioBufferSourceNode.loopEnd;\n        }\n        set loopEnd(value) {\n            this._nativeAudioBufferSourceNode.loopEnd = value;\n        }\n        get loopStart() {\n            return this._nativeAudioBufferSourceNode.loopStart;\n        }\n        set loopStart(value) {\n            this._nativeAudioBufferSourceNode.loopStart = value;\n        }\n        get playbackRate() {\n            return this._playbackRate;\n        }\n        start(when = 0, offset = 0, duration) {\n            this._nativeAudioBufferSourceNode.start(when, offset, duration);\n            if (this._audioBufferSourceNodeRenderer !== null) {\n                this._audioBufferSourceNodeRenderer.start = (duration === undefined) ? [when, offset] : [when, offset, duration];\n            }\n            else {\n                setInternalStateToActive(this);\n                const resetInternalStateToPassive = () => {\n                    this._nativeAudioBufferSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n                    // @todo Determine a meaningful delay instead of just using one second.\n                    setTimeout(() => setInternalStateToPassive(this), 1000);\n                };\n                this._nativeAudioBufferSourceNode.addEventListener('ended', resetInternalStateToPassive);\n            }\n        }\n        stop(when = 0) {\n            this._nativeAudioBufferSourceNode.stop(when);\n            if (this._audioBufferSourceNodeRenderer !== null) {\n                this._audioBufferSourceNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-buffer-source-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}