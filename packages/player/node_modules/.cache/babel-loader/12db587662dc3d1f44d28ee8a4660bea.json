{"ast":null,"code":"import { asin, cos, sin } from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function (x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\nexport default function () {\n  return parallel1(cylindricalEqualAreaRaw).parallel(38.58) // acos(sqrt(width / height / pi)) * radians\n  .scale(195.044); // width / (sqrt(width / height / pi) * 2 * pi)\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/cylindricalEqualArea.js"],"names":["asin","cos","sin","parallel1","cylindricalEqualAreaRaw","phi0","cosPhi0","forward","lambda","phi","invert","x","y","parallel","scale"],"mappings":"AAAA,SAAQA,IAAR,EAAcC,GAAd,EAAmBC,GAAnB,QAA6B,WAA7B;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AAEA,OAAO,SAASC,uBAAT,CAAiCC,IAAjC,EAAuC;AAC5C,MAAIC,OAAO,GAAGL,GAAG,CAACI,IAAD,CAAjB;;AAEA,WAASE,OAAT,CAAiBC,MAAjB,EAAyBC,GAAzB,EAA8B;AAC5B,WAAO,CAACD,MAAM,GAAGF,OAAV,EAAmBJ,GAAG,CAACO,GAAD,CAAH,GAAWH,OAA9B,CAAP;AACD;;AAEDC,EAAAA,OAAO,CAACG,MAAR,GAAiB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC9B,WAAO,CAACD,CAAC,GAAGL,OAAL,EAAcN,IAAI,CAACY,CAAC,GAAGN,OAAL,CAAlB,CAAP;AACD,GAFD;;AAIA,SAAOC,OAAP;AACD;AAED,eAAe,YAAW;AACxB,SAAOJ,SAAS,CAACC,uBAAD,CAAT,CACFS,QADE,CACO,KADP,EACc;AADd,GAEFC,KAFE,CAEI,OAFJ,CAAP,CADwB,CAGH;AACtB","sourcesContent":["import {asin, cos, sin} from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(cylindricalEqualAreaRaw)\n      .parallel(38.58) // acos(sqrt(width / height / pi)) * radians\n      .scale(195.044); // width / (sqrt(width / height / pi) * 2 * pi)\n}\n"]},"metadata":{},"sourceType":"module"}