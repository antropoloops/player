{"ast":null,"code":"import _defineProperty from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { KeyboardControler } from \"./KeyboardControler\";\n\n/**\n * Controls the playing state of clips and tracks\n */\nexport class AudiosetControl {\n  constructor(audioset, listener) {\n    this.listener = listener;\n    this.clips = {};\n    this.tracks = {};\n    this.clipIdsOfTrack = {};\n    this.trackIdOfClip = {};\n    this.commands = [];\n    this.clipsCount = 0;\n    this.tracksCount = 0;\n    this.keyboard = void 0;\n    this.keyboard = new KeyboardControler(audioset, this);\n    audioset.clips.forEach(clip => {\n      this.clips[clip.id] = {\n        state: \"stopped\"\n      };\n      this.trackIdOfClip[clip.id] = clip.trackId;\n    });\n    audioset.tracks.forEach(track => {\n      const volume = track.volume || 1;\n      this.tracks[track.id] = {\n        state: \"stopped\",\n        volume\n      };\n      this.clipIdsOfTrack[track.id] = track.clipIds;\n    });\n  }\n\n  toggleClip(clipId, time) {\n    const clipState = this.clips[clipId];\n\n    if (!clipState) {\n      return;\n    } else if (clipState.state === \"stopped\") {\n      this.startClip(clipId, time);\n    } else if (clipState.state === \"playing\") {\n      this.stopClip(clipId, time);\n    }\n  }\n  /**\n   * Start a clip\n   * @param clipId\n   */\n\n\n  startClip(clipId, time) {\n    const clipState = this.clips[clipId];\n    if (!clipState || clipState.state === \"playing\") return;\n    const trackId = this.trackIdOfClip[clipId];\n    const sameTrackClipIds = this.clipIdsOfTrack[trackId];\n\n    this._emitChanges(() => {\n      sameTrackClipIds.forEach(clipId => this._stopClip(clipId, time));\n\n      this._startTrack(trackId, time);\n\n      this._startClip(clipId, time);\n    });\n  }\n  /**\n   * Stops a clip\n   */\n\n\n  stopClip(clipId, time) {\n    const clipState = this.clips[clipId];\n    if (!clipState || clipState.state === \"stopped\") return;\n    const trackId = this.trackIdOfClip[clipId];\n\n    this._emitChanges(() => {\n      this._stopClip(clipId, time);\n\n      this._stopTrack(trackId, time);\n    });\n  }\n  /**\n   * Stops all clips\n   */\n\n\n  stopAll(time) {\n    this._emitChanges(() => {\n      Object.keys(this.clips).forEach(clipId => this._stopClip(clipId, time));\n      Object.keys(this.tracks).forEach(trackId => this._stopTrack(trackId, time));\n    });\n  }\n\n  getState() {\n    return {\n      playingClipsCount: this.clipsCount,\n      playingTracksCount: this.tracksCount,\n      clips: _objectSpread({}, this.clips),\n      tracks: _objectSpread({}, this.tracks)\n    };\n  } //// PRIVATE ////\n\n\n  _emitChanges(changes) {\n    changes();\n    this.commands.forEach(command => {\n      this.listener.onControlCommand(command);\n    });\n    this.commands = [];\n    this.listener.onControlStateChanged(this.getState());\n  }\n\n  _startClip(clipId, time) {\n    if (this.clips[clipId].state === \"playing\") return;\n    this.clipsCount += 1;\n    this.clips[clipId] = {\n      state: \"playing\"\n    };\n    this.commands.push({\n      command: \"startClip\",\n      clipId,\n      time\n    });\n  }\n\n  _stopClip(clipId, time) {\n    if (this.clips[clipId].state === \"stopped\") return;\n    this.clipsCount -= 1;\n    this.clips[clipId] = {\n      state: \"stopped\"\n    };\n    this.commands.push({\n      command: \"stopClip\",\n      clipId,\n      time\n    });\n  }\n\n  _startTrack(trackId, time) {\n    const trackState = this.tracks[trackId];\n    if (trackState.state === \"playing\") return;\n    this.tracksCount += 1;\n    this.tracks[trackId] = {\n      state: \"playing\",\n      volume: trackState.volume\n    };\n    this.commands.push({\n      command: \"startTrack\",\n      trackId,\n      time\n    });\n  }\n\n  _stopTrack(trackId, time) {\n    const trackState = this.tracks[trackId];\n    if (trackState.state === \"stopped\") return;\n    this.tracksCount -= 1;\n    this.tracks[trackId] = {\n      state: \"stopped\",\n      volume: trackState.volume\n    };\n    this.commands.push({\n      command: \"stopTrack\",\n      trackId,\n      time\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/Player/AudiosetControl.ts"],"names":["KeyboardControler","AudiosetControl","constructor","audioset","listener","clips","tracks","clipIdsOfTrack","trackIdOfClip","commands","clipsCount","tracksCount","keyboard","forEach","clip","id","state","trackId","track","volume","clipIds","toggleClip","clipId","time","clipState","startClip","stopClip","sameTrackClipIds","_emitChanges","_stopClip","_startTrack","_startClip","_stopTrack","stopAll","Object","keys","getState","playingClipsCount","playingTracksCount","changes","command","onControlCommand","onControlStateChanged","push","trackState"],"mappings":"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","sourcesContent":["import { Clip } from \"../Audioset\";\nimport { Audioset } from \"../AudiosetMetadata\";\nimport { KeyboardControler } from \"./KeyboardControler\";\n\nexport type PlayingState = \"stopped\" | \"playing\"; //| \"playScheduled\" |  \"stopScheduled\";\n\nexport interface ClipPlayingState {\n  readonly state: PlayingState;\n}\n\nexport interface TrackPlayingState {\n  readonly state: PlayingState;\n  readonly volume: number;\n}\n\nexport type StartClip = {\n  command: \"startClip\";\n  clipId: string;\n  time: number;\n};\nexport type StopClip = {\n  command: \"stopClip\";\n  clipId: string;\n  time: number;\n};\nexport type StartTrack = {\n  command: \"startTrack\";\n  trackId: string;\n  time: number;\n};\nexport type StopTrack = {\n  command: \"stopTrack\";\n  trackId: string;\n  time: number;\n};\n\nexport type ControlCommand = StartClip | StopClip | StartTrack | StopTrack;\n\ntype ClipPlayingStateByClipId = Record<string, ClipPlayingState>;\ntype TrackPlayingStateByTrackId = Record<string, TrackPlayingState>;\n\nexport type ControlState = {\n  playingClipsCount: number;\n  playingTracksCount: number;\n  clips: ClipPlayingStateByClipId;\n  tracks: TrackPlayingStateByTrackId;\n};\n\nexport type ControlListener = {\n  onControlStateChanged: (state: ControlState) => void;\n  onControlCommand: (command: ControlCommand) => void;\n};\n\n/**\n * Controls the playing state of clips and tracks\n */\nexport class AudiosetControl {\n  private clips: ClipPlayingStateByClipId = {};\n  private tracks: TrackPlayingStateByTrackId = {};\n  private clipIdsOfTrack: Record<string, string[]> = {};\n  private trackIdOfClip: Record<string, string> = {};\n  private commands: ControlCommand[] = [];\n  private clipsCount: number = 0;\n  private tracksCount: number = 0;\n\n  public readonly keyboard: KeyboardControler;\n\n  constructor(audioset: Audioset, private listener: ControlListener) {\n    this.keyboard = new KeyboardControler(audioset, this);\n    audioset.clips.forEach((clip: Clip) => {\n      this.clips[clip.id] = { state: \"stopped\" };\n      this.trackIdOfClip[clip.id] = clip.trackId;\n    });\n    audioset.tracks.forEach((track) => {\n      const volume = track.volume || 1;\n      this.tracks[track.id] = { state: \"stopped\", volume };\n      this.clipIdsOfTrack[track.id] = track.clipIds;\n    });\n  }\n\n  public toggleClip(clipId: string, time: number) {\n    const clipState = this.clips[clipId];\n    if (!clipState) {\n      return;\n    } else if (clipState.state === \"stopped\") {\n      this.startClip(clipId, time);\n    } else if (clipState.state === \"playing\") {\n      this.stopClip(clipId, time);\n    }\n  }\n\n  /**\n   * Start a clip\n   * @param clipId\n   */\n  startClip(clipId: string, time: number) {\n    const clipState = this.clips[clipId];\n    if (!clipState || clipState.state === \"playing\") return;\n\n    const trackId = this.trackIdOfClip[clipId];\n    const sameTrackClipIds = this.clipIdsOfTrack[trackId];\n    this._emitChanges(() => {\n      sameTrackClipIds.forEach((clipId) => this._stopClip(clipId, time));\n      this._startTrack(trackId, time);\n      this._startClip(clipId, time);\n    });\n  }\n\n  /**\n   * Stops a clip\n   */\n  stopClip(clipId: string, time: number) {\n    const clipState = this.clips[clipId];\n    if (!clipState || clipState.state === \"stopped\") return;\n\n    const trackId = this.trackIdOfClip[clipId];\n\n    this._emitChanges(() => {\n      this._stopClip(clipId, time);\n      this._stopTrack(trackId, time);\n    });\n  }\n\n  /**\n   * Stops all clips\n   */\n  stopAll(time: number) {\n    this._emitChanges(() => {\n      Object.keys(this.clips).forEach((clipId) => this._stopClip(clipId, time));\n      Object.keys(this.tracks).forEach((trackId) => this._stopTrack(trackId, time));\n    });\n  }\n\n  public getState(): ControlState {\n    return {\n      playingClipsCount: this.clipsCount,\n      playingTracksCount: this.tracksCount,\n      clips: { ...this.clips },\n      tracks: { ...this.tracks },\n    };\n  }\n\n  //// PRIVATE ////\n  private _emitChanges(changes: () => void) {\n    changes();\n\n    this.commands.forEach((command) => {\n      this.listener.onControlCommand(command);\n    });\n    this.commands = [];\n\n    this.listener.onControlStateChanged(this.getState());\n  }\n\n  private _startClip(clipId: string, time: number) {\n    if (this.clips[clipId].state === \"playing\") return;\n\n    this.clipsCount += 1;\n    this.clips[clipId] = { state: \"playing\" };\n    this.commands.push({ command: \"startClip\", clipId, time });\n  }\n  private _stopClip(clipId: string, time: number) {\n    if (this.clips[clipId].state === \"stopped\") return;\n\n    this.clipsCount -= 1;\n    this.clips[clipId] = { state: \"stopped\" };\n    this.commands.push({ command: \"stopClip\", clipId, time });\n  }\n  private _startTrack(trackId: string, time: number) {\n    const trackState = this.tracks[trackId];\n    if (trackState.state === \"playing\") return;\n\n    this.tracksCount += 1;\n    this.tracks[trackId] = { state: \"playing\", volume: trackState.volume };\n    this.commands.push({ command: \"startTrack\", trackId, time });\n  }\n  private _stopTrack(trackId: string, time: number) {\n    const trackState = this.tracks[trackId];\n    if (trackState.state === \"stopped\") return;\n\n    this.tracksCount -= 1;\n    this.tracks[trackId] = { state: \"stopped\", volume: trackState.volume };\n    this.commands.push({ command: \"stopTrack\", trackId, time });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}