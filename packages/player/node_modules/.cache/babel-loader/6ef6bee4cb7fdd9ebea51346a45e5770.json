{"ast":null,"code":"import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createWaveShaperNodeRendererFactory = (createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeWaveShaperNodes = new WeakMap();\n\n    const createWaveShaperNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeWaveShaperNode = getNativeAudioNode(proxy); // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);\n\n      if (!nativeWaveShaperNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeWaveShaperNode.channelCount,\n          channelCountMode: nativeWaveShaperNode.channelCountMode,\n          channelInterpretation: nativeWaveShaperNode.channelInterpretation,\n          curve: nativeWaveShaperNode.curve,\n          oversample: nativeWaveShaperNode.oversample\n        };\n        nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);\n\n      if (isNativeAudioNodeFaker(nativeWaveShaperNode)) {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0], trace);\n      } else {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode, trace);\n      }\n\n      return nativeWaveShaperNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeWaveShaperNode !== undefined) {\n          return Promise.resolve(renderedNativeWaveShaperNode);\n        }\n\n        return createWaveShaperNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/wave-shaper-node-renderer-factory.js"],"names":["isNativeAudioNodeFaker","isOwnedByContext","createWaveShaperNodeRendererFactory","createNativeWaveShaperNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeWaveShaperNodes","WeakMap","createWaveShaperNode","proxy","nativeOfflineAudioContext","trace","nativeWaveShaperNode","nativeWaveShaperNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","curve","oversample","set","inputs","render","renderedNativeWaveShaperNode","get","undefined","Promise","resolve"],"mappings":"AAAA,SAASA,sBAAT,QAAuC,mCAAvC;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,OAAO,MAAMC,mCAAmC,GAAG,CAACC,0BAAD,EAA6BC,kBAA7B,EAAiDC,uBAAjD,KAA6E;AAC5H,SAAO,MAAM;AACT,UAAMC,6BAA6B,GAAG,IAAIC,OAAJ,EAAtC;;AACA,UAAMC,oBAAoB,GAAG,OAAOC,KAAP,EAAcC,yBAAd,EAAyCC,KAAzC,KAAmD;AAC5E,UAAIC,oBAAoB,GAAGR,kBAAkB,CAACK,KAAD,CAA7C,CAD4E,CAE5E;;AACA,YAAMI,oCAAoC,GAAGZ,gBAAgB,CAACW,oBAAD,EAAuBF,yBAAvB,CAA7D;;AACA,UAAI,CAACG,oCAAL,EAA2C;AACvC,cAAMC,OAAO,GAAG;AACZC,UAAAA,YAAY,EAAEH,oBAAoB,CAACG,YADvB;AAEZC,UAAAA,gBAAgB,EAAEJ,oBAAoB,CAACI,gBAF3B;AAGZC,UAAAA,qBAAqB,EAAEL,oBAAoB,CAACK,qBAHhC;AAIZC,UAAAA,KAAK,EAAEN,oBAAoB,CAACM,KAJhB;AAKZC,UAAAA,UAAU,EAAEP,oBAAoB,CAACO;AALrB,SAAhB;AAOAP,QAAAA,oBAAoB,GAAGT,0BAA0B,CAACO,yBAAD,EAA4BI,OAA5B,CAAjD;AACH;;AACDR,MAAAA,6BAA6B,CAACc,GAA9B,CAAkCV,yBAAlC,EAA6DE,oBAA7D;;AACA,UAAIZ,sBAAsB,CAACY,oBAAD,CAA1B,EAAkD;AAC9C,cAAMP,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCE,oBAAoB,CAACS,MAArB,CAA4B,CAA5B,CAAnC,EAAmEV,KAAnE,CAA7B;AACH,OAFD,MAGK;AACD,cAAMN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCE,oBAAnC,EAAyDD,KAAzD,CAA7B;AACH;;AACD,aAAOC,oBAAP;AACH,KAtBD;;AAuBA,WAAO;AACHU,MAAAA,MAAM,CAACb,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,EAA0C;AAC5C,cAAMY,4BAA4B,GAAGjB,6BAA6B,CAACkB,GAA9B,CAAkCd,yBAAlC,CAArC;;AACA,YAAIa,4BAA4B,KAAKE,SAArC,EAAgD;AAC5C,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,4BAAhB,CAAP;AACH;;AACD,eAAOf,oBAAoB,CAACC,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,CAA3B;AACH;;AAPE,KAAP;AASH,GAlCD;AAmCH,CApCM","sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createWaveShaperNodeRendererFactory = (createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeWaveShaperNodes = new WeakMap();\n        const createWaveShaperNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeWaveShaperNode = getNativeAudioNode(proxy);\n            // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);\n            if (!nativeWaveShaperNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeWaveShaperNode.channelCount,\n                    channelCountMode: nativeWaveShaperNode.channelCountMode,\n                    channelInterpretation: nativeWaveShaperNode.channelInterpretation,\n                    curve: nativeWaveShaperNode.curve,\n                    oversample: nativeWaveShaperNode.oversample\n                };\n                nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);\n            if (isNativeAudioNodeFaker(nativeWaveShaperNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0], trace);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode, trace);\n            }\n            return nativeWaveShaperNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeWaveShaperNode !== undefined) {\n                    return Promise.resolve(renderedNativeWaveShaperNode);\n                }\n                return createWaveShaperNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wave-shaper-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}