{"ast":null,"code":"import { Display, Visuals } from \"../../visuals\";\nimport { addResizeObserver } from \"./addResizeObserver\"; // TODO: move this outside visuals\n\nexport class VisualControl {\n  constructor(audioset, el) {\n    this.display = void 0;\n    this.visuals = void 0;\n    this.detachers = [];\n    this.display = new Display(el);\n    this.visuals = new Visuals(audioset, this.display);\n    setupVisuals(audioset, this.visuals).then(() => {\n      this.detachers.push(addResizeObserver(el, (width, height) => {\n        this.visuals.resizeSvg(width, height);\n      }));\n    });\n  }\n\n  run(command) {\n    switch (command.command) {\n      case \"startClip\":\n        return this.startClip(command.clipId);\n\n      case \"stopClip\":\n        return this.stopClip(command.clipId);\n    }\n  }\n\n  startClip(clipId) {\n    this.visuals.show(clipId);\n  }\n\n  stopClip(clipId) {\n    this.visuals.hide(clipId);\n  }\n\n  detach() {\n    for (const detach of this.detachers) {\n      detach();\n    }\n  }\n\n}\n\nfunction setupVisuals(audioset, visuals) {\n  if (audioset.visuals.mode === \"map\") {\n    return fetch(audioset.visuals.geomap.url).then(response => response.json()).then(data => visuals.setGeodata(data)).then(() => visuals);\n  } else {\n    visuals.setup();\n    return Promise.resolve(visuals);\n  }\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/VisualEffects/index.ts"],"names":["Display","Visuals","addResizeObserver","VisualControl","constructor","audioset","el","display","visuals","detachers","setupVisuals","then","push","width","height","resizeSvg","run","command","startClip","clipId","stopClip","show","hide","detach","mode","fetch","geomap","url","response","json","data","setGeodata","setup","Promise","resolve"],"mappings":"AACA,SAASA,OAAT,EAAkBC,OAAlB,QAAiC,eAAjC;AAEA,SAASC,iBAAT,QAAkC,qBAAlC,C,CAEA;;AACA,OAAO,MAAMC,aAAN,CAAoB;AAKzBC,EAAAA,WAAW,CAACC,QAAD,EAAqBC,EAArB,EAA8B;AAAA,SAJjCC,OAIiC;AAAA,SAHjCC,OAGiC;AAAA,SAFjCC,SAEiC,GAFF,EAEE;AACvC,SAAKF,OAAL,GAAe,IAAIP,OAAJ,CAAYM,EAAZ,CAAf;AACA,SAAKE,OAAL,GAAe,IAAIP,OAAJ,CAAYI,QAAZ,EAAsB,KAAKE,OAA3B,CAAf;AACAG,IAAAA,YAAY,CAACL,QAAD,EAAW,KAAKG,OAAhB,CAAZ,CAAqCG,IAArC,CAA0C,MAAM;AAC9C,WAAKF,SAAL,CAAeG,IAAf,CACEV,iBAAiB,CAACI,EAAD,EAAK,CAACO,KAAD,EAAgBC,MAAhB,KAAmC;AACvD,aAAKN,OAAL,CAAaO,SAAb,CAAuBF,KAAvB,EAA8BC,MAA9B;AACD,OAFgB,CADnB;AAKD,KAND;AAOD;;AAEME,EAAAA,GAAP,CAAWC,OAAX,EAAoC;AAClC,YAAQA,OAAO,CAACA,OAAhB;AACE,WAAK,WAAL;AACE,eAAO,KAAKC,SAAL,CAAeD,OAAO,CAACE,MAAvB,CAAP;;AACF,WAAK,UAAL;AACE,eAAO,KAAKC,QAAL,CAAcH,OAAO,CAACE,MAAtB,CAAP;AAJJ;AAMD;;AAEMD,EAAAA,SAAP,CAAiBC,MAAjB,EAAiC;AAC/B,SAAKX,OAAL,CAAaa,IAAb,CAAkBF,MAAlB;AACD;;AAEMC,EAAAA,QAAP,CAAgBD,MAAhB,EAAgC;AAC9B,SAAKX,OAAL,CAAac,IAAb,CAAkBH,MAAlB;AACD;;AAEMI,EAAAA,MAAP,GAAgB;AACd,SAAK,MAAMA,MAAX,IAAqB,KAAKd,SAA1B,EAAqC;AACnCc,MAAAA,MAAM;AACP;AACF;;AAtCwB;;AAyC3B,SAASb,YAAT,CAAsBL,QAAtB,EAA0CG,OAA1C,EAA8E;AAC5E,MAAIH,QAAQ,CAACG,OAAT,CAAiBgB,IAAjB,KAA0B,KAA9B,EAAqC;AACnC,WAAOC,KAAK,CAACpB,QAAQ,CAACG,OAAT,CAAiBkB,MAAjB,CAAwBC,GAAzB,CAAL,CACJhB,IADI,CACCiB,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAEJlB,IAFI,CAECmB,IAAI,IAAItB,OAAO,CAACuB,UAAR,CAAmBD,IAAnB,CAFT,EAGJnB,IAHI,CAGC,MAAMH,OAHP,CAAP;AAID,GALD,MAKO;AACLA,IAAAA,OAAO,CAACwB,KAAR;AACA,WAAOC,OAAO,CAACC,OAAR,CAAgB1B,OAAhB,CAAP;AACD;AACF","sourcesContent":["import { Audioset } from \"../../audioset\";\nimport { Display, Visuals } from \"../../visuals\";\nimport { ControlCommand } from \"../Control\";\nimport { addResizeObserver } from \"./addResizeObserver\";\n\n// TODO: move this outside visuals\nexport class VisualControl {\n  private display: Display;\n  private visuals: Visuals;\n  private detachers: Array<() => void> = [];\n\n  constructor(audioset: Audioset, el: any) {\n    this.display = new Display(el);\n    this.visuals = new Visuals(audioset, this.display);\n    setupVisuals(audioset, this.visuals).then(() => {\n      this.detachers.push(\n        addResizeObserver(el, (width: number, height: number) => {\n          this.visuals.resizeSvg(width, height);\n        }),\n      );\n    });\n  }\n\n  public run(command: ControlCommand) {\n    switch (command.command) {\n      case \"startClip\":\n        return this.startClip(command.clipId);\n      case \"stopClip\":\n        return this.stopClip(command.clipId);\n    }\n  }\n\n  public startClip(clipId: string) {\n    this.visuals.show(clipId);\n  }\n\n  public stopClip(clipId: string) {\n    this.visuals.hide(clipId);\n  }\n\n  public detach() {\n    for (const detach of this.detachers) {\n      detach();\n    }\n  }\n}\n\nfunction setupVisuals(audioset: Audioset, visuals: Visuals): Promise<Visuals> {\n  if (audioset.visuals.mode === \"map\") {\n    return fetch(audioset.visuals.geomap.url)\n      .then(response => response.json())\n      .then(data => visuals.setGeodata(data))\n      .then(() => visuals);\n  } else {\n    visuals.setup();\n    return Promise.resolve(visuals);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}