{"ast":null,"code":"import debug from \"debug\";\nconst log = debug(\"atpls:sampler\");\nexport class Sampler {\n  constructor(audioset, buffers, audio) {\n    this.audioset = audioset;\n    this.buffers = buffers;\n    this.audio = audio;\n    this.master = void 0;\n    this.tracks = {};\n    this.audioSources = {};\n    log(\"create sampler %s\", audioset.meta.title);\n    this.master = audio.createTrack(\"master\", {\n      volume: 0.8\n    });\n    audioset.tracks.forEach(track => {\n      this.tracks[track.id] = audio.createTrack(track.name, {\n        volume: 1\n      }, this.master);\n    });\n  }\n\n  dispose() {\n    Object.keys(this.tracks).forEach(trackId => {\n      this.tracks[trackId].disconnect();\n    });\n  }\n\n  run(command) {\n    switch (command.command) {\n      case \"startClip\":\n        return this.start(command.clipId, command.time);\n\n      case \"stopClip\":\n        return this.stop(command.clipId, command.time);\n\n      default:\n    }\n  }\n\n  start(clipId, time) {\n    log(\"start %s\", clipId);\n\n    if (this.audioSources[clipId]) {\n      return;\n    }\n\n    const buffer = this.buffers.getBuffer(clipId);\n    const trackId = this.audioset.index.trackIdOfClip[clipId];\n    const track = this.tracks[trackId];\n    const source = this.audio.createAudioSource({\n      buffer\n    }, track);\n    this.audioSources[clipId] = source;\n    source.start(time);\n  }\n\n  stop(clipId, time) {\n    log(\"stop %s\", clipId);\n    const source = this.audioSources[clipId];\n\n    if (source !== undefined) {\n      source.stop(time);\n    }\n\n    this.audioSources[clipId] = undefined;\n  }\n\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/Sampler.ts"],"names":["debug","log","Sampler","constructor","audioset","buffers","audio","master","tracks","audioSources","meta","title","createTrack","volume","forEach","track","id","name","dispose","Object","keys","trackId","disconnect","run","command","start","clipId","time","stop","buffer","getBuffer","index","trackIdOfClip","source","createAudioSource","undefined"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAKA,MAAMC,GAAG,GAAGD,KAAK,CAAC,eAAD,CAAjB;AAMA,OAAO,MAAME,OAAN,CAAc;AAKnBC,EAAAA,WAAW,CACDC,QADC,EAEDC,OAFC,EAGDC,KAHC,EAIT;AAAA,SAHQF,QAGR,GAHQA,QAGR;AAAA,SAFQC,OAER,GAFQA,OAER;AAAA,SADQC,KACR,GADQA,KACR;AAAA,SARMC,MAQN;AAAA,SAPMC,MAON,GAP2C,EAO3C;AAAA,SANMC,YAMN,GAN8D,EAM9D;AACAR,IAAAA,GAAG,CAAC,mBAAD,EAAsBG,QAAQ,CAACM,IAAT,CAAcC,KAApC,CAAH;AACA,SAAKJ,MAAL,GAAcD,KAAK,CAACM,WAAN,CAAkB,QAAlB,EAA4B;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAA5B,CAAd;AACAT,IAAAA,QAAQ,CAACI,MAAT,CAAgBM,OAAhB,CAAwBC,KAAK,IAAI;AAC/B,WAAKP,MAAL,CAAYO,KAAK,CAACC,EAAlB,IAAwBV,KAAK,CAACM,WAAN,CACtBG,KAAK,CAACE,IADgB,EAEtB;AAAEJ,QAAAA,MAAM,EAAE;AAAV,OAFsB,EAGtB,KAAKN,MAHiB,CAAxB;AAKD,KAND;AAOD;;AAEMW,EAAAA,OAAP,GAAiB;AACfC,IAAAA,MAAM,CAACC,IAAP,CAAY,KAAKZ,MAAjB,EAAyBM,OAAzB,CAAiCO,OAAO,IAAI;AAC1C,WAAKb,MAAL,CAAYa,OAAZ,EAAqBC,UAArB;AACD,KAFD;AAGD;;AAEMC,EAAAA,GAAP,CAAWC,OAAX,EAAoC;AAClC,YAAQA,OAAO,CAACA,OAAhB;AACE,WAAK,WAAL;AACE,eAAO,KAAKC,KAAL,CAAWD,OAAO,CAACE,MAAnB,EAA2BF,OAAO,CAACG,IAAnC,CAAP;;AACF,WAAK,UAAL;AACE,eAAO,KAAKC,IAAL,CAAUJ,OAAO,CAACE,MAAlB,EAA0BF,OAAO,CAACG,IAAlC,CAAP;;AACF;AALF;AAOD;;AAEMF,EAAAA,KAAP,CAAaC,MAAb,EAA6BC,IAA7B,EAA2C;AACzC1B,IAAAA,GAAG,CAAC,UAAD,EAAayB,MAAb,CAAH;;AACA,QAAI,KAAKjB,YAAL,CAAkBiB,MAAlB,CAAJ,EAA+B;AAC7B;AACD;;AAED,UAAMG,MAAM,GAAG,KAAKxB,OAAL,CAAayB,SAAb,CAAuBJ,MAAvB,CAAf;AACA,UAAML,OAAO,GAAG,KAAKjB,QAAL,CAAc2B,KAAd,CAAoBC,aAApB,CAAkCN,MAAlC,CAAhB;AACA,UAAMX,KAAK,GAAG,KAAKP,MAAL,CAAYa,OAAZ,CAAd;AACA,UAAMY,MAAM,GAAG,KAAK3B,KAAL,CAAW4B,iBAAX,CAA6B;AAAEL,MAAAA;AAAF,KAA7B,EAAyCd,KAAzC,CAAf;AACA,SAAKN,YAAL,CAAkBiB,MAAlB,IAA4BO,MAA5B;AAEAA,IAAAA,MAAM,CAACR,KAAP,CAAaE,IAAb;AACD;;AAEMC,EAAAA,IAAP,CAAYF,MAAZ,EAA4BC,IAA5B,EAA0C;AACxC1B,IAAAA,GAAG,CAAC,SAAD,EAAYyB,MAAZ,CAAH;AACA,UAAMO,MAAM,GAAG,KAAKxB,YAAL,CAAkBiB,MAAlB,CAAf;;AACA,QAAIO,MAAM,KAAKE,SAAf,EAA0B;AACxBF,MAAAA,MAAM,CAACL,IAAP,CAAYD,IAAZ;AACD;;AACD,SAAKlB,YAAL,CAAkBiB,MAAlB,IAA4BS,SAA5B;AACD;;AA3DkB","sourcesContent":["import debug from \"debug\";\nimport { Audioset } from \"../audioset\";\nimport { AudioEngine, AudioSource, AudioTrack } from \"./Audio\";\nimport { ControlCommand } from \"./Control\";\n\nconst log = debug(\"atpls:sampler\");\n\nexport interface SampleBuffers {\n  getBuffer(clipId: string): any;\n}\n\nexport class Sampler {\n  private master: AudioTrack;\n  private tracks: Record<string, AudioTrack> = {};\n  private audioSources: Record<string, AudioSource | undefined> = {};\n\n  constructor(\n    private audioset: Audioset,\n    private buffers: SampleBuffers,\n    private audio: AudioEngine,\n  ) {\n    log(\"create sampler %s\", audioset.meta.title);\n    this.master = audio.createTrack(\"master\", { volume: 0.8 });\n    audioset.tracks.forEach(track => {\n      this.tracks[track.id] = audio.createTrack(\n        track.name,\n        { volume: 1 },\n        this.master,\n      );\n    });\n  }\n\n  public dispose() {\n    Object.keys(this.tracks).forEach(trackId => {\n      this.tracks[trackId].disconnect();\n    });\n  }\n\n  public run(command: ControlCommand) {\n    switch (command.command) {\n      case \"startClip\":\n        return this.start(command.clipId, command.time);\n      case \"stopClip\":\n        return this.stop(command.clipId, command.time);\n      default:\n    }\n  }\n\n  public start(clipId: string, time: number) {\n    log(\"start %s\", clipId);\n    if (this.audioSources[clipId]) {\n      return;\n    }\n\n    const buffer = this.buffers.getBuffer(clipId);\n    const trackId = this.audioset.index.trackIdOfClip[clipId];\n    const track = this.tracks[trackId];\n    const source = this.audio.createAudioSource({ buffer }, track);\n    this.audioSources[clipId] = source;\n\n    source.start(time);\n  }\n\n  public stop(clipId: string, time: number) {\n    log(\"stop %s\", clipId);\n    const source = this.audioSources[clipId];\n    if (source !== undefined) {\n      source.stop(time);\n    }\n    this.audioSources[clipId] = undefined;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}