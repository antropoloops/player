{"ast":null,"code":"import _defineProperty from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport debug from \"debug\";\nimport { KeyboardControler } from \"../KeyboardControler\";\nconst log = debug(\"atpls:control\");\n\n/**\n * Controls the playing state of clips and tracks\n */\nexport class AudiosetControl extends Control {\n  constructor(audioset, listener) {\n    log(\"create control\");\n    this.keyboard = new KeyboardControler(audioset, this);\n    audioset.clips.forEach(clip => {\n      this.clipStateByClipId[clip.id] = {\n        state: \"stopped\"\n      };\n      this.trackIdOfClip[clip.id] = clip.trackId;\n    });\n    audioset.tracks.forEach(track => {\n      const volume = track.volume || 1;\n      this.trackStateByTrackId[track.id] = {\n        state: \"stopped\",\n        volume\n      };\n      this.clipIdsOfTrack[track.id] = track.clipIds;\n    });\n  }\n\n  toggleClip(clipId, time) {\n    const clipState = this.clipStateByClipId[clipId];\n\n    if (!clipState) {\n      return;\n    } else if (clipState.state === \"stopped\") {\n      this.startClip(clipId, time);\n    } else if (clipState.state === \"playing\") {\n      this.stopClip(clipId, time);\n    }\n  }\n  /**\n   * Start a clip\n   * @param clipId\n   */\n\n\n  startClip(clipId, time) {\n    const clipState = this.clipStateByClipId[clipId];\n\n    if (!clipState || clipState.state === \"playing\") {\n      return;\n    }\n\n    const trackId = this.trackIdOfClip[clipId];\n    const sameTrackClipIds = this.clipIdsOfTrack[trackId];\n    sameTrackClipIds.forEach(trackClipId => this.stopClipCommand(trackClipId, time));\n    this.startTrackCommand(trackId, time);\n    this.startClipCommand(clipId, time);\n    this.sendCommands();\n  }\n  /**\n   * Stops a clip\n   */\n\n\n  stopClip(clipId, time) {\n    const clipState = this.clipStateByClipId[clipId];\n\n    if (!clipState || clipState.state === \"stopped\") {\n      return;\n    }\n\n    const trackId = this.trackIdOfClip[clipId];\n    this.stopClipCommand(clipId, time);\n    this.stopTrackCommand(trackId, time);\n    this.sendCommands();\n  }\n  /**\n   * Stops all clips\n   */\n\n\n  stopAll(time) {\n    Object.keys(this.clipStateByClipId).forEach(clipId => this.stopClipCommand(clipId, time));\n    Object.keys(this.trackStateByTrackId).forEach(trackId => this.stopTrackCommand(trackId, time));\n    this.sendCommands();\n  }\n\n  getState() {\n    return {\n      playingClipsCount: this.playingClipsCount,\n      playingTracksCount: this.playingTracksCount,\n      clips: _objectSpread({}, this.clipStateByClipId),\n      tracks: _objectSpread({}, this.trackStateByTrackId)\n    };\n  } //// PRIVATE ////\n\n\n  sendCommands() {\n    this.commands.forEach(command => {\n      this.listener.onControlCommand(command);\n    });\n    this.commands = [];\n    this.listener.onControlStateChanged(this.getState());\n  }\n\n  startClipCommand(clipId, time) {\n    if (this.clipStateByClipId[clipId].state === \"playing\") {\n      return;\n    }\n\n    this.playingClipsCount += 1;\n    this.clipStateByClipId[clipId] = {\n      state: \"playing\"\n    };\n    this.commands.push({\n      command: \"startClip\",\n      clipId,\n      time\n    });\n  }\n\n  stopClipCommand(clipId, time) {\n    if (this.clipStateByClipId[clipId].state === \"stopped\") {\n      return;\n    }\n\n    this.playingClipsCount -= 1;\n    this.clipStateByClipId[clipId] = {\n      state: \"stopped\"\n    };\n    this.commands.push({\n      command: \"stopClip\",\n      clipId,\n      time\n    });\n  }\n\n  startTrackCommand(trackId, time) {\n    const trackState = this.trackStateByTrackId[trackId];\n\n    if (trackState.state === \"playing\") {\n      return;\n    }\n\n    this.playingTracksCount += 1;\n    this.trackStateByTrackId[trackId] = {\n      state: \"playing\",\n      volume: trackState.volume\n    };\n    this.commands.push({\n      command: \"startTrack\",\n      trackId,\n      time\n    });\n  }\n\n  stopTrackCommand(trackId, time) {\n    const trackState = this.trackStateByTrackId[trackId];\n\n    if (trackState.state === \"stopped\") {\n      return;\n    }\n\n    this.playingTracksCount -= 1;\n    this.trackStateByTrackId[trackId] = {\n      state: \"stopped\",\n      volume: trackState.volume\n    };\n    this.commands.push({\n      command: \"stopTrack\",\n      trackId,\n      time\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/Control/index.ts"],"names":["debug","KeyboardControler","log","AudiosetControl","Control","constructor","audioset","listener","keyboard","clips","forEach","clip","clipStateByClipId","id","state","trackIdOfClip","trackId","tracks","track","volume","trackStateByTrackId","clipIdsOfTrack","clipIds","toggleClip","clipId","time","clipState","startClip","stopClip","sameTrackClipIds","trackClipId","stopClipCommand","startTrackCommand","startClipCommand","sendCommands","stopTrackCommand","stopAll","Object","keys","getState","playingClipsCount","playingTracksCount","commands","command","onControlCommand","onControlStateChanged","push","trackState"],"mappings":"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","sourcesContent":["import debug from \"debug\";\nimport { Audioset, Clip } from \"../../audioset\";\nimport { KeyboardControler } from \"../KeyboardControler\";\nimport { ControlPlayer } from \"../Player\";\n\nconst log = debug(\"atpls:control\");\n\nexport type PlayingState = \"stopped\" | \"playing\"; // | \"playScheduled\" |  \"stopScheduled\";\n\nexport interface ClipPlayingState {\n  readonly state: PlayingState;\n}\n\nexport interface TrackPlayingState {\n  readonly state: PlayingState;\n  readonly volume: number;\n}\n\nexport interface StartClip {\n  command: \"startClip\";\n  clipId: string;\n  time: number;\n}\nexport interface StopClip {\n  command: \"stopClip\";\n  clipId: string;\n  time: number;\n}\nexport interface StartTrack {\n  command: \"startTrack\";\n  trackId: string;\n  time: number;\n}\nexport interface StopTrack {\n  command: \"stopTrack\";\n  trackId: string;\n  time: number;\n}\n\nexport type ControlCommand = StartClip | StopClip | StartTrack | StopTrack;\n\ntype ClipPlayingStateByClipId = Record<string, ClipPlayingState>;\ntype TrackPlayingStateByTrackId = Record<string, TrackPlayingState>;\n\nexport interface ControlState {\n  playingClipsCount: number;\n  playingTracksCount: number;\n  clips: ClipPlayingStateByClipId;\n  tracks: TrackPlayingStateByTrackId;\n}\n\nexport interface ControlListener {\n  onControlStateChanged: (state: ControlState) => void;\n  onControlCommand: (command: ControlCommand) => void;\n}\n\nexport interface Control {}\n\n/**\n * Controls the playing state of clips and tracks\n */\nexport class AudiosetControl extends Control {\n  public readonly keyboard: KeyboardControler;\n  private clipStateByClipId: ClipPlayingStateByClipId = {};\n  private trackStateByTrackId: TrackPlayingStateByTrackId = {};\n  private clipIdsOfTrack: Record<string, string[]> = {};\n  private trackIdOfClip: Record<string, string> = {};\n  private commands: ControlCommand[] = [];\n  private playingClipsCount: number = 0;\n  private playingTracksCount: number = 0;\n\n  constructor(audioset: Audioset, private listener: ControlListener) {\n    log(\"create control\");\n    this.keyboard = new KeyboardControler(audioset, this);\n    audioset.clips.forEach((clip: Clip) => {\n      this.clipStateByClipId[clip.id] = { state: \"stopped\" };\n      this.trackIdOfClip[clip.id] = clip.trackId;\n    });\n    audioset.tracks.forEach(track => {\n      const volume = track.volume || 1;\n      this.trackStateByTrackId[track.id] = { state: \"stopped\", volume };\n      this.clipIdsOfTrack[track.id] = track.clipIds;\n    });\n  }\n\n  public toggleClip(clipId: string, time: number) {\n    const clipState = this.clipStateByClipId[clipId];\n    if (!clipState) {\n      return;\n    } else if (clipState.state === \"stopped\") {\n      this.startClip(clipId, time);\n    } else if (clipState.state === \"playing\") {\n      this.stopClip(clipId, time);\n    }\n  }\n\n  /**\n   * Start a clip\n   * @param clipId\n   */\n  public startClip(clipId: string, time: number) {\n    const clipState = this.clipStateByClipId[clipId];\n    if (!clipState || clipState.state === \"playing\") {\n      return;\n    }\n\n    const trackId = this.trackIdOfClip[clipId];\n    const sameTrackClipIds = this.clipIdsOfTrack[trackId];\n    sameTrackClipIds.forEach(trackClipId =>\n      this.stopClipCommand(trackClipId, time),\n    );\n    this.startTrackCommand(trackId, time);\n    this.startClipCommand(clipId, time);\n    this.sendCommands();\n  }\n\n  /**\n   * Stops a clip\n   */\n  public stopClip(clipId: string, time: number) {\n    const clipState = this.clipStateByClipId[clipId];\n    if (!clipState || clipState.state === \"stopped\") {\n      return;\n    }\n\n    const trackId = this.trackIdOfClip[clipId];\n\n    this.stopClipCommand(clipId, time);\n    this.stopTrackCommand(trackId, time);\n    this.sendCommands();\n  }\n\n  /**\n   * Stops all clips\n   */\n  public stopAll(time: number) {\n    Object.keys(this.clipStateByClipId).forEach(clipId =>\n      this.stopClipCommand(clipId, time),\n    );\n    Object.keys(this.trackStateByTrackId).forEach(trackId =>\n      this.stopTrackCommand(trackId, time),\n    );\n    this.sendCommands();\n  }\n\n  public getState(): ControlState {\n    return {\n      playingClipsCount: this.playingClipsCount,\n      playingTracksCount: this.playingTracksCount,\n      clips: { ...this.clipStateByClipId },\n      tracks: { ...this.trackStateByTrackId },\n    };\n  }\n\n  //// PRIVATE ////\n  private sendCommands() {\n    this.commands.forEach(command => {\n      this.listener.onControlCommand(command);\n    });\n    this.commands = [];\n\n    this.listener.onControlStateChanged(this.getState());\n  }\n\n  private startClipCommand(clipId: string, time: number) {\n    if (this.clipStateByClipId[clipId].state === \"playing\") {\n      return;\n    }\n\n    this.playingClipsCount += 1;\n    this.clipStateByClipId[clipId] = { state: \"playing\" };\n    this.commands.push({ command: \"startClip\", clipId, time });\n  }\n  private stopClipCommand(clipId: string, time: number) {\n    if (this.clipStateByClipId[clipId].state === \"stopped\") {\n      return;\n    }\n\n    this.playingClipsCount -= 1;\n    this.clipStateByClipId[clipId] = { state: \"stopped\" };\n    this.commands.push({ command: \"stopClip\", clipId, time });\n  }\n  private startTrackCommand(trackId: string, time: number) {\n    const trackState = this.trackStateByTrackId[trackId];\n    if (trackState.state === \"playing\") {\n      return;\n    }\n\n    this.playingTracksCount += 1;\n    this.trackStateByTrackId[trackId] = {\n      state: \"playing\",\n      volume: trackState.volume,\n    };\n    this.commands.push({ command: \"startTrack\", trackId, time });\n  }\n  private stopTrackCommand(trackId: string, time: number) {\n    const trackState = this.trackStateByTrackId[trackId];\n    if (trackState.state === \"stopped\") {\n      return;\n    }\n\n    this.playingTracksCount -= 1;\n    this.trackStateByTrackId[trackId] = {\n      state: \"stopped\",\n      volume: trackState.volume,\n    };\n    this.commands.push({ command: \"stopTrack\", trackId, time });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}