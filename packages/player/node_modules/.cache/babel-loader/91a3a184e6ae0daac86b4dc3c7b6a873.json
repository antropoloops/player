{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { asin, pi, sin, sqrt, sqrtPi } from \"./math.js\";\nexport function collignonRaw(lambda, phi) {\n  var alpha = sqrt(1 - sin(phi));\n  return [2 / sqrtPi * lambda * alpha, sqrtPi * (1 - alpha)];\n}\n\ncollignonRaw.invert = function (x, y) {\n  var lambda = (lambda = y / sqrtPi - 1) * lambda;\n  return [lambda > 0 ? x * sqrt(pi / lambda) / 2 : 0, asin(1 - lambda)];\n};\n\nexport default function () {\n  return projection(collignonRaw).scale(95.6464).center([0, 30]);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/collignon.js"],"names":["geoProjection","projection","asin","pi","sin","sqrt","sqrtPi","collignonRaw","lambda","phi","alpha","invert","x","y","scale","center"],"mappings":"AAAA,SAAQA,aAAa,IAAIC,UAAzB,QAA0C,QAA1C;AACA,SAAQC,IAAR,EAAcC,EAAd,EAAkBC,GAAlB,EAAuBC,IAAvB,EAA6BC,MAA7B,QAA0C,WAA1C;AAEA,OAAO,SAASC,YAAT,CAAsBC,MAAtB,EAA8BC,GAA9B,EAAmC;AACxC,MAAIC,KAAK,GAAGL,IAAI,CAAC,IAAID,GAAG,CAACK,GAAD,CAAR,CAAhB;AACA,SAAO,CAAE,IAAIH,MAAL,GAAeE,MAAf,GAAwBE,KAAzB,EAAgCJ,MAAM,IAAI,IAAII,KAAR,CAAtC,CAAP;AACD;;AAEDH,YAAY,CAACI,MAAb,GAAsB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACnC,MAAIL,MAAM,GAAG,CAACA,MAAM,GAAGK,CAAC,GAAGP,MAAJ,GAAa,CAAvB,IAA4BE,MAAzC;AACA,SAAO,CAACA,MAAM,GAAG,CAAT,GAAaI,CAAC,GAAGP,IAAI,CAACF,EAAE,GAAGK,MAAN,CAAR,GAAwB,CAArC,GAAyC,CAA1C,EAA6CN,IAAI,CAAC,IAAIM,MAAL,CAAjD,CAAP;AACD,CAHD;;AAKA,eAAe,YAAW;AACxB,SAAOP,UAAU,CAACM,YAAD,CAAV,CACFO,KADE,CACI,OADJ,EAEFC,MAFE,CAEK,CAAC,CAAD,EAAI,EAAJ,CAFL,CAAP;AAGD","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {asin, pi, sin, sqrt, sqrtPi} from \"./math.js\";\n\nexport function collignonRaw(lambda, phi) {\n  var alpha = sqrt(1 - sin(phi));\n  return [(2 / sqrtPi) * lambda * alpha, sqrtPi * (1 - alpha)];\n}\n\ncollignonRaw.invert = function(x, y) {\n  var lambda = (lambda = y / sqrtPi - 1) * lambda;\n  return [lambda > 0 ? x * sqrt(pi / lambda) / 2 : 0, asin(1 - lambda)];\n};\n\nexport default function() {\n  return projection(collignonRaw)\n      .scale(95.6464)\n      .center([0, 30]);\n}\n"]},"metadata":{},"sourceType":"module"}