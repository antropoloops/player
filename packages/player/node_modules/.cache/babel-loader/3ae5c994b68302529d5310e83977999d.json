{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nexport var createRenderInputsOfAudioParam = function createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle) {\n  return function _callee2(audioParam, nativeOfflineAudioContext, nativeAudioParam, trace) {\n    var audioParamConnections;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            audioParamConnections = getAudioParamConnections(audioParam);\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(Promise.all(Array.from(audioParamConnections.activeInputs).map(function _callee(_ref) {\n              var _ref2, source, output, audioNodeRenderer, renderedNativeAudioNode;\n\n              return _regeneratorRuntime.async(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      _ref2 = _slicedToArray(_ref, 2), source = _ref2[0], output = _ref2[1];\n                      audioNodeRenderer = getAudioNodeRenderer(source);\n                      _context.next = 4;\n                      return _regeneratorRuntime.awrap(audioNodeRenderer.render(source, nativeOfflineAudioContext, trace));\n\n                    case 4:\n                      renderedNativeAudioNode = _context.sent;\n\n                      if (!isPartOfACycle(source)) {\n                        renderedNativeAudioNode.connect(nativeAudioParam, output);\n                      }\n\n                    case 6:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              });\n            })));\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/render-inputs-of-audio-param.js"],"names":["createRenderInputsOfAudioParam","getAudioNodeRenderer","getAudioParamConnections","isPartOfACycle","audioParam","nativeOfflineAudioContext","nativeAudioParam","trace","audioParamConnections","Promise","all","Array","from","activeInputs","map","source","output","audioNodeRenderer","render","renderedNativeAudioNode","connect"],"mappings":";;AAAA,OAAO,IAAMA,8BAA8B,GAAG,SAAjCA,8BAAiC,CAACC,oBAAD,EAAuBC,wBAAvB,EAAiDC,cAAjD,EAAoE;AAC9G,SAAO,kBAAOC,UAAP,EAAmBC,yBAAnB,EAA8CC,gBAA9C,EAAgEC,KAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,YAAAA,qBADH,GAC2BN,wBAAwB,CAACE,UAAD,CADnD;AAAA;AAAA,6CAEGK,OAAO,CACRC,GADC,CACGC,KAAK,CACTC,IADI,CACCJ,qBAAqB,CAACK,YADvB,EAEJC,GAFI,CAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,uDAAQC,MAAR,aAAgBC,MAAhB;AACCC,sBAAAA,iBADD,GACqBhB,oBAAoB,CAACc,MAAD,CADzC;AAAA;AAAA,uDAEiCE,iBAAiB,CAACC,MAAlB,CAAyBH,MAAzB,EAAiCV,yBAAjC,EAA4DE,KAA5D,CAFjC;;AAAA;AAECY,sBAAAA,uBAFD;;AAGL,0BAAI,CAAChB,cAAc,CAACY,MAAD,CAAnB,EAA6B;AACzBI,wBAAAA,uBAAuB,CAACC,OAAxB,CAAgCd,gBAAhC,EAAkDU,MAAlD;AACH;;AALI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFA,CADH,CAFH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAaH,CAdM","sourcesContent":["export const createRenderInputsOfAudioParam = (getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle) => {\n    return async (audioParam, nativeOfflineAudioContext, nativeAudioParam, trace) => {\n        const audioParamConnections = getAudioParamConnections(audioParam);\n        await Promise\n            .all(Array\n            .from(audioParamConnections.activeInputs)\n            .map(async ([source, output]) => {\n            const audioNodeRenderer = getAudioNodeRenderer(source);\n            const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext, trace);\n            if (!isPartOfACycle(source)) {\n                renderedNativeAudioNode.connect(nativeAudioParam, output);\n            }\n        }));\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/render-inputs-of-audio-param.js.map"]},"metadata":{},"sourceType":"module"}