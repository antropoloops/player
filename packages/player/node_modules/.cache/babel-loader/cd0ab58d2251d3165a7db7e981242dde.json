{"ast":null,"code":"import _classCallCheck from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nexport var createAudioDestinationNodeConstructor = function createAudioDestinationNodeConstructor(audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(AudioDestinationNode, _audioNodeConstructor);\n\n    var _super = _createSuper(AudioDestinationNode);\n\n    function AudioDestinationNode(context, channelCount) {\n      var _this;\n\n      _classCallCheck(this, AudioDestinationNode);\n\n      var nativeContext = getNativeContext(context);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var nativeAudioDestinationNode = createNativeAudioDestinationNode(nativeContext, channelCount, isOffline);\n      var audioDestinationNodeRenderer = isOffline ? createAudioDestinationNodeRenderer(renderInputsOfAudioNode) : null;\n      _this = _super.call(this, context, false, nativeAudioDestinationNode, audioDestinationNodeRenderer);\n      _this._isNodeOfNativeOfflineAudioContext = isOffline;\n      _this._nativeAudioDestinationNode = nativeAudioDestinationNode;\n      return _this;\n    }\n\n    _createClass(AudioDestinationNode, [{\n      key: \"channelCount\",\n      get: function get() {\n        return this._nativeAudioDestinationNode.channelCount;\n      },\n      set: function set(value) {\n        // Bug #52: Chrome, Edge, Opera & Safari do not throw an exception at all.\n        // Bug #54: Firefox does throw an IndexSizeError.\n        if (this._isNodeOfNativeOfflineAudioContext) {\n          throw createInvalidStateError();\n        } // Bug #47: The AudioDestinationNode in Edge and Safari do not initialize the maxChannelCount property correctly.\n\n\n        if (value > this._nativeAudioDestinationNode.maxChannelCount) {\n          throw createIndexSizeError();\n        }\n\n        this._nativeAudioDestinationNode.channelCount = value;\n      }\n    }, {\n      key: \"channelCountMode\",\n      get: function get() {\n        return this._nativeAudioDestinationNode.channelCountMode;\n      },\n      set: function set(value) {\n        // Bug #53: No browser does throw an exception yet.\n        if (this._isNodeOfNativeOfflineAudioContext) {\n          throw createInvalidStateError();\n        }\n\n        this._nativeAudioDestinationNode.channelCountMode = value;\n      }\n    }, {\n      key: \"maxChannelCount\",\n      get: function get() {\n        return this._nativeAudioDestinationNode.maxChannelCount;\n      }\n    }]);\n\n    return AudioDestinationNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/audio-destination-node-constructor.js"],"names":["createAudioDestinationNodeConstructor","audioNodeConstructor","createAudioDestinationNodeRenderer","createIndexSizeError","createInvalidStateError","createNativeAudioDestinationNode","getNativeContext","isNativeOfflineAudioContext","renderInputsOfAudioNode","context","channelCount","nativeContext","isOffline","nativeAudioDestinationNode","audioDestinationNodeRenderer","_isNodeOfNativeOfflineAudioContext","_nativeAudioDestinationNode","value","maxChannelCount","channelCountMode"],"mappings":";;;;AAAA,OAAO,IAAMA,qCAAqC,GAAG,SAAxCA,qCAAwC,CAACC,oBAAD,EAAuBC,kCAAvB,EAA2DC,oBAA3D,EAAiFC,uBAAjF,EAA0GC,gCAA1G,EAA4IC,gBAA5I,EAA8JC,2BAA9J,EAA2LC,uBAA3L,EAAuN;AACxQ;AAAA;;AAAA;;AACI,kCAAYC,OAAZ,EAAqBC,YAArB,EAAmC;AAAA;;AAAA;;AAC/B,UAAMC,aAAa,GAAGL,gBAAgB,CAACG,OAAD,CAAtC;AACA,UAAMG,SAAS,GAAGL,2BAA2B,CAACI,aAAD,CAA7C;AACA,UAAME,0BAA0B,GAAGR,gCAAgC,CAACM,aAAD,EAAgBD,YAAhB,EAA8BE,SAA9B,CAAnE;AACA,UAAME,4BAA4B,GAAKF,SAAD,GAChCV,kCAAkC,CAACM,uBAAD,CADF,GAEhC,IAFN;AAGA,gCAAMC,OAAN,EAAe,KAAf,EAAsBI,0BAAtB,EAAkDC,4BAAlD;AACA,YAAKC,kCAAL,GAA0CH,SAA1C;AACA,YAAKI,2BAAL,GAAmCH,0BAAnC;AAT+B;AAUlC;;AAXL;AAAA;AAAA,0BAYuB;AACf,eAAO,KAAKG,2BAAL,CAAiCN,YAAxC;AACH,OAdL;AAAA,wBAeqBO,KAfrB,EAe4B;AACpB;AACA;AACA,YAAI,KAAKF,kCAAT,EAA6C;AACzC,gBAAMX,uBAAuB,EAA7B;AACH,SALmB,CAMpB;;;AACA,YAAIa,KAAK,GAAG,KAAKD,2BAAL,CAAiCE,eAA7C,EAA8D;AAC1D,gBAAMf,oBAAoB,EAA1B;AACH;;AACD,aAAKa,2BAAL,CAAiCN,YAAjC,GAAgDO,KAAhD;AACH;AA1BL;AAAA;AAAA,0BA2B2B;AACnB,eAAO,KAAKD,2BAAL,CAAiCG,gBAAxC;AACH,OA7BL;AAAA,wBA8ByBF,KA9BzB,EA8BgC;AACxB;AACA,YAAI,KAAKF,kCAAT,EAA6C;AACzC,gBAAMX,uBAAuB,EAA7B;AACH;;AACD,aAAKY,2BAAL,CAAiCG,gBAAjC,GAAoDF,KAApD;AACH;AApCL;AAAA;AAAA,0BAqC0B;AAClB,eAAO,KAAKD,2BAAL,CAAiCE,eAAxC;AACH;AAvCL;;AAAA;AAAA,IAA0CjB,oBAA1C;AAyCH,CA1CM","sourcesContent":["export const createAudioDestinationNodeConstructor = (audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode) => {\n    return class AudioDestinationNode extends audioNodeConstructor {\n        constructor(context, channelCount) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const nativeAudioDestinationNode = createNativeAudioDestinationNode(nativeContext, channelCount, isOffline);\n            const audioDestinationNodeRenderer = ((isOffline)\n                ? createAudioDestinationNodeRenderer(renderInputsOfAudioNode)\n                : null);\n            super(context, false, nativeAudioDestinationNode, audioDestinationNodeRenderer);\n            this._isNodeOfNativeOfflineAudioContext = isOffline;\n            this._nativeAudioDestinationNode = nativeAudioDestinationNode;\n        }\n        get channelCount() {\n            return this._nativeAudioDestinationNode.channelCount;\n        }\n        set channelCount(value) {\n            // Bug #52: Chrome, Edge, Opera & Safari do not throw an exception at all.\n            // Bug #54: Firefox does throw an IndexSizeError.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n                throw createInvalidStateError();\n            }\n            // Bug #47: The AudioDestinationNode in Edge and Safari do not initialize the maxChannelCount property correctly.\n            if (value > this._nativeAudioDestinationNode.maxChannelCount) {\n                throw createIndexSizeError();\n            }\n            this._nativeAudioDestinationNode.channelCount = value;\n        }\n        get channelCountMode() {\n            return this._nativeAudioDestinationNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            // Bug #53: No browser does throw an exception yet.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n                throw createInvalidStateError();\n            }\n            this._nativeAudioDestinationNode.channelCountMode = value;\n        }\n        get maxChannelCount() {\n            return this._nativeAudioDestinationNode.maxChannelCount;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-destination-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}