{"ast":null,"code":"import _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { createAudioEffects, getActiveAudioContext } from \"../../player/Audio\";\nimport { AudiosetControl, EmptyControlState } from \"../../player/Control\";\nexport function usePlayer(audioset, buffers) {\n  // Make visuals render after reference is set: https://dev.to/thekashey/the-same-useref-but-it-will-callback-8bo\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        el = _useState2[0],\n        setReference = _useState2[1];\n\n  const visualsRef = useCallback(newRef => {\n    setReference(newRef);\n  }, []);\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        control = _useState4[0],\n        setControl = _useState4[1];\n\n  const _useState5 = useState(EmptyControlState),\n        _useState6 = _slicedToArray(_useState5, 2),\n        state = _useState6[0],\n        setState = _useState6[1];\n\n  useEffect(() => {\n    let cancelled = false;\n    let audio;\n    let visuals;\n\n    async function createControl() {\n      const ctx = await getActiveAudioContext();\n\n      if (cancelled) {\n        return;\n      }\n\n      audio = createAudioEffects(audioset, ctx, buffers);\n\n      if (el) {\n        const _ref = await import(\"../../player/VisualEffects\"),\n              createVisualEffects = _ref.createVisualEffects;\n\n        visuals = createVisualEffects(audioset);\n        visuals.attach(el);\n      }\n\n      const ctl = new AudiosetControl(audioset, {\n        onControlStateChanged: newState => {\n          setState(newState);\n        },\n        onControlCommand: command => {\n          var _audio, _visuals;\n\n          (_audio = audio) === null || _audio === void 0 ? void 0 : _audio.run(command);\n          (_visuals = visuals) === null || _visuals === void 0 ? void 0 : _visuals.run(command);\n        }\n      });\n      return ctl;\n    }\n\n    createControl().then(instance => {\n      if (instance) {\n        setControl(instance);\n        setState(instance.getState());\n      }\n    });\n    return () => {\n      var _visuals2, _audio2;\n\n      cancelled = true;\n      (_visuals2 = visuals) === null || _visuals2 === void 0 ? void 0 : _visuals2.detach();\n      (_audio2 = audio) === null || _audio2 === void 0 ? void 0 : _audio2.detach();\n    };\n  }, [audioset, buffers, el]);\n  return {\n    visualsRef,\n    control,\n    state\n  };\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/usePlayer.tsx"],"names":["useCallback","useEffect","useState","createAudioEffects","getActiveAudioContext","AudiosetControl","EmptyControlState","usePlayer","audioset","buffers","el","setReference","visualsRef","newRef","control","setControl","state","setState","cancelled","audio","visuals","createControl","ctx","createVisualEffects","attach","ctl","onControlStateChanged","newState","onControlCommand","command","run","then","instance","getState","detach"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAEA,SAASC,kBAAT,EAA6BC,qBAA7B,QAA0D,oBAA1D;AACA,SACEC,eADF,EAEEC,iBAFF,QAIO,sBAJP;AAOA,OAAO,SAASC,SAAT,CAAmBC,QAAnB,EAAuCC,OAAvC,EAA+D;AACpE;AADoE,oBAEzCP,QAAQ,CAAwB,IAAxB,CAFiC;AAAA;AAAA,QAE7DQ,EAF6D;AAAA,QAEzDC,YAFyD;;AAGpE,QAAMC,UAAU,GAAGZ,WAAW,CAAEa,MAAD,IAA4B;AACzDF,IAAAA,YAAY,CAACE,MAAD,CAAZ;AACD,GAF6B,EAE3B,EAF2B,CAA9B;;AAHoE,qBAOtCX,QAAQ,EAP8B;AAAA;AAAA,QAO7DY,OAP6D;AAAA,QAOpDC,UAPoD;;AAAA,qBAQ1Cb,QAAQ,CAACI,iBAAD,CARkC;AAAA;AAAA,QAQ7DU,KAR6D;AAAA,QAQtDC,QARsD;;AAUpEhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,SAAS,GAAG,KAAhB;AACA,QAAIC,KAAJ;AACA,QAAIC,OAAJ;;AAEA,mBAAeC,aAAf,GAA+B;AAC7B,YAAMC,GAAG,GAAG,MAAMlB,qBAAqB,EAAvC;;AAEA,UAAIc,SAAJ,EAAe;AACb;AACD;;AAEDC,MAAAA,KAAK,GAAGhB,kBAAkB,CAACK,QAAD,EAAWc,GAAX,EAAgBb,OAAhB,CAA1B;;AAEA,UAAIC,EAAJ,EAAQ;AAAA,qBAC0B,MAAM,OACpC,4BADoC,CADhC;AAAA,cACEa,mBADF,QACEA,mBADF;;AAINH,QAAAA,OAAO,GAAGG,mBAAmB,CAACf,QAAD,CAA7B;AACAY,QAAAA,OAAO,CAACI,MAAR,CAAed,EAAf;AACD;;AAED,YAAMe,GAAG,GAAG,IAAIpB,eAAJ,CAAoBG,QAApB,EAA8B;AACxCkB,QAAAA,qBAAqB,EAAEC,QAAQ,IAAI;AACjCV,UAAAA,QAAQ,CAACU,QAAD,CAAR;AACD,SAHuC;AAIxCC,QAAAA,gBAAgB,EAAEC,OAAO,IAAI;AAAA;;AAC3B,oBAAAV,KAAK,UAAL,wCAAOW,GAAP,CAAWD,OAAX;AACA,sBAAAT,OAAO,UAAP,4CAASU,GAAT,CAAaD,OAAb;AACD;AAPuC,OAA9B,CAAZ;AASA,aAAOJ,GAAP;AACD;;AACDJ,IAAAA,aAAa,GAAGU,IAAhB,CAAqBC,QAAQ,IAAI;AAC/B,UAAIA,QAAJ,EAAc;AACZjB,QAAAA,UAAU,CAACiB,QAAD,CAAV;AACAf,QAAAA,QAAQ,CAACe,QAAQ,CAACC,QAAT,EAAD,CAAR;AACD;AACF,KALD;AAOA,WAAO,MAAM;AAAA;;AACXf,MAAAA,SAAS,GAAG,IAAZ;AACA,mBAAAE,OAAO,UAAP,8CAASc,MAAT;AACA,iBAAAf,KAAK,UAAL,0CAAOe,MAAP;AACD,KAJD;AAKD,GA7CQ,EA6CN,CAAC1B,QAAD,EAAWC,OAAX,EAAoBC,EAApB,CA7CM,CAAT;AA+CA,SAAO;AAAEE,IAAAA,UAAF;AAAcE,IAAAA,OAAd;AAAuBE,IAAAA;AAAvB,GAAP;AACD","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport { Audioset } from \"../../audioset\";\nimport { createAudioEffects, getActiveAudioContext } from \"../../player/Audio\";\nimport {\n  AudiosetControl,\n  EmptyControlState,\n  PlayerControl,\n} from \"../../player/Control\";\nimport { Effects } from \"../../player/Control\";\n\nexport function usePlayer(audioset: Audioset, buffers: SampleBuffers) {\n  // Make visuals render after reference is set: https://dev.to/thekashey/the-same-useref-but-it-will-callback-8bo\n  const [el, setReference] = useState<HTMLDivElement | null>(null);\n  const visualsRef = useCallback((newRef: HTMLDivElement) => {\n    setReference(newRef);\n  }, []);\n\n  const [control, setControl] = useState<PlayerControl | undefined>();\n  const [state, setState] = useState(EmptyControlState);\n\n  useEffect(() => {\n    let cancelled = false;\n    let audio: Effects | undefined;\n    let visuals: Effects | undefined;\n\n    async function createControl() {\n      const ctx = await getActiveAudioContext();\n\n      if (cancelled) {\n        return;\n      }\n\n      audio = createAudioEffects(audioset, ctx, buffers);\n\n      if (el) {\n        const { createVisualEffects } = await import(\n          \"../../player/VisualEffects\"\n        );\n        visuals = createVisualEffects(audioset);\n        visuals.attach(el);\n      }\n\n      const ctl = new AudiosetControl(audioset, {\n        onControlStateChanged: newState => {\n          setState(newState);\n        },\n        onControlCommand: command => {\n          audio?.run(command);\n          visuals?.run(command);\n        },\n      });\n      return ctl;\n    }\n    createControl().then(instance => {\n      if (instance) {\n        setControl(instance);\n        setState(instance.getState());\n      }\n    });\n\n    return () => {\n      cancelled = true;\n      visuals?.detach();\n      audio?.detach();\n    };\n  }, [audioset, buffers, el]);\n\n  return { visualsRef, control, state };\n}\n"]},"metadata":{},"sourceType":"module"}