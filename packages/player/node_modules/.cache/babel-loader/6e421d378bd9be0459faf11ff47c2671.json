{"ast":null,"code":"import _classCallCheck from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import debug from\"debug\";import{getActiveAudioContext}from\"../../active-audio-context\";var log=debug(\"atpls:time\");export var TimeManager=/*#__PURE__*/function(){function TimeManager(config){var _this=this;_classCallCheck(this,TimeManager);this.bpm=void 0;this.quantize=void 0;this.count=0;this.startedAt=0;this.context=void 0;log(\"time %o\",config);this.bpm=config.bpm;this.quantize=config.quantize||1;getActiveAudioContext().then(function(ctx){return _this.context=ctx;});}_createClass(TimeManager,[{key:\"startTime\",value:function startTime(time){if(!this.context){return time;}var startTime=this.nextTime(time);this.count+=1;if(this.count===1){this.startedAt=startTime;}return startTime;}},{key:\"stopTime\",value:function stopTime(time){if(!this.context){return time;}time=this.nextTime(time);this.count-=1;if(this.count===0){this.startedAt=0;}return time;}},{key:\"nextTime\",value:function nextTime(time){if(!this.context){return time;}var now=this.context.currentTime;if(this.startedAt===0){return now;}return now+quantizeTime(this.bpm,now,this.startedAt,this.quantize);}}]);return TimeManager;}();var BEATS=1;/**\n * Calculate the time remaining until the next beat\n *\n * @param {*} bpm\n * @param {*} now\n * @param {*} startedAt\n * @param {*} beats\n */export function quantizeTime(bpm,now,startedAt){var beats=arguments.length>3&&arguments[3]!==undefined?arguments[3]:BEATS;var factor=bpm/(60*beats);var absolute=now-startedAt;if(absolute===0){return 0;}var inBeats=absolute*factor;var mod=inBeats%1;var offsetTime=(1-mod)/factor;return offsetTime;}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/packages/player/src/player/Control/TimeManager.ts"],"names":["debug","getActiveAudioContext","log","TimeManager","config","bpm","quantize","count","startedAt","context","then","ctx","time","startTime","nextTime","now","currentTime","quantizeTime","BEATS","beats","factor","absolute","inBeats","mod","offsetTime"],"mappings":"sTAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OAASC,qBAAT,KAAsC,4BAAtC,CAEA,GAAMC,CAAAA,GAAG,CAAGF,KAAK,CAAC,YAAD,CAAjB,CAOA,UAAaG,CAAAA,WAAb,yBAOE,qBAAYC,MAAZ,CAA4B,uDANrBC,GAMqB,aALrBC,QAKqB,aAJpBC,KAIoB,CAJJ,CAII,MAHpBC,SAGoB,CAHA,CAGA,MAFpBC,OAEoB,QAC1BP,GAAG,CAAC,SAAD,CAAYE,MAAZ,CAAH,CACA,KAAKC,GAAL,CAAWD,MAAM,CAACC,GAAlB,CACA,KAAKC,QAAL,CAAgBF,MAAM,CAACE,QAAP,EAAmB,CAAnC,CACAL,qBAAqB,GAAGS,IAAxB,CAA6B,SAACC,GAAD,QAAU,CAAA,KAAI,CAACF,OAAL,CAAeE,GAAzB,EAA7B,EACD,CAZH,oEAcmBC,IAdnB,CAciC,CAC7B,GAAI,CAAC,KAAKH,OAAV,CAAmB,CACjB,MAAOG,CAAAA,IAAP,CACD,CAED,GAAMC,CAAAA,SAAS,CAAG,KAAKC,QAAL,CAAcF,IAAd,CAAlB,CACA,KAAKL,KAAL,EAAc,CAAd,CAEA,GAAI,KAAKA,KAAL,GAAe,CAAnB,CAAsB,CACpB,KAAKC,SAAL,CAAiBK,SAAjB,CACD,CACD,MAAOA,CAAAA,SAAP,CACD,CA1BH,0CA4BkBD,IA5BlB,CA4BgC,CAC5B,GAAI,CAAC,KAAKH,OAAV,CAAmB,CACjB,MAAOG,CAAAA,IAAP,CACD,CAEDA,IAAI,CAAG,KAAKE,QAAL,CAAcF,IAAd,CAAP,CACA,KAAKL,KAAL,EAAc,CAAd,CAEA,GAAI,KAAKA,KAAL,GAAe,CAAnB,CAAsB,CACpB,KAAKC,SAAL,CAAiB,CAAjB,CACD,CACD,MAAOI,CAAAA,IAAP,CACD,CAxCH,0CA0CmBA,IA1CnB,CA0CiC,CAC7B,GAAI,CAAC,KAAKH,OAAV,CAAmB,CACjB,MAAOG,CAAAA,IAAP,CACD,CAED,GAAMG,CAAAA,GAAG,CAAG,KAAKN,OAAL,CAAaO,WAAzB,CACA,GAAI,KAAKR,SAAL,GAAmB,CAAvB,CAA0B,CACxB,MAAOO,CAAAA,GAAP,CACD,CAED,MAAOA,CAAAA,GAAG,CAAGE,YAAY,CAAC,KAAKZ,GAAN,CAAWU,GAAX,CAAgB,KAAKP,SAArB,CAAgC,KAAKF,QAArC,CAAzB,CACD,CArDH,2BAuDA,GAAMY,CAAAA,KAAK,CAAG,CAAd,CAEA;;;;;;;GAQA,MAAO,SAASD,CAAAA,YAAT,CACLZ,GADK,CAELU,GAFK,CAGLP,SAHK,CAKG,IADRW,CAAAA,KACQ,2DADAD,KACA,CACR,GAAME,CAAAA,MAAM,CAAGf,GAAG,EAAI,GAAKc,KAAT,CAAlB,CACA,GAAME,CAAAA,QAAQ,CAAGN,GAAG,CAAGP,SAAvB,CACA,GAAIa,QAAQ,GAAK,CAAjB,CAAoB,CAClB,MAAO,EAAP,CACD,CACD,GAAMC,CAAAA,OAAO,CAAGD,QAAQ,CAAGD,MAA3B,CACA,GAAMG,CAAAA,GAAG,CAAGD,OAAO,CAAG,CAAtB,CACA,GAAME,CAAAA,UAAU,CAAG,CAAC,EAAID,GAAL,EAAYH,MAA/B,CACA,MAAOI,CAAAA,UAAP,CACD","sourcesContent":["import debug from \"debug\";\nimport { IAudioContext } from \"standardized-audio-context\";\nimport { getActiveAudioContext } from \"../../active-audio-context\";\n\nconst log = debug(\"atpls:time\");\n\ninterface Config {\n  bpm: number;\n  quantize: number;\n}\n\nexport class TimeManager {\n  public bpm: number;\n  public quantize: number;\n  private count: number = 0;\n  private startedAt: number = 0;\n  private context?: IAudioContext;\n\n  constructor(config: Config) {\n    log(\"time %o\", config);\n    this.bpm = config.bpm;\n    this.quantize = config.quantize || 1;\n    getActiveAudioContext().then((ctx) => (this.context = ctx));\n  }\n\n  public startTime(time: number) {\n    if (!this.context) {\n      return time;\n    }\n\n    const startTime = this.nextTime(time);\n    this.count += 1;\n\n    if (this.count === 1) {\n      this.startedAt = startTime;\n    }\n    return startTime;\n  }\n\n  public stopTime(time: number) {\n    if (!this.context) {\n      return time;\n    }\n\n    time = this.nextTime(time);\n    this.count -= 1;\n\n    if (this.count === 0) {\n      this.startedAt = 0;\n    }\n    return time;\n  }\n\n  private nextTime(time: number) {\n    if (!this.context) {\n      return time;\n    }\n\n    const now = this.context.currentTime;\n    if (this.startedAt === 0) {\n      return now;\n    }\n\n    return now + quantizeTime(this.bpm, now, this.startedAt, this.quantize);\n  }\n}\nconst BEATS = 1;\n\n/**\n * Calculate the time remaining until the next beat\n *\n * @param {*} bpm\n * @param {*} now\n * @param {*} startedAt\n * @param {*} beats\n */\nexport function quantizeTime(\n  bpm: number,\n  now: number,\n  startedAt: number,\n  beats = BEATS\n): number {\n  const factor = bpm / (60 * beats);\n  const absolute = now - startedAt;\n  if (absolute === 0) {\n    return 0;\n  }\n  const inBeats = absolute * factor;\n  const mod = inBeats % 1;\n  const offsetTime = (1 - mod) / factor;\n  return offsetTime;\n}\n"]},"metadata":{},"sourceType":"module"}