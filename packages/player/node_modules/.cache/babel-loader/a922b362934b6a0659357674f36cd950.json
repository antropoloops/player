{"ast":null,"code":"import debug from \"debug\";\nimport { isAudioset } from \"./Audioset\";\nimport { isAudiosetBundle } from \"./AudiosetBundle\";\nconst log = debug(\"atpls:audioset\");\n\nconst capitalize = str => str.charAt(0).toUpperCase() + str.slice(1);\n\nexport function createAudioset(bundle) {\n  if (!isAudiosetBundle(bundle)) {\n    log(\"Invalid format %o\", bundle);\n    throw Error(\"Invalida Audioset format\");\n  }\n\n  if (isAudioset(bundle)) {\n    migrateOrDerive(bundle);\n    createIndices(bundle);\n  }\n\n  return bundle;\n}\n\nfunction migrateOrDerive(audioset) {\n  const bpm = audioset.meta.bpm || 120;\n  audioset.clips.forEach(clip => {\n    clip.name = clip.name || capitalize(clip.id);\n    clip.artist = clip.artist || \"\";\n    clip.place = clip.place || \"\";\n    clip.country = clip.country || \"\";\n    clip.audio.volume = clip.audio.volume || 0.7;\n    clip.audio.durationSeconds = 60 * clip.audio.beats / bpm;\n  });\n}\n\nfunction createIndices(audioset) {\n  const index = {\n    clipById: {},\n    trackById: {},\n    clipIdsOfTrack: {},\n    trackIdOfClip: {}\n  };\n  audioset.clips.forEach(clip => {\n    index.clipById[clip.id] = clip;\n    index.trackIdOfClip[clip.id] = clip.trackId;\n  });\n  audioset.tracks.forEach(track => {\n    index.trackById[track.id] = track;\n    index.clipIdsOfTrack[track.id] = track.clipIds;\n  });\n  audioset.index = index;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/audioset/createAudioset.ts"],"names":["debug","isAudioset","isAudiosetBundle","log","capitalize","str","charAt","toUpperCase","slice","createAudioset","bundle","Error","migrateOrDerive","createIndices","audioset","bpm","meta","clips","forEach","clip","name","id","artist","place","country","audio","volume","durationSeconds","beats","index","clipById","trackById","clipIdsOfTrack","trackIdOfClip","trackId","tracks","track","clipIds"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAoCC,UAApC,QAAsD,YAAtD;AACA,SAAyBC,gBAAzB,QAAiD,kBAAjD;AAEA,MAAMC,GAAG,GAAGH,KAAK,CAAC,gBAAD,CAAjB;;AACA,MAAMI,UAAU,GAAIC,GAAD,IAAiBA,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BF,GAAG,CAACG,KAAJ,CAAU,CAAV,CAAlE;;AAEA,OAAO,SAASC,cAAT,CAAwBC,MAAxB,EAAqD;AAC1D,MAAI,CAACR,gBAAgB,CAACQ,MAAD,CAArB,EAA+B;AAC7BP,IAAAA,GAAG,CAAC,mBAAD,EAAsBO,MAAtB,CAAH;AACA,UAAMC,KAAK,CAAC,0BAAD,CAAX;AACD;;AACD,MAAIV,UAAU,CAACS,MAAD,CAAd,EAAwB;AACtBE,IAAAA,eAAe,CAACF,MAAD,CAAf;AACAG,IAAAA,aAAa,CAACH,MAAD,CAAb;AACD;;AACD,SAAOA,MAAP;AACD;;AAED,SAASE,eAAT,CAAyBE,QAAzB,EAA6C;AAC3C,QAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAT,CAAcD,GAAd,IAAqB,GAAjC;AACAD,EAAAA,QAAQ,CAACG,KAAT,CAAeC,OAAf,CAAuBC,IAAI,IAAI;AAC7BA,IAAAA,IAAI,CAACC,IAAL,GAAYD,IAAI,CAACC,IAAL,IAAahB,UAAU,CAACe,IAAI,CAACE,EAAN,CAAnC;AACAF,IAAAA,IAAI,CAACG,MAAL,GAAcH,IAAI,CAACG,MAAL,IAAe,EAA7B;AACAH,IAAAA,IAAI,CAACI,KAAL,GAAaJ,IAAI,CAACI,KAAL,IAAc,EAA3B;AACAJ,IAAAA,IAAI,CAACK,OAAL,GAAeL,IAAI,CAACK,OAAL,IAAgB,EAA/B;AACAL,IAAAA,IAAI,CAACM,KAAL,CAAWC,MAAX,GAAoBP,IAAI,CAACM,KAAL,CAAWC,MAAX,IAAqB,GAAzC;AACAP,IAAAA,IAAI,CAACM,KAAL,CAAWE,eAAX,GAA8B,KAAKR,IAAI,CAACM,KAAL,CAAWG,KAAjB,GAA0Bb,GAAvD;AACD,GAPD;AAQD;;AAED,SAASF,aAAT,CAAuBC,QAAvB,EAA2C;AACzC,QAAMe,KAAsB,GAAG;AAC7BC,IAAAA,QAAQ,EAAE,EADmB;AAE7BC,IAAAA,SAAS,EAAE,EAFkB;AAG7BC,IAAAA,cAAc,EAAE,EAHa;AAI7BC,IAAAA,aAAa,EAAE;AAJc,GAA/B;AAMAnB,EAAAA,QAAQ,CAACG,KAAT,CAAeC,OAAf,CAAuBC,IAAI,IAAI;AAC7BU,IAAAA,KAAK,CAACC,QAAN,CAAeX,IAAI,CAACE,EAApB,IAA0BF,IAA1B;AACAU,IAAAA,KAAK,CAACI,aAAN,CAAoBd,IAAI,CAACE,EAAzB,IAA+BF,IAAI,CAACe,OAApC;AACD,GAHD;AAIApB,EAAAA,QAAQ,CAACqB,MAAT,CAAgBjB,OAAhB,CAAwBkB,KAAK,IAAI;AAC/BP,IAAAA,KAAK,CAACE,SAAN,CAAgBK,KAAK,CAACf,EAAtB,IAA4Be,KAA5B;AACAP,IAAAA,KAAK,CAACG,cAAN,CAAqBI,KAAK,CAACf,EAA3B,IAAiCe,KAAK,CAACC,OAAvC;AACD,GAHD;AAIAvB,EAAAA,QAAQ,CAACe,KAAT,GAAiBA,KAAjB;AACD","sourcesContent":["import debug from \"debug\";\nimport { Audioset, AudiosetIndexes, isAudioset } from \"./Audioset\";\nimport { AudiosetBundle, isAudiosetBundle } from \"./AudiosetBundle\";\n\nconst log = debug(\"atpls:audioset\");\nconst capitalize = (str: string) => str.charAt(0).toUpperCase() + str.slice(1);\n\nexport function createAudioset(bundle: any): AudiosetBundle {\n  if (!isAudiosetBundle(bundle)) {\n    log(\"Invalid format %o\", bundle);\n    throw Error(\"Invalida Audioset format\");\n  }\n  if (isAudioset(bundle)) {\n    migrateOrDerive(bundle);\n    createIndices(bundle);\n  }\n  return bundle;\n}\n\nfunction migrateOrDerive(audioset: Audioset) {\n  const bpm = audioset.meta.bpm || 120;\n  audioset.clips.forEach(clip => {\n    clip.name = clip.name || capitalize(clip.id);\n    clip.artist = clip.artist || \"\";\n    clip.place = clip.place || \"\";\n    clip.country = clip.country || \"\";\n    clip.audio.volume = clip.audio.volume || 0.7;\n    clip.audio.durationSeconds = (60 * clip.audio.beats) / bpm;\n  });\n}\n\nfunction createIndices(audioset: Audioset) {\n  const index: AudiosetIndexes = {\n    clipById: {},\n    trackById: {},\n    clipIdsOfTrack: {},\n    trackIdOfClip: {},\n  };\n  audioset.clips.forEach(clip => {\n    index.clipById[clip.id] = clip;\n    index.trackIdOfClip[clip.id] = clip.trackId;\n  });\n  audioset.tracks.forEach(track => {\n    index.trackById[track.id] = track;\n    index.clipIdsOfTrack[track.id] = track.clipIds;\n  });\n  audioset.index = index;\n}\n"]},"metadata":{},"sourceType":"module"}