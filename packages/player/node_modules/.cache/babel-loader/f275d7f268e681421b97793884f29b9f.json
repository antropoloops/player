{"ast":null,"code":"// Computes the bounding box of the specified hash of GeoJSON objects.\nexport default function (objects) {\n  var x0 = Infinity,\n      y0 = Infinity,\n      x1 = -Infinity,\n      y1 = -Infinity;\n\n  function boundGeometry(geometry) {\n    if (geometry != null && boundGeometryType.hasOwnProperty(geometry.type)) boundGeometryType[geometry.type](geometry);\n  }\n\n  var boundGeometryType = {\n    GeometryCollection: function GeometryCollection(o) {\n      o.geometries.forEach(boundGeometry);\n    },\n    Point: function Point(o) {\n      boundPoint(o.coordinates);\n    },\n    MultiPoint: function MultiPoint(o) {\n      o.coordinates.forEach(boundPoint);\n    },\n    LineString: function LineString(o) {\n      boundLine(o.arcs);\n    },\n    MultiLineString: function MultiLineString(o) {\n      o.arcs.forEach(boundLine);\n    },\n    Polygon: function Polygon(o) {\n      o.arcs.forEach(boundLine);\n    },\n    MultiPolygon: function MultiPolygon(o) {\n      o.arcs.forEach(boundMultiLine);\n    }\n  };\n\n  function boundPoint(coordinates) {\n    var x = coordinates[0],\n        y = coordinates[1];\n    if (x < x0) x0 = x;\n    if (x > x1) x1 = x;\n    if (y < y0) y0 = y;\n    if (y > y1) y1 = y;\n  }\n\n  function boundLine(coordinates) {\n    coordinates.forEach(boundPoint);\n  }\n\n  function boundMultiLine(coordinates) {\n    coordinates.forEach(boundLine);\n  }\n\n  for (var key in objects) {\n    boundGeometry(objects[key]);\n  }\n\n  return x1 >= x0 && y1 >= y0 ? [x0, y0, x1, y1] : undefined;\n}","map":null,"metadata":{},"sourceType":"module"}