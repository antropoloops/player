{"ast":null,"code":"import debug from \"debug\";\nimport { isAudiosetData, isAudiosetPack } from \"./Audioset\";\nconst log = debug(\"atpls:audioset\");\nexport function createAudioset(data) {\n  if (!isAudiosetData(data)) {\n    log(\"Invalid format %o\", data);\n    throw Error(\"Invalida Audioset format\");\n  }\n\n  if (isAudiosetPack(data)) {\n    migrateOrDerive(data);\n    createIndices(data);\n  }\n\n  return data;\n}\n\nfunction migrateOrDerive(audioset) {\n  const bpm = audioset.meta.bpm || 120;\n  audioset.clips.forEach(clip => {\n    clip.artist = clip.artist || \"\";\n    clip.place = clip.place || \"\";\n    clip.country = clip.country || \"\";\n    clip.audio.volume = clip.audio.volume || 0.7;\n    clip.audio.durationSeconds = 60 * clip.audio.beats / bpm;\n  });\n}\n\nfunction createIndices(audioset) {\n  const index = {\n    clipById: {},\n    trackById: {},\n    clipIdsOfTrack: {},\n    trackIdOfClip: {}\n  };\n  audioset.clips.forEach(clip => {\n    index.clipById[clip.id] = clip;\n    index.trackIdOfClip[clip.id] = clip.trackId;\n  });\n  audioset.tracks.forEach(track => {\n    index.trackById[track.id] = track;\n    index.clipIdsOfTrack[track.id] = track.clipIds;\n  });\n  audioset.index = index;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/Audioset/createAudioset.ts"],"names":["debug","isAudiosetData","isAudiosetPack","log","createAudioset","data","Error","migrateOrDerive","createIndices","audioset","bpm","meta","clips","forEach","clip","artist","place","country","audio","volume","durationSeconds","beats","index","clipById","trackById","clipIdsOfTrack","trackIdOfClip","id","trackId","tracks","track","clipIds"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAoCC,cAApC,EAAkEC,cAAlE,QAAwF,YAAxF;AAEA,MAAMC,GAAG,GAAGH,KAAK,CAAC,gBAAD,CAAjB;AAEA,OAAO,SAASI,cAAT,CAAwBC,IAAxB,EAAiD;AACtD,MAAI,CAACJ,cAAc,CAACI,IAAD,CAAnB,EAA2B;AACzBF,IAAAA,GAAG,CAAC,mBAAD,EAAsBE,IAAtB,CAAH;AACA,UAAMC,KAAK,CAAC,0BAAD,CAAX;AACD;;AAED,MAAIJ,cAAc,CAACG,IAAD,CAAlB,EAA0B;AACxBE,IAAAA,eAAe,CAACF,IAAD,CAAf;AACAG,IAAAA,aAAa,CAACH,IAAD,CAAb;AACD;;AACD,SAAOA,IAAP;AACD;;AAED,SAASE,eAAT,CAAyBE,QAAzB,EAA6C;AAC3C,QAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAT,CAAcD,GAAd,IAAqB,GAAjC;AACAD,EAAAA,QAAQ,CAACG,KAAT,CAAeC,OAAf,CAAwBC,IAAD,IAAU;AAC/BA,IAAAA,IAAI,CAACC,MAAL,GAAcD,IAAI,CAACC,MAAL,IAAe,EAA7B;AACAD,IAAAA,IAAI,CAACE,KAAL,GAAaF,IAAI,CAACE,KAAL,IAAc,EAA3B;AACAF,IAAAA,IAAI,CAACG,OAAL,GAAeH,IAAI,CAACG,OAAL,IAAgB,EAA/B;AACAH,IAAAA,IAAI,CAACI,KAAL,CAAWC,MAAX,GAAoBL,IAAI,CAACI,KAAL,CAAWC,MAAX,IAAqB,GAAzC;AACAL,IAAAA,IAAI,CAACI,KAAL,CAAWE,eAAX,GAA6B,KAAKN,IAAI,CAACI,KAAL,CAAWG,KAAhB,GAAwBX,GAArD;AACD,GAND;AAOD;;AAED,SAASF,aAAT,CAAuBC,QAAvB,EAA2C;AACzC,QAAMa,KAAsB,GAAG;AAC7BC,IAAAA,QAAQ,EAAE,EADmB;AAE7BC,IAAAA,SAAS,EAAE,EAFkB;AAG7BC,IAAAA,cAAc,EAAE,EAHa;AAI7BC,IAAAA,aAAa,EAAE;AAJc,GAA/B;AAMAjB,EAAAA,QAAQ,CAACG,KAAT,CAAeC,OAAf,CAAwBC,IAAD,IAAU;AAC/BQ,IAAAA,KAAK,CAACC,QAAN,CAAeT,IAAI,CAACa,EAApB,IAA0Bb,IAA1B;AACAQ,IAAAA,KAAK,CAACI,aAAN,CAAoBZ,IAAI,CAACa,EAAzB,IAA+Bb,IAAI,CAACc,OAApC;AACD,GAHD;AAIAnB,EAAAA,QAAQ,CAACoB,MAAT,CAAgBhB,OAAhB,CAAyBiB,KAAD,IAAW;AACjCR,IAAAA,KAAK,CAACE,SAAN,CAAgBM,KAAK,CAACH,EAAtB,IAA4BG,KAA5B;AACAR,IAAAA,KAAK,CAACG,cAAN,CAAqBK,KAAK,CAACH,EAA3B,IAAiCG,KAAK,CAACC,OAAvC;AACD,GAHD;AAIAtB,EAAAA,QAAQ,CAACa,KAAT,GAAiBA,KAAjB;AACD","sourcesContent":["import debug from \"debug\";\nimport { Audioset, AudiosetIndexes, isAudiosetData, AudiosetData, isAudiosetPack } from \"./Audioset\";\n\nconst log = debug(\"atpls:audioset\");\n\nexport function createAudioset(data: any): AudiosetData {\n  if (!isAudiosetData(data)) {\n    log(\"Invalid format %o\", data);\n    throw Error(\"Invalida Audioset format\");\n  }\n\n  if (isAudiosetPack(data)) {\n    migrateOrDerive(data);\n    createIndices(data);\n  }\n  return data;\n}\n\nfunction migrateOrDerive(audioset: Audioset) {\n  const bpm = audioset.meta.bpm || 120;\n  audioset.clips.forEach((clip) => {\n    clip.artist = clip.artist || \"\";\n    clip.place = clip.place || \"\";\n    clip.country = clip.country || \"\";\n    clip.audio.volume = clip.audio.volume || 0.7;\n    clip.audio.durationSeconds = 60 * clip.audio.beats / bpm;\n  });\n}\n\nfunction createIndices(audioset: Audioset) {\n  const index: AudiosetIndexes = {\n    clipById: {},\n    trackById: {},\n    clipIdsOfTrack: {},\n    trackIdOfClip: {},\n  };\n  audioset.clips.forEach((clip) => {\n    index.clipById[clip.id] = clip;\n    index.trackIdOfClip[clip.id] = clip.trackId;\n  });\n  audioset.tracks.forEach((track) => {\n    index.trackById[track.id] = track;\n    index.clipIdsOfTrack[track.id] = track.clipIds;\n  });\n  audioset.index = index;\n}\n"]},"metadata":{},"sourceType":"module"}