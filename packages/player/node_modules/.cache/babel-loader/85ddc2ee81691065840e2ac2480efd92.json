{"ast":null,"code":"import debug from \"debug\";\nimport { createSampler } from \"../sampler\";\nconst log = debug(\"atpls:sampler\");\nexport function createAudioEffects(audioset, ctx, buffers) {\n  return new AudioEffects(audioset, ctx, buffers);\n}\n\nclass AudioEffects {\n  constructor(audioset, ctx, buffers) {\n    this.audioset = audioset;\n    this.sampler = void 0;\n    log(\"init AudioEffects %s\", audioset.meta.title);\n    this.sampler = createSampler(buffers, ctx);\n    this.sampler.initTracks(audioset.tracks);\n  }\n\n  attach() {// nothing to do?\n  }\n\n  detach() {\n    this.sampler.disconnect();\n  }\n\n  run(command) {\n    const time = command.time;\n\n    switch (command.command) {\n      case \"startClip\":\n        const clipId = command.clipId;\n        const trackId = this.audioset.index.trackIdOfClip[clipId];\n        log(\"start %s %s\", clipId, trackId);\n        return this.sampler.start(clipId, trackId, time);\n\n      case \"stopClip\":\n        log(\"stop %s\", command.clipId);\n        return this.sampler.stop(command.clipId, time);\n\n      default:\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/AudioEffects.ts"],"names":["debug","createSampler","log","createAudioEffects","audioset","ctx","buffers","AudioEffects","constructor","sampler","meta","title","initTracks","tracks","attach","detach","disconnect","run","command","time","clipId","trackId","index","trackIdOfClip","start","stop"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAASC,aAAT,QAAsD,YAAtD;AAGA,MAAMC,GAAG,GAAGF,KAAK,CAAC,eAAD,CAAjB;AAEA,OAAO,SAASG,kBAAT,CACLC,QADK,EAELC,GAFK,EAGLC,OAHK,EAIS;AACd,SAAO,IAAIC,YAAJ,CAAiBH,QAAjB,EAA2BC,GAA3B,EAAgCC,OAAhC,CAAP;AACD;;AAED,MAAMC,YAAN,CAAsC;AAEpCC,EAAAA,WAAW,CACDJ,QADC,EAETC,GAFS,EAGTC,OAHS,EAIT;AAAA,SAHQF,QAGR,GAHQA,QAGR;AAAA,SALKK,OAKL;AACAP,IAAAA,GAAG,CAAC,sBAAD,EAAyBE,QAAQ,CAACM,IAAT,CAAcC,KAAvC,CAAH;AACA,SAAKF,OAAL,GAAeR,aAAa,CAACK,OAAD,EAAUD,GAAV,CAA5B;AACA,SAAKI,OAAL,CAAaG,UAAb,CAAwBR,QAAQ,CAACS,MAAjC;AACD;;AAEMC,EAAAA,MAAP,GAAgB,CACd;AACD;;AAEMC,EAAAA,MAAP,GAAgB;AACd,SAAKN,OAAL,CAAaO,UAAb;AACD;;AAEMC,EAAAA,GAAP,CAAWC,OAAX,EAAoC;AAClC,UAAMC,IAAI,GAAGD,OAAO,CAACC,IAArB;;AACA,YAAQD,OAAO,CAACA,OAAhB;AACE,WAAK,WAAL;AACE,cAAME,MAAM,GAAGF,OAAO,CAACE,MAAvB;AACA,cAAMC,OAAO,GAAG,KAAKjB,QAAL,CAAckB,KAAd,CAAoBC,aAApB,CAAkCH,MAAlC,CAAhB;AACAlB,QAAAA,GAAG,CAAC,aAAD,EAAgBkB,MAAhB,EAAwBC,OAAxB,CAAH;AACA,eAAO,KAAKZ,OAAL,CAAae,KAAb,CAAmBJ,MAAnB,EAA2BC,OAA3B,EAAoCF,IAApC,CAAP;;AACF,WAAK,UAAL;AACEjB,QAAAA,GAAG,CAAC,SAAD,EAAYgB,OAAO,CAACE,MAApB,CAAH;AACA,eAAO,KAAKX,OAAL,CAAagB,IAAb,CAAkBP,OAAO,CAACE,MAA1B,EAAkCD,IAAlC,CAAP;;AACF;AATF;AAWD;;AAjCmC","sourcesContent":["import debug from \"debug\";\nimport { IAudioContext } from \"standardized-audio-context\";\nimport { Audioset } from \"../audioset\";\nimport { createSampler, SampleBuffers, Sampler } from \"../sampler\";\nimport { ControlCommand, Effects } from \"./Control\";\n\nconst log = debug(\"atpls:sampler\");\n\nexport function createAudioEffects(\n  audioset: Audioset,\n  ctx: IAudioContext,\n  buffers: SampleBuffers,\n): AudioEffects {\n  return new AudioEffects(audioset, ctx, buffers);\n}\n\nclass AudioEffects implements Effects {\n  public sampler: Sampler;\n  constructor(\n    private audioset: Audioset,\n    ctx: IAudioContext,\n    buffers: SampleBuffers,\n  ) {\n    log(\"init AudioEffects %s\", audioset.meta.title);\n    this.sampler = createSampler(buffers, ctx);\n    this.sampler.initTracks(audioset.tracks);\n  }\n\n  public attach() {\n    // nothing to do?\n  }\n\n  public detach() {\n    this.sampler.disconnect();\n  }\n\n  public run(command: ControlCommand) {\n    const time = command.time;\n    switch (command.command) {\n      case \"startClip\":\n        const clipId = command.clipId;\n        const trackId = this.audioset.index.trackIdOfClip[clipId];\n        log(\"start %s %s\", clipId, trackId);\n        return this.sampler.start(clipId, trackId, time);\n      case \"stopClip\":\n        log(\"stop %s\", command.clipId);\n        return this.sampler.stop(command.clipId, time);\n      default:\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}