{"ast":null,"code":"import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n  Q: 1,\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  detune: 0,\n  frequency: 350,\n  gain: 0,\n  type: 'lowpass'\n};\nexport const createBiquadFilterNodeConstructor = (audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class BiquadFilterNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const biquadFilterNodeRenderer = isOffline ? createBiquadFilterNodeRenderer() : null;\n      super(context, false, nativeBiquadFilterNode, biquadFilterNodeRenderer); // Bug #80: Edge & Safari do not export the correct values for maxValue and minValue.\n\n      this._Q = createAudioParam(this, isOffline, nativeBiquadFilterNode.Q, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT); // Bug #78: Chrome, Edge, Firefox, Opera & Safari do not export the correct values for maxValue and minValue.\n\n      this._detune = createAudioParam(this, isOffline, nativeBiquadFilterNode.detune, 1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT), -1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT));\n      /*\n       * Bug #77: Edge does not export the correct values for maxValue and minValue. Firefox & Safari do not export the correct value\n       * for minValue.\n       */\n\n      this._frequency = createAudioParam(this, isOffline, nativeBiquadFilterNode.frequency, context.sampleRate / 2, 0); // Bug #79: Chrome, Edge, Firefox, Opera & Safari do not export the correct values for maxValue and minValue.\n\n      this._gain = createAudioParam(this, isOffline, nativeBiquadFilterNode.gain, 40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT), -40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT));\n      this._nativeBiquadFilterNode = nativeBiquadFilterNode;\n    }\n\n    get Q() {\n      return this._Q;\n    }\n\n    get detune() {\n      return this._detune;\n    }\n\n    get frequency() {\n      return this._frequency;\n    }\n\n    get gain() {\n      return this._gain;\n    }\n\n    get type() {\n      return this._nativeBiquadFilterNode.type;\n    }\n\n    set type(value) {\n      this._nativeBiquadFilterNode.type = value;\n    }\n\n    getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n      this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse); // Bug #68: Only Chrome, Firefox & Opera do throw an error if the parameters differ in their length.\n\n\n      if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n        throw createInvalidAccessError();\n      }\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/biquad-filter-node-constructor.js"],"names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","DEFAULT_OPTIONS","Q","channelCount","channelCountMode","channelInterpretation","detune","frequency","gain","type","createBiquadFilterNodeConstructor","audioNodeConstructor","createAudioParam","createBiquadFilterNodeRenderer","createInvalidAccessError","createNativeBiquadFilterNode","getNativeContext","isNativeOfflineAudioContext","BiquadFilterNode","constructor","context","options","nativeContext","mergedOptions","nativeBiquadFilterNode","isOffline","biquadFilterNodeRenderer","_Q","_detune","Math","log2","_frequency","sampleRate","_gain","log10","_nativeBiquadFilterNode","value","getFrequencyResponse","frequencyHz","magResponse","phaseResponse","length"],"mappings":"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","sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n    Q: 1,\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    detune: 0,\n    frequency: 350,\n    gain: 0,\n    type: 'lowpass'\n};\nexport const createBiquadFilterNodeConstructor = (audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class BiquadFilterNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const biquadFilterNodeRenderer = ((isOffline) ? createBiquadFilterNodeRenderer() : null);\n            super(context, false, nativeBiquadFilterNode, biquadFilterNodeRenderer);\n            // Bug #80: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._Q = createAudioParam(this, isOffline, nativeBiquadFilterNode.Q, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            // Bug #78: Chrome, Edge, Firefox, Opera & Safari do not export the correct values for maxValue and minValue.\n            this._detune = createAudioParam(this, isOffline, nativeBiquadFilterNode.detune, 1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT), -1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT));\n            /*\n             * Bug #77: Edge does not export the correct values for maxValue and minValue. Firefox & Safari do not export the correct value\n             * for minValue.\n             */\n            this._frequency = createAudioParam(this, isOffline, nativeBiquadFilterNode.frequency, context.sampleRate / 2, 0);\n            // Bug #79: Chrome, Edge, Firefox, Opera & Safari do not export the correct values for maxValue and minValue.\n            this._gain = createAudioParam(this, isOffline, nativeBiquadFilterNode.gain, 40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT), -40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT));\n            this._nativeBiquadFilterNode = nativeBiquadFilterNode;\n        }\n        get Q() {\n            return this._Q;\n        }\n        get detune() {\n            return this._detune;\n        }\n        get frequency() {\n            return this._frequency;\n        }\n        get gain() {\n            return this._gain;\n        }\n        get type() {\n            return this._nativeBiquadFilterNode.type;\n        }\n        set type(value) {\n            this._nativeBiquadFilterNode.type = value;\n        }\n        getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n            this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n            // Bug #68: Only Chrome, Firefox & Opera do throw an error if the parameters differ in their length.\n            if ((frequencyHz.length !== magResponse.length) || (magResponse.length !== phaseResponse.length)) {\n                throw createInvalidAccessError();\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/biquad-filter-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}