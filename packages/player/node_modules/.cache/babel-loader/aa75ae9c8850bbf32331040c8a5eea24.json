{"ast":null,"code":"import debug from\"debug\";import{isAudiosetData,isAudiosetPack}from\"./Audioset\";var log=debug(\"atpls:audioset\");export function createAudioset(data){if(!isAudiosetData(data)){log(\"Invalid format %o\",data);throw Error(\"Invalida Audioset format\");}if(isAudiosetPack(data)){migrateOrDerive(data);createIndices(data);}return data;}function migrateOrDerive(audioset){var bpm=audioset.meta.bpm||120;audioset.clips.forEach(function(clip){clip.artist=clip.artist||\"\";clip.place=clip.place||\"\";clip.country=clip.country||\"\";clip.audio.volume=clip.audio.volume||0.7;clip.audio.durationSeconds=60*clip.audio.beats/bpm;});}function createIndices(audioset){var index={clipById:{},trackById:{},clipIdsOfTrack:{},trackIdOfClip:{}};audioset.clips.forEach(function(clip){index.clipById[clip.id]=clip;index.trackIdOfClip[clip.id]=clip.trackId;});audioset.tracks.forEach(function(track){index.trackById[track.id]=track;index.clipIdsOfTrack[track.id]=track.clipIds;});audioset.index=index;}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/Audioset/createAudioset.ts"],"names":["debug","isAudiosetData","isAudiosetPack","log","createAudioset","data","Error","migrateOrDerive","createIndices","audioset","bpm","meta","clips","forEach","clip","artist","place","country","audio","volume","durationSeconds","beats","index","clipById","trackById","clipIdsOfTrack","trackIdOfClip","id","trackId","tracks","track","clipIds"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAAoCC,cAApC,CAAkEC,cAAlE,KAAwF,YAAxF,CAEA,GAAMC,CAAAA,GAAG,CAAGH,KAAK,CAAC,gBAAD,CAAjB,CAEA,MAAO,SAASI,CAAAA,cAAT,CAAwBC,IAAxB,CAAiD,CACtD,GAAI,CAACJ,cAAc,CAACI,IAAD,CAAnB,CAA2B,CACzBF,GAAG,CAAC,mBAAD,CAAsBE,IAAtB,CAAH,CACA,KAAMC,CAAAA,KAAK,CAAC,0BAAD,CAAX,CACD,CAED,GAAIJ,cAAc,CAACG,IAAD,CAAlB,CAA0B,CACxBE,eAAe,CAACF,IAAD,CAAf,CACAG,aAAa,CAACH,IAAD,CAAb,CACD,CACD,MAAOA,CAAAA,IAAP,CACD,CAED,QAASE,CAAAA,eAAT,CAAyBE,QAAzB,CAA6C,CAC3C,GAAMC,CAAAA,GAAG,CAAGD,QAAQ,CAACE,IAAT,CAAcD,GAAd,EAAqB,GAAjC,CACAD,QAAQ,CAACG,KAAT,CAAeC,OAAf,CAAuB,SAACC,IAAD,CAAU,CAC/BA,IAAI,CAACC,MAAL,CAAcD,IAAI,CAACC,MAAL,EAAe,EAA7B,CACAD,IAAI,CAACE,KAAL,CAAaF,IAAI,CAACE,KAAL,EAAc,EAA3B,CACAF,IAAI,CAACG,OAAL,CAAeH,IAAI,CAACG,OAAL,EAAgB,EAA/B,CACAH,IAAI,CAACI,KAAL,CAAWC,MAAX,CAAoBL,IAAI,CAACI,KAAL,CAAWC,MAAX,EAAqB,GAAzC,CACAL,IAAI,CAACI,KAAL,CAAWE,eAAX,CAA6B,GAAKN,IAAI,CAACI,KAAL,CAAWG,KAAhB,CAAwBX,GAArD,CACD,CAND,EAOD,CAED,QAASF,CAAAA,aAAT,CAAuBC,QAAvB,CAA2C,CACzC,GAAMa,CAAAA,KAAsB,CAAG,CAC7BC,QAAQ,CAAE,EADmB,CAE7BC,SAAS,CAAE,EAFkB,CAG7BC,cAAc,CAAE,EAHa,CAI7BC,aAAa,CAAE,EAJc,CAA/B,CAMAjB,QAAQ,CAACG,KAAT,CAAeC,OAAf,CAAuB,SAACC,IAAD,CAAU,CAC/BQ,KAAK,CAACC,QAAN,CAAeT,IAAI,CAACa,EAApB,EAA0Bb,IAA1B,CACAQ,KAAK,CAACI,aAAN,CAAoBZ,IAAI,CAACa,EAAzB,EAA+Bb,IAAI,CAACc,OAApC,CACD,CAHD,EAIAnB,QAAQ,CAACoB,MAAT,CAAgBhB,OAAhB,CAAwB,SAACiB,KAAD,CAAW,CACjCR,KAAK,CAACE,SAAN,CAAgBM,KAAK,CAACH,EAAtB,EAA4BG,KAA5B,CACAR,KAAK,CAACG,cAAN,CAAqBK,KAAK,CAACH,EAA3B,EAAiCG,KAAK,CAACC,OAAvC,CACD,CAHD,EAIAtB,QAAQ,CAACa,KAAT,CAAiBA,KAAjB,CACD","sourcesContent":["import debug from \"debug\";\nimport { Audioset, AudiosetIndexes, isAudiosetData, AudiosetData, isAudiosetPack } from \"./Audioset\";\n\nconst log = debug(\"atpls:audioset\");\n\nexport function createAudioset(data: any): AudiosetData {\n  if (!isAudiosetData(data)) {\n    log(\"Invalid format %o\", data);\n    throw Error(\"Invalida Audioset format\");\n  }\n\n  if (isAudiosetPack(data)) {\n    migrateOrDerive(data);\n    createIndices(data);\n  }\n  return data;\n}\n\nfunction migrateOrDerive(audioset: Audioset) {\n  const bpm = audioset.meta.bpm || 120;\n  audioset.clips.forEach((clip) => {\n    clip.artist = clip.artist || \"\";\n    clip.place = clip.place || \"\";\n    clip.country = clip.country || \"\";\n    clip.audio.volume = clip.audio.volume || 0.7;\n    clip.audio.durationSeconds = 60 * clip.audio.beats / bpm;\n  });\n}\n\nfunction createIndices(audioset: Audioset) {\n  const index: AudiosetIndexes = {\n    clipById: {},\n    trackById: {},\n    clipIdsOfTrack: {},\n    trackIdOfClip: {},\n  };\n  audioset.clips.forEach((clip) => {\n    index.clipById[clip.id] = clip;\n    index.trackIdOfClip[clip.id] = clip.trackId;\n  });\n  audioset.tracks.forEach((track) => {\n    index.trackById[track.id] = track;\n    index.clipIdsOfTrack[track.id] = track.clipIds;\n  });\n  audioset.index = index;\n}\n"]},"metadata":{},"sourceType":"module"}