{"ast":null,"code":"const DEFAULT_OPTIONS = {\n  channelCount: 6,\n  channelCountMode: 'explicit',\n  channelInterpretation: 'discrete',\n  numberOfOutputs: 6\n};\n\nconst sanitizedOptions = options => {\n  return { ...options,\n    channelCount: options.numberOfOutputs\n  };\n};\n\nexport const createChannelSplitterNodeConstructor = (audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class ChannelSplitterNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = sanitizedOptions({ ...DEFAULT_OPTIONS,\n        ...options\n      });\n      const nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);\n      const channelSplitterNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createChannelSplitterNodeRenderer() : null;\n      super(context, false, nativeChannelSplitterNode, channelSplitterNodeRenderer);\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/channel-splitter-node-constructor.js"],"names":["DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","numberOfOutputs","sanitizedOptions","options","createChannelSplitterNodeConstructor","audioNodeConstructor","createChannelSplitterNodeRenderer","createNativeChannelSplitterNode","getNativeContext","isNativeOfflineAudioContext","ChannelSplitterNode","constructor","context","nativeContext","mergedOptions","nativeChannelSplitterNode","channelSplitterNodeRenderer"],"mappings":"AAAA,MAAMA,eAAe,GAAG;AACpBC,EAAAA,YAAY,EAAE,CADM;AAEpBC,EAAAA,gBAAgB,EAAE,UAFE;AAGpBC,EAAAA,qBAAqB,EAAE,UAHH;AAIpBC,EAAAA,eAAe,EAAE;AAJG,CAAxB;;AAMA,MAAMC,gBAAgB,GAAIC,OAAD,IAAa;AAClC,SAAO,EAAE,GAAGA,OAAL;AAAcL,IAAAA,YAAY,EAAEK,OAAO,CAACF;AAApC,GAAP;AACH,CAFD;;AAGA,OAAO,MAAMG,oCAAoC,GAAG,CAACC,oBAAD,EAAuBC,iCAAvB,EAA0DC,+BAA1D,EAA2FC,gBAA3F,EAA6GC,2BAA7G,KAA6I;AAC7L,SAAO,MAAMC,mBAAN,SAAkCL,oBAAlC,CAAuD;AAC1DM,IAAAA,WAAW,CAACC,OAAD,EAAUT,OAAO,GAAGN,eAApB,EAAqC;AAC5C,YAAMgB,aAAa,GAAGL,gBAAgB,CAACI,OAAD,CAAtC;AACA,YAAME,aAAa,GAAGZ,gBAAgB,CAAC,EAAE,GAAGL,eAAL;AAAsB,WAAGM;AAAzB,OAAD,CAAtC;AACA,YAAMY,yBAAyB,GAAGR,+BAA+B,CAACM,aAAD,EAAgBC,aAAhB,CAAjE;AACA,YAAME,2BAA2B,GAAKP,2BAA2B,CAACI,aAAD,CAA5B,GAC/BP,iCAAiC,EADF,GAE/B,IAFN;AAGA,YAAMM,OAAN,EAAe,KAAf,EAAsBG,yBAAtB,EAAiDC,2BAAjD;AACH;;AATyD,GAA9D;AAWH,CAZM","sourcesContent":["const DEFAULT_OPTIONS = {\n    channelCount: 6,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'discrete',\n    numberOfOutputs: 6\n};\nconst sanitizedOptions = (options) => {\n    return { ...options, channelCount: options.numberOfOutputs };\n};\nexport const createChannelSplitterNodeConstructor = (audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class ChannelSplitterNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = sanitizedOptions({ ...DEFAULT_OPTIONS, ...options });\n            const nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);\n            const channelSplitterNodeRenderer = ((isNativeOfflineAudioContext(nativeContext))\n                ? createChannelSplitterNodeRenderer()\n                : null);\n            super(context, false, nativeChannelSplitterNode, channelSplitterNodeRenderer);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/channel-splitter-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}