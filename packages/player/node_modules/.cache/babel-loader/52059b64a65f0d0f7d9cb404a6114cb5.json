{"ast":null,"code":"import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { asin, cos, degrees, pi, radians, sign, sin, sqrt } from \"./math.js\";\nimport { solve } from \"./newton.js\";\nexport function hufnagelRaw(a, b, psiMax, ratio) {\n  var k = sqrt(4 * pi / (2 * psiMax + (1 + a - b / 2) * sin(2 * psiMax) + (a + b) / 2 * sin(4 * psiMax) + b / 2 * sin(6 * psiMax))),\n      c = sqrt(ratio * sin(psiMax) * sqrt((1 + a * cos(2 * psiMax) + b * cos(4 * psiMax)) / (1 + a + b))),\n      M = psiMax * mapping(1);\n\n  function radius(psi) {\n    return sqrt(1 + a * cos(2 * psi) + b * cos(4 * psi));\n  }\n\n  function mapping(t) {\n    var psi = t * psiMax;\n    return (2 * psi + (1 + a - b / 2) * sin(2 * psi) + (a + b) / 2 * sin(4 * psi) + b / 2 * sin(6 * psi)) / psiMax;\n  }\n\n  function inversemapping(psi) {\n    return radius(psi) * sin(psi);\n  }\n\n  var forward = function forward(lambda, phi) {\n    var psi = psiMax * solve(mapping, M * sin(phi) / psiMax, phi / pi);\n    if (isNaN(psi)) psi = psiMax * sign(phi);\n    var kr = k * radius(psi);\n    return [kr * c * lambda / pi * cos(psi), kr / c * sin(psi)];\n  };\n\n  forward.invert = function (x, y) {\n    var psi = solve(inversemapping, y * c / k);\n    return [x * pi / (cos(psi) * k * c * radius(psi)), asin(psiMax * mapping(psi / psiMax) / M)];\n  };\n\n  if (psiMax === 0) {\n    k = sqrt(ratio / pi);\n\n    forward = function forward(lambda, phi) {\n      return [lambda * k, sin(phi) / k];\n    };\n\n    forward.invert = function (x, y) {\n      return [x / k, asin(y * k)];\n    };\n  }\n\n  return forward;\n}\nexport default function () {\n  var a = 1,\n      b = 0,\n      psiMax = 45 * radians,\n      ratio = 2,\n      mutate = projectionMutator(hufnagelRaw),\n      projection = mutate(a, b, psiMax, ratio);\n\n  projection.a = function (_) {\n    return arguments.length ? mutate(a = +_, b, psiMax, ratio) : a;\n  };\n\n  projection.b = function (_) {\n    return arguments.length ? mutate(a, b = +_, psiMax, ratio) : b;\n  };\n\n  projection.psiMax = function (_) {\n    return arguments.length ? mutate(a, b, psiMax = +_ * radians, ratio) : psiMax * degrees;\n  };\n\n  projection.ratio = function (_) {\n    return arguments.length ? mutate(a, b, psiMax, ratio = +_) : ratio;\n  };\n\n  return projection.scale(180.739);\n}","map":null,"metadata":{},"sourceType":"module"}