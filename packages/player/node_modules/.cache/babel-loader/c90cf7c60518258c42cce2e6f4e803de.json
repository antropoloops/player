{"ast":null,"code":"/**\n * The aaudioset metadata extended to include the audioset id and publish path\n * It's used in audioset project to list audiosets\n */\n\n/**\n * An AudiosetProject is a group of audiosets\n */\nexport const EmptyAudioset = {\n  type: \"audioset\",\n  id: \"none\",\n  meta: {\n    title: \"\",\n    description: \"\",\n    path: \"\",\n    parent_path: \"\",\n    logo_url: \"\",\n    readme: \"\"\n  },\n  tracks: [],\n  clips: [],\n  index: {\n    clipById: {},\n    trackById: {},\n    clipIdsOfTrack: {},\n    trackIdOfClip: {}\n  }\n};\nexport function createAudiosetIndexes(audioset) {\n  const index = {\n    clipById: {},\n    trackById: {},\n    clipIdsOfTrack: {},\n    trackIdOfClip: {}\n  };\n  audioset.clips.forEach(clip => {\n    index.clipById[clip.id] = clip;\n    index.trackIdOfClip[clip.id] = clip.trackId;\n  });\n  audioset.tracks.forEach(track => {\n    index.trackById[track.id] = track;\n    index.clipIdsOfTrack[track.id] = track.clipIds;\n  });\n  audioset.index = index;\n  return audioset;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/Player/Audioset.ts"],"names":["EmptyAudioset","type","id","meta","title","description","path","parent_path","logo_url","readme","tracks","clips","index","clipById","trackById","clipIdsOfTrack","trackIdOfClip","createAudiosetIndexes","audioset","forEach","clip","trackId","track","clipIds"],"mappings":"AAuDA;;;;;AAcA;;;AAuBA,OAAO,MAAMA,aAAuB,GAAG;AACrCC,EAAAA,IAAI,EAAE,UAD+B;AAErCC,EAAAA,EAAE,EAAE,MAFiC;AAGrCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,EADH;AAEJC,IAAAA,WAAW,EAAE,EAFT;AAGJC,IAAAA,IAAI,EAAE,EAHF;AAIJC,IAAAA,WAAW,EAAE,EAJT;AAKJC,IAAAA,QAAQ,EAAE,EALN;AAMJC,IAAAA,MAAM,EAAE;AANJ,GAH+B;AAWrCC,EAAAA,MAAM,EAAE,EAX6B;AAYrCC,EAAAA,KAAK,EAAE,EAZ8B;AAarCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE,EADL;AAELC,IAAAA,SAAS,EAAE,EAFN;AAGLC,IAAAA,cAAc,EAAE,EAHX;AAILC,IAAAA,aAAa,EAAE;AAJV;AAb8B,CAAhC;AAqBP,OAAO,SAASC,qBAAT,CAA+BC,QAA/B,EAA6D;AAClE,QAAMN,KAAsB,GAAG;AAC7BC,IAAAA,QAAQ,EAAE,EADmB;AAE7BC,IAAAA,SAAS,EAAE,EAFkB;AAG7BC,IAAAA,cAAc,EAAE,EAHa;AAI7BC,IAAAA,aAAa,EAAE;AAJc,GAA/B;AAMAE,EAAAA,QAAQ,CAACP,KAAT,CAAeQ,OAAf,CAAwBC,IAAD,IAAU;AAC/BR,IAAAA,KAAK,CAACC,QAAN,CAAeO,IAAI,CAAClB,EAApB,IAA0BkB,IAA1B;AACAR,IAAAA,KAAK,CAACI,aAAN,CAAoBI,IAAI,CAAClB,EAAzB,IAA+BkB,IAAI,CAACC,OAApC;AACD,GAHD;AAIAH,EAAAA,QAAQ,CAACR,MAAT,CAAgBS,OAAhB,CAAyBG,KAAD,IAAW;AACjCV,IAAAA,KAAK,CAACE,SAAN,CAAgBQ,KAAK,CAACpB,EAAtB,IAA4BoB,KAA5B;AACAV,IAAAA,KAAK,CAACG,cAAN,CAAqBO,KAAK,CAACpB,EAA3B,IAAiCoB,KAAK,CAACC,OAAvC;AACD,GAHD;AAKAL,EAAAA,QAAQ,CAACN,KAAT,GAAiBA,KAAjB;AACA,SAAOM,QAAP;AACD","sourcesContent":["interface ClipMetadata {\n  title: string;\n  album: string;\n  year: string;\n  artist?: string;\n  place?: string;\n  country?: string;\n}\n\ninterface ClipVisuals {\n  color: string;\n  position: [number, number];\n}\n\ninterface ClipResources {\n  audio: {\n    mp3: string;\n    ogg?: string;\n    wav?: string;\n  };\n  cover: {\n    small: string;\n    thumb: string;\n  };\n}\n\nexport interface Clip extends ClipMetadata, ClipVisuals {\n  id: string;\n  keyMap: string;\n  trackId: string;\n  audio: {\n    beats: number;\n    volume?: number;\n  };\n  resources: ClipResources;\n}\n\nexport type Track = {\n  id: string;\n  name: string;\n  color: string;\n  clipIds: string[];\n  position: number;\n  volume?: number;\n};\n\nexport type AudiosetMetadata = {\n  title: string;\n  description: string;\n  path: string;\n  parent_path: string;\n  logo_url: string;\n  readme: string;\n};\n\n/**\n * The aaudioset metadata extended to include the audioset id and publish path\n * It's used in audioset project to list audiosets\n */\nexport type AudiosetReference = AudiosetMetadata & {\n  id: string;\n  publish_path: string;\n};\n\nexport interface AudiosetData {\n  type: string;\n  meta: AudiosetMetadata;\n}\n\n/**\n * An AudiosetProject is a group of audiosets\n */\nexport interface AudiosetProject extends AudiosetData {\n  type: \"project\";\n  audiosets: AudiosetReference[];\n}\n\nexport interface AudiosetIndexes {\n  clipById: Record<string, Clip>;\n  trackById: Record<string, Track>;\n  clipIdsOfTrack: Record<string, string[]>;\n  trackIdOfClip: Record<string, string>;\n}\n\nexport interface Audioset extends AudiosetData {\n  type: \"audioset\";\n  id: string;\n  tracks: Track[];\n  clips: Clip[];\n  index: AudiosetIndexes;\n}\n\nexport const EmptyAudioset: Audioset = {\n  type: \"audioset\",\n  id: \"none\",\n  meta: {\n    title: \"\",\n    description: \"\",\n    path: \"\",\n    parent_path: \"\",\n    logo_url: \"\",\n    readme: \"\",\n  },\n  tracks: [],\n  clips: [],\n  index: {\n    clipById: {},\n    trackById: {},\n    clipIdsOfTrack: {},\n    trackIdOfClip: {},\n  },\n};\n\nexport function createAudiosetIndexes(audioset: Audioset): Audioset {\n  const index: AudiosetIndexes = {\n    clipById: {},\n    trackById: {},\n    clipIdsOfTrack: {},\n    trackIdOfClip: {},\n  };\n  audioset.clips.forEach((clip) => {\n    index.clipById[clip.id] = clip;\n    index.trackIdOfClip[clip.id] = clip.trackId;\n  });\n  audioset.tracks.forEach((track) => {\n    index.trackById[track.id] = track;\n    index.clipIdsOfTrack[track.id] = track.clipIds;\n  });\n\n  audioset.index = index;\n  return audioset;\n}\n"]},"metadata":{},"sourceType":"module"}