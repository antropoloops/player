{"ast":null,"code":"export class KeyboardControler {\n  constructor(audioset, control) {\n    this.control = control;\n    this.active = false;\n    this.pressed = {};\n    this.clipIdToKey = {};\n    this.keyToClipId = {};\n    audioset.clips.forEach(clip => {\n      const key = clip.keyMap.toUpperCase();\n      this.clipIdToKey[clip.id] = key;\n      this.keyToClipId[key] = clip.id;\n    });\n  }\n\n  setMapMode(clip, callback) {}\n\n  setKey(clipId, key) {\n    const oldKey = this.clipIdToKey[clipId];\n\n    if (oldKey) {\n      this.keyToClipId[oldKey] = undefined;\n    }\n\n    key = key.toUpperCase();\n    this.keyToClipId[key] = clipId;\n    this.clipIdToKey[clipId] = key;\n  }\n\n  keyDown(key) {\n    if (!this.active) {\n      return;\n    }\n\n    key = key.toUpperCase();\n\n    if (this.pressed[key]) {\n      return;\n    }\n\n    this.pressed[key] = true;\n    const clipId = this.keyToClipId[key];\n\n    if (clipId) {\n      this.control.startClip(clipId, 0);\n    }\n  }\n\n  keyUp(key) {\n    if (!this.active) {\n      return;\n    }\n\n    key = key.toUpperCase();\n    this.pressed[key] = false;\n    const clipId = this.keyToClipId[key];\n\n    if (clipId) {\n      this.control.stopClip(clipId, 0);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/KeyboardControler.ts"],"names":["KeyboardControler","constructor","audioset","control","active","pressed","clipIdToKey","keyToClipId","clips","forEach","clip","key","keyMap","toUpperCase","id","setMapMode","callback","setKey","clipId","oldKey","undefined","keyDown","startClip","keyUp","stopClip"],"mappings":"AAOA,OAAO,MAAMA,iBAAN,CAAwB;AAM7BC,EAAAA,WAAW,CAACC,QAAD,EAA6BC,OAA7B,EAA+C;AAAA,SAAlBA,OAAkB,GAAlBA,OAAkB;AAAA,SALnDC,MAKmD,GALjC,KAKiC;AAAA,SAJnDC,OAImD,GAJhB,EAIgB;AAAA,SAHnDC,WAGmD,GAHb,EAGa;AAAA,SAFnDC,WAEmD,GAFD,EAEC;AACxDL,IAAAA,QAAQ,CAACM,KAAT,CAAeC,OAAf,CAAuBC,IAAI,IAAI;AAC7B,YAAMC,GAAG,GAAGD,IAAI,CAACE,MAAL,CAAYC,WAAZ,EAAZ;AACA,WAAKP,WAAL,CAAiBI,IAAI,CAACI,EAAtB,IAA4BH,GAA5B;AACA,WAAKJ,WAAL,CAAiBI,GAAjB,IAAwBD,IAAI,CAACI,EAA7B;AACD,KAJD;AAKD;;AAEMC,EAAAA,UAAP,CAAkBL,IAAlB,EAAwBM,QAAxB,EAA4D,CAAE;;AAEvDC,EAAAA,MAAP,CAAcC,MAAd,EAA8BP,GAA9B,EAA2C;AACzC,UAAMQ,MAAM,GAAG,KAAKb,WAAL,CAAiBY,MAAjB,CAAf;;AACA,QAAIC,MAAJ,EAAY;AACV,WAAKZ,WAAL,CAAiBY,MAAjB,IAA2BC,SAA3B;AACD;;AACDT,IAAAA,GAAG,GAAGA,GAAG,CAACE,WAAJ,EAAN;AACA,SAAKN,WAAL,CAAiBI,GAAjB,IAAwBO,MAAxB;AACA,SAAKZ,WAAL,CAAiBY,MAAjB,IAA2BP,GAA3B;AACD;;AAEMU,EAAAA,OAAP,CAAeV,GAAf,EAA4B;AAC1B,QAAI,CAAC,KAAKP,MAAV,EAAkB;AAChB;AACD;;AAEDO,IAAAA,GAAG,GAAGA,GAAG,CAACE,WAAJ,EAAN;;AACA,QAAI,KAAKR,OAAL,CAAaM,GAAb,CAAJ,EAAuB;AACrB;AACD;;AACD,SAAKN,OAAL,CAAaM,GAAb,IAAoB,IAApB;AAEA,UAAMO,MAAM,GAAG,KAAKX,WAAL,CAAiBI,GAAjB,CAAf;;AACA,QAAIO,MAAJ,EAAY;AACV,WAAKf,OAAL,CAAamB,SAAb,CAAuBJ,MAAvB,EAA+B,CAA/B;AACD;AACF;;AACMK,EAAAA,KAAP,CAAaZ,GAAb,EAA0B;AACxB,QAAI,CAAC,KAAKP,MAAV,EAAkB;AAChB;AACD;;AAEDO,IAAAA,GAAG,GAAGA,GAAG,CAACE,WAAJ,EAAN;AACA,SAAKR,OAAL,CAAaM,GAAb,IAAoB,KAApB;AAEA,UAAMO,MAAM,GAAG,KAAKX,WAAL,CAAiBI,GAAjB,CAAf;;AACA,QAAIO,MAAJ,EAAY;AACV,WAAKf,OAAL,CAAaqB,QAAb,CAAsBN,MAAtB,EAA8B,CAA9B;AACD;AACF;;AAtD4B","sourcesContent":["import { Audioset } from \"../audioset\";\n\nexport interface Control {\n  startClip(clipId: string, time: number): void;\n  stopClip(clipId: string, time: number): void;\n}\n\nexport class KeyboardControler {\n  public active: boolean = false;\n  public pressed: Record<string, boolean> = {};\n  public clipIdToKey: Record<string, string> = {};\n  public keyToClipId: Record<string, string | undefined> = {};\n\n  constructor(audioset: Audioset, private control: Control) {\n    audioset.clips.forEach(clip => {\n      const key = clip.keyMap.toUpperCase();\n      this.clipIdToKey[clip.id] = key;\n      this.keyToClipId[key] = clip.id;\n    });\n  }\n\n  public setMapMode(clip, callback: (newKey: string) => void) {}\n\n  public setKey(clipId: string, key: string) {\n    const oldKey = this.clipIdToKey[clipId];\n    if (oldKey) {\n      this.keyToClipId[oldKey] = undefined;\n    }\n    key = key.toUpperCase();\n    this.keyToClipId[key] = clipId;\n    this.clipIdToKey[clipId] = key;\n  }\n\n  public keyDown(key: string) {\n    if (!this.active) {\n      return;\n    }\n\n    key = key.toUpperCase();\n    if (this.pressed[key]) {\n      return;\n    }\n    this.pressed[key] = true;\n\n    const clipId = this.keyToClipId[key];\n    if (clipId) {\n      this.control.startClip(clipId, 0);\n    }\n  }\n  public keyUp(key: string) {\n    if (!this.active) {\n      return;\n    }\n\n    key = key.toUpperCase();\n    this.pressed[key] = false;\n\n    const clipId = this.keyToClipId[key];\n    if (clipId) {\n      this.control.stopClip(clipId, 0);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}