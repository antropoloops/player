{"ast":null,"code":"var _jsxFileName = \"/Users/dani/Antropoloops/atpls-player/src/ui/Player/Player.tsx\";\nimport React, { useEffect } from \"react\";\nimport Collapse from \"react-css-collapse\";\nimport { autoUnlockAudio } from \"../../active-audio-context\";\nimport { Spinner } from \"../shared/Spinner\";\nimport { useDeviceType } from \"../useDeviceType\";\nimport { Controller } from \"./Controller\";\nimport { Session } from \"./Session\";\nimport { SessionHeader } from \"./SessionHeader\";\nimport { Sidebar } from \"./Sidebar\";\nimport { useFullscreen } from \"./useFullscreen\";\nimport { useKeyboardListener } from \"./useKeyboardListener\";\nimport { usePlayer } from \"./usePlayer\";\nimport { useSession } from \"./useSession\";\nexport const Player = ({\n  audioset\n}) => {\n  var _player$control;\n\n  const session = useSession(audioset);\n  const player = usePlayer(audioset, session.loader);\n\n  const _useFullscreen = useFullscreen(),\n        isFullscreen = _useFullscreen.isFullscreen,\n        toggleFullscreen = _useFullscreen.toggleFullscreen;\n\n  const _useDeviceType = useDeviceType(),\n        isMobile = _useDeviceType.isMobile;\n\n  useKeyboardListener((_player$control = player.control) === null || _player$control === void 0 ? void 0 : _player$control.keyboard);\n  useEffect(() => {\n    autoUnlockAudio();\n  }, []);\n  const isSidebarVisible = !isFullscreen;\n  const areVisualsHidden = isMobile && session.visible;\n  const showControl = true;\n  const showSession = session.started && !session.visible;\n\n  const Header = () => React.createElement(SessionHeader, {\n    meta: audioset.meta,\n    session: session,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }); // const Header = () =>\n  //   session.started && !session.visible ? (\n  //     <SessionHeader meta={audioset.meta} session={session} />\n  //   ) : (\n  //     <BundleHeader meta={audioset.meta} />\n  //   );\n\n\n  return React.createElement(\"div\", {\n    className: \"App Player\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, isSidebarVisible && React.createElement(Sidebar, {\n    header: Header,\n    audioset: audioset,\n    onFullscreen: toggleFullscreen,\n    onStopAll: () => {\n      var _player$control2;\n\n      return player === null || player === void 0 ? void 0 : (_player$control2 = player.control) === null || _player$control2 === void 0 ? void 0 : _player$control2.stopAll(0);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(Collapse, {\n    isOpen: session.loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Spinner, {\n    center: \"horizontal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  })), React.createElement(Collapse, {\n    isOpen: session.visible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(Session, {\n    audioset: audioset,\n    isStarted: session.started,\n    onStart: () => session.start(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  })), React.createElement(Collapse, {\n    isOpen: showControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(Controller, {\n    audioset: audioset,\n    state: player.state,\n    control: !session.visible ? player.control : undefined,\n    onResume: session.start,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"visuals\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: areVisualsHidden ? \"\" : \"visuals-display\",\n    ref: player.visualsRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  })));\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/Player.tsx"],"names":["React","useEffect","Collapse","autoUnlockAudio","Spinner","useDeviceType","Controller","Session","SessionHeader","Sidebar","useFullscreen","useKeyboardListener","usePlayer","useSession","Player","audioset","session","player","loader","isFullscreen","toggleFullscreen","isMobile","control","keyboard","isSidebarVisible","areVisualsHidden","visible","showControl","showSession","started","Header","meta","stopAll","loading","start","state","undefined","visualsRef"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport Collapse from \"react-css-collapse\";\nimport { autoUnlockAudio } from \"../../active-audio-context\";\nimport { Audioset } from \"../../audioset\";\nimport { BundleHeader } from \"../shared/Header\";\nimport { Spinner } from \"../shared/Spinner\";\nimport { useDeviceType } from \"../useDeviceType\";\nimport { Controller } from \"./Controller\";\nimport { Session } from \"./Session\";\nimport { SessionHeader } from \"./SessionHeader\";\nimport { Sidebar } from \"./Sidebar\";\nimport { useFullscreen } from \"./useFullscreen\";\nimport { useKeyboardListener } from \"./useKeyboardListener\";\nimport { usePlayer } from \"./usePlayer\";\nimport { useSession } from \"./useSession\";\n\nexport interface PlayerProps {\n  audioset: Audioset;\n}\n\nexport const Player = ({ audioset }: PlayerProps) => {\n  const session = useSession(audioset);\n  const player = usePlayer(audioset, session.loader);\n  const { isFullscreen, toggleFullscreen } = useFullscreen();\n  const { isMobile } = useDeviceType();\n  useKeyboardListener(player.control?.keyboard);\n\n  useEffect(() => {\n    autoUnlockAudio();\n  }, []);\n\n  const isSidebarVisible = !isFullscreen;\n  const areVisualsHidden = isMobile && session.visible;\n  const showControl = true;\n  const showSession = session.started && !session.visible;\n\n  const Header = () => <SessionHeader meta={audioset.meta} session={session} />;\n  // const Header = () =>\n  //   session.started && !session.visible ? (\n  //     <SessionHeader meta={audioset.meta} session={session} />\n  //   ) : (\n  //     <BundleHeader meta={audioset.meta} />\n  //   );\n\n  return (\n    <div className=\"App Player\">\n      {isSidebarVisible && (\n        <Sidebar\n          header={Header}\n          audioset={audioset}\n          onFullscreen={toggleFullscreen}\n          onStopAll={() => player?.control?.stopAll(0)}\n        >\n          <Collapse isOpen={session.loading}>\n            <Spinner center=\"horizontal\" />\n          </Collapse>\n          <Collapse isOpen={session.visible}>\n            <Session\n              audioset={audioset}\n              isStarted={session.started}\n              onStart={() => session.start()}\n            />\n          </Collapse>\n          <Collapse isOpen={showControl}>\n            <Controller\n              audioset={audioset}\n              state={player.state}\n              control={!session.visible ? player.control : undefined}\n              onResume={session.start}\n            />\n          </Collapse>\n        </Sidebar>\n      )}\n      <div className=\"visuals\">\n        <div\n          className={areVisualsHidden ? \"\" : \"visuals-display\"}\n          ref={player.visualsRef}\n        />\n      </div>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}