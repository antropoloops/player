{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { abs, cos, epsilon, tan } from \"./math.js\";\nexport function nellHammerRaw(lambda, phi) {\n  return [lambda * (1 + cos(phi)) / 2, 2 * (phi - tan(phi / 2))];\n}\n\nnellHammerRaw.invert = function (x, y) {\n  var p = y / 2;\n\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; ++i) {\n    var c = cos(y / 2);\n    y -= delta = (y - tan(y / 2) - p) / (1 - 0.5 / (c * c));\n  }\n\n  return [2 * x / (1 + cos(y)), y];\n};\n\nexport default function () {\n  return projection(nellHammerRaw).scale(152.63);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/nellHammer.js"],"names":["geoProjection","projection","abs","cos","epsilon","tan","nellHammerRaw","lambda","phi","invert","x","y","p","i","delta","Infinity","c","scale"],"mappings":"AAAA,SAAQA,aAAa,IAAIC,UAAzB,QAA0C,QAA1C;AACA,SAAQC,GAAR,EAAaC,GAAb,EAAkBC,OAAlB,EAA2BC,GAA3B,QAAqC,WAArC;AAEA,OAAO,SAASC,aAAT,CAAuBC,MAAvB,EAA+BC,GAA/B,EAAoC;AACzC,SAAO,CACLD,MAAM,IAAI,IAAIJ,GAAG,CAACK,GAAD,CAAX,CAAN,GAA0B,CADrB,EAEL,KAAKA,GAAG,GAAGH,GAAG,CAACG,GAAG,GAAG,CAAP,CAAd,CAFK,CAAP;AAID;;AAEDF,aAAa,CAACG,MAAd,GAAuB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACpC,MAAIC,CAAC,GAAGD,CAAC,GAAG,CAAZ;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,KAAK,GAAGC,QAAxB,EAAkCF,CAAC,GAAG,EAAJ,IAAUX,GAAG,CAACY,KAAD,CAAH,GAAaV,OAAzD,EAAkE,EAAES,CAApE,EAAuE;AACrE,QAAIG,CAAC,GAAGb,GAAG,CAACQ,CAAC,GAAG,CAAL,CAAX;AACAA,IAAAA,CAAC,IAAIG,KAAK,GAAG,CAACH,CAAC,GAAGN,GAAG,CAACM,CAAC,GAAG,CAAL,CAAP,GAAiBC,CAAlB,KAAwB,IAAI,OAAOI,CAAC,GAAGA,CAAX,CAA5B,CAAb;AACD;;AACD,SAAO,CACL,IAAIN,CAAJ,IAAS,IAAIP,GAAG,CAACQ,CAAD,CAAhB,CADK,EAELA,CAFK,CAAP;AAID,CAVD;;AAYA,eAAe,YAAW;AACxB,SAAOV,UAAU,CAACK,aAAD,CAAV,CACFW,KADE,CACI,MADJ,CAAP;AAED","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, cos, epsilon, tan} from \"./math.js\";\n\nexport function nellHammerRaw(lambda, phi) {\n  return [\n    lambda * (1 + cos(phi)) / 2,\n    2 * (phi - tan(phi / 2))\n  ];\n}\n\nnellHammerRaw.invert = function(x, y) {\n  var p = y / 2;\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; ++i) {\n    var c = cos(y / 2);\n    y -= delta = (y - tan(y / 2) - p) / (1 - 0.5 / (c * c));\n  }\n  return [\n    2 * x / (1 + cos(y)),\n    y\n  ];\n};\n\nexport default function() {\n  return projection(nellHammerRaw)\n      .scale(152.63);\n}\n"]},"metadata":{},"sourceType":"module"}