{"ast":null,"code":"export const createRenderInputsOfAudioParam = (getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle) => {\n  return async (audioParam, nativeOfflineAudioContext, nativeAudioParam, trace) => {\n    const audioParamConnections = getAudioParamConnections(audioParam);\n    await Promise.all(Array.from(audioParamConnections.activeInputs).map(async ([source, output]) => {\n      const audioNodeRenderer = getAudioNodeRenderer(source);\n      const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext, trace);\n\n      if (!isPartOfACycle(source)) {\n        renderedNativeAudioNode.connect(nativeAudioParam, output);\n      }\n    }));\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/render-inputs-of-audio-param.js"],"names":["createRenderInputsOfAudioParam","getAudioNodeRenderer","getAudioParamConnections","isPartOfACycle","audioParam","nativeOfflineAudioContext","nativeAudioParam","trace","audioParamConnections","Promise","all","Array","from","activeInputs","map","source","output","audioNodeRenderer","renderedNativeAudioNode","render","connect"],"mappings":"AAAA,OAAO,MAAMA,8BAA8B,GAAG,CAACC,oBAAD,EAAuBC,wBAAvB,EAAiDC,cAAjD,KAAoE;AAC9G,SAAO,OAAOC,UAAP,EAAmBC,yBAAnB,EAA8CC,gBAA9C,EAAgEC,KAAhE,KAA0E;AAC7E,UAAMC,qBAAqB,GAAGN,wBAAwB,CAACE,UAAD,CAAtD;AACA,UAAMK,OAAO,CACRC,GADC,CACGC,KAAK,CACTC,IADI,CACCJ,qBAAqB,CAACK,YADvB,EAEJC,GAFI,CAEA,OAAO,CAACC,MAAD,EAASC,MAAT,CAAP,KAA4B;AACjC,YAAMC,iBAAiB,GAAGhB,oBAAoB,CAACc,MAAD,CAA9C;AACA,YAAMG,uBAAuB,GAAG,MAAMD,iBAAiB,CAACE,MAAlB,CAAyBJ,MAAzB,EAAiCV,yBAAjC,EAA4DE,KAA5D,CAAtC;;AACA,UAAI,CAACJ,cAAc,CAACY,MAAD,CAAnB,EAA6B;AACzBG,QAAAA,uBAAuB,CAACE,OAAxB,CAAgCd,gBAAhC,EAAkDU,MAAlD;AACH;AACJ,KARQ,CADH,CAAN;AAUH,GAZD;AAaH,CAdM","sourcesContent":["export const createRenderInputsOfAudioParam = (getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle) => {\n    return async (audioParam, nativeOfflineAudioContext, nativeAudioParam, trace) => {\n        const audioParamConnections = getAudioParamConnections(audioParam);\n        await Promise\n            .all(Array\n            .from(audioParamConnections.activeInputs)\n            .map(async ([source, output]) => {\n            const audioNodeRenderer = getAudioNodeRenderer(source);\n            const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext, trace);\n            if (!isPartOfACycle(source)) {\n                renderedNativeAudioNode.connect(nativeAudioParam, output);\n            }\n        }));\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/render-inputs-of-audio-param.js.map"]},"metadata":{},"sourceType":"module"}