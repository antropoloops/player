{"ast":null,"code":"var _jsxFileName = \"/Users/dani/Antropoloops/atpls-player/src/ui/Player/Player.tsx\";\nimport React from \"react\";\nimport { getActiveAudioContext, player } from \"../../player\";\nimport { useDeviceType } from \"../useDeviceType\";\nimport { useFullscreen } from \"./useFullscreen\";\nimport { useKeyboardListener } from \"./useKeyboardListener\";\nimport { useResourceLoader } from \"./useResourceLoader\";\nimport { Visuals } from \"./Visuals\";\n\nconst startPlayer = () => getActiveAudioContext().then(() => {\n  player.resources.load();\n  player.control.keyboard.setActive(true);\n});\n\nexport const Player = ({\n  audioset\n}) => {\n  const _useResourceLoader = useResourceLoader(),\n        status = _useResourceLoader.status;\n\n  const fullscreen = useFullscreen();\n  const isReady = status.stage !== \"pending\" && status.stage !== \"error\";\n\n  const _useDeviceType = useDeviceType(),\n        isDesktop = _useDeviceType.isDesktop;\n\n  useKeyboardListener();\n  const isVisual = isDesktop || isReady;\n  const isSidebarVisible = !fullscreen.isFull; // useAutoStartAudio(isReady, audioset, handleStart);\n\n  return React.createElement(\"div\", {\n    className: \"App Player\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, isSidebarVisible && React.createElement(Sidebar, {\n    onFullscreen: () => fullscreen.toggle(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), isVisual && React.createElement(\"div\", {\n    className: \"visuals\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(Visuals, {\n    audioset: audioset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  })));\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/Player.tsx"],"names":["React","getActiveAudioContext","player","useDeviceType","useFullscreen","useKeyboardListener","useResourceLoader","Visuals","startPlayer","then","resources","load","control","keyboard","setActive","Player","audioset","status","fullscreen","isReady","stage","isDesktop","isVisual","isSidebarVisible","isFull","toggle"],"mappings":";AAAA,OAAOA,KAAP,MAAiC,OAAjC;AAEA,SAASC,qBAAT,EAAgCC,MAAhC,QAA8C,cAA9C;AAGA,SAASC,aAAT,QAA8B,kBAA9B;AAIA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,OAAT,QAAwB,WAAxB;;AAMA,MAAMC,WAAW,GAAG,MAClBP,qBAAqB,GAAGQ,IAAxB,CAA6B,MAAM;AACjCP,EAAAA,MAAM,CAACQ,SAAP,CAAiBC,IAAjB;AACAT,EAAAA,MAAM,CAACU,OAAP,CAAeC,QAAf,CAAwBC,SAAxB,CAAkC,IAAlC;AACD,CAHD,CADF;;AAMA,OAAO,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA+B;AAAA,6BAChCV,iBAAiB,EADe;AAAA,QAC3CW,MAD2C,sBAC3CA,MAD2C;;AAEnD,QAAMC,UAAU,GAAGd,aAAa,EAAhC;AACA,QAAMe,OAAO,GAAGF,MAAM,CAACG,KAAP,KAAiB,SAAjB,IAA8BH,MAAM,CAACG,KAAP,KAAiB,OAA/D;;AAHmD,yBAI7BjB,aAAa,EAJgB;AAAA,QAI3CkB,SAJ2C,kBAI3CA,SAJ2C;;AAKnDhB,EAAAA,mBAAmB;AAEnB,QAAMiB,QAAQ,GAAGD,SAAS,IAAIF,OAA9B;AAEA,QAAMI,gBAAgB,GAAG,CAACL,UAAU,CAACM,MAArC,CATmD,CAUnD;;AAEA,SACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,gBAAgB,IAAI,oBAAC,OAAD;AAAS,IAAA,YAAY,EAAE,MAAML,UAAU,CAACO,MAAX,EAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADvB,EAEGH,QAAQ,IACP;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0B,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAEN,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA1B,CAHJ,CADF;AAQD,CApBM","sourcesContent":["import React, { useEffect } from \"react\";\nimport { Audioset } from \"../../audioset\";\nimport { getActiveAudioContext, player } from \"../../player\";\nimport { Header } from \"../shared/Header\";\nimport { Scroll } from \"../shared/Scroll\";\nimport { useDeviceType } from \"../useDeviceType\";\nimport { Controller } from \"./Controller\";\nimport { Footer } from \"./Footer\";\nimport Preview from \"./Preview\";\nimport { useFullscreen } from \"./useFullscreen\";\nimport { useKeyboardListener } from \"./useKeyboardListener\";\nimport { useResourceLoader } from \"./useResourceLoader\";\nimport { Visuals } from \"./Visuals\";\n\nexport interface PlayerProps {\n  audioset: Audioset;\n}\n\nconst startPlayer = () =>\n  getActiveAudioContext().then(() => {\n    player.resources.load();\n    player.control.keyboard.setActive(true);\n  });\n\nexport const Player = ({ audioset }: PlayerProps) => {\n  const { status } = useResourceLoader();\n  const fullscreen = useFullscreen();\n  const isReady = status.stage !== \"pending\" && status.stage !== \"error\";\n  const { isDesktop } = useDeviceType();\n  useKeyboardListener();\n\n  const isVisual = isDesktop || isReady;\n\n  const isSidebarVisible = !fullscreen.isFull;\n  // useAutoStartAudio(isReady, audioset, handleStart);\n\n  return (\n    <div className=\"App Player\">\n      {isSidebarVisible && <Sidebar onFullscreen={() => fullscreen.toggle()} />}\n      {isVisual && (\n        <div className=\"visuals\">{<Visuals audioset={audioset} />}</div>\n      )}\n    </div>\n  );\n};\n\n"]},"metadata":{},"sourceType":"module"}