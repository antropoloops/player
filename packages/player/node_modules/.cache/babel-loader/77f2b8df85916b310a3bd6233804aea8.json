{"ast":null,"code":"import _regeneratorRuntime from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import debug from\"debug\";import{AudioContext}from\"standardized-audio-context\";var context;var log=debug(\"atpls:context\");/**\n * @see https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio\n */export function getAudioContext(){return _regeneratorRuntime.async(function getAudioContext$(_context){while(1){switch(_context.prev=_context.next){case 0:context=context||new AudioContext();if(!(context.state!==\"running\"&&context.resume)){_context.next=6;break;}log(\"waiting for context...\");return _context.abrupt(\"return\",context.resume().then(function(){return startAudioContext(context);}));case 6:return _context.abrupt(\"return\",context);case 7:case\"end\":return _context.stop();}}});}function startAudioContext(ctx){log(\"start context\");// iOS hack. See https://github.com/tambien/StartAudioContext/blob/master/StartAudioContext.js\nvar buffer=ctx.createBuffer(1,1,ctx.sampleRate);var source=ctx.createBufferSource();source.buffer=buffer;source.connect(ctx.destination);source.start(0);return ctx;}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/AudioContext.ts"],"names":["debug","AudioContext","context","log","getAudioContext","state","resume","then","startAudioContext","ctx","buffer","createBuffer","sampleRate","source","createBufferSource","connect","destination","start"],"mappings":"mJAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,YAAT,KAA6B,4BAA7B,CAEA,GAAIC,CAAAA,OAAJ,CAEA,GAAMC,CAAAA,GAAG,CAAGH,KAAK,CAAC,eAAD,CAAjB,CAEA;;GAGA,MAAO,SAAeI,CAAAA,eAAf,4HACLF,OAAO,CAAGA,OAAO,EAAI,GAAID,CAAAA,YAAJ,EAArB,CADK,KAGDC,OAAO,CAACG,KAAR,GAAkB,SAAlB,EAA+BH,OAAO,CAACI,MAHtC,0BAIHH,GAAG,CAAC,wBAAD,CAAH,CAJG,gCAKID,OAAO,CACXI,MADI,GAEJC,IAFI,CAEC,iBAAMC,CAAAA,iBAAiB,CAACN,OAAD,CAAvB,EAFD,CALJ,yCASIA,OATJ,gDAaP,QAASM,CAAAA,iBAAT,CAA2BC,GAA3B,CAA4D,CAC1DN,GAAG,CAAC,eAAD,CAAH,CACA;AACA,GAAMO,CAAAA,MAAM,CAAGD,GAAG,CAACE,YAAJ,CAAiB,CAAjB,CAAoB,CAApB,CAAuBF,GAAG,CAACG,UAA3B,CAAf,CACA,GAAMC,CAAAA,MAAM,CAAGJ,GAAG,CAACK,kBAAJ,EAAf,CACAD,MAAM,CAACH,MAAP,CAAgBA,MAAhB,CACAG,MAAM,CAACE,OAAP,CAAeN,GAAG,CAACO,WAAnB,EACAH,MAAM,CAACI,KAAP,CAAa,CAAb,EACA,MAAOR,CAAAA,GAAP,CACD","sourcesContent":["import debug from \"debug\";\nimport { AudioContext } from \"standardized-audio-context\";\n\nlet context: AudioContext | undefined;\n\nconst log = debug(\"atpls:context\");\n\n/**\n * @see https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio\n */\nexport async function getAudioContext(): Promise<AudioContext> {\n  context = context || new AudioContext();\n\n  if (context.state !== \"running\" && context.resume) {\n    log(\"waiting for context...\");\n    return context\n      .resume()\n      .then(() => startAudioContext(context as AudioContext));\n  } else {\n    return context;\n  }\n}\n\nfunction startAudioContext(ctx: AudioContext): AudioContext {\n  log(\"start context\");\n  // iOS hack. See https://github.com/tambien/StartAudioContext/blob/master/StartAudioContext.js\n  const buffer = ctx.createBuffer(1, 1, ctx.sampleRate);\n  const source = ctx.createBufferSource();\n  source.buffer = buffer;\n  source.connect(ctx.destination);\n  source.start(0);\n  return ctx;\n}\n"]},"metadata":{},"sourceType":"module"}