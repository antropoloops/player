{"ast":null,"code":"var _jsxFileName = \"/Users/dani/Antropoloops/atpls-player/src/ui/Player/Controller/Track.tsx\";\nimport React from \"react\";\nimport { Clip } from \"./Clip\";\nimport \"./Track.css\";\nexport function Track({\n  audioset,\n  track,\n  state\n}) {\n  return React.createElement(\"div\", {\n    key: track.id,\n    className: \"Track\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"background\",\n    style: {\n      backgroundColor: track.color\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }), React.createElement(TrackHeader, {\n    track: track,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"clips\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, track.clipIds.map((clipId, index) => React.createElement(Clip, {\n    key: clipId,\n    clip: audioset.index.clipById[clipId],\n    isActive: state.clips[clipId].status === \"playing\",\n    onClick: () => control.toggleClip(clipId, 0),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }))));\n}\n\nconst TrackHeader = ({\n  track\n}) => React.createElement(\"div\", {\n  className: \"TrackHeader\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38\n  },\n  __self: this\n}, React.createElement(\"span\", {\n  className: \"title\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 39\n  },\n  __self: this\n}, track.name));","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/Controller/Track.tsx"],"names":["React","Clip","Track","audioset","track","state","id","backgroundColor","color","clipIds","map","clipId","index","clipById","clips","status","control","toggleClip","TrackHeader","name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAASC,IAAT,QAAqB,QAArB;AACA,OAAO,aAAP;AASA,OAAO,SAASC,KAAT,CAAe;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,KAAZ;AAAmBC,EAAAA;AAAnB,CAAf,EAAoE;AACzE,SACE;AAAK,IAAA,GAAG,EAAED,KAAK,CAACE,EAAhB;AAAoB,IAAA,SAAS,EAAC,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAA4B,IAAA,KAAK,EAAE;AAAEC,MAAAA,eAAe,EAAEH,KAAK,CAACI;AAAzB,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAEJ,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,KAAK,CAACK,OAAN,CAAcC,GAAd,CAAkB,CAACC,MAAD,EAASC,KAAT,KACjB,oBAAC,IAAD;AACE,IAAA,GAAG,EAAED,MADP;AAEE,IAAA,IAAI,EAAER,QAAQ,CAACS,KAAT,CAAeC,QAAf,CAAwBF,MAAxB,CAFR;AAGE,IAAA,QAAQ,EAAEN,KAAK,CAACS,KAAN,CAAYH,MAAZ,EAAoBI,MAApB,KAA+B,SAH3C;AAIE,IAAA,OAAO,EAAE,MAAMC,OAAO,CAACC,UAAR,CAAmBN,MAAnB,EAA2B,CAA3B,CAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CAHF,CADF;AAgBD;;AAMD,MAAMO,WAAW,GAAG,CAAC;AAAEd,EAAAA;AAAF,CAAD,KAClB;AAAK,EAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAM,EAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAyBA,KAAK,CAACe,IAA/B,CADF,CADF","sourcesContent":["import React from \"react\";\nimport { Audioset, Track as TrackModel } from \"../../../audioset\";\nimport { ControlState } from \"../../../player/Control\";\nimport { Clip } from \"./Clip\";\nimport \"./Track.css\";\n\ninterface TrackProps {\n  audioset: Audioset;\n  track: TrackModel;\n  state: ControlState;\n  control: PlayerControl;\n}\n\nexport function Track({ audioset, track, state }: TrackProps): JSX.Element {\n  return (\n    <div key={track.id} className=\"Track\">\n      <div className=\"background\" style={{ backgroundColor: track.color }} />\n      <TrackHeader track={track} />\n      <div className=\"clips\">\n        {track.clipIds.map((clipId, index) => (\n          <Clip\n            key={clipId}\n            clip={audioset.index.clipById[clipId]}\n            isActive={state.clips[clipId].status === \"playing\"}\n            onClick={() => control.toggleClip(clipId, 0)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\ninterface TrackHeaderProps {\n  track: TrackModel;\n}\n\nconst TrackHeader = ({ track }: TrackHeaderProps) => (\n  <div className=\"TrackHeader\">\n    <span className=\"title\">{track.name}</span>\n  </div>\n);\n"]},"metadata":{},"sourceType":"module"}