{"ast":null,"code":"import _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/dani/Antropoloops/atpls-player/src/ui/Player/Player.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { getActiveAudioContext } from \"../../player\";\nimport { AudiosetControl, EmptyControlState } from \"../../player/Control\";\nimport { useDeviceType } from \"../useDeviceType\";\nimport { Controller } from \"./Controller\";\nimport { Preview } from \"./Preview\";\nimport { Sidebar } from \"./Sidebar\";\nimport { useFullscreen } from \"./useFullscreen\";\nimport { useKeyboardListener } from \"./useKeyboardListener\";\nimport { Visuals } from \"./Visuals\";\nexport const Player = ({\n  audioset\n}) => {\n  const player = usePlayer(audioset);\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isReady = _useState2[0],\n        setReady = _useState2[1];\n\n  const _useFullscreen = useFullscreen(),\n        isFullscreen = _useFullscreen.isFullscreen,\n        toggleFullscreen = _useFullscreen.toggleFullscreen;\n\n  const _useDeviceType = useDeviceType(),\n        isDesktop = _useDeviceType.isDesktop;\n\n  useKeyboardListener();\n  const isVisual = isDesktop || isReady;\n  const isSidebarVisible = !isFullscreen; // useAutoStartAudio(isReady, audioset, handleStart);\n\n  return React.createElement(\"div\", {\n    className: \"App Player\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, isSidebarVisible && React.createElement(Sidebar, {\n    audioset: audioset,\n    onFullscreen: toggleFullscreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, isReady && player.control ? React.createElement(Controller, {\n    audioset: audioset,\n    state: player.state,\n    control: player.control,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }) : React.createElement(Preview, {\n    audioset: audioset,\n    isReady: isReady,\n    onStart: () => setReady(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  })), isVisual && React.createElement(\"div\", {\n    className: \"visuals\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(Visuals, {\n    audioset: audioset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  })));\n};\n\nfunction usePlayer(audioset) {\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        control = _useState4[0],\n        setControl = _useState4[1];\n\n  const _useState5 = useState(EmptyControlState),\n        _useState6 = _slicedToArray(_useState5, 2),\n        state = _useState6[0],\n        setState = _useState6[1];\n\n  useEffect(() => {\n    getActiveAudioContext().then(ctx => {\n      const ctl = new AudiosetControl(audioset, {\n        onControlStateChanged: newState => {\n          setState(newState);\n        },\n        onControlCommand: command => {// console.log(\"command!\", command);\n        }\n      });\n      setControl(ctl);\n      setState(ctl.getState());\n    });\n  }, [audioset]);\n  return {\n    control,\n    state\n  };\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/Player.tsx"],"names":["React","useEffect","useState","getActiveAudioContext","AudiosetControl","EmptyControlState","useDeviceType","Controller","Preview","Sidebar","useFullscreen","useKeyboardListener","Visuals","Player","audioset","player","usePlayer","isReady","setReady","isFullscreen","toggleFullscreen","isDesktop","isVisual","isSidebarVisible","control","state","setControl","setState","then","ctx","ctl","onControlStateChanged","newState","onControlCommand","command","getState"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Audioset } from \"../../audioset\";\nimport { getActiveAudioContext } from \"../../player\";\nimport {\n  AudiosetControl,\n  EmptyControlState,\n  PlayerControl,\n} from \"../../player/Control\";\nimport { useDeviceType } from \"../useDeviceType\";\nimport { Controller } from \"./Controller\";\nimport { Preview } from \"./Preview\";\nimport { Sidebar } from \"./Sidebar\";\nimport { useFullscreen } from \"./useFullscreen\";\nimport { useKeyboardListener } from \"./useKeyboardListener\";\nimport { Visuals } from \"./Visuals\";\n\nexport interface PlayerProps {\n  audioset: Audioset;\n}\n\nexport const Player = ({ audioset }: PlayerProps) => {\n  const player = usePlayer(audioset);\n  const [isReady, setReady] = useState<boolean>(false);\n  const { isFullscreen, toggleFullscreen } = useFullscreen();\n  const { isDesktop } = useDeviceType();\n  useKeyboardListener();\n\n  const isVisual = isDesktop || isReady;\n\n  const isSidebarVisible = !isFullscreen;\n  // useAutoStartAudio(isReady, audioset, handleStart);\n\n  return (\n    <div className=\"App Player\">\n      {isSidebarVisible && (\n        <Sidebar audioset={audioset} onFullscreen={toggleFullscreen}>\n          {isReady && player.control ? (\n            <Controller\n              audioset={audioset}\n              state={player.state}\n              control={player.control}\n            />\n          ) : (\n            <Preview\n              audioset={audioset}\n              isReady={isReady}\n              onStart={() => setReady(true)}\n            />\n          )}\n        </Sidebar>\n      )}\n      {isVisual && (\n        <div className=\"visuals\">{<Visuals audioset={audioset} />}</div>\n      )}\n    </div>\n  );\n};\n\nfunction usePlayer(audioset: Audioset) {\n  const [control, setControl] = useState<PlayerControl | null>(null);\n  const [state, setState] = useState(EmptyControlState);\n\n  useEffect(() => {\n    getActiveAudioContext().then(ctx => {\n      const ctl = new AudiosetControl(audioset, {\n        onControlStateChanged: newState => {\n          setState(newState);\n        },\n        onControlCommand: command => {\n          // console.log(\"command!\", command);\n        },\n      });\n      setControl(ctl);\n      setState(ctl.getState());\n    });\n  }, [audioset]);\n\n  return { control, state };\n}\n"]},"metadata":{},"sourceType":"module"}