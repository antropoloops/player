{"ast":null,"code":"import { getAudioContext } from \"./AudioContext\";\nexport class TimeManager {\n  constructor(bpm) {\n    this.bpm = bpm;\n    this.count = 0;\n    this.startedAt = 0;\n    this.context = void 0;\n    getAudioContext().then(ctx => this.context = ctx);\n  }\n\n  startTime(time) {\n    if (!this.context) {\n      return time;\n    }\n\n    time = time || this.context.currentTime;\n    this.count += 1;\n\n    if (this.count === 1) {\n      this.startedAt = time;\n    }\n\n    return time;\n  }\n\n  stopTime(time) {\n    if (!this.context) {\n      return time;\n    }\n\n    time = time || this.context.currentTime;\n    this.count -= 1;\n\n    if (this.count === 0) {\n      this.startedAt = 0;\n    }\n\n    return time;\n  }\n\n}\nconst BEATS = 1;\n/**\n * Calculate the time remaining until the next beat\n *\n * @param {*} bpm\n * @param {*} now\n * @param {*} startedAt\n * @param {*} beats\n */\n\nexport function quantize(bpm, now, startedAt, beats = BEATS) {\n  if (!startedAt) {\n    return 0;\n  }\n\n  const factor = bpm / (60 * beats);\n  const absolute = now - startedAt;\n\n  if (absolute === 0) {\n    return 0;\n  }\n\n  const inBeats = absolute * factor;\n  const mod = inBeats % 1;\n  const offsetTime = (1 - mod) / factor;\n  return offsetTime;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/TimeManager.ts"],"names":["getAudioContext","TimeManager","constructor","bpm","count","startedAt","context","then","ctx","startTime","time","currentTime","stopTime","BEATS","quantize","now","beats","factor","absolute","inBeats","mod","offsetTime"],"mappings":"AAAA,SAASA,eAAT,QAAgC,gBAAhC;AAEA,OAAO,MAAMC,WAAN,CAAkB;AAKvBC,EAAAA,WAAW,CAASC,GAAT,EAAsB;AAAA,SAAbA,GAAa,GAAbA,GAAa;AAAA,SAJzBC,KAIyB,GAJT,CAIS;AAAA,SAHzBC,SAGyB,GAHL,CAGK;AAAA,SAFzBC,OAEyB;AAC/BN,IAAAA,eAAe,GAAGO,IAAlB,CAAuBC,GAAG,IAAK,KAAKF,OAAL,GAAeE,GAA9C;AACD;;AAEMC,EAAAA,SAAP,CAAiBC,IAAjB,EAA+B;AAC7B,QAAI,CAAC,KAAKJ,OAAV,EAAmB;AACjB,aAAOI,IAAP;AACD;;AAEDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,KAAKJ,OAAL,CAAaK,WAA5B;AACA,SAAKP,KAAL,IAAc,CAAd;;AAEA,QAAI,KAAKA,KAAL,KAAe,CAAnB,EAAsB;AACpB,WAAKC,SAAL,GAAiBK,IAAjB;AACD;;AACD,WAAOA,IAAP;AACD;;AAEME,EAAAA,QAAP,CAAgBF,IAAhB,EAA8B;AAC5B,QAAI,CAAC,KAAKJ,OAAV,EAAmB;AACjB,aAAOI,IAAP;AACD;;AAEDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,KAAKJ,OAAL,CAAaK,WAA5B;AACA,SAAKP,KAAL,IAAc,CAAd;;AAEA,QAAI,KAAKA,KAAL,KAAe,CAAnB,EAAsB;AACpB,WAAKC,SAAL,GAAiB,CAAjB;AACD;;AACD,WAAOK,IAAP;AACD;;AAnCsB;AAqCzB,MAAMG,KAAK,GAAG,CAAd;AAEA;;;;;;;;;AAQA,OAAO,SAASC,QAAT,CACLX,GADK,EAELY,GAFK,EAGLV,SAHK,EAILW,KAAK,GAAGH,KAJH,EAKG;AACR,MAAI,CAACR,SAAL,EAAgB;AACd,WAAO,CAAP;AACD;;AAED,QAAMY,MAAM,GAAGd,GAAG,IAAI,KAAKa,KAAT,CAAlB;AACA,QAAME,QAAQ,GAAGH,GAAG,GAAGV,SAAvB;;AACA,MAAIa,QAAQ,KAAK,CAAjB,EAAoB;AAClB,WAAO,CAAP;AACD;;AACD,QAAMC,OAAO,GAAGD,QAAQ,GAAGD,MAA3B;AACA,QAAMG,GAAG,GAAGD,OAAO,GAAG,CAAtB;AACA,QAAME,UAAU,GAAG,CAAC,IAAID,GAAL,IAAYH,MAA/B;AACA,SAAOI,UAAP;AACD","sourcesContent":["import { getAudioContext } from \"./AudioContext\";\n\nexport class TimeManager {\n  private count: number = 0;\n  private startedAt: number = 0;\n  private context?: AudioContext;\n\n  constructor(private bpm: number) {\n    getAudioContext().then(ctx => (this.context = ctx));\n  }\n\n  public startTime(time: number) {\n    if (!this.context) {\n      return time;\n    }\n\n    time = time || this.context.currentTime;\n    this.count += 1;\n\n    if (this.count === 1) {\n      this.startedAt = time;\n    }\n    return time;\n  }\n\n  public stopTime(time: number) {\n    if (!this.context) {\n      return time;\n    }\n\n    time = time || this.context.currentTime;\n    this.count -= 1;\n\n    if (this.count === 0) {\n      this.startedAt = 0;\n    }\n    return time;\n  }\n}\nconst BEATS = 1;\n\n/**\n * Calculate the time remaining until the next beat\n *\n * @param {*} bpm\n * @param {*} now\n * @param {*} startedAt\n * @param {*} beats\n */\nexport function quantize(\n  bpm: number,\n  now: number,\n  startedAt: number,\n  beats = BEATS,\n): number {\n  if (!startedAt) {\n    return 0;\n  }\n\n  const factor = bpm / (60 * beats);\n  const absolute = now - startedAt;\n  if (absolute === 0) {\n    return 0;\n  }\n  const inBeats = absolute * factor;\n  const mod = inBeats % 1;\n  const offsetTime = (1 - mod) / factor;\n  return offsetTime;\n}\n"]},"metadata":{},"sourceType":"module"}