{"ast":null,"code":"import _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from \"react\";\nimport * as screen from \"screenfull\";\nexport function useFullscreen() {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isFull = _useState2[0],\n        setIsFull = _useState2[1];\n\n  useEffect(() => {\n    const handleChange = x => isFull !== x && setIsFull(x);\n\n    if (screen.isEnabled) {\n      screen.on(\"change\", handleChange);\n    }\n\n    return () => screen.isEnabled && screen.off(\"change\", handleChange);\n  });\n  useEffect(() => {\n    if (screen.isEnabled) {\n      isFull ? screen.request() : screen.exit();\n    }\n  }, [isFull]);\n\n  const toggle = () => setIsFull(!isFull);\n\n  return {\n    isFull,\n    toggle\n  };\n}\nexport function useFullscreenOld(onChange) {\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        fullscreen = _useState4[0],\n        setFullscreen = _useState4[1];\n\n  const open = () => setFullscreen(Date.now());\n\n  if (screen.isEnabled) {\n    screen.on(\"change\", () => onChange(screen.isEnabled));\n  }\n\n  useEffect(() => {\n    if (!screen.isEnabled) {\n      return;\n    }\n\n    if (fullscreen) {\n      screen.request();\n    } else {\n      screen.exit();\n    }\n  }, [fullscreen]);\n  return {\n    open\n  };\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/useFullscreen.ts"],"names":["useEffect","useState","screen","useFullscreen","isFull","setIsFull","handleChange","x","isEnabled","on","off","request","exit","toggle","useFullscreenOld","onChange","fullscreen","setFullscreen","open","Date","now"],"mappings":";AAAA,SAAsBA,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,OAAO,KAAKC,MAAZ,MAAwB,YAAxB;AAOA,OAAO,SAASC,aAAT,GAAqC;AAAA,oBACdF,QAAQ,CAAC,KAAD,CADM;AAAA;AAAA,QACnCG,MADmC;AAAA,QAC3BC,SAD2B;;AAE1CL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,YAAY,GAAGC,CAAC,IAAIH,MAAM,KAAKG,CAAX,IAAgBF,SAAS,CAACE,CAAD,CAAnD;;AACA,QAAIL,MAAM,CAACM,SAAX,EAAsB;AACpBN,MAAAA,MAAM,CAACO,EAAP,CAAU,QAAV,EAAoBH,YAApB;AACD;;AACD,WAAO,MAAMJ,MAAM,CAACM,SAAP,IAAoBN,MAAM,CAACQ,GAAP,CAAW,QAAX,EAAqBJ,YAArB,CAAjC;AACD,GANQ,CAAT;AAOAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIE,MAAM,CAACM,SAAX,EAAsB;AACpBJ,MAAAA,MAAM,GAAGF,MAAM,CAACS,OAAP,EAAH,GAAsBT,MAAM,CAACU,IAAP,EAA5B;AACD;AACF,GAJQ,EAIN,CAACR,MAAD,CAJM,CAAT;;AAKA,QAAMS,MAAM,GAAG,MAAMR,SAAS,CAAC,CAACD,MAAF,CAA9B;;AACA,SAAO;AAAEA,IAAAA,MAAF;AAAUS,IAAAA;AAAV,GAAP;AACD;AAED,OAAO,SAASC,gBAAT,CAA0BC,QAA1B,EAA+D;AAAA,qBAChCd,QAAQ,EADwB;AAAA;AAAA,QAC7De,UAD6D;AAAA,QACjDC,aADiD;;AAEpE,QAAMC,IAAI,GAAG,MAAMD,aAAa,CAACE,IAAI,CAACC,GAAL,EAAD,CAAhC;;AAEA,MAAIlB,MAAM,CAACM,SAAX,EAAsB;AACpBN,IAAAA,MAAM,CAACO,EAAP,CAAU,QAAV,EAAoB,MAAMM,QAAQ,CAACb,MAAM,CAACM,SAAR,CAAlC;AACD;;AAEDR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACE,MAAM,CAACM,SAAZ,EAAuB;AACrB;AACD;;AACD,QAAIQ,UAAJ,EAAgB;AACdd,MAAAA,MAAM,CAACS,OAAP;AACD,KAFD,MAEO;AACLT,MAAAA,MAAM,CAACU,IAAP;AACD;AACF,GATQ,EASN,CAACI,UAAD,CATM,CAAT;AAWA,SAAO;AAAEE,IAAAA;AAAF,GAAP;AACD","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport * as screen from \"screenfull\";\n\nexport interface Fullscreen {\n  isFull: boolean;\n  toggle: () => void;\n}\n\nexport function useFullscreen(): Fullscreen {\n  const [isFull, setIsFull] = useState(false);\n  useEffect(() => {\n    const handleChange = x => isFull !== x && setIsFull(x);\n    if (screen.isEnabled) {\n      screen.on(\"change\", handleChange);\n    }\n    return () => screen.isEnabled && screen.off(\"change\", handleChange);\n  });\n  useEffect(() => {\n    if (screen.isEnabled) {\n      isFull ? screen.request() : screen.exit();\n    }\n  }, [isFull]);\n  const toggle = () => setIsFull(!isFull);\n  return { isFull, toggle };\n}\n\nexport function useFullscreenOld(onChange: (isFull: boolean) => void) {\n  const [fullscreen, setFullscreen] = useState();\n  const open = () => setFullscreen(Date.now());\n\n  if (screen.isEnabled) {\n    screen.on(\"change\", () => onChange(screen.isEnabled));\n  }\n\n  useEffect(() => {\n    if (!screen.isEnabled) {\n      return;\n    }\n    if (fullscreen) {\n      screen.request();\n    } else {\n      screen.exit();\n    }\n  }, [fullscreen]);\n\n  return { open };\n}\n"]},"metadata":{},"sourceType":"module"}