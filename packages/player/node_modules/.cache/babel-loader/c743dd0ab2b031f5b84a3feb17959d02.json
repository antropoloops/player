{"ast":null,"code":"import debounce from \"lodash.debounce\";\nimport ResizeObserver from \"resize-observer-polyfill\";\nimport Display from \"./display\";\nimport Visuals from \"./visuals\";\n\nfunction addResizeObserver(element, callback) {\n  const resizeObserver = new ResizeObserver(entries => {\n    if (!Array.isArray(entries)) {\n      return;\n    } // Since we only observe the one element, we don't need to loop over the array\n\n\n    if (!entries.length) {\n      return;\n    }\n\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    callback(width, height);\n  });\n  resizeObserver.observe(element);\n  return resizeObserver;\n}\n\nexport class VisualControl {\n  constructor(audioset, el) {\n    this.el = el;\n    this.display = void 0;\n    this.visuals = void 0;\n    this.handleResize = void 0;\n    this.resizeObserver = void 0;\n    this.display = new Display(el);\n    this.visuals = new Visuals(audioset, this.display);\n    setupVisuals(audioset, this.visuals);\n    this.resizeObserver = addResizeObserver(el, debounce((width, height) => {\n      console.log(\"resize!\", width, height); // this.visuals.resizeSvg();\n    }));\n  }\n\n  startClip(clipId) {\n    this.visuals.show(clipId);\n  }\n\n  stopClip(clipId) {\n    this.visuals.hide(clipId);\n  }\n\n  detach() {\n    this.resizeObserver.unobserve(this.display.el);\n  }\n\n}\n\nfunction setupVisuals(audioset, visuals) {\n  if (audioset.visuals.mode === \"map\") {\n    fetch(audioset.visuals.geomap.url).then(response => response.json()).then(data => visuals.setGeodata(data));\n  } else {\n    visuals.setup();\n  }\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/visuals/index.ts"],"names":["debounce","ResizeObserver","Display","Visuals","addResizeObserver","element","callback","resizeObserver","entries","Array","isArray","length","entry","width","contentRect","height","observe","VisualControl","constructor","audioset","el","display","visuals","handleResize","setupVisuals","console","log","startClip","clipId","show","stopClip","hide","detach","unobserve","mode","fetch","geomap","url","then","response","json","data","setGeodata","setup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,iBAArB;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AAEA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAIA,SAASC,iBAAT,CACEC,OADF,EAEEC,QAFF,EAGkB;AAChB,QAAMC,cAAc,GAAG,IAAIN,cAAJ,CAAmBO,OAAO,IAAI;AACnD,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,OAAd,CAAL,EAA6B;AAC3B;AACD,KAHkD,CAKnD;;;AACA,QAAI,CAACA,OAAO,CAACG,MAAb,EAAqB;AACnB;AACD;;AAED,UAAMC,KAAK,GAAGJ,OAAO,CAAC,CAAD,CAArB;AAEA,UAAMK,KAAK,GAAGD,KAAK,CAACE,WAAN,CAAkBD,KAAhC;AACA,UAAME,MAAM,GAAGH,KAAK,CAACE,WAAN,CAAkBC,MAAjC;AACAT,IAAAA,QAAQ,CAACO,KAAD,EAAQE,MAAR,CAAR;AACD,GAfsB,CAAvB;AAiBAR,EAAAA,cAAc,CAACS,OAAf,CAAuBX,OAAvB;AACA,SAAOE,cAAP;AACD;;AAED,OAAO,MAAMU,aAAN,CAAoB;AAMzBC,EAAAA,WAAW,CAACC,QAAD,EAA6BC,EAA7B,EAAsC;AAAA,SAATA,EAAS,GAATA,EAAS;AAAA,SALzCC,OAKyC;AAAA,SAJzCC,OAIyC;AAAA,SAHzCC,YAGyC;AAAA,SAFzChB,cAEyC;AAC/C,SAAKc,OAAL,GAAe,IAAInB,OAAJ,CAAYkB,EAAZ,CAAf;AACA,SAAKE,OAAL,GAAe,IAAInB,OAAJ,CAAYgB,QAAZ,EAAsB,KAAKE,OAA3B,CAAf;AACAG,IAAAA,YAAY,CAACL,QAAD,EAAW,KAAKG,OAAhB,CAAZ;AAEA,SAAKf,cAAL,GAAsBH,iBAAiB,CACrCgB,EADqC,EAErCpB,QAAQ,CAAC,CAACa,KAAD,EAAgBE,MAAhB,KAAmC;AAC1CU,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBb,KAAvB,EAA8BE,MAA9B,EAD0C,CAE1C;AACD,KAHO,CAF6B,CAAvC;AAOD;;AAEMY,EAAAA,SAAP,CAAiBC,MAAjB,EAAiC;AAC/B,SAAKN,OAAL,CAAaO,IAAb,CAAkBD,MAAlB;AACD;;AAEME,EAAAA,QAAP,CAAgBF,MAAhB,EAAgC;AAC9B,SAAKN,OAAL,CAAaS,IAAb,CAAkBH,MAAlB;AACD;;AAEMI,EAAAA,MAAP,GAAgB;AACd,SAAKzB,cAAL,CAAoB0B,SAApB,CAA8B,KAAKZ,OAAL,CAAaD,EAA3C;AACD;;AA9BwB;;AAiC3B,SAASI,YAAT,CAAsBL,QAAtB,EAA0CG,OAA1C,EAA4D;AAC1D,MAAIH,QAAQ,CAACG,OAAT,CAAiBY,IAAjB,KAA0B,KAA9B,EAAqC;AACnCC,IAAAA,KAAK,CAAChB,QAAQ,CAACG,OAAT,CAAiBc,MAAjB,CAAwBC,GAAzB,CAAL,CACGC,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQG,IAAI,IAAInB,OAAO,CAACoB,UAAR,CAAmBD,IAAnB,CAFhB;AAGD,GAJD,MAIO;AACLnB,IAAAA,OAAO,CAACqB,KAAR;AACD;AACF","sourcesContent":["import debounce from \"lodash.debounce\";\nimport ResizeObserver from \"resize-observer-polyfill\";\nimport { Audioset } from \"../audioset\";\nimport Display from \"./display\";\nimport Visuals from \"./visuals\";\n\ntype ResizeListener = (width: number, heigth: number) => void;\n\nfunction addResizeObserver(\n  element: any,\n  callback: ResizeListener,\n): ResizeObserver {\n  const resizeObserver = new ResizeObserver(entries => {\n    if (!Array.isArray(entries)) {\n      return;\n    }\n\n    // Since we only observe the one element, we don't need to loop over the array\n    if (!entries.length) {\n      return;\n    }\n\n    const entry = entries[0];\n\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    callback(width, height);\n  });\n\n  resizeObserver.observe(element);\n  return resizeObserver;\n}\n\nexport class VisualControl {\n  private display: Display;\n  private visuals: Visuals;\n  private handleResize: any;\n  private resizeObserver: ResizeObserver;\n\n  constructor(audioset: Audioset, private el: any) {\n    this.display = new Display(el);\n    this.visuals = new Visuals(audioset, this.display);\n    setupVisuals(audioset, this.visuals);\n\n    this.resizeObserver = addResizeObserver(\n      el,\n      debounce((width: number, height: number) => {\n        console.log(\"resize!\", width, height);\n        // this.visuals.resizeSvg();\n      }),\n    );\n  }\n\n  public startClip(clipId: string) {\n    this.visuals.show(clipId);\n  }\n\n  public stopClip(clipId: string) {\n    this.visuals.hide(clipId);\n  }\n\n  public detach() {\n    this.resizeObserver.unobserve(this.display.el);\n  }\n}\n\nfunction setupVisuals(audioset: Audioset, visuals: Visuals) {\n  if (audioset.visuals.mode === \"map\") {\n    fetch(audioset.visuals.geomap.url)\n      .then(response => response.json())\n      .then(data => visuals.setGeodata(data));\n  } else {\n    visuals.setup();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}