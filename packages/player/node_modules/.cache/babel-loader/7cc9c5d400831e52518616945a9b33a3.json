{"ast":null,"code":"import _defineProperty from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var createBaseAudioContextConstructor = function createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, _decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) {\n  return (\n    /*#__PURE__*/\n    function (_minimalBaseAudioCont) {\n      _inherits(BaseAudioContext, _minimalBaseAudioCont);\n\n      function BaseAudioContext(_nativeContext, numberOfChannels) {\n        var _this;\n\n        _classCallCheck(this, BaseAudioContext);\n\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(BaseAudioContext).call(this, _nativeContext, numberOfChannels));\n        _this._nativeContext = _nativeContext;\n        _this._audioWorklet = addAudioWorkletModule === undefined ? undefined : {\n          addModule: function addModule(moduleURL, options) {\n            return addAudioWorkletModule(_assertThisInitialized(_this), moduleURL, options);\n          }\n        };\n        return _this;\n      }\n\n      _createClass(BaseAudioContext, [{\n        key: \"createAnalyser\",\n        value: function createAnalyser() {\n          return new analyserNodeConstructor(this);\n        }\n      }, {\n        key: \"createBiquadFilter\",\n        value: function createBiquadFilter() {\n          return new biquadFilterNodeConstructor(this);\n        }\n      }, {\n        key: \"createBuffer\",\n        value: function createBuffer(numberOfChannels, length, sampleRate) {\n          return new audioBufferConstructor({\n            length: length,\n            numberOfChannels: numberOfChannels,\n            sampleRate: sampleRate\n          });\n        }\n      }, {\n        key: \"createBufferSource\",\n        value: function createBufferSource() {\n          return new audioBufferSourceNodeConstructor(this);\n        }\n      }, {\n        key: \"createChannelMerger\",\n        value: function createChannelMerger() {\n          var numberOfInputs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n          return new channelMergerNodeConstructor(this, {\n            numberOfInputs: numberOfInputs\n          });\n        }\n      }, {\n        key: \"createChannelSplitter\",\n        value: function createChannelSplitter() {\n          var numberOfOutputs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n          return new channelSplitterNodeConstructor(this, {\n            numberOfOutputs: numberOfOutputs\n          });\n        }\n      }, {\n        key: \"createConstantSource\",\n        value: function createConstantSource() {\n          return new constantSourceNodeConstructor(this);\n        }\n      }, {\n        key: \"createConvolver\",\n        value: function createConvolver() {\n          return new convolverNodeConstructor(this);\n        }\n      }, {\n        key: \"createDelay\",\n        value: function createDelay() {\n          var maxDelayTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n          return new delayNodeConstructor(this, {\n            maxDelayTime: maxDelayTime\n          });\n        }\n      }, {\n        key: \"createDynamicsCompressor\",\n        value: function createDynamicsCompressor() {\n          return new dynamicsCompressorNodeConstructor(this);\n        }\n      }, {\n        key: \"createGain\",\n        value: function createGain() {\n          return new gainNodeConstructor(this);\n        }\n      }, {\n        key: \"createIIRFilter\",\n        value: function createIIRFilter(feedforward, feedback) {\n          return new iIRFilterNodeConstructor(this, {\n            feedback: feedback,\n            feedforward: feedforward\n          });\n        }\n      }, {\n        key: \"createOscillator\",\n        value: function createOscillator() {\n          return new oscillatorNodeConstructor(this);\n        }\n      }, {\n        key: \"createPanner\",\n        value: function createPanner() {\n          return new pannerNodeConstructor(this);\n        }\n      }, {\n        key: \"createPeriodicWave\",\n        value: function createPeriodicWave(real, imag) {\n          var constraints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n            disableNormalization: false\n          };\n          return new periodicWaveConstructor(this, _objectSpread({}, constraints, {\n            imag: imag,\n            real: real\n          }));\n        }\n      }, {\n        key: \"createStereoPanner\",\n        value: function createStereoPanner() {\n          return new stereoPannerNodeConstructor(this);\n        }\n      }, {\n        key: \"createWaveShaper\",\n        value: function createWaveShaper() {\n          return new waveShaperNodeConstructor(this);\n        }\n      }, {\n        key: \"decodeAudioData\",\n        value: function decodeAudioData(audioData, successCallback, errorCallback) {\n          return _decodeAudioData(this._nativeContext, audioData).then(function (audioBuffer) {\n            if (typeof successCallback === 'function') {\n              successCallback(audioBuffer);\n            }\n\n            return audioBuffer;\n          }).catch(function (err) {\n            if (typeof errorCallback === 'function') {\n              errorCallback(err);\n            }\n\n            throw err; // tslint:disable-line:rxjs-throw-error\n          });\n        }\n      }, {\n        key: \"audioWorklet\",\n        get: function get() {\n          return this._audioWorklet;\n        }\n      }]);\n\n      return BaseAudioContext;\n    }(minimalBaseAudioContextConstructor)\n  );\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/base-audio-context-constructor.js"],"names":["createBaseAudioContextConstructor","addAudioWorkletModule","analyserNodeConstructor","audioBufferConstructor","audioBufferSourceNodeConstructor","biquadFilterNodeConstructor","channelMergerNodeConstructor","channelSplitterNodeConstructor","constantSourceNodeConstructor","convolverNodeConstructor","decodeAudioData","delayNodeConstructor","dynamicsCompressorNodeConstructor","gainNodeConstructor","iIRFilterNodeConstructor","minimalBaseAudioContextConstructor","oscillatorNodeConstructor","pannerNodeConstructor","periodicWaveConstructor","stereoPannerNodeConstructor","waveShaperNodeConstructor","_nativeContext","numberOfChannels","_audioWorklet","undefined","addModule","moduleURL","options","length","sampleRate","numberOfInputs","numberOfOutputs","maxDelayTime","feedforward","feedback","real","imag","constraints","disableNormalization","audioData","successCallback","errorCallback","then","audioBuffer","catch","err"],"mappings":"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","sourcesContent":["export const createBaseAudioContextConstructor = (addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) => {\n    return class BaseAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(_nativeContext, numberOfChannels) {\n            super(_nativeContext, numberOfChannels);\n            this._nativeContext = _nativeContext;\n            this._audioWorklet = (addAudioWorkletModule === undefined) ?\n                undefined :\n                { addModule: (moduleURL, options) => addAudioWorkletModule(this, moduleURL, options) };\n        }\n        get audioWorklet() {\n            return this._audioWorklet;\n        }\n        createAnalyser() {\n            return new analyserNodeConstructor(this);\n        }\n        createBiquadFilter() {\n            return new biquadFilterNodeConstructor(this);\n        }\n        createBuffer(numberOfChannels, length, sampleRate) {\n            return new audioBufferConstructor({ length, numberOfChannels, sampleRate });\n        }\n        createBufferSource() {\n            return new audioBufferSourceNodeConstructor(this);\n        }\n        createChannelMerger(numberOfInputs = 6) {\n            return new channelMergerNodeConstructor(this, { numberOfInputs });\n        }\n        createChannelSplitter(numberOfOutputs = 6) {\n            return new channelSplitterNodeConstructor(this, { numberOfOutputs });\n        }\n        createConstantSource() {\n            return new constantSourceNodeConstructor(this);\n        }\n        createConvolver() {\n            return new convolverNodeConstructor(this);\n        }\n        createDelay(maxDelayTime = 1) {\n            return new delayNodeConstructor(this, { maxDelayTime });\n        }\n        createDynamicsCompressor() {\n            return new dynamicsCompressorNodeConstructor(this);\n        }\n        createGain() {\n            return new gainNodeConstructor(this);\n        }\n        createIIRFilter(feedforward, feedback) {\n            return new iIRFilterNodeConstructor(this, { feedback, feedforward });\n        }\n        createOscillator() {\n            return new oscillatorNodeConstructor(this);\n        }\n        createPanner() {\n            return new pannerNodeConstructor(this);\n        }\n        createPeriodicWave(real, imag, constraints = { disableNormalization: false }) {\n            return new periodicWaveConstructor(this, { ...constraints, imag, real });\n        }\n        createStereoPanner() {\n            return new stereoPannerNodeConstructor(this);\n        }\n        createWaveShaper() {\n            return new waveShaperNodeConstructor(this);\n        }\n        decodeAudioData(audioData, successCallback, errorCallback) {\n            return decodeAudioData(this._nativeContext, audioData)\n                .then((audioBuffer) => {\n                if (typeof successCallback === 'function') {\n                    successCallback(audioBuffer);\n                }\n                return audioBuffer;\n            })\n                .catch((err) => {\n                if (typeof errorCallback === 'function') {\n                    errorCallback(err);\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/base-audio-context-constructor.js.map"]},"metadata":{},"sourceType":"module"}