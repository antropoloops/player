{"ast":null,"code":"import { EmptyAudioset } from \"../audioset\";\nimport { AudiosetLoader } from \"../audioset/AudiosetLoader\";\nimport { DebugAudioEngine } from \"./Audio\";\nimport { AudiosetControl } from \"./AudiosetControl\";\nimport { Emitter } from \"./Emitter\";\nimport { ResourceLoader } from \"./ResourceLoader\";\nimport { Sampler } from \"./Sampler\";\n\nconst NoOp = param => undefined;\n\nconst NoControl = new AudiosetControl(EmptyAudioset, {\n  onControlCommand: NoOp,\n  onControlStateChanged: NoOp\n});\nconst NoResources = new ResourceLoader(EmptyAudioset, NoOp);\nconst NoEngine = new DebugAudioEngine();\nconst NoSampler = new Sampler(EmptyAudioset, NoResources, NoEngine);\nconst NoPlayer = {\n  control: NoControl,\n  resources: NoResources,\n  sampler: NoSampler\n};\n\nclass EmptyPlayer {\n  constructor() {\n    this.sampler = NoSampler;\n    this.control = NoControl;\n  }\n\n}\n\nclass AudiosetPlayer extends EmptyPlayer {\n  constructor() {\n    super();\n    this.resources = NoResources;\n    this.audioset = EmptyAudioset;\n\n    this.resourceListener = status => {\n      this.handleResourceChanged(status);\n    };\n  }\n\n  getResources() {\n    return this.resources;\n  }\n\n  getAudioset() {\n    return this.audioset;\n  }\n\n  setAudioset(audioset) {\n    this.audioset = audioset;\n    this.resources = new ResourceLoader(audioset, this.resourceListener);\n  }\n\n}\n/**\n * A player is the facade for the rest of the components:\n * - Loader: load audioset and resources\n * - Control: determines how to play clips\n * - Pads: receive pad events\n * - Params: receive param change events\n * - Keyboard: receive keyboard events\n * - Sampler: play the audio\n */\n\n\nexport class Player extends AudiosetPlayer {\n  constructor() {\n    super();\n    this.controlListener = void 0;\n    this.resourceListener = void 0;\n    this.controlStateChanged = new Emitter();\n    this.controlCommand = new Emitter();\n    this.resourceStatusChanged = new Emitter();\n    this.controlListener = {\n      onControlStateChanged: state => this.handleControlStateChanged(state),\n      onControlCommand: command => this.handleControlCommand(command)\n    };\n    this.sampler = NoSampler;\n  }\n\n  onResourceStatusChanged(listener) {\n    return this.resourceStatusChanged.on(listener);\n  }\n\n  onControlStateChanged(listener) {\n    return this.controlStateChanged.on(listener);\n  }\n\n  onCommand(listener) {\n    return this.controlCommand.on(listener);\n  }\n\n  handleResourceChanged(status) {\n    this.resourceStatusChanged.emit(status);\n  }\n\n  handleControlStateChanged(controlState) {\n    this.controlStateChanged.emit(controlState);\n  }\n\n  handleControlCommand(command) {\n    this.sampler.run(command);\n    this.controlCommand.emit(command);\n  }\n\n}\n\nclass AudioPlayer extends Player {\n  constructor(...args) {\n    super(...args);\n    this.audio = new DebugAudioEngine();\n  }\n\n  setAudioEngine(audio) {\n    this.audio = audio; // this.sampler.dispose()\n\n    this.sampler = new Sampler(this.getAudioset(), this.resources, this.audio);\n  }\n\n}\n/**\n * A player with a audioset loader.\n * The idea is a player with state, but not well modelled\n */\n\n\nexport class PlayerState extends AudioPlayer {\n  constructor() {\n    super();\n    this.loader = void 0;\n    this.audiosetLoadStatusChanged = new Emitter();\n    this.loader = new AudiosetLoader(status => this.handleLoadStatusChanged(status));\n  }\n\n  handleLoadStatusChanged(status) {\n    this.audiosetLoadStatusChanged.emit(status);\n\n    if (status.stage === \"ready\") {\n      this.setAudiosetData(status.audioset);\n    }\n  }\n\n  setAudiosetData(audioset) {\n    this.control.stopAll(0);\n\n    if (isAudiosetPlay(audioset)) {\n      this.control = new AudiosetControl(audioset, this.controlListener);\n      this.sampler = new Sampler(audioset, this.resources, this.audio);\n      this.setAudioset(audioset);\n    } else {\n      Object.assign(this, NoPlayer);\n    }\n  }\n\n}\n\nfunction isAudiosetPlay(audioset) {\n  return audioset.type === \"audioset\";\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/PlayerState.ts"],"names":["EmptyAudioset","AudiosetLoader","DebugAudioEngine","AudiosetControl","Emitter","ResourceLoader","Sampler","NoOp","param","undefined","NoControl","onControlCommand","onControlStateChanged","NoResources","NoEngine","NoSampler","NoPlayer","control","resources","sampler","EmptyPlayer","AudiosetPlayer","constructor","audioset","resourceListener","status","handleResourceChanged","getResources","getAudioset","setAudioset","Player","controlListener","controlStateChanged","controlCommand","resourceStatusChanged","state","handleControlStateChanged","command","handleControlCommand","onResourceStatusChanged","listener","on","onCommand","emit","controlState","run","AudioPlayer","audio","setAudioEngine","PlayerState","loader","audiosetLoadStatusChanged","handleLoadStatusChanged","stage","setAudiosetData","stopAll","isAudiosetPlay","Object","assign","type"],"mappings":"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","sourcesContent":["import { Audioset, AudiosetData, EmptyAudioset } from \"../audioset\";\nimport { AudiosetLoader, AudiosetLoadStatus } from \"../audioset/AudiosetLoader\";\nimport { AudioEngine, DebugAudioEngine } from \"./Audio\";\nimport {\n  AudiosetControl,\n  ControlCommand,\n  ControlListener,\n  ControlState,\n} from \"./AudiosetControl\";\nimport { Emitter, Listener } from \"./Emitter\";\nimport { ResourceLoader, ResourceLoadStatus } from \"./ResourceLoader\";\nimport { Sampler } from \"./Sampler\";\n\nconst NoOp = (param: any) => undefined;\nconst NoControl = new AudiosetControl(EmptyAudioset, {\n  onControlCommand: NoOp,\n  onControlStateChanged: NoOp,\n});\nconst NoResources = new ResourceLoader(EmptyAudioset, NoOp);\nconst NoEngine = new DebugAudioEngine();\nconst NoSampler = new Sampler(EmptyAudioset, NoResources, NoEngine);\n\nconst NoPlayer = {\n  control: NoControl,\n  resources: NoResources,\n  sampler: NoSampler,\n};\n\nclass EmptyPlayer {\n  public sampler: Sampler = NoSampler;\n  public control: AudiosetControl = NoControl;\n}\n\nclass AudiosetPlayer extends EmptyPlayer {\n  private resources: ResourceLoader = NoResources;\n  private audioset: Audioset = EmptyAudioset;\n\n  public constructor() {\n    super();\n    this.resourceListener = (status: ResourceLoadStatus) => {\n      this.handleResourceChanged(status);\n    };\n  }\n\n  public getResources() {\n    return this.resources;\n  }\n\n  public getAudioset() {\n    return this.audioset;\n  }\n\n  public setAudioset(audioset: Audioset) {\n    this.audioset = audioset;\n    this.resources = new ResourceLoader(audioset, this.resourceListener);\n  }\n}\n\n/**\n * A player is the facade for the rest of the components:\n * - Loader: load audioset and resources\n * - Control: determines how to play clips\n * - Pads: receive pad events\n * - Params: receive param change events\n * - Keyboard: receive keyboard events\n * - Sampler: play the audio\n */\nexport class Player extends AudiosetPlayer {\n  protected readonly controlListener: ControlListener;\n  protected readonly resourceListener: (status: ResourceLoadStatus) => void;\n\n  private readonly controlStateChanged = new Emitter<ControlState>();\n  private readonly controlCommand = new Emitter<ControlCommand>();\n  private readonly resourceStatusChanged = new Emitter<ResourceLoadStatus>();\n\n  constructor() {\n    super();\n    this.controlListener = {\n      onControlStateChanged: state => this.handleControlStateChanged(state),\n      onControlCommand: command => this.handleControlCommand(command),\n    };\n    this.sampler = NoSampler;\n  }\n\n  public onResourceStatusChanged(listener: Listener<ResourceLoadStatus>) {\n    return this.resourceStatusChanged.on(listener);\n  }\n\n  public onControlStateChanged(listener: Listener<ControlState>) {\n    return this.controlStateChanged.on(listener);\n  }\n\n  public onCommand(listener: Listener<ControlCommand>) {\n    return this.controlCommand.on(listener);\n  }\n\n  private handleResourceChanged(status: ResourceLoadStatus) {\n    this.resourceStatusChanged.emit(status);\n  }\n\n  private handleControlStateChanged(controlState: ControlState) {\n    this.controlStateChanged.emit(controlState);\n  }\n\n  private handleControlCommand(command: ControlCommand) {\n    this.sampler.run(command);\n    this.controlCommand.emit(command);\n  }\n}\n\nclass AudioPlayer extends Player {\n  protected audio: AudioEngine = new DebugAudioEngine();\n\n  public setAudioEngine(audio: AudioEngine) {\n    this.audio = audio;\n    // this.sampler.dispose()\n    this.sampler = new Sampler(this.getAudioset(), this.resources, this.audio);\n  }\n}\n\n/**\n * A player with a audioset loader.\n * The idea is a player with state, but not well modelled\n */\nexport class PlayerState extends AudioPlayer {\n  public readonly loader: AudiosetLoader;\n  private readonly audiosetLoadStatusChanged = new Emitter<\n    AudiosetLoadStatus\n  >();\n\n  constructor() {\n    super();\n    this.loader = new AudiosetLoader(status =>\n      this.handleLoadStatusChanged(status),\n    );\n  }\n\n  private handleLoadStatusChanged(status: AudiosetLoadStatus) {\n    this.audiosetLoadStatusChanged.emit(status);\n    if (status.stage === \"ready\") {\n      this.setAudiosetData(status.audioset);\n    }\n  }\n\n  private setAudiosetData(audioset: AudiosetData) {\n    this.control.stopAll(0);\n    if (isAudiosetPlay(audioset)) {\n      this.control = new AudiosetControl(audioset, this.controlListener);\n      this.sampler = new Sampler(audioset, this.resources, this.audio);\n      this.setAudioset(audioset);\n    } else {\n      Object.assign(this, NoPlayer);\n    }\n  }\n}\n\nfunction isAudiosetPlay(audioset: AudiosetData): audioset is Audioset {\n  return audioset.type === \"audioset\";\n}\n\n"]},"metadata":{},"sourceType":"module"}