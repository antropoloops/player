{"ast":null,"code":"import _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as topojson from \"topojson\";\nimport { getAlbumHeight } from \"./dimensions\";\nimport drawCircle from \"./drawCircle\";\nimport drawAlbum from \"./drawAlbum\";\nimport drawRefLine from \"./drawRefLine\";\nimport drawWave from \"./drawWave\";\nimport { drawMap, calculateMapScale, createMapProjector } from \"./drawMap\";\nimport { drawPanel, createPanelProjector } from \"./drawPanel\";\n\nconst remove = (name, group) => {\n  const value = group[name];\n\n  if (value) {\n    value.remove();\n    group[name] = null;\n  }\n};\n/**\n * It stores the state required to render visualizations\n */\n\n\nexport default class Visuals {\n  constructor(set, display) {\n    this.set = set;\n    this.display = display;\n    this.circles = {};\n    this.albums = {};\n    this.refLines = {};\n    this.mode = set.visuals.mode;\n  }\n\n  setGeodata(geodata) {\n    this.countries = topojson.feature(geodata, geodata.objects.countries).features.filter(country => country.id !== \"010\");\n    this.setup();\n  }\n\n  show(name) {\n    const clip = this.set;\n    if (!info) return; // REVIEW: See if there is a better way to get this info (scale, projection)\n    // that is already calculated in drawMap\n\n    const _this$display$dimensi = this.display.dimensions,\n          width = _this$display$dimensi.width,\n          height = _this$display$dimensi.height;\n    const _this$set$visuals$geo = this.set.visuals.geomap,\n          scaleFactor = _this$set$visuals$geo.scaleFactor,\n          center = _this$set$visuals$geo.center;\n    const albumsHeight = getAlbumHeight(width);\n    const scale = calculateMapScale(width, height - albumsHeight);\n    const projector = this.mode === \"map\" ? createMapProjector(width, height - albumsHeight, scaleFactor * scale, center) : createPanelProjector(width, height - albumsHeight, this.set.visuals.image.size.width, this.set.visuals.image.size.height);\n\n    const _projector = projector(info.position),\n          _projector2 = _slicedToArray(_projector, 2),\n          cx = _projector2[0],\n          cy = _projector2[1]; // REVIEW: fix width parameter to draw circles with the proper size\n\n\n    const circle = drawCircle(this.circlesContainer, width, cx, cy, info);\n    this.circles[name] = circle;\n    const album = drawAlbum(this.albumsContainer, width, info);\n    this.albums[name] = album;\n    const refLine = drawRefLine(this.refLinesContainer, width, cx, cy, info.trackNumber, info.trackColor);\n    this.refLines[name] = refLine;\n    drawWave(this.wavesContainer, width, cx, cy, info.trackColor, info.trackVolume);\n  }\n\n  hide(name) {\n    remove(name, this.circles);\n    remove(name, this.albums);\n    remove(name, this.refLines);\n  }\n\n  resizeSvg() {\n    // TODO: create a resize function that only changes the svg viewBox\n    this.setup();\n  }\n\n  setup() {\n    this.display.clear();\n    this.display.createSvg();\n    const backgroundWidth = this.display.dimensions.width;\n    const albumsHeight = getAlbumHeight(backgroundWidth);\n    const backgroundHeight = this.display.dimensions.height - albumsHeight;\n    const svg = this.display.svg;\n    this.backgroundContainer = createGroup(svg, \"background\", albumsHeight);\n    this.albumsContainer = createGroup(svg, \"albums\", 0);\n    this.refLinesContainer = createGroup(svg, \"refLines\", albumsHeight);\n    this.circlesContainer = createGroup(svg, \"circles\", albumsHeight);\n    this.wavesContainer = createGroup(svg, \"waves\", albumsHeight);\n\n    if (this.mode === \"map\") {\n      drawMap(this.backgroundContainer, this.countries, backgroundWidth, backgroundHeight, this.set.visuals.geomap);\n    } else {\n      drawPanel(this.backgroundContainer, backgroundWidth, backgroundHeight, this.set.visuals.image.url);\n    }\n  }\n\n}\n\nfunction createGroup(svg, id, height) {\n  return svg.append(\"g\").attr(\"id\", id).attr(\"transform\", \"translate(0, \".concat(height, \")\"));\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/visuals/visuals.js"],"names":["topojson","getAlbumHeight","drawCircle","drawAlbum","drawRefLine","drawWave","drawMap","calculateMapScale","createMapProjector","drawPanel","createPanelProjector","remove","name","group","value","Visuals","constructor","set","display","circles","albums","refLines","mode","visuals","setGeodata","geodata","countries","feature","objects","features","filter","country","id","setup","show","clip","info","dimensions","width","height","geomap","scaleFactor","center","albumsHeight","scale","projector","image","size","position","cx","cy","circle","circlesContainer","album","albumsContainer","refLine","refLinesContainer","trackNumber","trackColor","wavesContainer","trackVolume","hide","resizeSvg","clear","createSvg","backgroundWidth","backgroundHeight","svg","backgroundContainer","createGroup","url","append","attr"],"mappings":"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","sourcesContent":["import * as topojson from \"topojson\";\n\nimport { getAlbumHeight } from \"./dimensions\";\n\nimport drawCircle from \"./drawCircle\";\nimport drawAlbum from \"./drawAlbum\";\nimport drawRefLine from \"./drawRefLine\";\nimport drawWave from \"./drawWave\";\nimport { drawMap, calculateMapScale, createMapProjector } from \"./drawMap\";\nimport { drawPanel, createPanelProjector } from \"./drawPanel\";\n\nconst remove = (name, group) => {\n  const value = group[name];\n  if (value) {\n    value.remove();\n    group[name] = null;\n  }\n};\n\n/**\n * It stores the state required to render visualizations\n */\nexport default class Visuals {\n  constructor(set, display) {\n    this.set = set;\n    this.display = display;\n    this.circles = {};\n    this.albums = {};\n    this.refLines = {};\n    this.mode = set.visuals.mode;\n  }\n\n  setGeodata(geodata) {\n    this.countries = topojson\n      .feature(geodata, geodata.objects.countries)\n      .features.filter((country) => country.id !== \"010\");\n    this.setup();\n  }\n\n  show(name) {\n    const clip = this.set;\n    if (!info) return;\n    // REVIEW: See if there is a better way to get this info (scale, projection)\n    // that is already calculated in drawMap\n    const { width, height } = this.display.dimensions;\n    const { scaleFactor, center } = this.set.visuals.geomap;\n    const albumsHeight = getAlbumHeight(width);\n\n    const scale = calculateMapScale(width, height - albumsHeight);\n\n    const projector =\n      this.mode === \"map\"\n        ? createMapProjector(width, height - albumsHeight, scaleFactor * scale, center)\n        : createPanelProjector(\n            width,\n            height - albumsHeight,\n            this.set.visuals.image.size.width,\n            this.set.visuals.image.size.height,\n          );\n\n    const [cx, cy] = projector(info.position);\n\n    // REVIEW: fix width parameter to draw circles with the proper size\n    const circle = drawCircle(this.circlesContainer, width, cx, cy, info);\n    this.circles[name] = circle;\n\n    const album = drawAlbum(this.albumsContainer, width, info);\n    this.albums[name] = album;\n\n    const refLine = drawRefLine(this.refLinesContainer, width, cx, cy, info.trackNumber, info.trackColor);\n    this.refLines[name] = refLine;\n\n    drawWave(this.wavesContainer, width, cx, cy, info.trackColor, info.trackVolume);\n  }\n\n  hide(name) {\n    remove(name, this.circles);\n    remove(name, this.albums);\n    remove(name, this.refLines);\n  }\n\n  resizeSvg() {\n    // TODO: create a resize function that only changes the svg viewBox\n    this.setup();\n  }\n\n  setup() {\n    this.display.clear();\n    this.display.createSvg();\n\n    const backgroundWidth = this.display.dimensions.width;\n    const albumsHeight = getAlbumHeight(backgroundWidth);\n    const backgroundHeight = this.display.dimensions.height - albumsHeight;\n\n    const svg = this.display.svg;\n\n    this.backgroundContainer = createGroup(svg, \"background\", albumsHeight);\n    this.albumsContainer = createGroup(svg, \"albums\", 0);\n    this.refLinesContainer = createGroup(svg, \"refLines\", albumsHeight);\n    this.circlesContainer = createGroup(svg, \"circles\", albumsHeight);\n    this.wavesContainer = createGroup(svg, \"waves\", albumsHeight);\n\n    if (this.mode === \"map\") {\n      drawMap(this.backgroundContainer, this.countries, backgroundWidth, backgroundHeight, this.set.visuals.geomap);\n    } else {\n      drawPanel(this.backgroundContainer, backgroundWidth, backgroundHeight, this.set.visuals.image.url);\n    }\n  }\n}\n\nfunction createGroup(svg, id, height) {\n  return svg.append(\"g\").attr(\"id\", id).attr(\"transform\", `translate(0, ${height})`);\n}\n"]},"metadata":{},"sourceType":"module"}