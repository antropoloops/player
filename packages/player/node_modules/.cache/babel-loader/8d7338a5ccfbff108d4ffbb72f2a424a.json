{"ast":null,"code":"import debug from \"debug\";\nimport { AudioContext } from \"standardized-audio-context\";\nconst context = new AudioContext();\ncontext.onstatechange = handleStateChange;\nconst log = debug(\"atpls:context\");\n\nfunction handleStateChange(event) {\n  log(\"state %s\", context.state);\n}\n/**\n * @see https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio\n */\n\n\nexport async function getActiveAudioContext() {\n  if (context.state !== \"running\" && context.resume) {\n    log(\"waiting for context...\");\n    return context.resume().then(() => startAudioContext(context));\n  } else {\n    return context;\n  }\n}\n\nfunction startAudioContext(ctx) {\n  log(\"start context\"); // iOS hack. See https://github.com/tambien/StartAudioContext/blob/master/StartAudioContext.js\n\n  const buffer = ctx.createBuffer(1, 1, ctx.sampleRate);\n  const source = ctx.createBufferSource();\n  source.buffer = buffer;\n  source.connect(ctx.destination);\n  source.start(0);\n  return ctx;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/AudioContext.ts"],"names":["debug","AudioContext","context","onstatechange","handleStateChange","log","event","state","getActiveAudioContext","resume","then","startAudioContext","ctx","buffer","createBuffer","sampleRate","source","createBufferSource","connect","destination","start"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,4BAA7B;AAEA,MAAMC,OAAO,GAAG,IAAID,YAAJ,EAAhB;AACAC,OAAO,CAACC,aAAR,GAAwBC,iBAAxB;AAEA,MAAMC,GAAG,GAAGL,KAAK,CAAC,eAAD,CAAjB;;AAEA,SAASI,iBAAT,CAA2BE,KAA3B,EAAyC;AACvCD,EAAAA,GAAG,CAAC,UAAD,EAAaH,OAAO,CAACK,KAArB,CAAH;AACD;AAED;;;;;AAGA,OAAO,eAAeC,qBAAf,GAA8D;AACnE,MAAIN,OAAO,CAACK,KAAR,KAAkB,SAAlB,IAA+BL,OAAO,CAACO,MAA3C,EAAmD;AACjDJ,IAAAA,GAAG,CAAC,wBAAD,CAAH;AACA,WAAOH,OAAO,CACXO,MADI,GAEJC,IAFI,CAEC,MAAMC,iBAAiB,CAACT,OAAD,CAFxB,CAAP;AAGD,GALD,MAKO;AACL,WAAOA,OAAP;AACD;AACF;;AAED,SAASS,iBAAT,CAA2BC,GAA3B,EAA4D;AAC1DP,EAAAA,GAAG,CAAC,eAAD,CAAH,CAD0D,CAE1D;;AACA,QAAMQ,MAAM,GAAGD,GAAG,CAACE,YAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuBF,GAAG,CAACG,UAA3B,CAAf;AACA,QAAMC,MAAM,GAAGJ,GAAG,CAACK,kBAAJ,EAAf;AACAD,EAAAA,MAAM,CAACH,MAAP,GAAgBA,MAAhB;AACAG,EAAAA,MAAM,CAACE,OAAP,CAAeN,GAAG,CAACO,WAAnB;AACAH,EAAAA,MAAM,CAACI,KAAP,CAAa,CAAb;AACA,SAAOR,GAAP;AACD","sourcesContent":["import debug from \"debug\";\nimport { AudioContext } from \"standardized-audio-context\";\n\nconst context = new AudioContext();\ncontext.onstatechange = handleStateChange;\n\nconst log = debug(\"atpls:context\");\n\nfunction handleStateChange(event: Event) {\n  log(\"state %s\", context.state);\n}\n\n/**\n * @see https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio\n */\nexport async function getActiveAudioContext(): Promise<AudioContext> {\n  if (context.state !== \"running\" && context.resume) {\n    log(\"waiting for context...\");\n    return context\n      .resume()\n      .then(() => startAudioContext(context as AudioContext));\n  } else {\n    return context;\n  }\n}\n\nfunction startAudioContext(ctx: AudioContext): AudioContext {\n  log(\"start context\");\n  // iOS hack. See https://github.com/tambien/StartAudioContext/blob/master/StartAudioContext.js\n  const buffer = ctx.createBuffer(1, 1, ctx.sampleRate);\n  const source = ctx.createBufferSource();\n  source.buffer = buffer;\n  source.connect(ctx.destination);\n  source.start(0);\n  return ctx;\n}\n"]},"metadata":{},"sourceType":"module"}