{"ast":null,"code":"import _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/dani/Antropoloops/atpls-player/src/App/Player/Clips.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { player } from \"../../Player\";\nimport { Clip } from \"./Clip\";\nexport const Clips = ({\n  audioset\n}) => {\n  const state = useControlState();\n\n  if (!audioset || !audioset.tracks) {\n    return React.createElement(React.Fragment, null);\n  }\n\n  return React.createElement(\"div\", {\n    className: \"Clips\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, audioset.tracks.map(track => React.createElement(\"div\", {\n    key: track.id,\n    className: \"Track\",\n    style: {\n      backgroundColor: track.color\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, track.name), track.clipIds.map(clipId => React.createElement(Clip, {\n    key: clipId,\n    clip: audioset.index.clipById[clipId],\n    isActive: state.clips[clipId].state === \"playing\",\n    onClick: () => player.control.toggleClip(clipId, 0),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  })))));\n};\n\nfunction useControlState() {\n  const _useState = useState(player.control.getState()),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  useEffect(() => player.onControlStateChanged(controlState => {\n    setState(controlState);\n  }));\n  return state;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/App/Player/Clips.tsx"],"names":["React","useEffect","useState","player","Clip","Clips","audioset","state","useControlState","tracks","map","track","id","backgroundColor","color","name","clipIds","clipId","index","clipById","clips","control","toggleClip","getState","setState","onControlStateChanged","controlState"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,SAASC,MAAT,QAAuB,cAAvB;AAEA,SAASC,IAAT,QAAqB,QAArB;AAMA,OAAO,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA8B;AACjD,QAAMC,KAAK,GAAGC,eAAe,EAA7B;;AAEA,MAAI,CAACF,QAAD,IAAa,CAACA,QAAQ,CAACG,MAA3B,EAAmC;AACjC,WAAO,yCAAP;AACD;;AAED,SACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,QAAQ,CAACG,MAAT,CAAgBC,GAAhB,CAAoBC,KAAK,IACxB;AACE,IAAA,GAAG,EAAEA,KAAK,CAACC,EADb;AAEE,IAAA,SAAS,EAAC,OAFZ;AAGE,IAAA,KAAK,EAAE;AAAEC,MAAAA,eAAe,EAAEF,KAAK,CAACG;AAAzB,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE;AAAI,IAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuBH,KAAK,CAACI,IAA7B,CALF,EAMGJ,KAAK,CAACK,OAAN,CAAcN,GAAd,CAAkBO,MAAM,IACvB,oBAAC,IAAD;AACE,IAAA,GAAG,EAAEA,MADP;AAEE,IAAA,IAAI,EAAEX,QAAQ,CAACY,KAAT,CAAeC,QAAf,CAAwBF,MAAxB,CAFR;AAGE,IAAA,QAAQ,EAAEV,KAAK,CAACa,KAAN,CAAYH,MAAZ,EAAoBV,KAApB,KAA8B,SAH1C;AAIE,IAAA,OAAO,EAAE,MAAMJ,MAAM,CAACkB,OAAP,CAAeC,UAAf,CAA0BL,MAA1B,EAAkC,CAAlC,CAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CANH,CADD,CADH,CADF;AAqBD,CA5BM;;AA8BP,SAAST,eAAT,GAAyC;AAAA,oBACbN,QAAQ,CAACC,MAAM,CAACkB,OAAP,CAAeE,QAAf,EAAD,CADK;AAAA;AAAA,QAChChB,KADgC;AAAA,QACzBiB,QADyB;;AAEvCvB,EAAAA,SAAS,CAAC,MACRE,MAAM,CAACsB,qBAAP,CAA6BC,YAAY,IAAI;AAC3CF,IAAAA,QAAQ,CAACE,YAAD,CAAR;AACD,GAFD,CADO,CAAT;AAKA,SAAOnB,KAAP;AACD","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Audioset } from \"../../Audioset\";\nimport { player } from \"../../Player\";\nimport { ControlState } from \"../../Player/AudiosetControl\";\nimport { Clip } from \"./Clip\";\n\ninterface ClipsProps {\n  audioset: Audioset;\n}\n\nexport const Clips = ({ audioset }: ClipsProps) => {\n  const state = useControlState();\n\n  if (!audioset || !audioset.tracks) {\n    return <></>;\n  }\n\n  return (\n    <div className=\"Clips\">\n      {audioset.tracks.map(track => (\n        <div\n          key={track.id}\n          className=\"Track\"\n          style={{ backgroundColor: track.color }}\n        >\n          <h2 className=\"title\">{track.name}</h2>\n          {track.clipIds.map(clipId => (\n            <Clip\n              key={clipId}\n              clip={audioset.index.clipById[clipId]}\n              isActive={state.clips[clipId].state === \"playing\"}\n              onClick={() => player.control.toggleClip(clipId, 0)}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nfunction useControlState(): ControlState {\n  const [state, setState] = useState(player.control.getState());\n  useEffect(() =>\n    player.onControlStateChanged(controlState => {\n      setState(controlState);\n    }),\n  );\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}