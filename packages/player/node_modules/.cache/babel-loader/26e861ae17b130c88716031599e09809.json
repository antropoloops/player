{"ast":null,"code":"import debug from \"debug\";\nimport { isAudiosetData, isAudiosetPack } from \"./Audioset\";\nconst log = debug(\"atpls:audioset\");\nexport function createAudioset(data) {\n  if (!isAudiosetData(data)) {\n    log(\"Invalid format %o\", data);\n    throw Error(\"Invalida Audioset format\");\n  }\n\n  if (isAudiosetPack(data)) createIndices(data);\n  return data;\n}\nexport function createAudiosetPack(audioset) {\n  createIndices(audioset);\n  return audioset;\n}\n\nfunction createIndices(audioset) {\n  const index = {\n    clipById: {},\n    trackById: {},\n    clipIdsOfTrack: {},\n    trackIdOfClip: {}\n  };\n  audioset.clips.forEach(clip => {\n    index.clipById[clip.id] = clip;\n    index.trackIdOfClip[clip.id] = clip.trackId;\n  });\n  audioset.tracks.forEach(track => {\n    index.trackById[track.id] = track;\n    index.clipIdsOfTrack[track.id] = track.clipIds;\n  });\n  audioset.index = index;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/Audioset/createAudioset.ts"],"names":["debug","isAudiosetData","isAudiosetPack","log","createAudioset","data","Error","createIndices","createAudiosetPack","audioset","index","clipById","trackById","clipIdsOfTrack","trackIdOfClip","clips","forEach","clip","id","trackId","tracks","track","clipIds"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAoCC,cAApC,EAAkEC,cAAlE,QAAwF,YAAxF;AAEA,MAAMC,GAAG,GAAGH,KAAK,CAAC,gBAAD,CAAjB;AAEA,OAAO,SAASI,cAAT,CAAwBC,IAAxB,EAAiD;AACtD,MAAI,CAACJ,cAAc,CAACI,IAAD,CAAnB,EAA2B;AACzBF,IAAAA,GAAG,CAAC,mBAAD,EAAsBE,IAAtB,CAAH;AACA,UAAMC,KAAK,CAAC,0BAAD,CAAX;AACD;;AAED,MAAIJ,cAAc,CAACG,IAAD,CAAlB,EAA0BE,aAAa,CAACF,IAAD,CAAb;AAC1B,SAAOA,IAAP;AACD;AAED,OAAO,SAASG,kBAAT,CAA4BC,QAA5B,EAA0D;AAC/DF,EAAAA,aAAa,CAACE,QAAD,CAAb;AACA,SAAOA,QAAP;AACD;;AAED,SAASF,aAAT,CAAuBE,QAAvB,EAA2C;AACzC,QAAMC,KAAsB,GAAG;AAC7BC,IAAAA,QAAQ,EAAE,EADmB;AAE7BC,IAAAA,SAAS,EAAE,EAFkB;AAG7BC,IAAAA,cAAc,EAAE,EAHa;AAI7BC,IAAAA,aAAa,EAAE;AAJc,GAA/B;AAMAL,EAAAA,QAAQ,CAACM,KAAT,CAAeC,OAAf,CAAwBC,IAAD,IAAU;AAC/BP,IAAAA,KAAK,CAACC,QAAN,CAAeM,IAAI,CAACC,EAApB,IAA0BD,IAA1B;AACAP,IAAAA,KAAK,CAACI,aAAN,CAAoBG,IAAI,CAACC,EAAzB,IAA+BD,IAAI,CAACE,OAApC;AACD,GAHD;AAIAV,EAAAA,QAAQ,CAACW,MAAT,CAAgBJ,OAAhB,CAAyBK,KAAD,IAAW;AACjCX,IAAAA,KAAK,CAACE,SAAN,CAAgBS,KAAK,CAACH,EAAtB,IAA4BG,KAA5B;AACAX,IAAAA,KAAK,CAACG,cAAN,CAAqBQ,KAAK,CAACH,EAA3B,IAAiCG,KAAK,CAACC,OAAvC;AACD,GAHD;AAIAb,EAAAA,QAAQ,CAACC,KAAT,GAAiBA,KAAjB;AACD","sourcesContent":["import debug from \"debug\";\nimport { Audioset, AudiosetIndexes, isAudiosetData, AudiosetData, isAudiosetPack } from \"./Audioset\";\n\nconst log = debug(\"atpls:audioset\");\n\nexport function createAudioset(data: any): AudiosetData {\n  if (!isAudiosetData(data)) {\n    log(\"Invalid format %o\", data);\n    throw Error(\"Invalida Audioset format\");\n  }\n\n  if (isAudiosetPack(data)) createIndices(data);\n  return data;\n}\n\nexport function createAudiosetPack(audioset: Audioset): Audioset {\n  createIndices(audioset);\n  return audioset;\n}\n\nfunction createIndices(audioset: Audioset) {\n  const index: AudiosetIndexes = {\n    clipById: {},\n    trackById: {},\n    clipIdsOfTrack: {},\n    trackIdOfClip: {},\n  };\n  audioset.clips.forEach((clip) => {\n    index.clipById[clip.id] = clip;\n    index.trackIdOfClip[clip.id] = clip.trackId;\n  });\n  audioset.tracks.forEach((track) => {\n    index.trackById[track.id] = track;\n    index.clipIdsOfTrack[track.id] = track.clipIds;\n  });\n  audioset.index = index;\n}\n"]},"metadata":{},"sourceType":"module"}