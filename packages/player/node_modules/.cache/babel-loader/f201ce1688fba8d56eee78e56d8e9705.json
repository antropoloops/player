{"ast":null,"code":"export var createWrapChannelMergerNode = function createWrapChannelMergerNode(createInvalidStateError, createNativeAudioNode, monitorConnectionsFunction) {\n  return function (nativeContext, channelMergerNode) {\n    channelMergerNode.channelCount = 1;\n    channelMergerNode.channelCountMode = 'explicit';\n    Object.defineProperty(channelMergerNode, 'channelCount', {\n      get: function get() {\n        return 1;\n      },\n      set: function set() {\n        throw createInvalidStateError();\n      }\n    });\n    Object.defineProperty(channelMergerNode, 'channelCountMode', {\n      get: function get() {\n        return 'explicit';\n      },\n      set: function set() {\n        throw createInvalidStateError();\n      }\n    }); // Bug #20: Safari requires a connection of any kind to treat the input signal correctly.\n\n    var audioBufferSourceNode = createNativeAudioNode(nativeContext, function (ntvCntxt) {\n      return ntvCntxt.createBufferSource();\n    });\n\n    var whenConnected = function whenConnected() {\n      var length = channelMergerNode.numberOfInputs;\n\n      for (var i = 0; i < length; i += 1) {\n        audioBufferSourceNode.connect(channelMergerNode, 0, i);\n      }\n    };\n\n    var whenDisconnected = function whenDisconnected() {\n      return audioBufferSourceNode.disconnect(channelMergerNode);\n    };\n\n    monitorConnectionsFunction(channelMergerNode, whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/wrap-channel-merger-node.js"],"names":["createWrapChannelMergerNode","createInvalidStateError","createNativeAudioNode","monitorConnectionsFunction","nativeContext","channelMergerNode","channelCount","channelCountMode","Object","defineProperty","get","set","audioBufferSourceNode","ntvCntxt","createBufferSource","whenConnected","length","numberOfInputs","i","connect","whenDisconnected","disconnect"],"mappings":"AAAA,OAAO,IAAMA,2BAA2B,GAAG,SAA9BA,2BAA8B,CAACC,uBAAD,EAA0BC,qBAA1B,EAAiDC,0BAAjD,EAAgF;AACvH,SAAO,UAACC,aAAD,EAAgBC,iBAAhB,EAAsC;AACzCA,IAAAA,iBAAiB,CAACC,YAAlB,GAAiC,CAAjC;AACAD,IAAAA,iBAAiB,CAACE,gBAAlB,GAAqC,UAArC;AACAC,IAAAA,MAAM,CAACC,cAAP,CAAsBJ,iBAAtB,EAAyC,cAAzC,EAAyD;AACrDK,MAAAA,GAAG,EAAE;AAAA,eAAM,CAAN;AAAA,OADgD;AAErDC,MAAAA,GAAG,EAAE,eAAM;AACP,cAAMV,uBAAuB,EAA7B;AACH;AAJoD,KAAzD;AAMAO,IAAAA,MAAM,CAACC,cAAP,CAAsBJ,iBAAtB,EAAyC,kBAAzC,EAA6D;AACzDK,MAAAA,GAAG,EAAE;AAAA,eAAM,UAAN;AAAA,OADoD;AAEzDC,MAAAA,GAAG,EAAE,eAAM;AACP,cAAMV,uBAAuB,EAA7B;AACH;AAJwD,KAA7D,EATyC,CAezC;;AACA,QAAMW,qBAAqB,GAAGV,qBAAqB,CAACE,aAAD,EAAgB,UAACS,QAAD;AAAA,aAAcA,QAAQ,CAACC,kBAAT,EAAd;AAAA,KAAhB,CAAnD;;AACA,QAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACxB,UAAMC,MAAM,GAAGX,iBAAiB,CAACY,cAAjC;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAApB,EAA4BE,CAAC,IAAI,CAAjC,EAAoC;AAChCN,QAAAA,qBAAqB,CAACO,OAAtB,CAA8Bd,iBAA9B,EAAiD,CAAjD,EAAoDa,CAApD;AACH;AACJ,KALD;;AAMA,QAAME,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,aAAMR,qBAAqB,CAACS,UAAtB,CAAiChB,iBAAjC,CAAN;AAAA,KAAzB;;AACAF,IAAAA,0BAA0B,CAACE,iBAAD,EAAoBU,aAApB,EAAmCK,gBAAnC,CAA1B;AACH,GAzBD;AA0BH,CA3BM","sourcesContent":["export const createWrapChannelMergerNode = (createInvalidStateError, createNativeAudioNode, monitorConnectionsFunction) => {\n    return (nativeContext, channelMergerNode) => {\n        channelMergerNode.channelCount = 1;\n        channelMergerNode.channelCountMode = 'explicit';\n        Object.defineProperty(channelMergerNode, 'channelCount', {\n            get: () => 1,\n            set: () => {\n                throw createInvalidStateError();\n            }\n        });\n        Object.defineProperty(channelMergerNode, 'channelCountMode', {\n            get: () => 'explicit',\n            set: () => {\n                throw createInvalidStateError();\n            }\n        });\n        // Bug #20: Safari requires a connection of any kind to treat the input signal correctly.\n        const audioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        const whenConnected = () => {\n            const length = channelMergerNode.numberOfInputs;\n            for (let i = 0; i < length; i += 1) {\n                audioBufferSourceNode.connect(channelMergerNode, 0, i);\n            }\n        };\n        const whenDisconnected = () => audioBufferSourceNode.disconnect(channelMergerNode);\n        monitorConnectionsFunction(channelMergerNode, whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wrap-channel-merger-node.js.map"]},"metadata":{},"sourceType":"module"}