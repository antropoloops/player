{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createGainNodeRendererFactory = function createGainNodeRendererFactory(connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeGainNodes = new WeakMap();\n\n    var createGainNode = function createGainNode(proxy, nativeOfflineAudioContext, trace) {\n      var nativeGainNode, nativeGainNodeIsOwnedByContext, options;\n      return _regeneratorRuntime.async(function createGainNode$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              nativeGainNode = getNativeAudioNode(proxy); // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n              nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n\n              if (!nativeGainNodeIsOwnedByContext) {\n                options = {\n                  channelCount: nativeGainNode.channelCount,\n                  channelCountMode: nativeGainNode.channelCountMode,\n                  channelInterpretation: nativeGainNode.channelInterpretation,\n                  gain: nativeGainNode.gain.value\n                };\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n              }\n\n              renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n\n              if (nativeGainNodeIsOwnedByContext) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain, trace));\n\n            case 7:\n              _context.next = 11;\n              break;\n\n            case 9:\n              _context.next = 11;\n              return _regeneratorRuntime.awrap(connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain, trace));\n\n            case 11:\n              _context.next = 13;\n              return _regeneratorRuntime.awrap(renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode, trace));\n\n            case 13:\n              return _context.abrupt(\"return\", nativeGainNode);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext, trace) {\n        var renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeGainNode !== undefined) {\n          return Promise.resolve(renderedNativeGainNode);\n        }\n\n        return createGainNode(proxy, nativeOfflineAudioContext, trace);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/gain-node-renderer-factory.js"],"names":["isOwnedByContext","createGainNodeRendererFactory","connectAudioParam","createNativeGainNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeGainNodes","WeakMap","createGainNode","proxy","nativeOfflineAudioContext","trace","nativeGainNode","nativeGainNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","gain","value","set","render","renderedNativeGainNode","get","undefined","Promise","resolve"],"mappings":";AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AACA,OAAO,IAAMC,6BAA6B,GAAG,SAAhCA,6BAAgC,CAACC,iBAAD,EAAoBC,oBAApB,EAA0CC,kBAA1C,EAA8DC,gBAA9D,EAAgFC,uBAAhF,EAA4G;AACrJ,SAAO,YAAM;AACT,QAAMC,uBAAuB,GAAG,IAAIC,OAAJ,EAAhC;;AACA,QAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAOC,KAAP,EAAcC,yBAAd,EAAyCC,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,cAAAA,cADe,GACET,kBAAkB,CAACM,KAAD,CADpB,EAEnB;;AACMI,cAAAA,8BAHa,GAGoBd,gBAAgB,CAACa,cAAD,EAAiBF,yBAAjB,CAHpC;;AAInB,kBAAI,CAACG,8BAAL,EAAqC;AAC3BC,gBAAAA,OAD2B,GACjB;AACZC,kBAAAA,YAAY,EAAEH,cAAc,CAACG,YADjB;AAEZC,kBAAAA,gBAAgB,EAAEJ,cAAc,CAACI,gBAFrB;AAGZC,kBAAAA,qBAAqB,EAAEL,cAAc,CAACK,qBAH1B;AAIZC,kBAAAA,IAAI,EAAEN,cAAc,CAACM,IAAf,CAAoBC;AAJd,iBADiB;AAOjCP,gBAAAA,cAAc,GAAGV,oBAAoB,CAACQ,yBAAD,EAA4BI,OAA5B,CAArC;AACH;;AACDR,cAAAA,uBAAuB,CAACc,GAAxB,CAA4BV,yBAA5B,EAAuDE,cAAvD;;AAbmB,kBAcdC,8BAdc;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAeTT,gBAAgB,CAACM,yBAAD,EAA4BD,KAAK,CAACS,IAAlC,EAAwCN,cAAc,CAACM,IAAvD,EAA6DP,KAA7D,CAfP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,+CAkBTV,iBAAiB,CAACS,yBAAD,EAA4BD,KAAK,CAACS,IAAlC,EAAwCN,cAAc,CAACM,IAAvD,EAA6DP,KAA7D,CAlBR;;AAAA;AAAA;AAAA,+CAoBbN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCE,cAAnC,EAAmDD,KAAnD,CApBV;;AAAA;AAAA,+CAqBZC,cArBY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAvB;;AAuBA,WAAO;AACHS,MAAAA,MADG,kBACIZ,KADJ,EACWC,yBADX,EACsCC,KADtC,EAC6C;AAC5C,YAAMW,sBAAsB,GAAGhB,uBAAuB,CAACiB,GAAxB,CAA4Bb,yBAA5B,CAA/B;;AACA,YAAIY,sBAAsB,KAAKE,SAA/B,EAA0C;AACtC,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,sBAAhB,CAAP;AACH;;AACD,eAAOd,cAAc,CAACC,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,CAArB;AACH;AAPE,KAAP;AASH,GAlCD;AAmCH,CApCM","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createGainNodeRendererFactory = (connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeGainNodes = new WeakMap();\n        const createGainNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeGainNode = getNativeAudioNode(proxy);\n            // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n            if (!nativeGainNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeGainNode.channelCount,\n                    channelCountMode: nativeGainNode.channelCountMode,\n                    channelInterpretation: nativeGainNode.channelInterpretation,\n                    gain: nativeGainNode.gain.value\n                };\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n            if (!nativeGainNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode, trace);\n            return nativeGainNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeGainNode !== undefined) {\n                    return Promise.resolve(renderedNativeGainNode);\n                }\n                return createGainNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/gain-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}