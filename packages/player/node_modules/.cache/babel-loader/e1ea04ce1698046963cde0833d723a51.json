{"ast":null,"code":"export class KeyboardControler {\n  constructor(audioset, control) {\n    this.control = control;\n    this.active = true;\n    this.pressed = {};\n    this.clipIdToKey = {};\n    this.keyToClipId = {};\n    audioset.clips.forEach(clip => {\n      const key = clip.keyMap.toUpperCase();\n      this.clipIdToKey[clip.id] = key;\n      this.keyToClipId[key] = clip.id;\n    });\n  }\n\n  setKey(clipId, key) {\n    const oldKey = this.clipIdToKey[clipId];\n    if (oldKey) this.keyToClipId[oldKey] = undefined;\n    key = key.toUpperCase();\n    this.keyToClipId[key] = clipId;\n    this.clipIdToKey[clipId] = key;\n  }\n\n  keyDown(key) {\n    if (!this.active) return;\n    key = key.toUpperCase();\n    if (this.pressed[key]) return;\n    this.pressed[key] = true;\n    const clipId = this.keyToClipId[key];\n    if (clipId) this.control.startClip(clipId, 0);\n  }\n\n  keyUp(key) {\n    if (!this.active) return;\n    key = key.toUpperCase();\n    this.pressed[key] = false;\n    const clipId = this.keyToClipId[key];\n    if (clipId) this.control.stopClip(clipId, 0);\n  }\n\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/Player/KeyboardControler.ts"],"names":["KeyboardControler","constructor","audioset","control","active","pressed","clipIdToKey","keyToClipId","clips","forEach","clip","key","keyMap","toUpperCase","id","setKey","clipId","oldKey","undefined","keyDown","startClip","keyUp","stopClip"],"mappings":"AAOA,OAAO,MAAMA,iBAAN,CAAwB;AAM7BC,EAAAA,WAAW,CAACC,QAAD,EAA6BC,OAA7B,EAA+C;AAAA,SAAlBA,OAAkB,GAAlBA,OAAkB;AAAA,SALnDC,MAKmD,GALjC,IAKiC;AAAA,SAJ1DC,OAI0D,GAJvB,EAIuB;AAAA,SAH1DC,WAG0D,GAHpB,EAGoB;AAAA,SAF1DC,WAE0D,GAFR,EAEQ;AACxDL,IAAAA,QAAQ,CAACM,KAAT,CAAeC,OAAf,CAAwBC,IAAD,IAAU;AAC/B,YAAMC,GAAG,GAAGD,IAAI,CAACE,MAAL,CAAYC,WAAZ,EAAZ;AACA,WAAKP,WAAL,CAAiBI,IAAI,CAACI,EAAtB,IAA4BH,GAA5B;AACA,WAAKJ,WAAL,CAAiBI,GAAjB,IAAwBD,IAAI,CAACI,EAA7B;AACD,KAJD;AAKD;;AAEMC,EAAAA,MAAP,CAAcC,MAAd,EAA8BL,GAA9B,EAA2C;AACzC,UAAMM,MAAM,GAAG,KAAKX,WAAL,CAAiBU,MAAjB,CAAf;AACA,QAAIC,MAAJ,EAAY,KAAKV,WAAL,CAAiBU,MAAjB,IAA2BC,SAA3B;AACZP,IAAAA,GAAG,GAAGA,GAAG,CAACE,WAAJ,EAAN;AACA,SAAKN,WAAL,CAAiBI,GAAjB,IAAwBK,MAAxB;AACA,SAAKV,WAAL,CAAiBU,MAAjB,IAA2BL,GAA3B;AACD;;AAEMQ,EAAAA,OAAP,CAAeR,GAAf,EAA4B;AAC1B,QAAI,CAAC,KAAKP,MAAV,EAAkB;AAElBO,IAAAA,GAAG,GAAGA,GAAG,CAACE,WAAJ,EAAN;AACA,QAAI,KAAKR,OAAL,CAAaM,GAAb,CAAJ,EAAuB;AACvB,SAAKN,OAAL,CAAaM,GAAb,IAAoB,IAApB;AAEA,UAAMK,MAAM,GAAG,KAAKT,WAAL,CAAiBI,GAAjB,CAAf;AACA,QAAIK,MAAJ,EAAY,KAAKb,OAAL,CAAaiB,SAAb,CAAuBJ,MAAvB,EAA+B,CAA/B;AACb;;AACMK,EAAAA,KAAP,CAAaV,GAAb,EAA0B;AACxB,QAAI,CAAC,KAAKP,MAAV,EAAkB;AAElBO,IAAAA,GAAG,GAAGA,GAAG,CAACE,WAAJ,EAAN;AACA,SAAKR,OAAL,CAAaM,GAAb,IAAoB,KAApB;AAEA,UAAMK,MAAM,GAAG,KAAKT,WAAL,CAAiBI,GAAjB,CAAf;AACA,QAAIK,MAAJ,EAAY,KAAKb,OAAL,CAAamB,QAAb,CAAsBN,MAAtB,EAA8B,CAA9B;AACb;;AAxC4B","sourcesContent":["import { Audioset } from \"../Audioset\";\n\nexport interface Control {\n  startClip(clipId: string, number: number): void;\n  stopClip(clipId: string, number: number): void;\n}\n\nexport class KeyboardControler {\n  public active: boolean = true;\n  pressed: Record<string, boolean> = {};\n  clipIdToKey: Record<string, string> = {};\n  keyToClipId: Record<string, string | undefined> = {};\n\n  constructor(audioset: Audioset, private control: Control) {\n    audioset.clips.forEach((clip) => {\n      const key = clip.keyMap.toUpperCase();\n      this.clipIdToKey[clip.id] = key;\n      this.keyToClipId[key] = clip.id;\n    });\n  }\n\n  public setKey(clipId: string, key: string) {\n    const oldKey = this.clipIdToKey[clipId];\n    if (oldKey) this.keyToClipId[oldKey] = undefined;\n    key = key.toUpperCase();\n    this.keyToClipId[key] = clipId;\n    this.clipIdToKey[clipId] = key;\n  }\n\n  public keyDown(key: string) {\n    if (!this.active) return;\n\n    key = key.toUpperCase();\n    if (this.pressed[key]) return;\n    this.pressed[key] = true;\n\n    const clipId = this.keyToClipId[key];\n    if (clipId) this.control.startClip(clipId, 0);\n  }\n  public keyUp(key: string) {\n    if (!this.active) return;\n\n    key = key.toUpperCase();\n    this.pressed[key] = false;\n\n    const clipId = this.keyToClipId[key];\n    if (clipId) this.control.stopClip(clipId, 0);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}