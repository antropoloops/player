{"ast":null,"code":"import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { cos, halfPi, pi, sin, sqrt } from \"./math.js\";\nimport { solve } from \"./newton.js\";\nexport function foucautSinusoidalRaw(alpha) {\n  var beta = 1 - alpha,\n      equatorial = raw(pi, 0)[0] - raw(-pi, 0)[0],\n      polar = raw(0, halfPi)[1] - raw(0, -halfPi)[1],\n      ratio = sqrt(2 * polar / equatorial);\n\n  function raw(lambda, phi) {\n    var cosphi = cos(phi),\n        sinphi = sin(phi);\n    return [cosphi / (beta + alpha * cosphi) * lambda, beta * phi + alpha * sinphi];\n  }\n\n  function forward(lambda, phi) {\n    var p = raw(lambda, phi);\n    return [p[0] * ratio, p[1] / ratio];\n  }\n\n  function forwardMeridian(phi) {\n    return forward(0, phi)[1];\n  }\n\n  forward.invert = function (x, y) {\n    var phi = solve(forwardMeridian, y),\n        lambda = x / ratio * (alpha + beta / cos(phi));\n    return [lambda, phi];\n  };\n\n  return forward;\n}\nexport default function () {\n  var alpha = 0.5,\n      m = projectionMutator(foucautSinusoidalRaw),\n      p = m(alpha);\n\n  p.alpha = function (_) {\n    return arguments.length ? m(alpha = +_) : alpha;\n  };\n\n  return p.scale(168.725);\n}","map":null,"metadata":{},"sourceType":"module"}