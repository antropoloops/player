{"ast":null,"code":"import _defineProperty from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nvar DEFAULT_OPTIONS = {\n  Q: 1,\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  detune: 0,\n  frequency: 350,\n  gain: 0,\n  type: 'lowpass'\n};\nexport var createBiquadFilterNodeConstructor = function createBiquadFilterNodeConstructor(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext) {\n  return (\n    /*#__PURE__*/\n    function (_audioNodeConstructor) {\n      _inherits(BiquadFilterNode, _audioNodeConstructor);\n\n      function BiquadFilterNode(context) {\n        var _this;\n\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_OPTIONS;\n\n        _classCallCheck(this, BiquadFilterNode);\n\n        var nativeContext = getNativeContext(context);\n\n        var mergedOptions = _objectSpread({}, DEFAULT_OPTIONS, {}, options);\n\n        var nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);\n        var isOffline = isNativeOfflineAudioContext(nativeContext);\n        var biquadFilterNodeRenderer = isOffline ? createBiquadFilterNodeRenderer() : null;\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(BiquadFilterNode).call(this, context, false, nativeBiquadFilterNode, biquadFilterNodeRenderer)); // Bug #80: Edge & Safari do not export the correct values for maxValue and minValue.\n\n        _this._Q = createAudioParam(_assertThisInitialized(_this), isOffline, nativeBiquadFilterNode.Q, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT); // Bug #78: Chrome, Edge, Firefox, Opera & Safari do not export the correct values for maxValue and minValue.\n\n        _this._detune = createAudioParam(_assertThisInitialized(_this), isOffline, nativeBiquadFilterNode.detune, 1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT), -1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT));\n        /*\n         * Bug #77: Edge does not export the correct values for maxValue and minValue. Firefox & Safari do not export the correct value\n         * for minValue.\n         */\n\n        _this._frequency = createAudioParam(_assertThisInitialized(_this), isOffline, nativeBiquadFilterNode.frequency, context.sampleRate / 2, 0); // Bug #79: Chrome, Edge, Firefox, Opera & Safari do not export the correct values for maxValue and minValue.\n\n        _this._gain = createAudioParam(_assertThisInitialized(_this), isOffline, nativeBiquadFilterNode.gain, 40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT), -40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT));\n        _this._nativeBiquadFilterNode = nativeBiquadFilterNode;\n        return _this;\n      }\n\n      _createClass(BiquadFilterNode, [{\n        key: \"getFrequencyResponse\",\n        value: function getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n          this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse); // Bug #68: Only Chrome, Firefox & Opera do throw an error if the parameters differ in their length.\n\n\n          if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n            throw createInvalidAccessError();\n          }\n        }\n      }, {\n        key: \"Q\",\n        get: function get() {\n          return this._Q;\n        }\n      }, {\n        key: \"detune\",\n        get: function get() {\n          return this._detune;\n        }\n      }, {\n        key: \"frequency\",\n        get: function get() {\n          return this._frequency;\n        }\n      }, {\n        key: \"gain\",\n        get: function get() {\n          return this._gain;\n        }\n      }, {\n        key: \"type\",\n        get: function get() {\n          return this._nativeBiquadFilterNode.type;\n        },\n        set: function set(value) {\n          this._nativeBiquadFilterNode.type = value;\n        }\n      }]);\n\n      return BiquadFilterNode;\n    }(audioNodeConstructor)\n  );\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/biquad-filter-node-constructor.js"],"names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","DEFAULT_OPTIONS","Q","channelCount","channelCountMode","channelInterpretation","detune","frequency","gain","type","createBiquadFilterNodeConstructor","audioNodeConstructor","createAudioParam","createBiquadFilterNodeRenderer","createInvalidAccessError","createNativeBiquadFilterNode","getNativeContext","isNativeOfflineAudioContext","context","options","nativeContext","mergedOptions","nativeBiquadFilterNode","isOffline","biquadFilterNodeRenderer","_Q","_detune","Math","log2","_frequency","sampleRate","_gain","log10","_nativeBiquadFilterNode","frequencyHz","magResponse","phaseResponse","getFrequencyResponse","length","value"],"mappings":"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","sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n    Q: 1,\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    detune: 0,\n    frequency: 350,\n    gain: 0,\n    type: 'lowpass'\n};\nexport const createBiquadFilterNodeConstructor = (audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class BiquadFilterNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const biquadFilterNodeRenderer = ((isOffline) ? createBiquadFilterNodeRenderer() : null);\n            super(context, false, nativeBiquadFilterNode, biquadFilterNodeRenderer);\n            // Bug #80: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._Q = createAudioParam(this, isOffline, nativeBiquadFilterNode.Q, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            // Bug #78: Chrome, Edge, Firefox, Opera & Safari do not export the correct values for maxValue and minValue.\n            this._detune = createAudioParam(this, isOffline, nativeBiquadFilterNode.detune, 1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT), -1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT));\n            /*\n             * Bug #77: Edge does not export the correct values for maxValue and minValue. Firefox & Safari do not export the correct value\n             * for minValue.\n             */\n            this._frequency = createAudioParam(this, isOffline, nativeBiquadFilterNode.frequency, context.sampleRate / 2, 0);\n            // Bug #79: Chrome, Edge, Firefox, Opera & Safari do not export the correct values for maxValue and minValue.\n            this._gain = createAudioParam(this, isOffline, nativeBiquadFilterNode.gain, 40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT), -40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT));\n            this._nativeBiquadFilterNode = nativeBiquadFilterNode;\n        }\n        get Q() {\n            return this._Q;\n        }\n        get detune() {\n            return this._detune;\n        }\n        get frequency() {\n            return this._frequency;\n        }\n        get gain() {\n            return this._gain;\n        }\n        get type() {\n            return this._nativeBiquadFilterNode.type;\n        }\n        set type(value) {\n            this._nativeBiquadFilterNode.type = value;\n        }\n        getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n            this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n            // Bug #68: Only Chrome, Firefox & Opera do throw an error if the parameters differ in their length.\n            if ((frequencyHz.length !== magResponse.length) || (magResponse.length !== phaseResponse.length)) {\n                throw createInvalidAccessError();\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/biquad-filter-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}