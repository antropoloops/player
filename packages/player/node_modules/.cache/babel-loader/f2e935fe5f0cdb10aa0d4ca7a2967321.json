{"ast":null,"code":"var _jsxFileName = \"/Users/dani/Antropoloops/atpls-player/src/ui/Player/Player.tsx\";\nimport React from \"react\";\nimport { getActiveAudioContext, player } from \"../../player\";\nimport { Header } from \"../shared/Header\";\nimport { Scroll } from \"../shared/Scroll\";\nimport { useDeviceType } from \"../useDeviceType\";\nimport { Controller } from \"./Controller\";\nimport { Footer } from \"./Footer\";\nimport Preview from \"./Preview\";\nimport { useFullscreen } from \"./useFullscreen\";\nimport { useKeyboardListener } from \"./useKeyboardListener\";\nimport { useResourceLoader } from \"./useResourceLoader\";\nimport { Visuals } from \"./Visuals\";\n\nconst startPlayer = () => getActiveAudioContext().then(() => {\n  player.resources.load();\n  player.control.keyboard.setActive(true);\n});\n\nexport const Player = ({\n  audioset\n}) => {\n  const _useResourceLoader = useResourceLoader(),\n        status = _useResourceLoader.status;\n\n  const fullscreen = useFullscreen();\n  const isReady = status.stage !== \"pending\" && status.stage !== \"error\";\n\n  const _useDeviceType = useDeviceType(),\n        isDesktop = _useDeviceType.isDesktop;\n\n  useKeyboardListener();\n  const isVisual = isDesktop || isReady;\n\n  const toggleFullscreenAndStart = () => {\n    fullscreen.toggle();\n\n    if (!isReady) {\n      startPlayer();\n    }\n  };\n\n  const Sidebar = () => React.createElement(React.Fragment, null, React.createElement(Header, {\n    meta: audioset.meta,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }), React.createElement(Scroll, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, isReady ? React.createElement(Controller, {\n    audioset: audioset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }) : React.createElement(Preview, {\n    audioset: audioset,\n    resourceStatus: status,\n    onStart: startPlayer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }))), React.createElement(Footer, {\n    onFullscreen: () => fullscreen.toggle(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }));\n\n  const isSidebarVisible = !fullscreen.isFull; // useAutoStartAudio(isReady, audioset, handleStart);\n\n  return React.createElement(\"div\", {\n    className: \"App Player\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, isSidebarVisible && React.createElement(Sidebar, {\n    onFullscreen: () => fullscreen.toggle(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), isVisual && React.createElement(\"div\", {\n    className: \"visuals\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(Visuals, {\n    audioset: audioset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  })));\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/Player.tsx"],"names":["React","getActiveAudioContext","player","Header","Scroll","useDeviceType","Controller","Footer","Preview","useFullscreen","useKeyboardListener","useResourceLoader","Visuals","startPlayer","then","resources","load","control","keyboard","setActive","Player","audioset","status","fullscreen","isReady","stage","isDesktop","isVisual","toggleFullscreenAndStart","toggle","Sidebar","meta","isSidebarVisible","isFull"],"mappings":";AAAA,OAAOA,KAAP,MAAiC,OAAjC;AAEA,SAASC,qBAAT,EAAgCC,MAAhC,QAA8C,cAA9C;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,OAAT,QAAwB,WAAxB;;AAMA,MAAMC,WAAW,GAAG,MAClBZ,qBAAqB,GAAGa,IAAxB,CAA6B,MAAM;AACjCZ,EAAAA,MAAM,CAACa,SAAP,CAAiBC,IAAjB;AACAd,EAAAA,MAAM,CAACe,OAAP,CAAeC,QAAf,CAAwBC,SAAxB,CAAkC,IAAlC;AACD,CAHD,CADF;;AAMA,OAAO,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA+B;AAAA,6BAChCV,iBAAiB,EADe;AAAA,QAC3CW,MAD2C,sBAC3CA,MAD2C;;AAEnD,QAAMC,UAAU,GAAGd,aAAa,EAAhC;AACA,QAAMe,OAAO,GAAGF,MAAM,CAACG,KAAP,KAAiB,SAAjB,IAA8BH,MAAM,CAACG,KAAP,KAAiB,OAA/D;;AAHmD,yBAI7BpB,aAAa,EAJgB;AAAA,QAI3CqB,SAJ2C,kBAI3CA,SAJ2C;;AAKnDhB,EAAAA,mBAAmB;AAEnB,QAAMiB,QAAQ,GAAGD,SAAS,IAAIF,OAA9B;;AAEA,QAAMI,wBAAwB,GAAG,MAAM;AACrCL,IAAAA,UAAU,CAACM,MAAX;;AACA,QAAI,CAACL,OAAL,EAAc;AACZX,MAAAA,WAAW;AACZ;AACF,GALD;;AAOA,QAAMiB,OAAO,GAAG,MACd,0CACE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAET,QAAQ,CAACU,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,OAAO,GACN,oBAAC,UAAD;AAAY,IAAA,QAAQ,EAAEH,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADM,GAGN,oBAAC,OAAD;AACE,IAAA,QAAQ,EAAEA,QADZ;AAEE,IAAA,cAAc,EAAEC,MAFlB;AAGE,IAAA,OAAO,EAAET,WAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADF,CAFF,EAeE,oBAAC,MAAD;AAAQ,IAAA,YAAY,EAAE,MAAMU,UAAU,CAACM,MAAX,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,CADF;;AAoBA,QAAMG,gBAAgB,GAAG,CAACT,UAAU,CAACU,MAArC,CApCmD,CAqCnD;;AAEA,SACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,gBAAgB,IAAI,oBAAC,OAAD;AAAS,IAAA,YAAY,EAAE,MAAMT,UAAU,CAACM,MAAX,EAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADvB,EAEGF,QAAQ,IACP;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0B,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAEN,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA1B,CAHJ,CADF;AAQD,CA/CM","sourcesContent":["import React, { useEffect } from \"react\";\nimport { Audioset } from \"../../audioset\";\nimport { getActiveAudioContext, player } from \"../../player\";\nimport { Header } from \"../shared/Header\";\nimport { Scroll } from \"../shared/Scroll\";\nimport { useDeviceType } from \"../useDeviceType\";\nimport { Controller } from \"./Controller\";\nimport { Footer } from \"./Footer\";\nimport Preview from \"./Preview\";\nimport { useFullscreen } from \"./useFullscreen\";\nimport { useKeyboardListener } from \"./useKeyboardListener\";\nimport { useResourceLoader } from \"./useResourceLoader\";\nimport { Visuals } from \"./Visuals\";\n\nexport interface PlayerProps {\n  audioset: Audioset;\n}\n\nconst startPlayer = () =>\n  getActiveAudioContext().then(() => {\n    player.resources.load();\n    player.control.keyboard.setActive(true);\n  });\n\nexport const Player = ({ audioset }: PlayerProps) => {\n  const { status } = useResourceLoader();\n  const fullscreen = useFullscreen();\n  const isReady = status.stage !== \"pending\" && status.stage !== \"error\";\n  const { isDesktop } = useDeviceType();\n  useKeyboardListener();\n\n  const isVisual = isDesktop || isReady;\n\n  const toggleFullscreenAndStart = () => {\n    fullscreen.toggle();\n    if (!isReady) {\n      startPlayer();\n    }\n  };\n\n  const Sidebar = () => (\n    <>\n      <Header meta={audioset.meta} />\n      <Scroll>\n        <div className=\"content\">\n          {isReady ? (\n            <Controller audioset={audioset} />\n          ) : (\n            <Preview\n              audioset={audioset}\n              resourceStatus={status}\n              onStart={startPlayer}\n            />\n          )}\n        </div>\n      </Scroll>\n      <Footer onFullscreen={() => fullscreen.toggle()} />\n    </>\n  );\n\n  const isSidebarVisible = !fullscreen.isFull;\n  // useAutoStartAudio(isReady, audioset, handleStart);\n\n  return (\n    <div className=\"App Player\">\n      {isSidebarVisible && <Sidebar onFullscreen={() => fullscreen.toggle()} />}\n      {isVisual && (\n        <div className=\"visuals\">{<Visuals audioset={audioset} />}</div>\n      )}\n    </div>\n  );\n};\n\n"]},"metadata":{},"sourceType":"module"}