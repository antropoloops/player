{"ast":null,"code":"import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { asin, cos, degrees, pi, radians, sign, sin, sqrt } from \"./math.js\";\nimport { solve } from \"./newton.js\";\nexport function hufnagelRaw(a, b, psiMax, ratio) {\n  var k = sqrt(4 * pi / (2 * psiMax + (1 + a - b / 2) * sin(2 * psiMax) + (a + b) / 2 * sin(4 * psiMax) + b / 2 * sin(6 * psiMax))),\n      c = sqrt(ratio * sin(psiMax) * sqrt((1 + a * cos(2 * psiMax) + b * cos(4 * psiMax)) / (1 + a + b))),\n      M = psiMax * mapping(1);\n\n  function radius(psi) {\n    return sqrt(1 + a * cos(2 * psi) + b * cos(4 * psi));\n  }\n\n  function mapping(t) {\n    var psi = t * psiMax;\n    return (2 * psi + (1 + a - b / 2) * sin(2 * psi) + (a + b) / 2 * sin(4 * psi) + b / 2 * sin(6 * psi)) / psiMax;\n  }\n\n  function inversemapping(psi) {\n    return radius(psi) * sin(psi);\n  }\n\n  var forward = function (lambda, phi) {\n    var psi = psiMax * solve(mapping, M * sin(phi) / psiMax, phi / pi);\n    if (isNaN(psi)) psi = psiMax * sign(phi);\n    var kr = k * radius(psi);\n    return [kr * c * lambda / pi * cos(psi), kr / c * sin(psi)];\n  };\n\n  forward.invert = function (x, y) {\n    var psi = solve(inversemapping, y * c / k);\n    return [x * pi / (cos(psi) * k * c * radius(psi)), asin(psiMax * mapping(psi / psiMax) / M)];\n  };\n\n  if (psiMax === 0) {\n    k = sqrt(ratio / pi);\n\n    forward = function (lambda, phi) {\n      return [lambda * k, sin(phi) / k];\n    };\n\n    forward.invert = function (x, y) {\n      return [x / k, asin(y * k)];\n    };\n  }\n\n  return forward;\n}\nexport default function () {\n  var a = 1,\n      b = 0,\n      psiMax = 45 * radians,\n      ratio = 2,\n      mutate = projectionMutator(hufnagelRaw),\n      projection = mutate(a, b, psiMax, ratio);\n\n  projection.a = function (_) {\n    return arguments.length ? mutate(a = +_, b, psiMax, ratio) : a;\n  };\n\n  projection.b = function (_) {\n    return arguments.length ? mutate(a, b = +_, psiMax, ratio) : b;\n  };\n\n  projection.psiMax = function (_) {\n    return arguments.length ? mutate(a, b, psiMax = +_ * radians, ratio) : psiMax * degrees;\n  };\n\n  projection.ratio = function (_) {\n    return arguments.length ? mutate(a, b, psiMax, ratio = +_) : ratio;\n  };\n\n  return projection.scale(180.739);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/hufnagel.js"],"names":["geoProjectionMutator","projectionMutator","asin","cos","degrees","pi","radians","sign","sin","sqrt","solve","hufnagelRaw","a","b","psiMax","ratio","k","c","M","mapping","radius","psi","t","inversemapping","forward","lambda","phi","isNaN","kr","invert","x","y","mutate","projection","_","arguments","length","scale"],"mappings":"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","sourcesContent":["import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { asin, cos, degrees, pi, radians, sign, sin, sqrt } from \"./math.js\";\nimport { solve } from \"./newton.js\";\n\nexport function hufnagelRaw(a, b, psiMax, ratio) {\n  var k = sqrt(\n      (4 * pi) /\n        (2 * psiMax +\n          (1 + a - b / 2) * sin(2 * psiMax) +\n          ((a + b) / 2) * sin(4 * psiMax) +\n          (b / 2) * sin(6 * psiMax))\n    ),\n    c = sqrt(\n      ratio *\n        sin(psiMax) *\n        sqrt((1 + a * cos(2 * psiMax) + b * cos(4 * psiMax)) / (1 + a + b))\n    ),\n    M = psiMax * mapping(1);\n\n  function radius(psi) {\n    return sqrt(1 + a * cos(2 * psi) + b * cos(4 * psi));\n  }\n\n  function mapping(t) {\n    var psi = t * psiMax;\n    return (\n      (2 * psi +\n        (1 + a - b / 2) * sin(2 * psi) +\n        ((a + b) / 2) * sin(4 * psi) +\n        (b / 2) * sin(6 * psi)) /\n      psiMax\n    );\n  }\n\n  function inversemapping(psi) {\n    return radius(psi) * sin(psi);\n  }\n\n  var forward = function(lambda, phi) {\n    var psi = psiMax * solve(mapping, (M * sin(phi)) / psiMax, phi / pi);\n    if (isNaN(psi)) psi = psiMax * sign(phi);\n    var kr = k * radius(psi);\n    return [((kr * c * lambda) / pi) * cos(psi), (kr / c) * sin(psi)];\n  };\n\n  forward.invert = function(x, y) {\n    var psi = solve(inversemapping, (y * c) / k);\n    return [\n      (x * pi) / (cos(psi) * k * c * radius(psi)),\n      asin((psiMax * mapping(psi / psiMax)) / M)\n    ];\n  };\n\n  if (psiMax === 0) {\n    k = sqrt(ratio / pi);\n    forward = function(lambda, phi) {\n      return [lambda * k, sin(phi) / k];\n    };\n    forward.invert = function(x, y) {\n      return [x / k, asin(y * k)];\n    };\n  }\n\n  return forward;\n}\n\nexport default function() {\n  var a = 1,\n    b = 0,\n    psiMax = 45 * radians,\n    ratio = 2,\n    mutate = projectionMutator(hufnagelRaw),\n    projection = mutate(a, b, psiMax, ratio);\n\n  projection.a = function(_) {\n    return arguments.length ? mutate((a = +_), b, psiMax, ratio) : a;\n  };\n  projection.b = function(_) {\n    return arguments.length ? mutate(a, (b = +_), psiMax, ratio) : b;\n  };\n  projection.psiMax = function(_) {\n    return arguments.length\n      ? mutate(a, b, (psiMax = +_ * radians), ratio)\n      : psiMax * degrees;\n  };\n  projection.ratio = function(_) {\n    return arguments.length ? mutate(a, b, psiMax, (ratio = +_)) : ratio;\n  };\n\n  return projection.scale(180.739);\n}\n"]},"metadata":{},"sourceType":"module"}