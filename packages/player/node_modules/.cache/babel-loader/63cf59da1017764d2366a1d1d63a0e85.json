{"ast":null,"code":"import _defineProperty from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { KeyboardControler } from \"./KeyboardControler\";\n\n/**\n * Controls the playing state of clips and tracks\n */\nexport class AudiosetControl {\n  constructor(audioset, listener) {\n    this.listener = listener;\n    this.keyboard = void 0;\n    this.clips = {};\n    this.tracks = {};\n    this.clipIdsOfTrack = {};\n    this.trackIdOfClip = {};\n    this.commands = [];\n    this.clipsCount = 0;\n    this.tracksCount = 0;\n    this.keyboard = new KeyboardControler(audioset, this);\n    audioset.clips.forEach(clip => {\n      this.clips[clip.id] = {\n        state: \"stopped\"\n      };\n      this.trackIdOfClip[clip.id] = clip.trackId;\n    });\n    audioset.tracks.forEach(track => {\n      const volume = track.volume || 1;\n      this.tracks[track.id] = {\n        state: \"stopped\",\n        volume\n      };\n      this.clipIdsOfTrack[track.id] = track.clipIds;\n    });\n  }\n\n  toggleClip(clipId, time) {\n    const clipState = this.clips[clipId];\n\n    if (!clipState) {\n      return;\n    } else if (clipState.state === \"stopped\") {\n      this.startClip(clipId, time);\n    } else if (clipState.state === \"playing\") {\n      this.stopClip(clipId, time);\n    }\n  }\n  /**\n   * Start a clip\n   * @param clipId\n   */\n\n\n  startClip(clipId, time) {\n    const clipState = this.clips[clipId];\n\n    if (!clipState || clipState.state === \"playing\") {\n      return;\n    }\n\n    const trackId = this.trackIdOfClip[clipId];\n    const sameTrackClipIds = this.clipIdsOfTrack[trackId];\n\n    this._emitChanges(() => {\n      sameTrackClipIds.forEach(trackClipId => this._stopClip(trackClipId, time));\n\n      this._startTrack(trackId, time);\n\n      this._startClip(clipId, time);\n    });\n  }\n  /**\n   * Stops a clip\n   */\n\n\n  stopClip(clipId, time) {\n    const clipState = this.clips[clipId];\n\n    if (!clipState || clipState.state === \"stopped\") {\n      return;\n    }\n\n    const trackId = this.trackIdOfClip[clipId];\n\n    this._emitChanges(() => {\n      this._stopClip(clipId, time);\n\n      this._stopTrack(trackId, time);\n    });\n  }\n  /**\n   * Stops all clips\n   */\n\n\n  stopAll(time) {\n    this._emitChanges(() => {\n      Object.keys(this.clips).forEach(clipId => this._stopClip(clipId, time));\n      Object.keys(this.tracks).forEach(trackId => this._stopTrack(trackId, time));\n    });\n  }\n\n  getState() {\n    return {\n      playingClipsCount: this.clipsCount,\n      playingTracksCount: this.tracksCount,\n      clips: _objectSpread({}, this.clips),\n      tracks: _objectSpread({}, this.tracks)\n    };\n  } //// PRIVATE ////\n\n\n  _emitChanges(changes) {\n    changes();\n    this.commands.forEach(command => {\n      this.listener.onControlCommand(command);\n    });\n    this.commands = [];\n    this.listener.onControlStateChanged(this.getState());\n  }\n\n  _startClip(clipId, time) {\n    if (this.clips[clipId].state === \"playing\") {\n      return;\n    }\n\n    this.clipsCount += 1;\n    this.clips[clipId] = {\n      state: \"playing\"\n    };\n    this.commands.push({\n      command: \"startClip\",\n      clipId,\n      time\n    });\n  }\n\n  _stopClip(clipId, time) {\n    if (this.clips[clipId].state === \"stopped\") {\n      return;\n    }\n\n    this.clipsCount -= 1;\n    this.clips[clipId] = {\n      state: \"stopped\"\n    };\n    this.commands.push({\n      command: \"stopClip\",\n      clipId,\n      time\n    });\n  }\n\n  _startTrack(trackId, time) {\n    const trackState = this.tracks[trackId];\n\n    if (trackState.state === \"playing\") {\n      return;\n    }\n\n    this.tracksCount += 1;\n    this.tracks[trackId] = {\n      state: \"playing\",\n      volume: trackState.volume\n    };\n    this.commands.push({\n      command: \"startTrack\",\n      trackId,\n      time\n    });\n  }\n\n  _stopTrack(trackId, time) {\n    const trackState = this.tracks[trackId];\n\n    if (trackState.state === \"stopped\") {\n      return;\n    }\n\n    this.tracksCount -= 1;\n    this.tracks[trackId] = {\n      state: \"stopped\",\n      volume: trackState.volume\n    };\n    this.commands.push({\n      command: \"stopTrack\",\n      trackId,\n      time\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/AudiosetControl.ts"],"names":["KeyboardControler","AudiosetControl","constructor","audioset","listener","keyboard","clips","tracks","clipIdsOfTrack","trackIdOfClip","commands","clipsCount","tracksCount","forEach","clip","id","state","trackId","track","volume","clipIds","toggleClip","clipId","time","clipState","startClip","stopClip","sameTrackClipIds","_emitChanges","trackClipId","_stopClip","_startTrack","_startClip","_stopTrack","stopAll","Object","keys","getState","playingClipsCount","playingTracksCount","changes","command","onControlCommand","onControlStateChanged","push","trackState"],"mappings":"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","sourcesContent":["import { Audioset, Clip } from \"../Audioset\";\nimport { KeyboardControler } from \"./KeyboardControler\";\n\nexport type PlayingState = \"stopped\" | \"playing\"; // | \"playScheduled\" |  \"stopScheduled\";\n\nexport interface ClipPlayingState {\n  readonly state: PlayingState;\n}\n\nexport interface TrackPlayingState {\n  readonly state: PlayingState;\n  readonly volume: number;\n}\n\nexport interface StartClip {\n  command: \"startClip\";\n  clipId: string;\n  time: number;\n}\nexport interface StopClip {\n  command: \"stopClip\";\n  clipId: string;\n  time: number;\n}\nexport interface StartTrack {\n  command: \"startTrack\";\n  trackId: string;\n  time: number;\n}\nexport interface StopTrack {\n  command: \"stopTrack\";\n  trackId: string;\n  time: number;\n}\n\nexport type ControlCommand = StartClip | StopClip | StartTrack | StopTrack;\n\ntype ClipPlayingStateByClipId = Record<string, ClipPlayingState>;\ntype TrackPlayingStateByTrackId = Record<string, TrackPlayingState>;\n\nexport interface ControlState {\n  playingClipsCount: number;\n  playingTracksCount: number;\n  clips: ClipPlayingStateByClipId;\n  tracks: TrackPlayingStateByTrackId;\n}\n\nexport interface ControlListener {\n  onControlStateChanged: (state: ControlState) => void;\n  onControlCommand: (command: ControlCommand) => void;\n}\n\n/**\n * Controls the playing state of clips and tracks\n */\nexport class AudiosetControl {\n  public readonly keyboard: KeyboardControler;\n  private clips: ClipPlayingStateByClipId = {};\n  private tracks: TrackPlayingStateByTrackId = {};\n  private clipIdsOfTrack: Record<string, string[]> = {};\n  private trackIdOfClip: Record<string, string> = {};\n  private commands: ControlCommand[] = [];\n  private clipsCount: number = 0;\n  private tracksCount: number = 0;\n\n  constructor(audioset: Audioset, private listener: ControlListener) {\n    this.keyboard = new KeyboardControler(audioset, this);\n    audioset.clips.forEach((clip: Clip) => {\n      this.clips[clip.id] = { state: \"stopped\" };\n      this.trackIdOfClip[clip.id] = clip.trackId;\n    });\n    audioset.tracks.forEach(track => {\n      const volume = track.volume || 1;\n      this.tracks[track.id] = { state: \"stopped\", volume };\n      this.clipIdsOfTrack[track.id] = track.clipIds;\n    });\n  }\n\n  public toggleClip(clipId: string, time: number) {\n    const clipState = this.clips[clipId];\n    if (!clipState) {\n      return;\n    } else if (clipState.state === \"stopped\") {\n      this.startClip(clipId, time);\n    } else if (clipState.state === \"playing\") {\n      this.stopClip(clipId, time);\n    }\n  }\n\n  /**\n   * Start a clip\n   * @param clipId\n   */\n  public startClip(clipId: string, time: number) {\n    const clipState = this.clips[clipId];\n    if (!clipState || clipState.state === \"playing\") {\n      return;\n    }\n\n    const trackId = this.trackIdOfClip[clipId];\n    const sameTrackClipIds = this.clipIdsOfTrack[trackId];\n    this._emitChanges(() => {\n      sameTrackClipIds.forEach(trackClipId =>\n        this._stopClip(trackClipId, time),\n      );\n      this._startTrack(trackId, time);\n      this._startClip(clipId, time);\n    });\n  }\n\n  /**\n   * Stops a clip\n   */\n  public stopClip(clipId: string, time: number) {\n    const clipState = this.clips[clipId];\n    if (!clipState || clipState.state === \"stopped\") {\n      return;\n    }\n\n    const trackId = this.trackIdOfClip[clipId];\n\n    this._emitChanges(() => {\n      this._stopClip(clipId, time);\n      this._stopTrack(trackId, time);\n    });\n  }\n\n  /**\n   * Stops all clips\n   */\n  public stopAll(time: number) {\n    this._emitChanges(() => {\n      Object.keys(this.clips).forEach(clipId => this._stopClip(clipId, time));\n      Object.keys(this.tracks).forEach(trackId =>\n        this._stopTrack(trackId, time),\n      );\n    });\n  }\n\n  public getState(): ControlState {\n    return {\n      playingClipsCount: this.clipsCount,\n      playingTracksCount: this.tracksCount,\n      clips: { ...this.clips },\n      tracks: { ...this.tracks },\n    };\n  }\n\n  //// PRIVATE ////\n  private _emitChanges(changes: () => void) {\n    changes();\n\n    this.commands.forEach(command => {\n      this.listener.onControlCommand(command);\n    });\n    this.commands = [];\n\n    this.listener.onControlStateChanged(this.getState());\n  }\n\n  private _startClip(clipId: string, time: number) {\n    if (this.clips[clipId].state === \"playing\") {\n      return;\n    }\n\n    this.clipsCount += 1;\n    this.clips[clipId] = { state: \"playing\" };\n    this.commands.push({ command: \"startClip\", clipId, time });\n  }\n  private _stopClip(clipId: string, time: number) {\n    if (this.clips[clipId].state === \"stopped\") {\n      return;\n    }\n\n    this.clipsCount -= 1;\n    this.clips[clipId] = { state: \"stopped\" };\n    this.commands.push({ command: \"stopClip\", clipId, time });\n  }\n  private _startTrack(trackId: string, time: number) {\n    const trackState = this.tracks[trackId];\n    if (trackState.state === \"playing\") {\n      return;\n    }\n\n    this.tracksCount += 1;\n    this.tracks[trackId] = { state: \"playing\", volume: trackState.volume };\n    this.commands.push({ command: \"startTrack\", trackId, time });\n  }\n  private _stopTrack(trackId: string, time: number) {\n    const trackState = this.tracks[trackId];\n    if (trackState.state === \"stopped\") {\n      return;\n    }\n\n    this.tracksCount -= 1;\n    this.tracks[trackId] = { state: \"stopped\", volume: trackState.volume };\n    this.commands.push({ command: \"stopTrack\", trackId, time });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}