{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDynamicsCompressorNodeRendererFactory = (connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeDynamicsCompressorNodes = new WeakMap();\n\n    const createDynamicsCompressorNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeDynamicsCompressorNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n       * created again.\n       */\n\n      const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n\n      if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n        const options = {\n          attack: nativeDynamicsCompressorNode.attack.value,\n          channelCount: nativeDynamicsCompressorNode.channelCount,\n          channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n          channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n          knee: nativeDynamicsCompressorNode.knee.value,\n          ratio: nativeDynamicsCompressorNode.ratio.value,\n          release: nativeDynamicsCompressorNode.release.value,\n          threshold: nativeDynamicsCompressorNode.threshold.value\n        };\n        nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n\n      if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold, trace);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold, trace);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode, trace);\n      return nativeDynamicsCompressorNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeDynamicsCompressorNode !== undefined) {\n          return Promise.resolve(renderedNativeDynamicsCompressorNode);\n        }\n\n        return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/dynamics-compressor-node-renderer-factory.js"],"names":["isOwnedByContext","createDynamicsCompressorNodeRendererFactory","connectAudioParam","createNativeDynamicsCompressorNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeDynamicsCompressorNodes","WeakMap","createDynamicsCompressorNode","proxy","nativeOfflineAudioContext","trace","nativeDynamicsCompressorNode","nativeDynamicsCompressorNodeIsOwnedByContext","options","attack","value","channelCount","channelCountMode","channelInterpretation","knee","ratio","release","threshold","set","render","renderedNativeDynamicsCompressorNode","get","undefined","Promise","resolve"],"mappings":"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","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDynamicsCompressorNodeRendererFactory = (connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeDynamicsCompressorNodes = new WeakMap();\n        const createDynamicsCompressorNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeDynamicsCompressorNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n             * created again.\n             */\n            const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                const options = {\n                    attack: nativeDynamicsCompressorNode.attack.value,\n                    channelCount: nativeDynamicsCompressorNode.channelCount,\n                    channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n                    channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n                    knee: nativeDynamicsCompressorNode.knee.value,\n                    ratio: nativeDynamicsCompressorNode.ratio.value,\n                    release: nativeDynamicsCompressorNode.release.value,\n                    threshold: nativeDynamicsCompressorNode.threshold.value\n                };\n                nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode, trace);\n            return nativeDynamicsCompressorNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeDynamicsCompressorNode !== undefined) {\n                    return Promise.resolve(renderedNativeDynamicsCompressorNode);\n                }\n                return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/dynamics-compressor-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}