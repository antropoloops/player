{"ast":null,"code":"import _classCallCheck from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport var createMinimalAudioContextConstructor = function createMinimalAudioContextConstructor(createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor) {\n  return /*#__PURE__*/function (_minimalBaseAudioCont) {\n    _inherits(MinimalAudioContext, _minimalBaseAudioCont);\n\n    var _super = _createSuper(MinimalAudioContext);\n\n    function MinimalAudioContext() {\n      var _this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _classCallCheck(this, MinimalAudioContext);\n\n      if (nativeAudioContextConstructor === null) {\n        throw new Error('Missing the native AudioContext constructor.');\n      }\n\n      var nativeAudioContext = new nativeAudioContextConstructor(options); // Bug #131 Safari returns null when there are four other AudioContexts running already.\n\n      if (nativeAudioContext === null) {\n        throw createUnknownError();\n      } // Bug #51 Only Chrome and Opera throw an error if the given latencyHint is invalid.\n\n\n      if (!isValidLatencyHint(options.latencyHint)) {\n        throw new TypeError(\"The provided value '\".concat(options.latencyHint, \"' is not a valid enum value of type AudioContextLatencyCategory.\"));\n      } // Bug #150 Only Chrome, Firefox and Opera support setting the sampleRate.\n\n\n      if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n        throw createNotSupportedError();\n      }\n\n      _this = _super.call(this, nativeAudioContext, 2);\n      var latencyHint = options.latencyHint;\n      var sampleRate = nativeAudioContext.sampleRate; // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n\n      _this._baseLatency = typeof nativeAudioContext.baseLatency === 'number' ? nativeAudioContext.baseLatency : latencyHint === 'balanced' ? 512 / sampleRate : latencyHint === 'interactive' || latencyHint === undefined ? 256 / sampleRate : latencyHint === 'playback' ? 1024 / sampleRate :\n      /*\n       * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n       * ScriptProcessorNode.\n       */\n      Math.max(2, Math.min(128, Math.round(latencyHint * sampleRate / 128))) * 128 / sampleRate;\n      _this._nativeAudioContext = nativeAudioContext;\n      _this._state = null;\n      /*\n       * Bug #34: Chrome and Opera pretend to be running right away, but fire an onstatechange event when the state actually\n       * changes to 'running'.\n       */\n\n      if (nativeAudioContext.state === 'running') {\n        _this._state = 'suspended';\n\n        var revokeState = function revokeState() {\n          if (_this._state === 'suspended') {\n            _this._state = null;\n          }\n\n          nativeAudioContext.removeEventListener('statechange', revokeState);\n        };\n\n        nativeAudioContext.addEventListener('statechange', revokeState);\n      }\n\n      return _this;\n    }\n\n    _createClass(MinimalAudioContext, [{\n      key: \"close\",\n      value: function close() {\n        // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n        if (this.state === 'closed') {\n          return this._nativeAudioContext.close().then(function () {\n            throw createInvalidStateError();\n          });\n        } // Bug #34: If the state was set to suspended before it should be revoked now.\n\n\n        if (this._state === 'suspended') {\n          this._state = null;\n        }\n\n        return this._nativeAudioContext.close();\n        /*\n         * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n         * ...then(() => deleteAudioGraph(this, this._nativeAudioContext));\n         */\n      }\n    }, {\n      key: \"resume\",\n      value: function resume() {\n        var _this2 = this;\n\n        if (this._state === 'suspended') {\n          return new Promise(function (resolve, reject) {\n            var resolvePromise = function resolvePromise() {\n              _this2._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n\n              if (_this2._nativeAudioContext.state === 'running') {\n                resolve();\n              } else {\n                _this2.resume().then(resolve, reject);\n              }\n            };\n\n            _this2._nativeAudioContext.addEventListener('statechange', resolvePromise);\n          });\n        }\n\n        return this._nativeAudioContext.resume().catch(function (err) {\n          // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.\n          // Bug #56: Safari invokes the catch handler but without an error.\n          if (err === undefined || err.code === 15) {\n            throw createInvalidStateError();\n          }\n\n          throw err; // tslint:disable-line:rxjs-throw-error\n        });\n      }\n    }, {\n      key: \"suspend\",\n      value: function suspend() {\n        return this._nativeAudioContext.suspend().catch(function (err) {\n          // Bug #56: Safari invokes the catch handler but without an error.\n          if (err === undefined) {\n            throw createInvalidStateError();\n          }\n\n          throw err; // tslint:disable-line:rxjs-throw-error\n        });\n      }\n    }, {\n      key: \"baseLatency\",\n      get: function get() {\n        return this._baseLatency;\n      }\n    }, {\n      key: \"state\",\n      get: function get() {\n        return this._state !== null ? this._state : this._nativeAudioContext.state;\n      }\n    }]);\n\n    return MinimalAudioContext;\n  }(minimalBaseAudioContextConstructor);\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/minimal-audio-context-constructor.js"],"names":["isValidLatencyHint","createMinimalAudioContextConstructor","createInvalidStateError","createNotSupportedError","createUnknownError","minimalBaseAudioContextConstructor","nativeAudioContextConstructor","options","Error","nativeAudioContext","latencyHint","TypeError","sampleRate","undefined","_baseLatency","baseLatency","Math","max","min","round","_nativeAudioContext","_state","state","revokeState","removeEventListener","addEventListener","close","then","Promise","resolve","reject","resolvePromise","resume","catch","err","code","suspend"],"mappings":"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","sourcesContent":["import { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createMinimalAudioContextConstructor = (createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor) => {\n    return class MinimalAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(options = {}) {\n            if (nativeAudioContextConstructor === null) {\n                throw new Error('Missing the native AudioContext constructor.');\n            }\n            const nativeAudioContext = new nativeAudioContextConstructor(options);\n            // Bug #131 Safari returns null when there are four other AudioContexts running already.\n            if (nativeAudioContext === null) {\n                throw createUnknownError();\n            }\n            // Bug #51 Only Chrome and Opera throw an error if the given latencyHint is invalid.\n            if (!isValidLatencyHint(options.latencyHint)) {\n                throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n            }\n            // Bug #150 Only Chrome, Firefox and Opera support setting the sampleRate.\n            if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n                throw createNotSupportedError();\n            }\n            super(nativeAudioContext, 2);\n            const { latencyHint } = options;\n            const { sampleRate } = nativeAudioContext;\n            // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n            this._baseLatency = (typeof nativeAudioContext.baseLatency === 'number')\n                ? nativeAudioContext.baseLatency\n                : (latencyHint === 'balanced')\n                    ? (512 / sampleRate)\n                    : (latencyHint === 'interactive' || latencyHint === undefined)\n                        ? (256 / sampleRate)\n                        : (latencyHint === 'playback')\n                            ? (1024 / sampleRate)\n                            /*\n                             * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n                             * ScriptProcessorNode.\n                             */\n                            : ((Math.max(2, Math.min(128, Math.round((latencyHint * sampleRate) / 128))) * 128) / sampleRate);\n            this._nativeAudioContext = nativeAudioContext;\n            this._state = null;\n            /*\n             * Bug #34: Chrome and Opera pretend to be running right away, but fire an onstatechange event when the state actually\n             * changes to 'running'.\n             */\n            if (nativeAudioContext.state === 'running') {\n                this._state = 'suspended';\n                const revokeState = () => {\n                    if (this._state === 'suspended') {\n                        this._state = null;\n                    }\n                    nativeAudioContext.removeEventListener('statechange', revokeState);\n                };\n                nativeAudioContext.addEventListener('statechange', revokeState);\n            }\n        }\n        get baseLatency() {\n            return this._baseLatency;\n        }\n        get state() {\n            return (this._state !== null) ? this._state : this._nativeAudioContext.state;\n        }\n        close() {\n            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n            if (this.state === 'closed') {\n                return this._nativeAudioContext\n                    .close()\n                    .then(() => {\n                    throw createInvalidStateError();\n                });\n            }\n            // Bug #34: If the state was set to suspended before it should be revoked now.\n            if (this._state === 'suspended') {\n                this._state = null;\n            }\n            return this._nativeAudioContext.close();\n            /*\n             * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n             * ...then(() => deleteAudioGraph(this, this._nativeAudioContext));\n             */\n        }\n        resume() {\n            if (this._state === 'suspended') {\n                return new Promise((resolve, reject) => {\n                    const resolvePromise = () => {\n                        this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n                        if (this._nativeAudioContext.state === 'running') {\n                            resolve();\n                        }\n                        else {\n                            this\n                                .resume()\n                                .then(resolve, reject);\n                        }\n                    };\n                    this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n                });\n            }\n            return this._nativeAudioContext\n                .resume()\n                .catch((err) => {\n                // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined || err.code === 15) {\n                    throw createInvalidStateError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n        suspend() {\n            return this._nativeAudioContext\n                .suspend()\n                .catch((err) => {\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined) {\n                    throw createInvalidStateError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/minimal-audio-context-constructor.js.map"]},"metadata":{},"sourceType":"module"}