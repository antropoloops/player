{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { filterBuffer } from '../helpers/filter-buffer';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\n\nvar filterFullBuffer = function filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward) {\n  var feedbackLength = feedback.length;\n  var feedforwardLength = feedforward.length;\n  var minLength = Math.min(feedbackLength, feedforwardLength);\n\n  if (feedback[0] !== 1) {\n    for (var i = 0; i < feedbackLength; i += 1) {\n      feedforward[i] /= feedback[0];\n    }\n\n    for (var _i = 1; _i < feedforwardLength; _i += 1) {\n      feedback[_i] /= feedback[0];\n    }\n  }\n\n  var bufferLength = 32;\n  var xBuffer = new Float32Array(bufferLength);\n  var yBuffer = new Float32Array(bufferLength);\n  var filteredBuffer = nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels, renderedBuffer.length, renderedBuffer.sampleRate);\n  var numberOfChannels = renderedBuffer.numberOfChannels;\n\n  for (var _i2 = 0; _i2 < numberOfChannels; _i2 += 1) {\n    var input = renderedBuffer.getChannelData(_i2);\n    var output = filteredBuffer.getChannelData(_i2);\n    xBuffer.fill(0);\n    yBuffer.fill(0);\n    filterBuffer(feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, 0, bufferLength, input, output);\n  }\n\n  return filteredBuffer;\n};\n\nexport var createIIRFilterNodeRendererFactory = function createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, createNativeAudioNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext) {\n  return function (feedback, feedforward) {\n    var renderedNativeAudioNodes = new WeakMap();\n    var filteredBufferPromise = null;\n\n    var createAudioNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(proxy, nativeOfflineAudioContext, trace) {\n        var nativeIIRFilterNode, nativeAudioBufferSourceNode, nativeIIRFilterNodeIsOwnedByContext, partialOfflineAudioContext, filteredBuffer;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                nativeIIRFilterNode = getNativeAudioNode(proxy);\n                nativeAudioBufferSourceNode = null; // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n                nativeIIRFilterNodeIsOwnedByContext = isOwnedByContext(nativeIIRFilterNode, nativeOfflineAudioContext); // Bug #9: Safari does not support IIRFilterNodes.\n\n                if (nativeOfflineAudioContext.createIIRFilter === undefined) {\n                  nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext);\n                } else if (!nativeIIRFilterNodeIsOwnedByContext) {\n                  nativeIIRFilterNode = createNativeAudioNode(nativeOfflineAudioContext, function (ntvCntxt) {\n                    return ntvCntxt.createIIRFilter(feedforward, feedback);\n                  });\n                }\n\n                renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode === null ? nativeIIRFilterNode : nativeAudioBufferSourceNode);\n\n                if (!(nativeAudioBufferSourceNode !== null)) {\n                  _context2.next = 17;\n                  break;\n                }\n\n                if (!(filteredBufferPromise === null)) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                if (!(nativeOfflineAudioContextConstructor === null)) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                throw new Error('Missing the native OfflineAudioContext constructor.');\n\n              case 9:\n                partialOfflineAudioContext = new nativeOfflineAudioContextConstructor( // Bug #47: The AudioDestinationNode in Edge and Safari gets not initialized correctly.\n                proxy.context.destination.channelCount, // Bug #17: Safari does not yet expose the length.\n                proxy.context.length, nativeOfflineAudioContext.sampleRate);\n                filteredBufferPromise = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  var renderedBuffer;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination, trace);\n\n                        case 2:\n                          _context.next = 4;\n                          return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n\n                        case 4:\n                          renderedBuffer = _context.sent;\n                          return _context.abrupt(\"return\", filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward));\n\n                        case 6:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))();\n\n              case 11:\n                _context2.next = 13;\n                return filteredBufferPromise;\n\n              case 13:\n                filteredBuffer = _context2.sent;\n                nativeAudioBufferSourceNode.buffer = filteredBuffer;\n                nativeAudioBufferSourceNode.start(0);\n                return _context2.abrupt(\"return\", nativeAudioBufferSourceNode);\n\n              case 17:\n                _context2.next = 19;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode, trace);\n\n              case 19:\n                return _context2.abrupt(\"return\", nativeIIRFilterNode);\n\n              case 20:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function createAudioNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext, trace) {\n        var renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/iir-filter-node-renderer-factory.js"],"names":["filterBuffer","isOwnedByContext","filterFullBuffer","renderedBuffer","nativeOfflineAudioContext","feedback","feedforward","feedbackLength","length","feedforwardLength","minLength","Math","min","i","bufferLength","xBuffer","Float32Array","yBuffer","filteredBuffer","createBuffer","numberOfChannels","sampleRate","input","getChannelData","output","fill","createIIRFilterNodeRendererFactory","createNativeAudioBufferSourceNode","createNativeAudioNode","getNativeAudioNode","nativeOfflineAudioContextConstructor","renderInputsOfAudioNode","renderNativeOfflineAudioContext","renderedNativeAudioNodes","WeakMap","filteredBufferPromise","createAudioNode","proxy","trace","nativeIIRFilterNode","nativeAudioBufferSourceNode","nativeIIRFilterNodeIsOwnedByContext","createIIRFilter","undefined","ntvCntxt","set","Error","partialOfflineAudioContext","context","destination","channelCount","buffer","start","render","renderedNativeAudioNode","get","Promise","resolve"],"mappings":"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","sourcesContent":["import { filterBuffer } from '../helpers/filter-buffer';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nconst filterFullBuffer = (renderedBuffer, nativeOfflineAudioContext, feedback, feedforward) => {\n    const feedbackLength = feedback.length;\n    const feedforwardLength = feedforward.length;\n    const minLength = Math.min(feedbackLength, feedforwardLength);\n    if (feedback[0] !== 1) {\n        for (let i = 0; i < feedbackLength; i += 1) {\n            feedforward[i] /= feedback[0];\n        }\n        for (let i = 1; i < feedforwardLength; i += 1) {\n            feedback[i] /= feedback[0];\n        }\n    }\n    const bufferLength = 32;\n    const xBuffer = new Float32Array(bufferLength);\n    const yBuffer = new Float32Array(bufferLength);\n    const filteredBuffer = nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels, renderedBuffer.length, renderedBuffer.sampleRate);\n    const numberOfChannels = renderedBuffer.numberOfChannels;\n    for (let i = 0; i < numberOfChannels; i += 1) {\n        const input = renderedBuffer.getChannelData(i);\n        const output = filteredBuffer.getChannelData(i);\n        xBuffer.fill(0);\n        yBuffer.fill(0);\n        filterBuffer(feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, 0, bufferLength, input, output);\n    }\n    return filteredBuffer;\n};\nexport const createIIRFilterNodeRendererFactory = (createNativeAudioBufferSourceNode, createNativeAudioNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n    return (feedback, feedforward) => {\n        const renderedNativeAudioNodes = new WeakMap();\n        let filteredBufferPromise = null;\n        const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeIIRFilterNode = getNativeAudioNode(proxy);\n            let nativeAudioBufferSourceNode = null;\n            // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeIIRFilterNodeIsOwnedByContext = isOwnedByContext(nativeIIRFilterNode, nativeOfflineAudioContext);\n            // Bug #9: Safari does not support IIRFilterNodes.\n            if (nativeOfflineAudioContext.createIIRFilter === undefined) {\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext);\n            }\n            else if (!nativeIIRFilterNodeIsOwnedByContext) {\n                nativeIIRFilterNode = createNativeAudioNode(nativeOfflineAudioContext, (ntvCntxt) => {\n                    return ntvCntxt.createIIRFilter(feedforward, feedback);\n                });\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, (nativeAudioBufferSourceNode === null) ? nativeIIRFilterNode : nativeAudioBufferSourceNode);\n            if (nativeAudioBufferSourceNode !== null) {\n                if (filteredBufferPromise === null) {\n                    if (nativeOfflineAudioContextConstructor === null) {\n                        throw new Error('Missing the native OfflineAudioContext constructor.');\n                    }\n                    const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(\n                    // Bug #47: The AudioDestinationNode in Edge and Safari gets not initialized correctly.\n                    proxy.context.destination.channelCount, \n                    // Bug #17: Safari does not yet expose the length.\n                    proxy.context.length, nativeOfflineAudioContext.sampleRate);\n                    filteredBufferPromise = (async () => {\n                        await renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination, trace);\n                        const renderedBuffer = await renderNativeOfflineAudioContext(partialOfflineAudioContext);\n                        return filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward);\n                    })();\n                }\n                const filteredBuffer = await filteredBufferPromise;\n                nativeAudioBufferSourceNode.buffer = filteredBuffer;\n                nativeAudioBufferSourceNode.start(0);\n                return nativeAudioBufferSourceNode;\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode, trace);\n            return nativeIIRFilterNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/iir-filter-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}