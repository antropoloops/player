{"ast":null,"code":"import debug from \"debug\";\nimport { isAudioset } from \"./Audioset\";\nimport { isBundle } from \"./Bundle\";\nconst log = debug(\"atpls:audioset\");\n\nconst capitalize = str => str.charAt(0).toUpperCase() + str.slice(1);\n\nexport function createAudioset(bundle) {\n  if (!isBundle(bundle)) {\n    log(\"Invalid format %o\", bundle);\n    throw Error(\"Invalida Audioset format\");\n  }\n\n  if (isAudioset(bundle)) {\n    migrateOrDerive(bundle);\n    createIndices(bundle);\n  }\n\n  console.log(\"BUNDLE\", bundle);\n  return bundle;\n}\n\nfunction migrateOrDerive(audioset) {\n  const bpm = audioset.audio.bpm || 120;\n  audioset.clips.forEach(clip => {\n    clip.name = clip.name || capitalize(clip.id);\n    clip.artist = clip.artist || \"\";\n    clip.place = clip.place || \"\";\n    clip.country = clip.country || \"\";\n    clip.audio.volume = clip.audio.volume || 0.7;\n    clip.audio.durationSeconds = 60 * clip.audio.beats / bpm;\n  });\n}\n\nfunction createIndices(audioset) {\n  const index = {\n    clipById: {},\n    trackById: {},\n    clipIdsOfTrack: {},\n    trackIdOfClip: {}\n  };\n  audioset.clips.forEach(clip => {\n    index.clipById[clip.id] = clip;\n    index.trackIdOfClip[clip.id] = clip.trackId;\n  });\n  audioset.tracks.forEach(track => {\n    index.trackById[track.id] = track;\n    index.clipIdsOfTrack[track.id] = track.clipIds;\n  });\n  audioset.index = index;\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/audioset/createAudioset.ts"],"names":["debug","isAudioset","isBundle","log","capitalize","str","charAt","toUpperCase","slice","createAudioset","bundle","Error","migrateOrDerive","createIndices","console","audioset","bpm","audio","clips","forEach","clip","name","id","artist","place","country","volume","durationSeconds","beats","index","clipById","trackById","clipIdsOfTrack","trackIdOfClip","trackId","tracks","track","clipIds"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAoCC,UAApC,QAAsD,YAAtD;AACA,SAAiBC,QAAjB,QAAiC,UAAjC;AAEA,MAAMC,GAAG,GAAGH,KAAK,CAAC,gBAAD,CAAjB;;AACA,MAAMI,UAAU,GAAIC,GAAD,IAAiBA,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BF,GAAG,CAACG,KAAJ,CAAU,CAAV,CAAlE;;AAEA,OAAO,SAASC,cAAT,CAAwBC,MAAxB,EAA6C;AAClD,MAAI,CAACR,QAAQ,CAACQ,MAAD,CAAb,EAAuB;AACrBP,IAAAA,GAAG,CAAC,mBAAD,EAAsBO,MAAtB,CAAH;AACA,UAAMC,KAAK,CAAC,0BAAD,CAAX;AACD;;AACD,MAAIV,UAAU,CAACS,MAAD,CAAd,EAAwB;AACtBE,IAAAA,eAAe,CAACF,MAAD,CAAf;AACAG,IAAAA,aAAa,CAACH,MAAD,CAAb;AACD;;AACDI,EAAAA,OAAO,CAACX,GAAR,CAAY,QAAZ,EAAsBO,MAAtB;AACA,SAAOA,MAAP;AACD;;AAED,SAASE,eAAT,CAAyBG,QAAzB,EAA6C;AAC3C,QAAMC,GAAG,GAAGD,QAAQ,CAACE,KAAT,CAAeD,GAAf,IAAsB,GAAlC;AACAD,EAAAA,QAAQ,CAACG,KAAT,CAAeC,OAAf,CAAuBC,IAAI,IAAI;AAC7BA,IAAAA,IAAI,CAACC,IAAL,GAAYD,IAAI,CAACC,IAAL,IAAajB,UAAU,CAACgB,IAAI,CAACE,EAAN,CAAnC;AACAF,IAAAA,IAAI,CAACG,MAAL,GAAcH,IAAI,CAACG,MAAL,IAAe,EAA7B;AACAH,IAAAA,IAAI,CAACI,KAAL,GAAaJ,IAAI,CAACI,KAAL,IAAc,EAA3B;AACAJ,IAAAA,IAAI,CAACK,OAAL,GAAeL,IAAI,CAACK,OAAL,IAAgB,EAA/B;AACAL,IAAAA,IAAI,CAACH,KAAL,CAAWS,MAAX,GAAoBN,IAAI,CAACH,KAAL,CAAWS,MAAX,IAAqB,GAAzC;AACAN,IAAAA,IAAI,CAACH,KAAL,CAAWU,eAAX,GAA8B,KAAKP,IAAI,CAACH,KAAL,CAAWW,KAAjB,GAA0BZ,GAAvD;AACD,GAPD;AAQD;;AAED,SAASH,aAAT,CAAuBE,QAAvB,EAA2C;AACzC,QAAMc,KAAsB,GAAG;AAC7BC,IAAAA,QAAQ,EAAE,EADmB;AAE7BC,IAAAA,SAAS,EAAE,EAFkB;AAG7BC,IAAAA,cAAc,EAAE,EAHa;AAI7BC,IAAAA,aAAa,EAAE;AAJc,GAA/B;AAMAlB,EAAAA,QAAQ,CAACG,KAAT,CAAeC,OAAf,CAAuBC,IAAI,IAAI;AAC7BS,IAAAA,KAAK,CAACC,QAAN,CAAeV,IAAI,CAACE,EAApB,IAA0BF,IAA1B;AACAS,IAAAA,KAAK,CAACI,aAAN,CAAoBb,IAAI,CAACE,EAAzB,IAA+BF,IAAI,CAACc,OAApC;AACD,GAHD;AAIAnB,EAAAA,QAAQ,CAACoB,MAAT,CAAgBhB,OAAhB,CAAwBiB,KAAK,IAAI;AAC/BP,IAAAA,KAAK,CAACE,SAAN,CAAgBK,KAAK,CAACd,EAAtB,IAA4Bc,KAA5B;AACAP,IAAAA,KAAK,CAACG,cAAN,CAAqBI,KAAK,CAACd,EAA3B,IAAiCc,KAAK,CAACC,OAAvC;AACD,GAHD;AAIAtB,EAAAA,QAAQ,CAACc,KAAT,GAAiBA,KAAjB;AACD","sourcesContent":["import debug from \"debug\";\nimport { Audioset, AudiosetIndexes, isAudioset } from \"./Audioset\";\nimport { Bundle, isBundle } from \"./Bundle\";\n\nconst log = debug(\"atpls:audioset\");\nconst capitalize = (str: string) => str.charAt(0).toUpperCase() + str.slice(1);\n\nexport function createAudioset(bundle: any): Bundle {\n  if (!isBundle(bundle)) {\n    log(\"Invalid format %o\", bundle);\n    throw Error(\"Invalida Audioset format\");\n  }\n  if (isAudioset(bundle)) {\n    migrateOrDerive(bundle);\n    createIndices(bundle);\n  }\n  console.log(\"BUNDLE\", bundle);\n  return bundle;\n}\n\nfunction migrateOrDerive(audioset: Audioset) {\n  const bpm = audioset.audio.bpm || 120;\n  audioset.clips.forEach(clip => {\n    clip.name = clip.name || capitalize(clip.id);\n    clip.artist = clip.artist || \"\";\n    clip.place = clip.place || \"\";\n    clip.country = clip.country || \"\";\n    clip.audio.volume = clip.audio.volume || 0.7;\n    clip.audio.durationSeconds = (60 * clip.audio.beats) / bpm;\n  });\n}\n\nfunction createIndices(audioset: Audioset) {\n  const index: AudiosetIndexes = {\n    clipById: {},\n    trackById: {},\n    clipIdsOfTrack: {},\n    trackIdOfClip: {},\n  };\n  audioset.clips.forEach(clip => {\n    index.clipById[clip.id] = clip;\n    index.trackIdOfClip[clip.id] = clip.trackId;\n  });\n  audioset.tracks.forEach(track => {\n    index.trackById[track.id] = track;\n    index.clipIdsOfTrack[track.id] = track.clipIds;\n  });\n  audioset.index = index;\n}\n"]},"metadata":{},"sourceType":"module"}