{"ast":null,"code":"import _slicedToArray from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/dani/Antropoloops/atpls-player/src/ui/Player/Readme.tsx\";\nimport React, { useMemo, useReducer } from \"react\";\nimport { ArrowDown, ArrowUp } from \"../shared/Icons\";\nimport { Markdown } from \"../shared/Markdown\";\nimport \"./Readme.css\";\nexport const Readme = ({\n  content\n}) => {\n  const _useReducer = useReducer(x => !x, false),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        isOpen = _useReducer2[0],\n        toggleOpen = _useReducer2[1];\n\n  const summary = useMemo(() => createSummary(content || \"\"), [content]);\n  console.log('SUMMARY', summary);\n\n  if (!content.length) {\n    return null;\n  }\n\n  const isLarge = content.length > summary.length;\n  return React.createElement(\"div\", {\n    className: \"Readme\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(Markdown, {\n    markdown: isOpen ? content : summary,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"btn-link\",\n    onClick: toggleOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, isLarge && (isOpen ? React.createElement(ArrowUp, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }) : React.createElement(ArrowDown, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }))));\n};\n\nfunction createSummary(html) {\n  const summary = getSummary(html);\n  const firstOpenTag = summary.indexOf(\"<\");\n  return firstOpenTag === -1 ? summary : summary.slice(0, firstOpenTag);\n}\n\nfunction getSummary(content) {\n  const paragraph = getFirstParagraph(content);\n  return paragraph.length < 100 ? paragraph : getFirstSentence(paragraph);\n}\n\nfunction getFirstParagraph(content) {\n  const nextLineIndex = content.indexOf(\"\\n\");\n  return nextLineIndex > 0 ? content.slice(0, nextLineIndex) : content;\n}\n\nfunction getFirstSentence(paragraph) {\n  const firstPointIndex = paragraph.search(/[.:]/);\n  const firstSentence = firstPointIndex > 0 ? paragraph.slice(0, firstPointIndex) : paragraph;\n  return firstSentence + \".\";\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/Readme.tsx"],"names":["React","useMemo","useReducer","ArrowDown","ArrowUp","Markdown","Readme","content","x","isOpen","toggleOpen","summary","createSummary","console","log","length","isLarge","html","getSummary","firstOpenTag","indexOf","slice","paragraph","getFirstParagraph","getFirstSentence","nextLineIndex","firstPointIndex","search","firstSentence"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,EAAyBC,UAAzB,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,iBAAnC;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAO,cAAP;AAMA,OAAO,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA8B;AAAA,sBACrBL,UAAU,CAACM,CAAC,IAAI,CAACA,CAAP,EAAU,KAAV,CADW;AAAA;AAAA,QAC3CC,MAD2C;AAAA,QACnCC,UADmC;;AAElD,QAAMC,OAAO,GAAGV,OAAO,CAAC,MAAMW,aAAa,CAACL,OAAO,IAAI,EAAZ,CAApB,EAAqC,CAACA,OAAD,CAArC,CAAvB;AAEAM,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,OAAvB;;AAEA,MAAI,CAACJ,OAAO,CAACQ,MAAb,EAAqB;AACnB,WAAO,IAAP;AACD;;AAED,QAAMC,OAAO,GAAGT,OAAO,CAACQ,MAAR,GAAiBJ,OAAO,CAACI,MAAzC;AAEA,SACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAEN,MAAM,GAAGF,OAAH,GAAaI,OAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAQ,IAAA,SAAS,EAAC,UAAlB;AAA6B,IAAA,OAAO,EAAED,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGM,OAAO,KAAKP,MAAM,GAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAiB,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA5B,CADV,CAFF,CADF;AAQD,CApBM;;AAsBP,SAASG,aAAT,CAAuBK,IAAvB,EAAqC;AACnC,QAAMN,OAAO,GAAGO,UAAU,CAACD,IAAD,CAA1B;AACA,QAAME,YAAY,GAAGR,OAAO,CAACS,OAAR,CAAgB,GAAhB,CAArB;AACA,SAAOD,YAAY,KAAK,CAAC,CAAlB,GAAsBR,OAAtB,GAAgCA,OAAO,CAACU,KAAR,CAAc,CAAd,EAAiBF,YAAjB,CAAvC;AACD;;AAED,SAASD,UAAT,CAAoBX,OAApB,EAAqC;AACnC,QAAMe,SAAS,GAAGC,iBAAiB,CAAChB,OAAD,CAAnC;AACA,SAAOe,SAAS,CAACP,MAAV,GAAmB,GAAnB,GAAyBO,SAAzB,GAAqCE,gBAAgB,CAACF,SAAD,CAA5D;AACD;;AAED,SAASC,iBAAT,CAA2BhB,OAA3B,EAAoD;AAClD,QAAMkB,aAAa,GAAGlB,OAAO,CAACa,OAAR,CAAgB,IAAhB,CAAtB;AACA,SAAOK,aAAa,GAAG,CAAhB,GAAoBlB,OAAO,CAACc,KAAR,CAAc,CAAd,EAAiBI,aAAjB,CAApB,GAAsDlB,OAA7D;AACD;;AAED,SAASiB,gBAAT,CAA0BF,SAA1B,EAAqD;AACnD,QAAMI,eAAe,GAAGJ,SAAS,CAACK,MAAV,CAAiB,MAAjB,CAAxB;AACA,QAAMC,aAAa,GACjBF,eAAe,GAAG,CAAlB,GAAsBJ,SAAS,CAACD,KAAV,CAAgB,CAAhB,EAAmBK,eAAnB,CAAtB,GAA4DJ,SAD9D;AAEA,SAAOM,aAAa,GAAG,GAAvB;AACD","sourcesContent":["import React, { useMemo, useReducer } from \"react\";\nimport { ArrowDown, ArrowUp } from \"../shared/Icons\";\nimport { Markdown } from \"../shared/Markdown\";\nimport \"./Readme.css\";\n\ninterface ReadmeProps {\n  content: string;\n}\n\nexport const Readme = ({ content }: ReadmeProps) => {\n  const [isOpen, toggleOpen] = useReducer(x => !x, false);\n  const summary = useMemo(() => createSummary(content || \"\"), [content]);\n\n  console.log('SUMMARY', summary)\n\n  if (!content.length) {\n    return null;\n  }\n\n  const isLarge = content.length > summary.length;\n\n  return (\n    <div className=\"Readme\">\n      <Markdown markdown={isOpen ? content : summary} />\n      <button className=\"btn-link\" onClick={toggleOpen}>\n        {isLarge && (isOpen ? <ArrowUp /> : <ArrowDown />)}\n      </button>\n    </div>\n  );\n};\n\nfunction createSummary(html: string) {\n  const summary = getSummary(html);\n  const firstOpenTag = summary.indexOf(\"<\");\n  return firstOpenTag === -1 ? summary : summary.slice(0, firstOpenTag);\n}\n\nfunction getSummary(content: string) {\n  const paragraph = getFirstParagraph(content);\n  return paragraph.length < 100 ? paragraph : getFirstSentence(paragraph);\n}\n\nfunction getFirstParagraph(content: string): string {\n  const nextLineIndex = content.indexOf(\"\\n\");\n  return nextLineIndex > 0 ? content.slice(0, nextLineIndex) : content;\n}\n\nfunction getFirstSentence(paragraph: string): string {\n  const firstPointIndex = paragraph.search(/[.:]/);\n  const firstSentence =\n    firstPointIndex > 0 ? paragraph.slice(0, firstPointIndex) : paragraph;\n  return firstSentence + \".\";\n}\n"]},"metadata":{},"sourceType":"module"}