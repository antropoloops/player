{"ast":null,"code":"import { wrapIIRFilterNodeGetFrequencyResponseMethod } from '../helpers/wrap-iir-filter-node-get-frequency-response-method';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers'\n};\nexport const createIIRFilterNodeConstructor = (audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {\n  return class IIRFilterNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const mergedOptions = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeIIRFilterNode = createNativeIIRFilterNode(nativeContext, isOffline ? null : context.baseLatency, mergedOptions);\n      const iirFilterNodeRenderer = isOffline ? createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward) : null;\n      super(context, false, nativeIIRFilterNode, iirFilterNodeRenderer); // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.\n      // @todo Write a test which allows other browsers to remain unpatched.\n\n      wrapIIRFilterNodeGetFrequencyResponseMethod(nativeIIRFilterNode);\n      this._nativeIIRFilterNode = nativeIIRFilterNode;\n    }\n\n    getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n      return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/iir-filter-node-constructor.js"],"names":["wrapIIRFilterNodeGetFrequencyResponseMethod","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","createIIRFilterNodeConstructor","audioNodeConstructor","createNativeIIRFilterNode","createIIRFilterNodeRenderer","getNativeContext","isNativeOfflineAudioContext","IIRFilterNode","constructor","context","options","nativeContext","isOffline","mergedOptions","nativeIIRFilterNode","baseLatency","iirFilterNodeRenderer","feedback","feedforward","_nativeIIRFilterNode","getFrequencyResponse","frequencyHz","magResponse","phaseResponse"],"mappings":"AAAA,SAASA,2CAAT,QAA4D,+DAA5D;AACA,MAAMC,eAAe,GAAG;AACpBC,EAAAA,YAAY,EAAE,CADM;AAEpBC,EAAAA,gBAAgB,EAAE,KAFE;AAGpBC,EAAAA,qBAAqB,EAAE;AAHH,CAAxB;AAKA,OAAO,MAAMC,8BAA8B,GAAG,CAACC,oBAAD,EAAuBC,yBAAvB,EAAkDC,2BAAlD,EAA+EC,gBAA/E,EAAiGC,2BAAjG,KAAiI;AAC3K,SAAO,MAAMC,aAAN,SAA4BL,oBAA5B,CAAiD;AACpDM,IAAAA,WAAW,CAACC,OAAD,EAAUC,OAAV,EAAmB;AAC1B,YAAMC,aAAa,GAAGN,gBAAgB,CAACI,OAAD,CAAtC;AACA,YAAMG,SAAS,GAAGN,2BAA2B,CAACK,aAAD,CAA7C;AACA,YAAME,aAAa,GAAG,EAAE,GAAGhB,eAAL;AAAsB,WAAGa;AAAzB,OAAtB;AACA,YAAMI,mBAAmB,GAAGX,yBAAyB,CAACQ,aAAD,EAAgBC,SAAS,GAAG,IAAH,GAAUH,OAAO,CAACM,WAA3C,EAAwDF,aAAxD,CAArD;AACA,YAAMG,qBAAqB,GAAKJ,SAAD,GACzBR,2BAA2B,CAACS,aAAa,CAACI,QAAf,EAAyBJ,aAAa,CAACK,WAAvC,CADF,GAEzB,IAFN;AAGA,YAAMT,OAAN,EAAe,KAAf,EAAsBK,mBAAtB,EAA2CE,qBAA3C,EAR0B,CAS1B;AACA;;AACApB,MAAAA,2CAA2C,CAACkB,mBAAD,CAA3C;AACA,WAAKK,oBAAL,GAA4BL,mBAA5B;AACH;;AACDM,IAAAA,oBAAoB,CAACC,WAAD,EAAcC,WAAd,EAA2BC,aAA3B,EAA0C;AAC1D,aAAO,KAAKJ,oBAAL,CAA0BC,oBAA1B,CAA+CC,WAA/C,EAA4DC,WAA5D,EAAyEC,aAAzE,CAAP;AACH;;AAjBmD,GAAxD;AAmBH,CApBM","sourcesContent":["import { wrapIIRFilterNodeGetFrequencyResponseMethod } from '../helpers/wrap-iir-filter-node-get-frequency-response-method';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers'\n};\nexport const createIIRFilterNodeConstructor = (audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {\n    return class IIRFilterNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeIIRFilterNode = createNativeIIRFilterNode(nativeContext, isOffline ? null : context.baseLatency, mergedOptions);\n            const iirFilterNodeRenderer = ((isOffline)\n                ? createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward)\n                : null);\n            super(context, false, nativeIIRFilterNode, iirFilterNodeRenderer);\n            // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.\n            // @todo Write a test which allows other browsers to remain unpatched.\n            wrapIIRFilterNodeGetFrequencyResponseMethod(nativeIIRFilterNode);\n            this._nativeIIRFilterNode = nativeIIRFilterNode;\n        }\n        getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n            return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/iir-filter-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}