{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createChannelMergerNodeRendererFactory = function createChannelMergerNodeRendererFactory(createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeAudioNodes = new WeakMap();\n\n    var createAudioNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext, trace) {\n        var nativeAudioNode, nativeAudioNodeIsOwnedByContext, options;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeAudioNode = getNativeAudioNode(proxy); // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n                nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n\n                if (!nativeAudioNodeIsOwnedByContext) {\n                  options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfInputs: nativeAudioNode.numberOfInputs\n                  };\n                  nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);\n                }\n\n                renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n                _context.next = 6;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode, trace);\n\n              case 6:\n                return _context.abrupt(\"return\", nativeAudioNode);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createAudioNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext, trace) {\n        var renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/channel-merger-node-renderer-factory.js"],"names":["isOwnedByContext","createChannelMergerNodeRendererFactory","createNativeChannelMergerNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeAudioNodes","WeakMap","createAudioNode","proxy","nativeOfflineAudioContext","trace","nativeAudioNode","nativeAudioNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","numberOfInputs","set","render","renderedNativeAudioNode","get","undefined","Promise","resolve"],"mappings":";;AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AACA,OAAO,IAAMC,sCAAsC,GAAG,SAAzCA,sCAAyC,CAACC,6BAAD,EAAgCC,kBAAhC,EAAoDC,uBAApD,EAAgF;AAClI,SAAO,YAAM;AACT,QAAMC,wBAAwB,GAAG,IAAIC,OAAJ,EAAjC;;AACA,QAAMC,eAAe;AAAA,0EAAG,iBAAOC,KAAP,EAAcC,yBAAd,EAAyCC,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,gBAAAA,eADgB,GACER,kBAAkB,CAACK,KAAD,CADpB,EAEpB;;AACMI,gBAAAA,+BAHc,GAGoBZ,gBAAgB,CAACW,eAAD,EAAkBF,yBAAlB,CAHpC;;AAIpB,oBAAI,CAACG,+BAAL,EAAsC;AAC5BC,kBAAAA,OAD4B,GAClB;AACZC,oBAAAA,YAAY,EAAEH,eAAe,CAACG,YADlB;AAEZC,oBAAAA,gBAAgB,EAAEJ,eAAe,CAACI,gBAFtB;AAGZC,oBAAAA,qBAAqB,EAAEL,eAAe,CAACK,qBAH3B;AAIZC,oBAAAA,cAAc,EAAEN,eAAe,CAACM;AAJpB,mBADkB;AAOlCN,kBAAAA,eAAe,GAAGT,6BAA6B,CAACO,yBAAD,EAA4BI,OAA5B,CAA/C;AACH;;AACDR,gBAAAA,wBAAwB,CAACa,GAAzB,CAA6BT,yBAA7B,EAAwDE,eAAxD;AAboB;AAAA,uBAcdP,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCE,eAAnC,EAAoDD,KAApD,CAdT;;AAAA;AAAA,iDAebC,eAfa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAfJ,eAAe;AAAA;AAAA;AAAA,OAArB;;AAiBA,WAAO;AACHY,MAAAA,MADG,kBACIX,KADJ,EACWC,yBADX,EACsCC,KADtC,EAC6C;AAC5C,YAAMU,uBAAuB,GAAGf,wBAAwB,CAACgB,GAAzB,CAA6BZ,yBAA7B,CAAhC;;AACA,YAAIW,uBAAuB,KAAKE,SAAhC,EAA2C;AACvC,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,uBAAhB,CAAP;AACH;;AACD,eAAOb,eAAe,CAACC,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,CAAtB;AACH;AAPE,KAAP;AASH,GA5BD;AA6BH,CA9BM","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createChannelMergerNodeRendererFactory = (createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeAudioNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n            if (!nativeAudioNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfInputs: nativeAudioNode.numberOfInputs\n                };\n                nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode, trace);\n            return nativeAudioNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/channel-merger-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}