{"ast":null,"code":"import _classCallCheck from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import debug from\"debug\";var log=debug(\"atpls:keyboard\");export var KeyboardController=/*#__PURE__*/function(){function KeyboardController(audioset,control){var _this=this;_classCallCheck(this,KeyboardController);this.control=control;this.active=false;this.pressed={};this.clipIdToKey={};this.keyToClipId={};this.mapMode=undefined;audioset.clips.forEach(function(clip){var key=clip.keyMap.toUpperCase();_this.clipIdToKey[clip.id]=key;_this.keyToClipId[key]=clip.id;});this.setActive(true);}_createClass(KeyboardController,[{key:\"getKey\",value:function getKey(clipId){return this.clipIdToKey[clipId];}},{key:\"setActive\",value:function setActive(isActive){this.active=isActive;log(\"setActive %o\",isActive);}},{key:\"startMapMode\",value:function startMapMode(clipId,callback){this.mapMode={clipId:clipId,callback:callback};}},{key:\"stopMapMode\",value:function stopMapMode(){this.mapMode=undefined;}},{key:\"setKey\",value:function setKey(clipId,key){var oldKey=this.clipIdToKey[clipId];if(oldKey){this.keyToClipId[oldKey]=undefined;}key=key.toUpperCase();this.keyToClipId[key]=clipId;this.clipIdToKey[clipId]=key;}},{key:\"keyDown\",value:function keyDown(key){if(!this.active){return;}key=key.toUpperCase();if(this.mapMode){return this.handleKeymapChange(key);}else if(this.pressed[key]){return;}this.pressed[key]=true;var clipId=this.keyToClipId[key];if(clipId){this.control.startClip(clipId,0);}}},{key:\"keyUp\",value:function keyUp(key){if(!this.active||this.mapMode){return;}key=key.toUpperCase();this.pressed[key]=false;var clipId=this.keyToClipId[key];if(clipId){this.control.stopClip(clipId,0);}}},{key:\"handleKeymapChange\",value:function handleKeymapChange(key){if(!this.mapMode){return;}if(key!==\"ESCAPE\"){this.setKey(this.mapMode.clipId,key);}this.mapMode.callback(key);this.mapMode=undefined;}}]);return KeyboardController;}();","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/Control/KeyboardController.ts"],"names":["debug","log","KeyboardController","audioset","control","active","pressed","clipIdToKey","keyToClipId","mapMode","undefined","clips","forEach","clip","key","keyMap","toUpperCase","id","setActive","clipId","isActive","callback","oldKey","handleKeymapChange","startClip","stopClip","setKey"],"mappings":"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","sourcesContent":["import { Audioset } from \"../../audioset\";\n\nimport debug from \"debug\";\n\nconst log = debug(\"atpls:keyboard\");\n\nexport interface Control {\n  startClip(clipId: string, time: number): void;\n  stopClip(clipId: string, time: number): void;\n}\n\ntype MapModeCallback = (newKey: string) => void;\ninterface MapMode {\n  clipId: string;\n  callback: MapModeCallback;\n}\n\nexport class KeyboardController {\n  private active: boolean = false;\n  private pressed: Record<string, boolean> = {};\n  private clipIdToKey: Record<string, string> = {};\n  private keyToClipId: Record<string, string | undefined> = {};\n  private mapMode?: MapMode = undefined;\n\n  constructor(audioset: Audioset, private control: Control) {\n    audioset.clips.forEach((clip) => {\n      const key = clip.keyMap.toUpperCase();\n      this.clipIdToKey[clip.id] = key;\n      this.keyToClipId[key] = clip.id;\n    });\n    this.setActive(true);\n  }\n\n  public getKey(clipId: string) {\n    return this.clipIdToKey[clipId];\n  }\n\n  public setActive(isActive: boolean) {\n    this.active = isActive;\n    log(\"setActive %o\", isActive);\n  }\n\n  public startMapMode(clipId: string, callback: MapModeCallback) {\n    this.mapMode = { clipId, callback };\n  }\n  public stopMapMode() {\n    this.mapMode = undefined;\n  }\n\n  public setKey(clipId: string, key: string) {\n    const oldKey = this.clipIdToKey[clipId];\n    if (oldKey) {\n      this.keyToClipId[oldKey] = undefined;\n    }\n    key = key.toUpperCase();\n    this.keyToClipId[key] = clipId;\n    this.clipIdToKey[clipId] = key;\n  }\n\n  public keyDown(key: string) {\n    if (!this.active) {\n      return;\n    }\n\n    key = key.toUpperCase();\n    if (this.mapMode) {\n      return this.handleKeymapChange(key);\n    } else if (this.pressed[key]) {\n      return;\n    }\n    this.pressed[key] = true;\n\n    const clipId = this.keyToClipId[key];\n    if (clipId) {\n      this.control.startClip(clipId, 0);\n    }\n  }\n  public keyUp(key: string) {\n    if (!this.active || this.mapMode) {\n      return;\n    }\n\n    key = key.toUpperCase();\n    this.pressed[key] = false;\n\n    const clipId = this.keyToClipId[key];\n    if (clipId) {\n      this.control.stopClip(clipId, 0);\n    }\n  }\n\n  private handleKeymapChange(key: string) {\n    if (!this.mapMode) {\n      return;\n    }\n    if (key !== \"ESCAPE\") {\n      this.setKey(this.mapMode.clipId, key);\n    }\n    this.mapMode.callback(key);\n    this.mapMode = undefined;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}