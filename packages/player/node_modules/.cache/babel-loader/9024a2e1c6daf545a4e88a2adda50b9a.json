{"ast":null,"code":"export default function (size, hash, equal, type, empty) {\n  if (arguments.length === 3) {\n    type = Array;\n    empty = null;\n  }\n\n  var store = new type(size = 1 << Math.max(4, Math.ceil(Math.log(size) / Math.LN2))),\n      mask = size - 1;\n\n  for (var i = 0; i < size; ++i) {\n    store[i] = empty;\n  }\n\n  function add(value) {\n    var index = hash(value) & mask,\n        match = store[index],\n        collisions = 0;\n\n    while (match != empty) {\n      if (equal(match, value)) return true;\n      if (++collisions >= size) throw new Error(\"full hashset\");\n      match = store[index = index + 1 & mask];\n    }\n\n    store[index] = value;\n    return true;\n  }\n\n  function has(value) {\n    var index = hash(value) & mask,\n        match = store[index],\n        collisions = 0;\n\n    while (match != empty) {\n      if (equal(match, value)) return true;\n      if (++collisions >= size) break;\n      match = store[index = index + 1 & mask];\n    }\n\n    return false;\n  }\n\n  function values() {\n    var values = [];\n\n    for (var i = 0, n = store.length; i < n; ++i) {\n      var match = store[i];\n      if (match != empty) values.push(match);\n    }\n\n    return values;\n  }\n\n  return {\n    add: add,\n    has: has,\n    values: values\n  };\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/topojson-server/src/hash/hashset.js"],"names":["size","hash","equal","type","empty","arguments","length","Array","store","Math","max","ceil","log","LN2","mask","i","add","value","index","match","collisions","Error","has","values","n","push"],"mappings":"AAAA,eAAe,UAASA,IAAT,EAAeC,IAAf,EAAqBC,KAArB,EAA4BC,IAA5B,EAAkCC,KAAlC,EAAyC;AACtD,MAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC1BH,IAAAA,IAAI,GAAGI,KAAP;AACAH,IAAAA,KAAK,GAAG,IAAR;AACD;;AAED,MAAII,KAAK,GAAG,IAAIL,IAAJ,CAASH,IAAI,GAAG,KAAKS,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACE,IAAL,CAAUF,IAAI,CAACG,GAAL,CAASZ,IAAT,IAAiBS,IAAI,CAACI,GAAhC,CAAZ,CAArB,CAAZ;AAAA,MACIC,IAAI,GAAGd,IAAI,GAAG,CADlB;;AAGA,OAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,IAApB,EAA0B,EAAEe,CAA5B,EAA+B;AAC7BP,IAAAA,KAAK,CAACO,CAAD,CAAL,GAAWX,KAAX;AACD;;AAED,WAASY,GAAT,CAAaC,KAAb,EAAoB;AAClB,QAAIC,KAAK,GAAGjB,IAAI,CAACgB,KAAD,CAAJ,GAAcH,IAA1B;AAAA,QACIK,KAAK,GAAGX,KAAK,CAACU,KAAD,CADjB;AAAA,QAEIE,UAAU,GAAG,CAFjB;;AAGA,WAAOD,KAAK,IAAIf,KAAhB,EAAuB;AACrB,UAAIF,KAAK,CAACiB,KAAD,EAAQF,KAAR,CAAT,EAAyB,OAAO,IAAP;AACzB,UAAI,EAAEG,UAAF,IAAgBpB,IAApB,EAA0B,MAAM,IAAIqB,KAAJ,CAAU,cAAV,CAAN;AAC1BF,MAAAA,KAAK,GAAGX,KAAK,CAACU,KAAK,GAAIA,KAAK,GAAG,CAAT,GAAcJ,IAAvB,CAAb;AACD;;AACDN,IAAAA,KAAK,CAACU,KAAD,CAAL,GAAeD,KAAf;AACA,WAAO,IAAP;AACD;;AAED,WAASK,GAAT,CAAaL,KAAb,EAAoB;AAClB,QAAIC,KAAK,GAAGjB,IAAI,CAACgB,KAAD,CAAJ,GAAcH,IAA1B;AAAA,QACIK,KAAK,GAAGX,KAAK,CAACU,KAAD,CADjB;AAAA,QAEIE,UAAU,GAAG,CAFjB;;AAGA,WAAOD,KAAK,IAAIf,KAAhB,EAAuB;AACrB,UAAIF,KAAK,CAACiB,KAAD,EAAQF,KAAR,CAAT,EAAyB,OAAO,IAAP;AACzB,UAAI,EAAEG,UAAF,IAAgBpB,IAApB,EAA0B;AAC1BmB,MAAAA,KAAK,GAAGX,KAAK,CAACU,KAAK,GAAIA,KAAK,GAAG,CAAT,GAAcJ,IAAvB,CAAb;AACD;;AACD,WAAO,KAAP;AACD;;AAED,WAASS,MAAT,GAAkB;AAChB,QAAIA,MAAM,GAAG,EAAb;;AACA,SAAK,IAAIR,CAAC,GAAG,CAAR,EAAWS,CAAC,GAAGhB,KAAK,CAACF,MAA1B,EAAkCS,CAAC,GAAGS,CAAtC,EAAyC,EAAET,CAA3C,EAA8C;AAC5C,UAAII,KAAK,GAAGX,KAAK,CAACO,CAAD,CAAjB;AACA,UAAII,KAAK,IAAIf,KAAb,EAAoBmB,MAAM,CAACE,IAAP,CAAYN,KAAZ;AACrB;;AACD,WAAOI,MAAP;AACD;;AAED,SAAO;AACLP,IAAAA,GAAG,EAAEA,GADA;AAELM,IAAAA,GAAG,EAAEA,GAFA;AAGLC,IAAAA,MAAM,EAAEA;AAHH,GAAP;AAKD","sourcesContent":["export default function(size, hash, equal, type, empty) {\n  if (arguments.length === 3) {\n    type = Array;\n    empty = null;\n  }\n\n  var store = new type(size = 1 << Math.max(4, Math.ceil(Math.log(size) / Math.LN2))),\n      mask = size - 1;\n\n  for (var i = 0; i < size; ++i) {\n    store[i] = empty;\n  }\n\n  function add(value) {\n    var index = hash(value) & mask,\n        match = store[index],\n        collisions = 0;\n    while (match != empty) {\n      if (equal(match, value)) return true;\n      if (++collisions >= size) throw new Error(\"full hashset\");\n      match = store[index = (index + 1) & mask];\n    }\n    store[index] = value;\n    return true;\n  }\n\n  function has(value) {\n    var index = hash(value) & mask,\n        match = store[index],\n        collisions = 0;\n    while (match != empty) {\n      if (equal(match, value)) return true;\n      if (++collisions >= size) break;\n      match = store[index = (index + 1) & mask];\n    }\n    return false;\n  }\n\n  function values() {\n    var values = [];\n    for (var i = 0, n = store.length; i < n; ++i) {\n      var match = store[i];\n      if (match != empty) values.push(match);\n    }\n    return values;\n  }\n\n  return {\n    add: add,\n    has: has,\n    values: values\n  };\n}\n"]},"metadata":{},"sourceType":"module"}