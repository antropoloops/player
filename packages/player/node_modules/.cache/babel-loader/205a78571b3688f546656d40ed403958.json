{"ast":null,"code":"export default function (topology) {\n  var ownerByArc = new Array(topology.arcs.length),\n      // arc index -> index of unique associated ring, or -1 if used by multiple rings\n  ownerIndex = 0,\n      key;\n\n  function testGeometry(o) {\n    switch (o.type) {\n      case \"GeometryCollection\":\n        o.geometries.forEach(testGeometry);\n        break;\n\n      case \"Polygon\":\n        testArcs(o.arcs);\n        break;\n\n      case \"MultiPolygon\":\n        o.arcs.forEach(testArcs);\n        break;\n    }\n  }\n\n  function testArcs(arcs) {\n    for (var i = 0, n = arcs.length; i < n; ++i, ++ownerIndex) {\n      for (var ring = arcs[i], j = 0, m = ring.length; j < m; ++j) {\n        var arc = ring[j];\n        if (arc < 0) arc = ~arc;\n        var owner = ownerByArc[arc];\n        if (owner == null) ownerByArc[arc] = ownerIndex;else if (owner !== ownerIndex) ownerByArc[arc] = -1;\n      }\n    }\n  }\n\n  for (key in topology.objects) {\n    testGeometry(topology.objects[key]);\n  }\n\n  return function (ring) {\n    for (var j = 0, m = ring.length, arc; j < m; ++j) {\n      if (ownerByArc[(arc = ring[j]) < 0 ? ~arc : arc] === -1) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n}","map":null,"metadata":{},"sourceType":"module"}