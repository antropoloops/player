{"ast":null,"code":"export default function (size, hash, equal, keyType, keyEmpty, valueType) {\n  if (arguments.length === 3) {\n    keyType = valueType = Array;\n    keyEmpty = null;\n  }\n\n  var keystore = new keyType(size = 1 << Math.max(4, Math.ceil(Math.log(size) / Math.LN2))),\n      valstore = new valueType(size),\n      mask = size - 1;\n\n  for (var i = 0; i < size; ++i) {\n    keystore[i] = keyEmpty;\n  }\n\n  function set(key, value) {\n    var index = hash(key) & mask,\n        matchKey = keystore[index],\n        collisions = 0;\n\n    while (matchKey != keyEmpty) {\n      if (equal(matchKey, key)) return valstore[index] = value;\n      if (++collisions >= size) throw new Error(\"full hashmap\");\n      matchKey = keystore[index = index + 1 & mask];\n    }\n\n    keystore[index] = key;\n    valstore[index] = value;\n    return value;\n  }\n\n  function maybeSet(key, value) {\n    var index = hash(key) & mask,\n        matchKey = keystore[index],\n        collisions = 0;\n\n    while (matchKey != keyEmpty) {\n      if (equal(matchKey, key)) return valstore[index];\n      if (++collisions >= size) throw new Error(\"full hashmap\");\n      matchKey = keystore[index = index + 1 & mask];\n    }\n\n    keystore[index] = key;\n    valstore[index] = value;\n    return value;\n  }\n\n  function get(key, missingValue) {\n    var index = hash(key) & mask,\n        matchKey = keystore[index],\n        collisions = 0;\n\n    while (matchKey != keyEmpty) {\n      if (equal(matchKey, key)) return valstore[index];\n      if (++collisions >= size) break;\n      matchKey = keystore[index = index + 1 & mask];\n    }\n\n    return missingValue;\n  }\n\n  function keys() {\n    var keys = [];\n\n    for (var i = 0, n = keystore.length; i < n; ++i) {\n      var matchKey = keystore[i];\n      if (matchKey != keyEmpty) keys.push(matchKey);\n    }\n\n    return keys;\n  }\n\n  return {\n    set: set,\n    maybeSet: maybeSet,\n    // set if unset\n    get: get,\n    keys: keys\n  };\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/topojson-server/src/hash/hashmap.js"],"names":["size","hash","equal","keyType","keyEmpty","valueType","arguments","length","Array","keystore","Math","max","ceil","log","LN2","valstore","mask","i","set","key","value","index","matchKey","collisions","Error","maybeSet","get","missingValue","keys","n","push"],"mappings":"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","sourcesContent":["export default function(size, hash, equal, keyType, keyEmpty, valueType) {\n  if (arguments.length === 3) {\n    keyType = valueType = Array;\n    keyEmpty = null;\n  }\n\n  var keystore = new keyType(size = 1 << Math.max(4, Math.ceil(Math.log(size) / Math.LN2))),\n      valstore = new valueType(size),\n      mask = size - 1;\n\n  for (var i = 0; i < size; ++i) {\n    keystore[i] = keyEmpty;\n  }\n\n  function set(key, value) {\n    var index = hash(key) & mask,\n        matchKey = keystore[index],\n        collisions = 0;\n    while (matchKey != keyEmpty) {\n      if (equal(matchKey, key)) return valstore[index] = value;\n      if (++collisions >= size) throw new Error(\"full hashmap\");\n      matchKey = keystore[index = (index + 1) & mask];\n    }\n    keystore[index] = key;\n    valstore[index] = value;\n    return value;\n  }\n\n  function maybeSet(key, value) {\n    var index = hash(key) & mask,\n        matchKey = keystore[index],\n        collisions = 0;\n    while (matchKey != keyEmpty) {\n      if (equal(matchKey, key)) return valstore[index];\n      if (++collisions >= size) throw new Error(\"full hashmap\");\n      matchKey = keystore[index = (index + 1) & mask];\n    }\n    keystore[index] = key;\n    valstore[index] = value;\n    return value;\n  }\n\n  function get(key, missingValue) {\n    var index = hash(key) & mask,\n        matchKey = keystore[index],\n        collisions = 0;\n    while (matchKey != keyEmpty) {\n      if (equal(matchKey, key)) return valstore[index];\n      if (++collisions >= size) break;\n      matchKey = keystore[index = (index + 1) & mask];\n    }\n    return missingValue;\n  }\n\n  function keys() {\n    var keys = [];\n    for (var i = 0, n = keystore.length; i < n; ++i) {\n      var matchKey = keystore[i];\n      if (matchKey != keyEmpty) keys.push(matchKey);\n    }\n    return keys;\n  }\n\n  return {\n    set: set,\n    maybeSet: maybeSet, // set if unset\n    get: get,\n    keys: keys\n  };\n}\n"]},"metadata":{},"sourceType":"module"}