{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createGainNodeRendererFactory = (connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeGainNodes = new WeakMap();\n\n    const createGainNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativeGainNode = getNativeAudioNode(proxy); // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n\n      if (!nativeGainNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeGainNode.channelCount,\n          channelCountMode: nativeGainNode.channelCountMode,\n          channelInterpretation: nativeGainNode.channelInterpretation,\n          gain: nativeGainNode.gain.value\n        };\n        nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n\n      if (!nativeGainNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain, trace);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain, trace);\n      }\n\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode, trace);\n      return nativeGainNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeGainNode !== undefined) {\n          return Promise.resolve(renderedNativeGainNode);\n        }\n\n        return createGainNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/gain-node-renderer-factory.js"],"names":["isOwnedByContext","createGainNodeRendererFactory","connectAudioParam","createNativeGainNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeGainNodes","WeakMap","createGainNode","proxy","nativeOfflineAudioContext","trace","nativeGainNode","nativeGainNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","gain","value","set","render","renderedNativeGainNode","get","undefined","Promise","resolve"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AACA,OAAO,MAAMC,6BAA6B,GAAG,CAACC,iBAAD,EAAoBC,oBAApB,EAA0CC,kBAA1C,EAA8DC,gBAA9D,EAAgFC,uBAAhF,KAA4G;AACrJ,SAAO,MAAM;AACT,UAAMC,uBAAuB,GAAG,IAAIC,OAAJ,EAAhC;;AACA,UAAMC,cAAc,GAAG,OAAOC,KAAP,EAAcC,yBAAd,EAAyCC,KAAzC,KAAmD;AACtE,UAAIC,cAAc,GAAGT,kBAAkB,CAACM,KAAD,CAAvC,CADsE,CAEtE;;AACA,YAAMI,8BAA8B,GAAGd,gBAAgB,CAACa,cAAD,EAAiBF,yBAAjB,CAAvD;;AACA,UAAI,CAACG,8BAAL,EAAqC;AACjC,cAAMC,OAAO,GAAG;AACZC,UAAAA,YAAY,EAAEH,cAAc,CAACG,YADjB;AAEZC,UAAAA,gBAAgB,EAAEJ,cAAc,CAACI,gBAFrB;AAGZC,UAAAA,qBAAqB,EAAEL,cAAc,CAACK,qBAH1B;AAIZC,UAAAA,IAAI,EAAEN,cAAc,CAACM,IAAf,CAAoBC;AAJd,SAAhB;AAMAP,QAAAA,cAAc,GAAGV,oBAAoB,CAACQ,yBAAD,EAA4BI,OAA5B,CAArC;AACH;;AACDR,MAAAA,uBAAuB,CAACc,GAAxB,CAA4BV,yBAA5B,EAAuDE,cAAvD;;AACA,UAAI,CAACC,8BAAL,EAAqC;AACjC,cAAMT,gBAAgB,CAACM,yBAAD,EAA4BD,KAAK,CAACS,IAAlC,EAAwCN,cAAc,CAACM,IAAvD,EAA6DP,KAA7D,CAAtB;AACH,OAFD,MAGK;AACD,cAAMV,iBAAiB,CAACS,yBAAD,EAA4BD,KAAK,CAACS,IAAlC,EAAwCN,cAAc,CAACM,IAAvD,EAA6DP,KAA7D,CAAvB;AACH;;AACD,YAAMN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCE,cAAnC,EAAmDD,KAAnD,CAA7B;AACA,aAAOC,cAAP;AACH,KAtBD;;AAuBA,WAAO;AACHS,MAAAA,MAAM,CAACZ,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,EAA0C;AAC5C,cAAMW,sBAAsB,GAAGhB,uBAAuB,CAACiB,GAAxB,CAA4Bb,yBAA5B,CAA/B;;AACA,YAAIY,sBAAsB,KAAKE,SAA/B,EAA0C;AACtC,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,sBAAhB,CAAP;AACH;;AACD,eAAOd,cAAc,CAACC,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,CAArB;AACH;;AAPE,KAAP;AASH,GAlCD;AAmCH,CApCM","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createGainNodeRendererFactory = (connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeGainNodes = new WeakMap();\n        const createGainNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeGainNode = getNativeAudioNode(proxy);\n            // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n            if (!nativeGainNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeGainNode.channelCount,\n                    channelCountMode: nativeGainNode.channelCountMode,\n                    channelInterpretation: nativeGainNode.channelInterpretation,\n                    gain: nativeGainNode.gain.value\n                };\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n            if (!nativeGainNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode, trace);\n            return nativeGainNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeGainNode !== undefined) {\n                    return Promise.resolve(renderedNativeGainNode);\n                }\n                return createGainNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/gain-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}