{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createBiquadFilterNodeRendererFactory = function createBiquadFilterNodeRendererFactory(connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeBiquadFilterNodes = new WeakMap();\n\n    var createBiquadFilterNode = function createBiquadFilterNode(proxy, nativeOfflineAudioContext, trace) {\n      var nativeBiquadFilterNode, nativeBiquadFilterNodeIsOwnedByContext, options;\n      return _regeneratorRuntime.async(function createBiquadFilterNode$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              nativeBiquadFilterNode = getNativeAudioNode(proxy);\n              /*\n               * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n               * again.\n               */\n\n              nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n\n              if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                options = {\n                  Q: nativeBiquadFilterNode.Q.value,\n                  channelCount: nativeBiquadFilterNode.channelCount,\n                  channelCountMode: nativeBiquadFilterNode.channelCountMode,\n                  channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n                  detune: nativeBiquadFilterNode.detune.value,\n                  frequency: nativeBiquadFilterNode.frequency.value,\n                  gain: nativeBiquadFilterNode.gain.value,\n                  type: nativeBiquadFilterNode.type\n                };\n                nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n              }\n\n              renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n\n              if (nativeBiquadFilterNodeIsOwnedByContext) {\n                _context.next = 15;\n                break;\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace));\n\n            case 7:\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace));\n\n            case 9:\n              _context.next = 11;\n              return _regeneratorRuntime.awrap(renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace));\n\n            case 11:\n              _context.next = 13;\n              return _regeneratorRuntime.awrap(renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace));\n\n            case 13:\n              _context.next = 23;\n              break;\n\n            case 15:\n              _context.next = 17;\n              return _regeneratorRuntime.awrap(connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace));\n\n            case 17:\n              _context.next = 19;\n              return _regeneratorRuntime.awrap(connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace));\n\n            case 19:\n              _context.next = 21;\n              return _regeneratorRuntime.awrap(connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace));\n\n            case 21:\n              _context.next = 23;\n              return _regeneratorRuntime.awrap(connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace));\n\n            case 23:\n              _context.next = 25;\n              return _regeneratorRuntime.awrap(renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode, trace));\n\n            case 25:\n              return _context.abrupt(\"return\", nativeBiquadFilterNode);\n\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext, trace) {\n        var renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeBiquadFilterNode !== undefined) {\n          return Promise.resolve(renderedNativeBiquadFilterNode);\n        }\n\n        return createBiquadFilterNode(proxy, nativeOfflineAudioContext, trace);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/biquad-filter-node-renderer-factory.js"],"names":["isOwnedByContext","createBiquadFilterNodeRendererFactory","connectAudioParam","createNativeBiquadFilterNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeBiquadFilterNodes","WeakMap","createBiquadFilterNode","proxy","nativeOfflineAudioContext","trace","nativeBiquadFilterNode","nativeBiquadFilterNodeIsOwnedByContext","options","Q","value","channelCount","channelCountMode","channelInterpretation","detune","frequency","gain","type","set","render","renderedNativeBiquadFilterNode","get","undefined","Promise","resolve"],"mappings":"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","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createBiquadFilterNodeRendererFactory = (connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeBiquadFilterNodes = new WeakMap();\n        const createBiquadFilterNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeBiquadFilterNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                const options = {\n                    Q: nativeBiquadFilterNode.Q.value,\n                    channelCount: nativeBiquadFilterNode.channelCount,\n                    channelCountMode: nativeBiquadFilterNode.channelCountMode,\n                    channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n                    detune: nativeBiquadFilterNode.detune.value,\n                    frequency: nativeBiquadFilterNode.frequency.value,\n                    gain: nativeBiquadFilterNode.gain.value,\n                    type: nativeBiquadFilterNode.type\n                };\n                nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode, trace);\n            return nativeBiquadFilterNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeBiquadFilterNode !== undefined) {\n                    return Promise.resolve(renderedNativeBiquadFilterNode);\n                }\n                return createBiquadFilterNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/biquad-filter-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}