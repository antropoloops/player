{"ast":null,"code":"import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createPannerNodeRendererFactory = (connectAudioParam, createNativePannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativePannerNodes = new WeakMap();\n\n    const createPannerNode = async (proxy, nativeOfflineAudioContext, trace) => {\n      let nativePannerNode = getNativeAudioNode(proxy); // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n      const nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext);\n\n      if (!nativePannerNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativePannerNode.channelCount,\n          channelCountMode: nativePannerNode.channelCountMode,\n          channelInterpretation: nativePannerNode.channelInterpretation,\n          coneInnerAngle: nativePannerNode.coneInnerAngle,\n          coneOuterAngle: nativePannerNode.coneOuterAngle,\n          coneOuterGain: nativePannerNode.coneOuterGain,\n          distanceModel: nativePannerNode.distanceModel,\n          maxDistance: nativePannerNode.maxDistance,\n          orientationX: nativePannerNode.orientationX.value,\n          orientationY: nativePannerNode.orientationY.value,\n          orientationZ: nativePannerNode.orientationZ.value,\n          panningModel: nativePannerNode.panningModel,\n          positionX: nativePannerNode.positionX.value,\n          positionY: nativePannerNode.positionY.value,\n          positionZ: nativePannerNode.positionZ.value,\n          refDistance: nativePannerNode.refDistance,\n          rolloffFactor: nativePannerNode.rolloffFactor\n        };\n        nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n      }\n\n      renderedNativePannerNodes.set(nativeOfflineAudioContext, nativePannerNode);\n\n      if (!nativePannerNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace);\n        await renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace);\n      }\n\n      if (isNativeAudioNodeFaker(nativePannerNode)) {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0], trace);\n      } else {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode, trace);\n      }\n\n      return nativePannerNode;\n    };\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativePannerNode = renderedNativePannerNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativePannerNode !== undefined) {\n          return Promise.resolve(renderedNativePannerNode);\n        }\n\n        return createPannerNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/panner-node-renderer-factory.js"],"names":["isNativeAudioNodeFaker","isOwnedByContext","createPannerNodeRendererFactory","connectAudioParam","createNativePannerNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativePannerNodes","WeakMap","createPannerNode","proxy","nativeOfflineAudioContext","trace","nativePannerNode","nativePannerNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","orientationX","value","orientationY","orientationZ","panningModel","positionX","positionY","positionZ","refDistance","rolloffFactor","set","inputs","render","renderedNativePannerNode","get","undefined","Promise","resolve"],"mappings":"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","sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createPannerNodeRendererFactory = (connectAudioParam, createNativePannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativePannerNodes = new WeakMap();\n        const createPannerNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativePannerNode = getNativeAudioNode(proxy);\n            // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext);\n            if (!nativePannerNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativePannerNode.channelCount,\n                    channelCountMode: nativePannerNode.channelCountMode,\n                    channelInterpretation: nativePannerNode.channelInterpretation,\n                    coneInnerAngle: nativePannerNode.coneInnerAngle,\n                    coneOuterAngle: nativePannerNode.coneOuterAngle,\n                    coneOuterGain: nativePannerNode.coneOuterGain,\n                    distanceModel: nativePannerNode.distanceModel,\n                    maxDistance: nativePannerNode.maxDistance,\n                    orientationX: nativePannerNode.orientationX.value,\n                    orientationY: nativePannerNode.orientationY.value,\n                    orientationZ: nativePannerNode.orientationZ.value,\n                    panningModel: nativePannerNode.panningModel,\n                    positionX: nativePannerNode.positionX.value,\n                    positionY: nativePannerNode.positionY.value,\n                    positionZ: nativePannerNode.positionZ.value,\n                    refDistance: nativePannerNode.refDistance,\n                    rolloffFactor: nativePannerNode.rolloffFactor\n                };\n                nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativePannerNodes.set(nativeOfflineAudioContext, nativePannerNode);\n            if (!nativePannerNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace);\n            }\n            if (isNativeAudioNodeFaker(nativePannerNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0], trace);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode, trace);\n            }\n            return nativePannerNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativePannerNode = renderedNativePannerNodes.get(nativeOfflineAudioContext);\n                if (renderedNativePannerNode !== undefined) {\n                    return Promise.resolve(renderedNativePannerNode);\n                }\n                return createPannerNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/panner-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}