{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { mollweideBromleyTheta } from \"./mollweide.js\";\nimport { abs, cos, epsilon, pi, quarterPi, sin, sqrt2 } from \"./math.js\";\nvar k = 2.00276,\n    w = 1.11072;\nexport function boggsRaw(lambda, phi) {\n  var theta = mollweideBromleyTheta(pi, phi);\n  return [k * lambda / (1 / cos(phi) + w / cos(theta)), (phi + sqrt2 * sin(theta)) / k];\n}\n\nboggsRaw.invert = function (x, y) {\n  var ky = k * y,\n      theta = y < 0 ? -quarterPi : quarterPi,\n      i = 25,\n      delta,\n      phi;\n\n  do {\n    phi = ky - sqrt2 * sin(theta);\n    theta -= delta = (sin(2 * theta) + 2 * theta - pi * sin(phi)) / (2 * cos(2 * theta) + 2 + pi * cos(phi) * sqrt2 * cos(theta));\n  } while (abs(delta) > epsilon && --i > 0);\n\n  phi = ky - sqrt2 * sin(theta);\n  return [x * (1 / cos(phi) + w / cos(theta)) / k, phi];\n};\n\nexport default function () {\n  return projection(boggsRaw).scale(160.857);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/boggs.js"],"names":["geoProjection","projection","mollweideBromleyTheta","abs","cos","epsilon","pi","quarterPi","sin","sqrt2","k","w","boggsRaw","lambda","phi","theta","invert","x","y","ky","i","delta","scale"],"mappings":"AAAA,SAAQA,aAAa,IAAIC,UAAzB,QAA0C,QAA1C;AACA,SAAQC,qBAAR,QAAoC,gBAApC;AACA,SAAQC,GAAR,EAAaC,GAAb,EAAkBC,OAAlB,EAA2BC,EAA3B,EAA+BC,SAA/B,EAA0CC,GAA1C,EAA+CC,KAA/C,QAA2D,WAA3D;AAEA,IAAIC,CAAC,GAAG,OAAR;AAAA,IACIC,CAAC,GAAG,OADR;AAGA,OAAO,SAASC,QAAT,CAAkBC,MAAlB,EAA0BC,GAA1B,EAA+B;AACpC,MAAIC,KAAK,GAAGb,qBAAqB,CAACI,EAAD,EAAKQ,GAAL,CAAjC;AACA,SAAO,CAACJ,CAAC,GAAGG,MAAJ,IAAc,IAAIT,GAAG,CAACU,GAAD,CAAP,GAAeH,CAAC,GAAGP,GAAG,CAACW,KAAD,CAApC,CAAD,EAA+C,CAACD,GAAG,GAAGL,KAAK,GAAGD,GAAG,CAACO,KAAD,CAAlB,IAA6BL,CAA5E,CAAP;AACD;;AAEDE,QAAQ,CAACI,MAAT,GAAkB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC/B,MAAIC,EAAE,GAAGT,CAAC,GAAGQ,CAAb;AAAA,MAAgBH,KAAK,GAAGG,CAAC,GAAG,CAAJ,GAAQ,CAACX,SAAT,GAAqBA,SAA7C;AAAA,MAAwDa,CAAC,GAAG,EAA5D;AAAA,MAAgEC,KAAhE;AAAA,MAAuEP,GAAvE;;AACA,KAAG;AACDA,IAAAA,GAAG,GAAGK,EAAE,GAAGV,KAAK,GAAGD,GAAG,CAACO,KAAD,CAAtB;AACAA,IAAAA,KAAK,IAAIM,KAAK,GAAG,CAACb,GAAG,CAAC,IAAIO,KAAL,CAAH,GAAiB,IAAIA,KAArB,GAA6BT,EAAE,GAAGE,GAAG,CAACM,GAAD,CAAtC,KAAgD,IAAIV,GAAG,CAAC,IAAIW,KAAL,CAAP,GAAqB,CAArB,GAAyBT,EAAE,GAAGF,GAAG,CAACU,GAAD,CAAR,GAAgBL,KAAhB,GAAwBL,GAAG,CAACW,KAAD,CAApG,CAAjB;AACD,GAHD,QAGSZ,GAAG,CAACkB,KAAD,CAAH,GAAahB,OAAb,IAAwB,EAAEe,CAAF,GAAM,CAHvC;;AAIAN,EAAAA,GAAG,GAAGK,EAAE,GAAGV,KAAK,GAAGD,GAAG,CAACO,KAAD,CAAtB;AACA,SAAO,CAACE,CAAC,IAAI,IAAIb,GAAG,CAACU,GAAD,CAAP,GAAeH,CAAC,GAAGP,GAAG,CAACW,KAAD,CAA1B,CAAD,GAAsCL,CAAvC,EAA0CI,GAA1C,CAAP;AACD,CARD;;AAUA,eAAe,YAAW;AACxB,SAAOb,UAAU,CAACW,QAAD,CAAV,CACFU,KADE,CACI,OADJ,CAAP;AAED","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {mollweideBromleyTheta} from \"./mollweide.js\";\nimport {abs, cos, epsilon, pi, quarterPi, sin, sqrt2} from \"./math.js\";\n\nvar k = 2.00276,\n    w = 1.11072;\n\nexport function boggsRaw(lambda, phi) {\n  var theta = mollweideBromleyTheta(pi, phi);\n  return [k * lambda / (1 / cos(phi) + w / cos(theta)), (phi + sqrt2 * sin(theta)) / k];\n}\n\nboggsRaw.invert = function(x, y) {\n  var ky = k * y, theta = y < 0 ? -quarterPi : quarterPi, i = 25, delta, phi;\n  do {\n    phi = ky - sqrt2 * sin(theta);\n    theta -= delta = (sin(2 * theta) + 2 * theta - pi * sin(phi)) / (2 * cos(2 * theta) + 2 + pi * cos(phi) * sqrt2 * cos(theta));\n  } while (abs(delta) > epsilon && --i > 0);\n  phi = ky - sqrt2 * sin(theta);\n  return [x * (1 / cos(phi) + w / cos(theta)) / k, phi];\n};\n\nexport default function() {\n  return projection(boggsRaw)\n      .scale(160.857);\n}\n"]},"metadata":{},"sourceType":"module"}