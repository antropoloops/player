{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, cos, epsilon, halfPi, pi, sin, sqrt } from \"./math.js\";\nexport function eckert6Raw(lambda, phi) {\n  var k = (1 + halfPi) * sin(phi);\n\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    phi -= delta = (phi + sin(phi) - k) / (1 + cos(phi));\n  }\n\n  k = sqrt(2 + pi);\n  return [lambda * (1 + cos(phi)) / k, 2 * phi / k];\n}\n\neckert6Raw.invert = function (x, y) {\n  var j = 1 + halfPi,\n      k = sqrt(j / 2);\n  return [x * 2 * k / (1 + cos(y *= k)), asin((y + sin(y)) / j)];\n};\n\nexport default function () {\n  return projection(eckert6Raw).scale(173.044);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/eckert6.js"],"names":["geoProjection","projection","abs","asin","cos","epsilon","halfPi","pi","sin","sqrt","eckert6Raw","lambda","phi","k","i","delta","Infinity","invert","x","y","j","scale"],"mappings":"AAAA,SAAQA,aAAa,IAAIC,UAAzB,QAA0C,QAA1C;AACA,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,OAAxB,EAAiCC,MAAjC,EAAyCC,EAAzC,EAA6CC,GAA7C,EAAkDC,IAAlD,QAA6D,WAA7D;AAEA,OAAO,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,GAA5B,EAAiC;AACtC,MAAIC,CAAC,GAAG,CAAC,IAAIP,MAAL,IAAeE,GAAG,CAACI,GAAD,CAA1B;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,KAAK,GAAGC,QAAxB,EAAkCF,CAAC,GAAG,EAAJ,IAAUZ,GAAG,CAACa,KAAD,CAAH,GAAaV,OAAzD,EAAkES,CAAC,EAAnE,EAAuE;AACrEF,IAAAA,GAAG,IAAIG,KAAK,GAAG,CAACH,GAAG,GAAGJ,GAAG,CAACI,GAAD,CAAT,GAAiBC,CAAlB,KAAwB,IAAIT,GAAG,CAACQ,GAAD,CAA/B,CAAf;AACD;;AACDC,EAAAA,CAAC,GAAGJ,IAAI,CAAC,IAAIF,EAAL,CAAR;AACA,SAAO,CACLI,MAAM,IAAI,IAAIP,GAAG,CAACQ,GAAD,CAAX,CAAN,GAA0BC,CADrB,EAEL,IAAID,GAAJ,GAAUC,CAFL,CAAP;AAID;;AAEDH,UAAU,CAACO,MAAX,GAAoB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACjC,MAAIC,CAAC,GAAG,IAAId,MAAZ;AAAA,MACIO,CAAC,GAAGJ,IAAI,CAACW,CAAC,GAAG,CAAL,CADZ;AAEA,SAAO,CACLF,CAAC,GAAG,CAAJ,GAAQL,CAAR,IAAa,IAAIT,GAAG,CAACe,CAAC,IAAIN,CAAN,CAApB,CADK,EAELV,IAAI,CAAC,CAACgB,CAAC,GAAGX,GAAG,CAACW,CAAD,CAAR,IAAeC,CAAhB,CAFC,CAAP;AAID,CAPD;;AASA,eAAe,YAAW;AACxB,SAAOnB,UAAU,CAACS,UAAD,CAAV,CACFW,KADE,CACI,OADJ,CAAP;AAED","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math.js\";\n\nexport function eckert6Raw(lambda, phi) {\n  var k = (1 + halfPi) * sin(phi);\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    phi -= delta = (phi + sin(phi) - k) / (1 + cos(phi));\n  }\n  k = sqrt(2 + pi);\n  return [\n    lambda * (1 + cos(phi)) / k,\n    2 * phi / k\n  ];\n}\n\neckert6Raw.invert = function(x, y) {\n  var j = 1 + halfPi,\n      k = sqrt(j / 2);\n  return [\n    x * 2 * k / (1 + cos(y *= k)),\n    asin((y + sin(y)) / j)\n  ];\n};\n\nexport default function() {\n  return projection(eckert6Raw)\n      .scale(173.044);\n}\n"]},"metadata":{},"sourceType":"module"}