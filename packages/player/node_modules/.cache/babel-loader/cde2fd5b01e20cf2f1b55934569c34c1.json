{"ast":null,"code":"import _objectSpread from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import{createAudioEngine}from\"./AudioEngine\";/**\n * Sampler: the audio player\n */export function createSampler(buffers,ctx){var audio=createAudioEngine(ctx);return new AudioSampler(buffers,audio);}var AudioSampler=/*#__PURE__*/function(){function AudioSampler(buffers,audio){_classCallCheck(this,AudioSampler);this.buffers=buffers;this.audio=audio;this.master=void 0;this.tracks={};this.audioSources={};var volume=0.2;this.master=this.audio.createTrack({volume:volume,output:audio.output});}_createClass(AudioSampler,[{key:\"createTrack\",value:function createTrack(track){var audioTrack=this.audio.createTrack(_objectSpread({volume:1,output:this.master.input},track));this.tracks[track.id]=audioTrack;return track.id;}},{key:\"connect\",value:function connect(){// nothing to do?\n}},{key:\"disconnect\",value:function disconnect(){var _this=this;Object.keys(this.tracks).forEach(function(trackId){_this.tracks[trackId].disconnect();});this.master.disconnect();}},{key:\"start\",value:function start(clipId,trackId,time){if(this.audioSources[clipId]){return;}var buffer=this.buffers.getBuffer(clipId);var track=this.tracks[trackId];var source=this.audio.createAudioSource({output:track.input,buffer:buffer});this.audioSources[clipId]=source;source.start(time);}},{key:\"stop\",value:function stop(clipId,time){var source=this.audioSources[clipId];if(source!==undefined){source.stop(time);}this.audioSources[clipId]=undefined;}}]);return AudioSampler;}();","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/packages/player/src/sampler/index.ts"],"names":["createAudioEngine","createSampler","buffers","ctx","audio","AudioSampler","master","tracks","audioSources","volume","createTrack","output","track","audioTrack","input","id","Object","keys","forEach","trackId","disconnect","clipId","time","buffer","getBuffer","source","createAudioSource","start","undefined","stop"],"mappings":"idACA,OAIEA,iBAJF,KAKO,eALP,CAOA;;GAeA,MAAO,SAASC,CAAAA,aAAT,CACLC,OADK,CAELC,GAFK,CAGI,CACT,GAAMC,CAAAA,KAAK,CAAGJ,iBAAiB,CAACG,GAAD,CAA/B,CACA,MAAO,IAAIE,CAAAA,YAAJ,CAAiBH,OAAjB,CAA0BE,KAA1B,CAAP,CACD,C,GAQKC,CAAAA,Y,yBAKJ,sBAAoBH,OAApB,CAAoDE,KAApD,CAAwE,yCAApDF,OAAoD,CAApDA,OAAoD,MAApBE,KAAoB,CAApBA,KAAoB,MAJjEE,MAIiE,aAHhEC,MAGgE,CAH3B,EAG2B,MAFhEC,YAEgE,CAFR,EAEQ,CACtE,GAAMC,CAAAA,MAAM,CAAG,GAAf,CACA,KAAKH,MAAL,CAAc,KAAKF,KAAL,CAAWM,WAAX,CAAuB,CACnCD,MAAM,CAANA,MADmC,CAEnCE,MAAM,CAAEP,KAAK,CAACO,MAFqB,CAAvB,CAAd,CAID,C,yEAEkBC,K,CAAqB,CACtC,GAAMC,CAAAA,UAAU,CAAG,KAAKT,KAAL,CAAWM,WAAX,gBACjBD,MAAM,CAAE,CADS,CAEjBE,MAAM,CAAE,KAAKL,MAAL,CAAYQ,KAFH,EAGdF,KAHc,EAAnB,CAKA,KAAKL,MAAL,CAAYK,KAAK,CAACG,EAAlB,EAAwBF,UAAxB,CACA,MAAOD,CAAAA,KAAK,CAACG,EAAb,CACD,C,yCAEgB,CACf;AACD,C,+CAEmB,gBAClBC,MAAM,CAACC,IAAP,CAAY,KAAKV,MAAjB,EAAyBW,OAAzB,CAAiC,SAACC,OAAD,CAAa,CAC5C,KAAI,CAACZ,MAAL,CAAYY,OAAZ,EAAqBC,UAArB,GACD,CAFD,EAGA,KAAKd,MAAL,CAAYc,UAAZ,GACD,C,oCAEYC,M,CAAgBF,O,CAAiBG,I,CAAc,CAC1D,GAAI,KAAKd,YAAL,CAAkBa,MAAlB,CAAJ,CAA+B,CAC7B,OACD,CACD,GAAME,CAAAA,MAAM,CAAG,KAAKrB,OAAL,CAAasB,SAAb,CAAuBH,MAAvB,CAAf,CACA,GAAMT,CAAAA,KAAK,CAAG,KAAKL,MAAL,CAAYY,OAAZ,CAAd,CACA,GAAMM,CAAAA,MAAM,CAAG,KAAKrB,KAAL,CAAWsB,iBAAX,CAA6B,CAC1Cf,MAAM,CAAEC,KAAK,CAACE,KAD4B,CAE1CS,MAAM,CAANA,MAF0C,CAA7B,CAAf,CAIA,KAAKf,YAAL,CAAkBa,MAAlB,EAA4BI,MAA5B,CACAA,MAAM,CAACE,KAAP,CAAaL,IAAb,EACD,C,kCAEWD,M,CAAgBC,I,CAAc,CACxC,GAAMG,CAAAA,MAAM,CAAG,KAAKjB,YAAL,CAAkBa,MAAlB,CAAf,CACA,GAAII,MAAM,GAAKG,SAAf,CAA0B,CACxBH,MAAM,CAACI,IAAP,CAAYP,IAAZ,EACD,CACD,KAAKd,YAAL,CAAkBa,MAAlB,EAA4BO,SAA5B,CACD,C","sourcesContent":["import { IAudioContext } from \"standardized-audio-context\";\nimport {\n  AudioEngine,\n  AudioSource,\n  AudioTrack,\n  createAudioEngine,\n} from \"./AudioEngine\";\n\n/**\n * Sampler: the audio player\n */\nexport interface Sampler {\n  connect(): void;\n  disconnect(): void;\n  createTrack(track: SamplerTrack): void;\n  start(clipId: string, trackId: string, time: number): void;\n  stop(clipId: string, time: number): void;\n}\n\nexport interface SampleBuffers {\n  getBuffer(clipId: string): any;\n}\n\nexport function createSampler(\n  buffers: SampleBuffers,\n  ctx: IAudioContext\n): Sampler {\n  const audio = createAudioEngine(ctx);\n  return new AudioSampler(buffers, audio);\n}\n\nexport interface SamplerTrack {\n  id: string;\n  name: string;\n  volume?: number;\n}\n\nclass AudioSampler implements Sampler {\n  public master: AudioTrack;\n  private tracks: Record<string, AudioTrack> = {};\n  private audioSources: Record<string, AudioSource | undefined> = {};\n\n  constructor(private buffers: SampleBuffers, private audio: AudioEngine) {\n    const volume = 0.2;\n    this.master = this.audio.createTrack({\n      volume,\n      output: audio.output,\n    });\n  }\n\n  public createTrack(track: SamplerTrack) {\n    const audioTrack = this.audio.createTrack({\n      volume: 1,\n      output: this.master.input,\n      ...track,\n    });\n    this.tracks[track.id] = audioTrack;\n    return track.id;\n  }\n\n  public connect() {\n    // nothing to do?\n  }\n\n  public disconnect() {\n    Object.keys(this.tracks).forEach((trackId) => {\n      this.tracks[trackId].disconnect();\n    });\n    this.master.disconnect();\n  }\n\n  public start(clipId: string, trackId: string, time: number) {\n    if (this.audioSources[clipId]) {\n      return;\n    }\n    const buffer = this.buffers.getBuffer(clipId);\n    const track = this.tracks[trackId];\n    const source = this.audio.createAudioSource({\n      output: track.input,\n      buffer,\n    });\n    this.audioSources[clipId] = source;\n    source.start(time);\n  }\n\n  public stop(clipId: string, time: number) {\n    const source = this.audioSources[clipId];\n    if (source !== undefined) {\n      source.stop(time);\n    }\n    this.audioSources[clipId] = undefined;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}