{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { ellipticF, ellipticFi, ellipticJi } from \"./elliptic.js\";\nimport { abs, atan, atan2, cos, exp, halfPi, log, pi, sin, sqrt, sqrt2, tan } from \"./math.js\";\nimport squareRaw from \"./square.js\";\nexport function guyouRaw(lambda, phi) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      psi = log(tan(pi / 4 + abs(phi) / 2)),\n      r = exp(f * psi) / sqrt(k_),\n      at = guyouComplexAtan(r * cos(f * lambda), r * sin(f * lambda)),\n      t = ellipticFi(at[0], at[1], k * k);\n  return [-t[1], (phi >= 0 ? 1 : -1) * (0.5 * K - t[0])];\n}\n\nfunction guyouComplexAtan(x, y) {\n  var x2 = x * x,\n      y_1 = y + 1,\n      t = 1 - x2 - y * y;\n  return [0.5 * ((x >= 0 ? halfPi : -halfPi) - atan2(t, 2 * x)), -0.25 * log(t * t + 4 * x2) + 0.5 * log(y_1 * y_1 + x2)];\n}\n\nfunction guyouComplexDivide(a, b) {\n  var denominator = b[0] * b[0] + b[1] * b[1];\n  return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];\n}\n\nguyouRaw.invert = function (x, y) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      j = ellipticJi(0.5 * K - y, -x, k * k),\n      tn = guyouComplexDivide(j[0], j[1]),\n      lambda = atan2(tn[1], tn[0]) / f;\n  return [lambda, 2 * atan(exp(0.5 / f * log(k_ * tn[0] * tn[0] + k_ * tn[1] * tn[1]))) - halfPi];\n};\n\nexport default function () {\n  return projection(squareRaw(guyouRaw)).scale(151.496);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/guyou.js"],"names":["geoProjection","projection","ellipticF","ellipticFi","ellipticJi","abs","atan","atan2","cos","exp","halfPi","log","pi","sin","sqrt","sqrt2","tan","squareRaw","guyouRaw","lambda","phi","k_","k","K","f","psi","r","at","guyouComplexAtan","t","x","y","x2","y_1","guyouComplexDivide","a","b","denominator","invert","j","tn","scale"],"mappings":"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","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {ellipticF, ellipticFi, ellipticJi} from \"./elliptic.js\";\nimport {abs, atan, atan2, cos, exp, halfPi, log, pi, sin, sqrt, sqrt2, tan} from \"./math.js\";\nimport squareRaw from \"./square.js\";\n\nexport function guyouRaw(lambda, phi) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      psi = log(tan(pi / 4 + abs(phi) / 2)),\n      r = exp(f * psi) / sqrt(k_),\n      at = guyouComplexAtan(r * cos(f * lambda), r * sin(f * lambda)),\n      t = ellipticFi(at[0], at[1], k * k);\n  return [-t[1], (phi >= 0 ? 1 : -1) * (0.5 * K - t[0])];\n}\n\nfunction guyouComplexAtan(x, y) {\n  var x2 = x * x,\n      y_1 = y + 1,\n      t = 1 - x2 - y * y;\n  return [\n   0.5 * ((x >= 0 ? halfPi : -halfPi) - atan2(t, 2 * x)),\n    -0.25 * log(t * t + 4 * x2) +0.5 * log(y_1 * y_1 + x2)\n  ];\n}\n\nfunction guyouComplexDivide(a, b) {\n  var denominator = b[0] * b[0] + b[1] * b[1];\n  return [\n    (a[0] * b[0] + a[1] * b[1]) / denominator,\n    (a[1] * b[0] - a[0] * b[1]) / denominator\n  ];\n}\n\nguyouRaw.invert = function(x, y) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      j = ellipticJi(0.5 * K - y, -x, k * k),\n      tn = guyouComplexDivide(j[0], j[1]),\n      lambda = atan2(tn[1], tn[0]) / f;\n  return [\n    lambda,\n    2 * atan(exp(0.5 / f * log(k_ * tn[0] * tn[0] + k_ * tn[1] * tn[1]))) - halfPi\n  ];\n};\n\nexport default function() {\n  return projection(squareRaw(guyouRaw))\n      .scale(151.496);\n}\n"]},"metadata":{},"sourceType":"module"}