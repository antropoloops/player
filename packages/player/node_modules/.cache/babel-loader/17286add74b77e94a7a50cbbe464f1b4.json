{"ast":null,"code":"import _slicedToArray from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from\"react\";import*as Screenfull from\"screenfull\";export function useFullscreen(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isFullscreen=_useState2[0],setIsFullscreen=_useState2[1];useEffect(function(){if(Screenfull.isEnabled){var screen=Screenfull;var handleChange=function handleChange(event){setIsFullscreen(screen.isFullscreen);};screen.on(\"change\",handleChange);return function(){screen.off(\"change\",handleChange);};}});function toggleFullscreen(){if(Screenfull.isEnabled){var screen=Screenfull;screen.isFullscreen?screen.exit():screen.request();}}return{isFullscreen:isFullscreen,toggleFullscreen:toggleFullscreen};}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/components/Player/useFullscreen.ts"],"names":["useEffect","useState","Screenfull","useFullscreen","isFullscreen","setIsFullscreen","isEnabled","screen","handleChange","event","on","off","toggleFullscreen","exit","request"],"mappings":"4JAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,MAAO,GAAKC,CAAAA,UAAZ,KAA4B,YAA5B,CAOA,MAAO,SAASC,CAAAA,aAAT,EAAqC,eACFF,QAAQ,CAAC,KAAD,CADN,wCACnCG,YADmC,eACrBC,eADqB,eAE1CL,SAAS,CAAC,UAAM,CACd,GAAIE,UAAU,CAACI,SAAf,CAA0B,CACxB,GAAMC,CAAAA,MAAM,CAAGL,UAAf,CACA,GAAMM,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAkB,CACrCJ,eAAe,CAACE,MAAM,CAACH,YAAR,CAAf,CACD,CAFD,CAIAG,MAAM,CAACG,EAAP,CAAU,QAAV,CAAoBF,YAApB,EACA,MAAO,WAAM,CACXD,MAAM,CAACI,GAAP,CAAW,QAAX,CAAqBH,YAArB,EACD,CAFD,CAGD,CACF,CAZQ,CAAT,CAaA,QAASI,CAAAA,gBAAT,EAA4B,CAC1B,GAAIV,UAAU,CAACI,SAAf,CAA0B,CACxB,GAAMC,CAAAA,MAAM,CAAGL,UAAf,CACAK,MAAM,CAACH,YAAP,CAAsBG,MAAM,CAACM,IAAP,EAAtB,CAAsCN,MAAM,CAACO,OAAP,EAAtC,CACD,CACF,CACD,MAAO,CAAEV,YAAY,CAAZA,YAAF,CAAgBQ,gBAAgB,CAAhBA,gBAAhB,CAAP,CACD","sourcesContent":["import { useEffect, useState } from \"react\";\nimport * as Screenfull from \"screenfull\";\n\nexport interface Fullscreen {\n  isFullscreen: boolean;\n  toggleFullscreen: () => void;\n}\n\nexport function useFullscreen(): Fullscreen {\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  useEffect(() => {\n    if (Screenfull.isEnabled) {\n      const screen = Screenfull;\n      const handleChange = (event: Event) => {\n        setIsFullscreen(screen.isFullscreen);\n      };\n\n      screen.on(\"change\", handleChange);\n      return () => {\n        screen.off(\"change\", handleChange);\n      };\n    }\n  });\n  function toggleFullscreen() {\n    if (Screenfull.isEnabled) {\n      const screen = Screenfull;\n      screen.isFullscreen ? screen.exit() : screen.request();\n    }\n  }\n  return { isFullscreen, toggleFullscreen };\n}\n"]},"metadata":{},"sourceType":"module"}