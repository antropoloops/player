{"ast":null,"code":"import _classCallCheck from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";export var Sampler=/*#__PURE__*/function(){function Sampler(audioset,buffers,audio){var _this=this;_classCallCheck(this,Sampler);this.audioset=audioset;this.buffers=buffers;this.audio=audio;this.master=void 0;this.tracks={};this.audioSources={};this.master=audio.createTrack({volume:0.8});audioset.tracks.forEach(function(track){_this.tracks[track.id]=audio.createTrack({volume:1},_this.master);});}_createClass(Sampler,[{key:\"run\",value:function run(command){switch(command.command){case\"startClip\":return this.start(command.clipId,command.time);case\"stopClip\":return this.stop(command.clipId,command.time);default:}}},{key:\"start\",value:function start(clipId,time){if(this.audioSources[clipId]){return;}var buffer=this.buffers.getBuffer(clipId);var trackId=this.audioset.index.trackIdOfClip[clipId];var track=this.tracks[trackId];var source=this.audio.createAudioSource({buffer:buffer},track);this.audioSources[clipId]=source;source.start(time);}},{key:\"stop\",value:function stop(clipId,time){var source=this.audioSources[clipId];if(source!==undefined){source.stop(time);}this.audioSources[clipId]=undefined;}}]);return Sampler;}();","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/Sampler.ts"],"names":["Sampler","audioset","buffers","audio","master","tracks","audioSources","createTrack","volume","forEach","track","id","command","start","clipId","time","stop","buffer","getBuffer","trackId","index","trackIdOfClip","source","createAudioSource","undefined"],"mappings":"sTAQA,UAAaA,CAAAA,OAAb,yBAKE,iBACUC,QADV,CAEUC,OAFV,CAGUC,KAHV,CAIE,mDAHQF,QAGR,CAHQA,QAGR,MAFQC,OAER,CAFQA,OAER,MADQC,KACR,CADQA,KACR,MARMC,MAQN,aAPMC,MAON,CAP2C,EAO3C,MANMC,YAMN,CAN8D,EAM9D,CACA,KAAKF,MAAL,CAAcD,KAAK,CAACI,WAAN,CAAkB,CAAEC,MAAM,CAAE,GAAV,CAAlB,CAAd,CACAP,QAAQ,CAACI,MAAT,CAAgBI,OAAhB,CAAwB,SAAAC,KAAK,CAAI,CAC/B,KAAI,CAACL,MAAL,CAAYK,KAAK,CAACC,EAAlB,EAAwBR,KAAK,CAACI,WAAN,CAAkB,CAAEC,MAAM,CAAE,CAAV,CAAlB,CAAiC,KAAI,CAACJ,MAAtC,CAAxB,CACD,CAFD,EAGD,CAdH,oDAgBaQ,OAhBb,CAgBsC,CAClC,OAAQA,OAAO,CAACA,OAAhB,EACE,IAAK,WAAL,CACE,MAAO,MAAKC,KAAL,CAAWD,OAAO,CAACE,MAAnB,CAA2BF,OAAO,CAACG,IAAnC,CAAP,CACF,IAAK,UAAL,CACE,MAAO,MAAKC,IAAL,CAAUJ,OAAO,CAACE,MAAlB,CAA0BF,OAAO,CAACG,IAAlC,CAAP,CACF,QALF,CAOD,CAxBH,oCA0BeD,MA1Bf,CA0B+BC,IA1B/B,CA0B6C,CACzC,GAAI,KAAKT,YAAL,CAAkBQ,MAAlB,CAAJ,CAA+B,CAC7B,OACD,CAED,GAAMG,CAAAA,MAAM,CAAG,KAAKf,OAAL,CAAagB,SAAb,CAAuBJ,MAAvB,CAAf,CACA,GAAMK,CAAAA,OAAO,CAAG,KAAKlB,QAAL,CAAcmB,KAAd,CAAoBC,aAApB,CAAkCP,MAAlC,CAAhB,CACA,GAAMJ,CAAAA,KAAK,CAAG,KAAKL,MAAL,CAAYc,OAAZ,CAAd,CACA,GAAMG,CAAAA,MAAM,CAAG,KAAKnB,KAAL,CAAWoB,iBAAX,CAA6B,CAAEN,MAAM,CAANA,MAAF,CAA7B,CAAyCP,KAAzC,CAAf,CACA,KAAKJ,YAAL,CAAkBQ,MAAlB,EAA4BQ,MAA5B,CAEAA,MAAM,CAACT,KAAP,CAAaE,IAAb,EACD,CAtCH,kCAwCcD,MAxCd,CAwC8BC,IAxC9B,CAwC4C,CACxC,GAAMO,CAAAA,MAAM,CAAG,KAAKhB,YAAL,CAAkBQ,MAAlB,CAAf,CACA,GAAIQ,MAAM,GAAKE,SAAf,CAA0B,CACxBF,MAAM,CAACN,IAAP,CAAYD,IAAZ,EACD,CACD,KAAKT,YAAL,CAAkBQ,MAAlB,EAA4BU,SAA5B,CACD,CA9CH","sourcesContent":["import { Audioset } from \"../audioset\";\nimport { AudioEngine, AudioSource, AudioTrack } from \"./Audio\";\nimport { ControlCommand } from \"./AudiosetControl\";\n\nexport interface SamplerBuffers {\n  getBuffer(clipId: string): any;\n}\n\nexport class Sampler {\n  private master: AudioTrack;\n  private tracks: Record<string, AudioTrack> = {};\n  private audioSources: Record<string, AudioSource | undefined> = {};\n\n  constructor(\n    private audioset: Audioset,\n    private buffers: SamplerBuffers,\n    private audio: AudioEngine,\n  ) {\n    this.master = audio.createTrack({ volume: 0.8 });\n    audioset.tracks.forEach(track => {\n      this.tracks[track.id] = audio.createTrack({ volume: 1 }, this.master);\n    });\n  }\n\n  public run(command: ControlCommand) {\n    switch (command.command) {\n      case \"startClip\":\n        return this.start(command.clipId, command.time);\n      case \"stopClip\":\n        return this.stop(command.clipId, command.time);\n      default:\n    }\n  }\n\n  public start(clipId: string, time: number) {\n    if (this.audioSources[clipId]) {\n      return;\n    }\n\n    const buffer = this.buffers.getBuffer(clipId);\n    const trackId = this.audioset.index.trackIdOfClip[clipId];\n    const track = this.tracks[trackId];\n    const source = this.audio.createAudioSource({ buffer }, track);\n    this.audioSources[clipId] = source;\n\n    source.start(time);\n  }\n\n  public stop(clipId: string, time: number) {\n    const source = this.audioSources[clipId];\n    if (source !== undefined) {\n      source.stop(time);\n    }\n    this.audioSources[clipId] = undefined;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}