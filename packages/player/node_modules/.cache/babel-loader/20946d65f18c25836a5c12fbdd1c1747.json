{"ast":null,"code":"import _objectSpread from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  fftSize: 2048,\n  maxDecibels: -30,\n  minDecibels: -100,\n  smoothingTimeConstant: 0.8\n};\nexport var createAnalyserNodeConstructor = function createAnalyserNodeConstructor(audionNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext) {\n  return /*#__PURE__*/function (_audionNodeConstructo) {\n    _inherits(AnalyserNode, _audionNodeConstructo);\n\n    var _super = _createSuper(AnalyserNode);\n\n    function AnalyserNode(context) {\n      var _this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_OPTIONS;\n\n      _classCallCheck(this, AnalyserNode);\n\n      var nativeContext = getNativeContext(context);\n\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n      var nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);\n      var analyserNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createAnalyserNodeRenderer() : null;\n      _this = _super.call(this, context, false, nativeAnalyserNode, analyserNodeRenderer);\n      _this._nativeAnalyserNode = nativeAnalyserNode;\n      return _this;\n    }\n\n    _createClass(AnalyserNode, [{\n      key: \"getByteFrequencyData\",\n      value: function getByteFrequencyData(array) {\n        this._nativeAnalyserNode.getByteFrequencyData(array);\n      }\n    }, {\n      key: \"getByteTimeDomainData\",\n      value: function getByteTimeDomainData(array) {\n        this._nativeAnalyserNode.getByteTimeDomainData(array);\n      }\n    }, {\n      key: \"getFloatFrequencyData\",\n      value: function getFloatFrequencyData(array) {\n        this._nativeAnalyserNode.getFloatFrequencyData(array);\n      }\n    }, {\n      key: \"getFloatTimeDomainData\",\n      value: function getFloatTimeDomainData(array) {\n        this._nativeAnalyserNode.getFloatTimeDomainData(array);\n      }\n    }, {\n      key: \"fftSize\",\n      get: function get() {\n        return this._nativeAnalyserNode.fftSize;\n      },\n      set: function set(value) {\n        this._nativeAnalyserNode.fftSize = value;\n      }\n    }, {\n      key: \"frequencyBinCount\",\n      get: function get() {\n        return this._nativeAnalyserNode.frequencyBinCount;\n      }\n    }, {\n      key: \"maxDecibels\",\n      get: function get() {\n        return this._nativeAnalyserNode.maxDecibels;\n      },\n      set: function set(value) {\n        // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n        var maxDecibels = this._nativeAnalyserNode.maxDecibels;\n        this._nativeAnalyserNode.maxDecibels = value;\n\n        if (!(value > this._nativeAnalyserNode.minDecibels)) {\n          this._nativeAnalyserNode.maxDecibels = maxDecibels;\n          throw createIndexSizeError();\n        }\n      }\n    }, {\n      key: \"minDecibels\",\n      get: function get() {\n        return this._nativeAnalyserNode.minDecibels;\n      },\n      set: function set(value) {\n        // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n        var minDecibels = this._nativeAnalyserNode.minDecibels;\n        this._nativeAnalyserNode.minDecibels = value;\n\n        if (!(this._nativeAnalyserNode.maxDecibels > value)) {\n          this._nativeAnalyserNode.minDecibels = minDecibels;\n          throw createIndexSizeError();\n        }\n      }\n    }, {\n      key: \"smoothingTimeConstant\",\n      get: function get() {\n        return this._nativeAnalyserNode.smoothingTimeConstant;\n      },\n      set: function set(value) {\n        this._nativeAnalyserNode.smoothingTimeConstant = value;\n      }\n    }]);\n\n    return AnalyserNode;\n  }(audionNodeConstructor);\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/analyser-node-constructor.js"],"names":["DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","fftSize","maxDecibels","minDecibels","smoothingTimeConstant","createAnalyserNodeConstructor","audionNodeConstructor","createAnalyserNodeRenderer","createIndexSizeError","createNativeAnalyserNode","getNativeContext","isNativeOfflineAudioContext","context","options","nativeContext","mergedOptions","nativeAnalyserNode","analyserNodeRenderer","_nativeAnalyserNode","array","getByteFrequencyData","getByteTimeDomainData","getFloatFrequencyData","getFloatTimeDomainData","value","frequencyBinCount"],"mappings":"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","sourcesContent":["const DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    fftSize: 2048,\n    maxDecibels: -30,\n    minDecibels: -100,\n    smoothingTimeConstant: 0.8\n};\nexport const createAnalyserNodeConstructor = (audionNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class AnalyserNode extends audionNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);\n            const analyserNodeRenderer = ((isNativeOfflineAudioContext(nativeContext))\n                ? createAnalyserNodeRenderer()\n                : null);\n            super(context, false, nativeAnalyserNode, analyserNodeRenderer);\n            this._nativeAnalyserNode = nativeAnalyserNode;\n        }\n        get fftSize() {\n            return this._nativeAnalyserNode.fftSize;\n        }\n        set fftSize(value) {\n            this._nativeAnalyserNode.fftSize = value;\n        }\n        get frequencyBinCount() {\n            return this._nativeAnalyserNode.frequencyBinCount;\n        }\n        get maxDecibels() {\n            return this._nativeAnalyserNode.maxDecibels;\n        }\n        set maxDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const maxDecibels = this._nativeAnalyserNode.maxDecibels;\n            this._nativeAnalyserNode.maxDecibels = value;\n            if (!(value > this._nativeAnalyserNode.minDecibels)) {\n                this._nativeAnalyserNode.maxDecibels = maxDecibels;\n                throw createIndexSizeError();\n            }\n        }\n        get minDecibels() {\n            return this._nativeAnalyserNode.minDecibels;\n        }\n        set minDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const minDecibels = this._nativeAnalyserNode.minDecibels;\n            this._nativeAnalyserNode.minDecibels = value;\n            if (!(this._nativeAnalyserNode.maxDecibels > value)) {\n                this._nativeAnalyserNode.minDecibels = minDecibels;\n                throw createIndexSizeError();\n            }\n        }\n        get smoothingTimeConstant() {\n            return this._nativeAnalyserNode.smoothingTimeConstant;\n        }\n        set smoothingTimeConstant(value) {\n            this._nativeAnalyserNode.smoothingTimeConstant = value;\n        }\n        getByteFrequencyData(array) {\n            this._nativeAnalyserNode.getByteFrequencyData(array);\n        }\n        getByteTimeDomainData(array) {\n            this._nativeAnalyserNode.getByteTimeDomainData(array);\n        }\n        getFloatFrequencyData(array) {\n            this._nativeAnalyserNode.getFloatFrequencyData(array);\n        }\n        getFloatTimeDomainData(array) {\n            this._nativeAnalyserNode.getFloatTimeDomainData(array);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/analyser-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}