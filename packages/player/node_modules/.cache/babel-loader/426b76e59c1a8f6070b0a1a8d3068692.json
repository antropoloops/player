{"ast":null,"code":"import { geoCentroid as centroid, geoProjection as projection, geoRotation as rotation } from \"d3-geo\";\nimport { abs, acos, asin, atan2, cos, epsilon, floor, pi, radians, sin, sqrt } from \"./math.js\";\nimport { solve2d } from \"./newton.js\"; // Azimuthal distance.\n\nfunction distance(dPhi, c1, s1, c2, s2, dLambda) {\n  var cosdLambda = cos(dLambda),\n      r;\n\n  if (abs(dPhi) > 1 || abs(dLambda) > 1) {\n    r = acos(s1 * s2 + c1 * c2 * cosdLambda);\n  } else {\n    var sindPhi = sin(dPhi / 2),\n        sindLambda = sin(dLambda / 2);\n    r = 2 * asin(sqrt(sindPhi * sindPhi + c1 * c2 * sindLambda * sindLambda));\n  }\n\n  return abs(r) > epsilon ? [r, atan2(c2 * sin(dLambda), c1 * s2 - s1 * c2 * cosdLambda)] : [0, 0];\n} // Angle opposite a, and contained between sides of lengths b and c.\n\n\nfunction angle(b, c, a) {\n  return acos((b * b + c * c - a * a) / (2 * b * c));\n} // Normalize longitude.\n\n\nfunction longitude(lambda) {\n  return lambda - 2 * pi * floor((lambda + pi) / (2 * pi));\n}\n\nexport function chamberlinRaw(p0, p1, p2) {\n  var points = [[p0[0], p0[1], sin(p0[1]), cos(p0[1])], [p1[0], p1[1], sin(p1[1]), cos(p1[1])], [p2[0], p2[1], sin(p2[1]), cos(p2[1])]];\n\n  for (var a = points[2], b, i = 0; i < 3; ++i, a = b) {\n    b = points[i];\n    a.v = distance(b[1] - a[1], a[3], a[2], b[3], b[2], b[0] - a[0]);\n    a.point = [0, 0];\n  }\n\n  var beta0 = angle(points[0].v[0], points[2].v[0], points[1].v[0]),\n      beta1 = angle(points[0].v[0], points[1].v[0], points[2].v[0]),\n      beta2 = pi - beta0;\n  points[2].point[1] = 0;\n  points[0].point[0] = -(points[1].point[0] = points[0].v[0] / 2);\n  var mean = [points[2].point[0] = points[0].point[0] + points[2].v[0] * cos(beta0), 2 * (points[0].point[1] = points[1].point[1] = points[2].v[0] * sin(beta0))];\n\n  function forward(lambda, phi) {\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        v = new Array(3),\n        i; // Compute distance and azimuth from control points.\n\n    for (i = 0; i < 3; ++i) {\n      var p = points[i];\n      v[i] = distance(phi - p[1], p[3], p[2], cosPhi, sinPhi, lambda - p[0]);\n      if (!v[i][0]) return p.point;\n      v[i][1] = longitude(v[i][1] - p.v[1]);\n    } // Arithmetic mean of interception points.\n\n\n    var point = mean.slice();\n\n    for (i = 0; i < 3; ++i) {\n      var j = i == 2 ? 0 : i + 1;\n      var a = angle(points[i].v[0], v[i][0], v[j][0]);\n      if (v[i][1] < 0) a = -a;\n\n      if (!i) {\n        point[0] += v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else if (i == 1) {\n        a = beta1 - a;\n        point[0] -= v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else {\n        a = beta2 - a;\n        point[0] += v[i][0] * cos(a);\n        point[1] += v[i][0] * sin(a);\n      }\n    }\n\n    point[0] /= 3, point[1] /= 3;\n    return point;\n  }\n\n  return forward;\n}\n\nfunction pointRadians(p) {\n  return p[0] *= radians, p[1] *= radians, p;\n}\n\nexport function chamberlinAfrica() {\n  return chamberlin([0, 22], [45, 22], [22.5, -22]).scale(380).center([22.5, 2]);\n}\nexport default function chamberlin(p0, p1, p2) {\n  // TODO order matters!\n  var c = centroid({\n    type: \"MultiPoint\",\n    coordinates: [p0, p1, p2]\n  }),\n      R = [-c[0], -c[1]],\n      r = rotation(R),\n      f = chamberlinRaw(pointRadians(r(p0)), pointRadians(r(p1)), pointRadians(r(p2)));\n  f.invert = solve2d(f);\n  var p = projection(f).rotate(R),\n      center = p.center;\n  delete p.rotate;\n\n  p.center = function (_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p.clipAngle(90);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/chamberlin.js"],"names":["geoCentroid","centroid","geoProjection","projection","geoRotation","rotation","abs","acos","asin","atan2","cos","epsilon","floor","pi","radians","sin","sqrt","solve2d","distance","dPhi","c1","s1","c2","s2","dLambda","cosdLambda","r","sindPhi","sindLambda","angle","b","c","a","longitude","lambda","chamberlinRaw","p0","p1","p2","points","i","v","point","beta0","beta1","beta2","mean","forward","phi","sinPhi","cosPhi","Array","p","slice","j","pointRadians","chamberlinAfrica","chamberlin","scale","center","type","coordinates","R","f","invert","rotate","_","arguments","length","clipAngle"],"mappings":"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","sourcesContent":["import {geoCentroid as centroid, geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, epsilon, floor, pi, radians, sin, sqrt} from \"./math.js\";\nimport {solve2d} from \"./newton.js\";\n\n// Azimuthal distance.\nfunction distance(dPhi, c1, s1, c2, s2, dLambda) {\n  var cosdLambda = cos(dLambda), r;\n  if (abs(dPhi) > 1 || abs(dLambda) > 1) {\n    r = acos(s1 * s2 + c1 * c2 * cosdLambda);\n  } else {\n    var sindPhi = sin(dPhi / 2), sindLambda = sin(dLambda / 2);\n    r = 2 * asin(sqrt(sindPhi * sindPhi + c1 * c2 * sindLambda * sindLambda));\n  }\n  return abs(r) > epsilon ? [r, atan2(c2 * sin(dLambda), c1 * s2 - s1 * c2 * cosdLambda)] : [0, 0];\n}\n\n// Angle opposite a, and contained between sides of lengths b and c.\nfunction angle(b, c, a) {\n  return acos((b * b + c * c - a * a) / (2 * b * c));\n}\n\n// Normalize longitude.\nfunction longitude(lambda) {\n  return lambda - 2 * pi * floor((lambda + pi) / (2 * pi));\n}\n\nexport function chamberlinRaw(p0, p1, p2) {\n  var points = [\n    [p0[0], p0[1], sin(p0[1]), cos(p0[1])],\n    [p1[0], p1[1], sin(p1[1]), cos(p1[1])],\n    [p2[0], p2[1], sin(p2[1]), cos(p2[1])]\n  ];\n\n  for (var a = points[2], b, i = 0; i < 3; ++i, a = b) {\n    b = points[i];\n    a.v = distance(b[1] - a[1], a[3], a[2], b[3], b[2], b[0] - a[0]);\n    a.point = [0, 0];\n  }\n\n  var beta0 = angle(points[0].v[0], points[2].v[0], points[1].v[0]),\n      beta1 = angle(points[0].v[0], points[1].v[0], points[2].v[0]),\n      beta2 = pi - beta0;\n\n  points[2].point[1] = 0;\n  points[0].point[0] = -(points[1].point[0] = points[0].v[0] / 2);\n\n  var mean = [\n    points[2].point[0] = points[0].point[0] + points[2].v[0] * cos(beta0),\n    2 * (points[0].point[1] = points[1].point[1] = points[2].v[0] * sin(beta0))\n  ];\n\n  function forward(lambda, phi) {\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        v = new Array(3), i;\n\n    // Compute distance and azimuth from control points.\n    for (i = 0; i < 3; ++i) {\n      var p = points[i];\n      v[i] = distance(phi - p[1], p[3], p[2], cosPhi, sinPhi, lambda - p[0]);\n      if (!v[i][0]) return p.point;\n      v[i][1] = longitude(v[i][1] - p.v[1]);\n    }\n\n    // Arithmetic mean of interception points.\n    var point = mean.slice();\n    for (i = 0; i < 3; ++i) {\n      var j = i == 2 ? 0 : i + 1;\n      var a = angle(points[i].v[0], v[i][0], v[j][0]);\n      if (v[i][1] < 0) a = -a;\n\n      if (!i) {\n        point[0] += v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else if (i == 1) {\n        a = beta1 - a;\n        point[0] -= v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else {\n        a = beta2 - a;\n        point[0] += v[i][0] * cos(a);\n        point[1] += v[i][0] * sin(a);\n      }\n    }\n\n    point[0] /= 3, point[1] /= 3;\n    return point;\n  }\n\n  return forward;\n}\n\nfunction pointRadians(p) {\n  return p[0] *= radians, p[1] *= radians, p;\n}\n\nexport function chamberlinAfrica() {\n  return chamberlin([0, 22], [45, 22], [22.5, -22])\n      .scale(380)\n      .center([22.5, 2]);\n}\n\nexport default function chamberlin(p0, p1, p2) { // TODO order matters!\n  var c = centroid({type: \"MultiPoint\", coordinates: [p0, p1, p2]}),\n      R = [-c[0], -c[1]],\n      r = rotation(R),\n      f = chamberlinRaw(pointRadians(r(p0)), pointRadians(r(p1)), pointRadians(r(p2)));\n  f.invert = solve2d(f);\n  var p = projection(f).rotate(R),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p\n      .clipAngle(90);\n}\n"]},"metadata":{},"sourceType":"module"}