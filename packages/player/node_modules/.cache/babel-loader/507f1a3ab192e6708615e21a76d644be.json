{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { abs, epsilon } from \"./math.js\";\nexport function ginzburg8Raw(lambda, phi) {\n  var lambda2 = lambda * lambda,\n      phi2 = phi * phi;\n  return [lambda * (1 - 0.162388 * phi2) * (0.87 - 0.000952426 * lambda2 * lambda2), phi * (1 + phi2 / 12)];\n}\n\nginzburg8Raw.invert = function (x, y) {\n  var lambda = x,\n      phi = y,\n      i = 50,\n      delta;\n\n  do {\n    var phi2 = phi * phi;\n    phi -= delta = (phi * (1 + phi2 / 12) - y) / (1 + phi2 / 4);\n  } while (abs(delta) > epsilon && --i > 0);\n\n  i = 50;\n  x /= 1 - 0.162388 * phi2;\n\n  do {\n    var lambda4 = (lambda4 = lambda * lambda) * lambda4;\n    lambda -= delta = (lambda * (0.87 - 0.000952426 * lambda4) - x) / (0.87 - 0.00476213 * lambda4);\n  } while (abs(delta) > epsilon && --i > 0);\n\n  return [lambda, phi];\n};\n\nexport default function () {\n  return projection(ginzburg8Raw).scale(131.747);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/ginzburg8.js"],"names":["geoProjection","projection","abs","epsilon","ginzburg8Raw","lambda","phi","lambda2","phi2","invert","x","y","i","delta","lambda4","scale"],"mappings":"AAAA,SAAQA,aAAa,IAAIC,UAAzB,QAA0C,QAA1C;AACA,SAAQC,GAAR,EAAaC,OAAb,QAA2B,WAA3B;AAEA,OAAO,SAASC,YAAT,CAAsBC,MAAtB,EAA8BC,GAA9B,EAAmC;AACxC,MAAIC,OAAO,GAAGF,MAAM,GAAGA,MAAvB;AAAA,MACIG,IAAI,GAAGF,GAAG,GAAGA,GADjB;AAEA,SAAO,CACLD,MAAM,IAAI,IAAI,WAAWG,IAAnB,CAAN,IAAkC,OAAO,cAAcD,OAAd,GAAwBA,OAAjE,CADK,EAELD,GAAG,IAAI,IAAIE,IAAI,GAAG,EAAf,CAFE,CAAP;AAID;;AAEDJ,YAAY,CAACK,MAAb,GAAsB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACnC,MAAIN,MAAM,GAAGK,CAAb;AAAA,MACIJ,GAAG,GAAGK,CADV;AAAA,MAEIC,CAAC,GAAG,EAFR;AAAA,MAEYC,KAFZ;;AAGA,KAAG;AACD,QAAIL,IAAI,GAAGF,GAAG,GAAGA,GAAjB;AACAA,IAAAA,GAAG,IAAIO,KAAK,GAAG,CAACP,GAAG,IAAI,IAAIE,IAAI,GAAG,EAAf,CAAH,GAAwBG,CAAzB,KAA+B,IAAIH,IAAI,GAAG,CAA1C,CAAf;AACD,GAHD,QAGSN,GAAG,CAACW,KAAD,CAAH,GAAaV,OAAb,IAAwB,EAAES,CAAF,GAAM,CAHvC;;AAIAA,EAAAA,CAAC,GAAG,EAAJ;AACAF,EAAAA,CAAC,IAAI,IAAG,WAAWF,IAAnB;;AACA,KAAG;AACD,QAAIM,OAAO,GAAG,CAACA,OAAO,GAAGT,MAAM,GAAGA,MAApB,IAA8BS,OAA5C;AACAT,IAAAA,MAAM,IAAIQ,KAAK,GAAG,CAACR,MAAM,IAAI,OAAO,cAAcS,OAAzB,CAAN,GAA0CJ,CAA3C,KAAiD,OAAO,aAAaI,OAArE,CAAlB;AACD,GAHD,QAGSZ,GAAG,CAACW,KAAD,CAAH,GAAaV,OAAb,IAAwB,EAAES,CAAF,GAAM,CAHvC;;AAIA,SAAO,CAACP,MAAD,EAASC,GAAT,CAAP;AACD,CAfD;;AAiBA,eAAe,YAAW;AACxB,SAAOL,UAAU,CAACG,YAAD,CAAV,CACFW,KADE,CACI,OADJ,CAAP;AAED","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math.js\";\n\nexport function ginzburg8Raw(lambda, phi) {\n  var lambda2 = lambda * lambda,\n      phi2 = phi * phi;\n  return [\n    lambda * (1 - 0.162388 * phi2) * (0.87 - 0.000952426 * lambda2 * lambda2),\n    phi * (1 + phi2 / 12)\n  ];\n}\n\nginzburg8Raw.invert = function(x, y) {\n  var lambda = x,\n      phi = y,\n      i = 50, delta;\n  do {\n    var phi2 = phi * phi;\n    phi -= delta = (phi * (1 + phi2 / 12) - y) / (1 + phi2 / 4);\n  } while (abs(delta) > epsilon && --i > 0);\n  i = 50;\n  x /= 1 -0.162388 * phi2;\n  do {\n    var lambda4 = (lambda4 = lambda * lambda) * lambda4;\n    lambda -= delta = (lambda * (0.87 - 0.000952426 * lambda4) - x) / (0.87 - 0.00476213 * lambda4);\n  } while (abs(delta) > epsilon && --i > 0);\n  return [lambda, phi];\n};\n\nexport default function() {\n  return projection(ginzburg8Raw)\n      .scale(131.747);\n}\n"]},"metadata":{},"sourceType":"module"}