{"ast":null,"code":"import _objectSpread from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/dani/Antropoloops/atpls-player/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  curve: null,\n  oversample: 'none'\n};\nexport var createWaveShaperNodeConstructor = function createWaveShaperNodeConstructor(audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(WaveShaperNode, _audioNodeConstructor);\n\n    var _super = _createSuper(WaveShaperNode);\n\n    function WaveShaperNode(context) {\n      var _this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_OPTIONS;\n\n      _classCallCheck(this, WaveShaperNode);\n\n      var nativeContext = getNativeContext(context);\n\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n      var nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var waveShaperNodeRenderer = isOffline ? createWaveShaperNodeRenderer() : null; // @todo Add a mechanism to only switch a WaveShaperNode to active while it is connected.\n\n      _this = _super.call(this, context, true, nativeWaveShaperNode, waveShaperNodeRenderer);\n      _this._isCurveNullified = false;\n      _this._nativeWaveShaperNode = nativeWaveShaperNode;\n      return _this;\n    }\n\n    _createClass(WaveShaperNode, [{\n      key: \"curve\",\n      get: function get() {\n        if (this._isCurveNullified) {\n          return null;\n        }\n\n        return this._nativeWaveShaperNode.curve;\n      },\n      set: function set(value) {\n        // Bug #103: Safari does not allow to set the curve to null.\n        if (value === null) {\n          this._isCurveNullified = true;\n          this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);\n        } else {\n          // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n          // Bug #104: Chrome will throw an InvalidAccessError when the curve has less than two samples.\n          if (value.length < 2) {\n            throw createInvalidStateError();\n          }\n\n          this._isCurveNullified = false;\n          this._nativeWaveShaperNode.curve = value;\n        }\n      }\n    }, {\n      key: \"oversample\",\n      get: function get() {\n        return this._nativeWaveShaperNode.oversample;\n      },\n      set: function set(value) {\n        this._nativeWaveShaperNode.oversample = value;\n      }\n    }]);\n\n    return WaveShaperNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/wave-shaper-node-constructor.js"],"names":["DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","curve","oversample","createWaveShaperNodeConstructor","audioNodeConstructor","createInvalidStateError","createNativeWaveShaperNode","createWaveShaperNodeRenderer","getNativeContext","isNativeOfflineAudioContext","context","options","nativeContext","mergedOptions","nativeWaveShaperNode","isOffline","waveShaperNodeRenderer","_isCurveNullified","_nativeWaveShaperNode","value","Float32Array","length"],"mappings":";;;;;AAAA,IAAMA,eAAe,GAAG;AACpBC,EAAAA,YAAY,EAAE,CADM;AAEpBC,EAAAA,gBAAgB,EAAE,KAFE;AAGpBC,EAAAA,qBAAqB,EAAE,UAHH;AAIpBC,EAAAA,KAAK,EAAE,IAJa;AAKpBC,EAAAA,UAAU,EAAE;AALQ,CAAxB;AAOA,OAAO,IAAMC,+BAA+B,GAAG,SAAlCA,+BAAkC,CAACC,oBAAD,EAAuBC,uBAAvB,EAAgDC,0BAAhD,EAA4EC,4BAA5E,EAA0GC,gBAA1G,EAA4HC,2BAA5H,EAA4J;AACvM;AAAA;;AAAA;;AACI,4BAAYC,OAAZ,EAAgD;AAAA;;AAAA,UAA3BC,OAA2B,uEAAjBd,eAAiB;;AAAA;;AAC5C,UAAMe,aAAa,GAAGJ,gBAAgB,CAACE,OAAD,CAAtC;;AACA,UAAMG,aAAa,mCAAQhB,eAAR,GAA4Bc,OAA5B,CAAnB;;AACA,UAAMG,oBAAoB,GAAGR,0BAA0B,CAACM,aAAD,EAAgBC,aAAhB,CAAvD;AACA,UAAME,SAAS,GAAGN,2BAA2B,CAACG,aAAD,CAA7C;AACA,UAAMI,sBAAsB,GAAKD,SAAD,GAAcR,4BAA4B,EAA1C,GAA+C,IAA/E,CAL4C,CAM5C;;AACA,gCAAMG,OAAN,EAAe,IAAf,EAAqBI,oBAArB,EAA2CE,sBAA3C;AACA,YAAKC,iBAAL,GAAyB,KAAzB;AACA,YAAKC,qBAAL,GAA6BJ,oBAA7B;AAT4C;AAU/C;;AAXL;AAAA;AAAA,0BAYgB;AACR,YAAI,KAAKG,iBAAT,EAA4B;AACxB,iBAAO,IAAP;AACH;;AACD,eAAO,KAAKC,qBAAL,CAA2BjB,KAAlC;AACH,OAjBL;AAAA,wBAkBckB,KAlBd,EAkBqB;AACb;AACA,YAAIA,KAAK,KAAK,IAAd,EAAoB;AAChB,eAAKF,iBAAL,GAAyB,IAAzB;AACA,eAAKC,qBAAL,CAA2BjB,KAA3B,GAAmC,IAAImB,YAAJ,CAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB,CAAnC;AACH,SAHD,MAIK;AACD;AACA;AACA,cAAID,KAAK,CAACE,MAAN,GAAe,CAAnB,EAAsB;AAClB,kBAAMhB,uBAAuB,EAA7B;AACH;;AACD,eAAKY,iBAAL,GAAyB,KAAzB;AACA,eAAKC,qBAAL,CAA2BjB,KAA3B,GAAmCkB,KAAnC;AACH;AACJ;AAjCL;AAAA;AAAA,0BAkCqB;AACb,eAAO,KAAKD,qBAAL,CAA2BhB,UAAlC;AACH,OApCL;AAAA,wBAqCmBiB,KArCnB,EAqC0B;AAClB,aAAKD,qBAAL,CAA2BhB,UAA3B,GAAwCiB,KAAxC;AACH;AAvCL;;AAAA;AAAA,IAAoCf,oBAApC;AAyCH,CA1CM","sourcesContent":["const DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    curve: null,\n    oversample: 'none'\n};\nexport const createWaveShaperNodeConstructor = (audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {\n    return class WaveShaperNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const waveShaperNodeRenderer = ((isOffline) ? createWaveShaperNodeRenderer() : null);\n            // @todo Add a mechanism to only switch a WaveShaperNode to active while it is connected.\n            super(context, true, nativeWaveShaperNode, waveShaperNodeRenderer);\n            this._isCurveNullified = false;\n            this._nativeWaveShaperNode = nativeWaveShaperNode;\n        }\n        get curve() {\n            if (this._isCurveNullified) {\n                return null;\n            }\n            return this._nativeWaveShaperNode.curve;\n        }\n        set curve(value) {\n            // Bug #103: Safari does not allow to set the curve to null.\n            if (value === null) {\n                this._isCurveNullified = true;\n                this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);\n            }\n            else {\n                // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n                // Bug #104: Chrome will throw an InvalidAccessError when the curve has less than two samples.\n                if (value.length < 2) {\n                    throw createInvalidStateError();\n                }\n                this._isCurveNullified = false;\n                this._nativeWaveShaperNode.curve = value;\n            }\n        }\n        get oversample() {\n            return this._nativeWaveShaperNode.oversample;\n        }\n        set oversample(value) {\n            this._nativeWaveShaperNode.oversample = value;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wave-shaper-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}