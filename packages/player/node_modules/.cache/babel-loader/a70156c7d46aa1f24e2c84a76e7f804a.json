{"ast":null,"code":"import debug from \"debug\";\nimport { decodeAudioBuffer } from \"./decodeAudioBuffer\";\nconst log = debug(\"atpls:resources\"); // TODO: abstract the loader mechanism: { stage, payload }\n\nexport class ResourceLoader {\n  constructor(audioset, listener) {\n    this.audioset = audioset;\n    this.listener = listener;\n    this.status = void 0;\n    this.preloadImage = void 0;\n    this.total = void 0;\n    this.completed = void 0;\n    this.buffers = {};\n    log(\"create ResourceLoader %s\", audioset.id);\n    this.status = {\n      stage: \"pending\"\n    };\n    this.total = this.audioset.clips.length;\n    this.completed = 0;\n    this.preloadImage = preloadImage;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  getBuffer(clipId) {\n    return this.buffers[clipId];\n  }\n\n  preload() {\n    log(\"Preload\");\n    const _this$audioset = this.audioset,\n          visuals = _this$audioset.visuals,\n          clips = _this$audioset.clips;\n    const promises = [];\n\n    if (visuals.mode === \"map\" && visuals.geomap.url) {\n      promises.push(fetch(visuals.geomap.url));\n    }\n\n    clips.forEach(clip => {\n      this.preloadImage(clip.resources.cover.small);\n    });\n    return Promise.all(promises);\n  }\n\n  load() {\n    const total = this.total,\n          completed = this.completed;\n\n    if (total === completed) {\n      return Promise.resolve();\n    }\n\n    this.setStatus({\n      stage: \"loading\",\n      total,\n      completed: 0\n    });\n    const clips = this.audioset.clips;\n    const promises = clips.map(clip => this.loadAudio(clip).catch(err => {\n      this.handleResourceCompleted();\n      log(\"Error %o\", err);\n    }));\n    return Promise.all(promises);\n  } //// PRIVATE ////\n\n\n  setStatus(status) {\n    this.status = status;\n    this.listener(status);\n  }\n\n  async loadAudio(clip) {\n    // TODO: check other formats\n    const url = clip.resources.audio.mp3;\n    const response = await fetch(url);\n    const buffer = await decodeAudioBuffer(response);\n    this.buffers[clip.id] = buffer;\n    this.handleResourceCompleted(url);\n    return buffer;\n  }\n\n  handleResourceCompleted(url) {\n    this.completed += 1;\n    const status = this.completed >= this.total ? {\n      stage: \"ready\",\n      total: this.total\n    } : {\n      stage: \"loading\",\n      total: this.total,\n      completed: this.completed\n    };\n    this.setStatus(status);\n  }\n\n}\n\nfunction preloadImage(url) {\n  if (!url || !url.length) {\n    return Promise.resolve();\n  }\n\n  return new Promise(resolve => {\n    const image = new Image();\n    image.addEventListener(\"load\", () => {\n      resolve(image);\n    });\n    image.src = url;\n  });\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/player/ResourceLoader.ts"],"names":["debug","decodeAudioBuffer","log","ResourceLoader","constructor","audioset","listener","status","preloadImage","total","completed","buffers","id","stage","clips","length","getStatus","getBuffer","clipId","preload","visuals","promises","mode","geomap","url","push","fetch","forEach","clip","resources","cover","small","Promise","all","load","resolve","setStatus","map","loadAudio","catch","err","handleResourceCompleted","audio","mp3","response","buffer","image","Image","addEventListener","src"],"mappings":"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","sourcesContent":["import debug from \"debug\";\nimport { Audioset, Clip } from \"../audioset\";\nimport { decodeAudioBuffer } from \"./decodeAudioBuffer\";\n\nconst log = debug(\"atpls:resources\");\n\n// TODO: abstract the loader mechanism: { stage, payload }\nexport interface LoadPending {\n  stage: \"pending\";\n}\nexport interface LoadingResources {\n  stage: \"loading\";\n  total: number;\n  completed: number;\n}\nexport interface ResourcesLoaded {\n  stage: \"ready\";\n  total: number;\n}\nexport interface ResourceLoadError {\n  stage: \"error\";\n  error: any;\n}\n\nexport type ResourceLoadStatus =\n  | LoadPending\n  | LoadingResources\n  | ResourcesLoaded\n  | ResourceLoadError;\n\nexport interface Resources {\n  getStatus(): ResourceLoadStatus;\n  getBuffer(clipId: string): any;\n  load(): Promise<any>;\n  preload(): Promise<any>;\n}\n\nexport class ResourceLoader implements Resources {\n  public status: ResourceLoadStatus;\n  private preloadImage: (url: string) => void;\n  private total: number;\n  private completed: number;\n  private buffers: Record<string, any> = {};\n\n  constructor(\n    private audioset: Audioset,\n    private listener: (status: ResourceLoadStatus) => void,\n  ) {\n    log(\"create ResourceLoader %s\", audioset.id);\n    this.status = { stage: \"pending\" };\n    this.total = this.audioset.clips.length;\n    this.completed = 0;\n    this.preloadImage = preloadImage;\n  }\n\n  public getStatus() {\n    return this.status;\n  }\n\n  public getBuffer(clipId: string): any {\n    return this.buffers[clipId];\n  }\n\n  public preload() {\n    log(\"Preload\");\n    const { visuals, clips } = this.audioset;\n    const promises: Array<Promise<any>> = [];\n    if (visuals.mode === \"map\" && visuals.geomap.url) {\n      promises.push(fetch(visuals.geomap.url));\n    }\n    clips.forEach(clip => {\n      this.preloadImage(clip.resources.cover.small);\n    });\n    return Promise.all(promises);\n  }\n\n  public load() {\n    const { total, completed } = this;\n    if (total === completed) {\n      return Promise.resolve();\n    }\n\n    this.setStatus({ stage: \"loading\", total, completed: 0 });\n    const clips = this.audioset.clips;\n    const promises = clips.map(clip =>\n      this.loadAudio(clip).catch(err => {\n        this.handleResourceCompleted();\n        log(\"Error %o\", err);\n      }),\n    );\n    return Promise.all(promises);\n  }\n\n  //// PRIVATE ////\n  private setStatus(status: ResourceLoadStatus) {\n    this.status = status;\n    this.listener(status);\n  }\n\n  private async loadAudio(clip: Clip) {\n    // TODO: check other formats\n    const url = clip.resources.audio.mp3;\n    const response = await fetch(url);\n    const buffer = await decodeAudioBuffer(response);\n    this.buffers[clip.id] = buffer;\n    this.handleResourceCompleted(url);\n\n    return buffer;\n  }\n\n  private handleResourceCompleted(url?: string) {\n    this.completed += 1;\n    const status: ResourceLoadStatus =\n      this.completed >= this.total\n        ? { stage: \"ready\", total: this.total }\n        : { stage: \"loading\", total: this.total, completed: this.completed };\n    this.setStatus(status);\n  }\n}\n\nfunction preloadImage(url: string): Promise<any> {\n  if (!url || !url.length) {\n    return Promise.resolve();\n  }\n  return new Promise(resolve => {\n    const image = new Image();\n    image.addEventListener(\"load\", () => {\n      resolve(image);\n    });\n    image.src = url;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}