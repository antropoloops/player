{"ast":null,"code":"import { AudioContextEngine } from \"./AudioContextEngine\";\nexport class Sampler {\n  constructor(buffers, ctx) {\n    this.buffers = buffers;\n    this.master = void 0;\n    this.tracks = {};\n    this.audioSources = {};\n    this.audio = void 0;\n    this.audio = new AudioContextEngine(ctx);\n    this.master = this.audio.createTrack(\"master\", {\n      volume: 0.8\n    });\n  }\n\n  initTracks(tracks) {\n    tracks.forEach(track => {\n      this.tracks[track.id] = this.audio.createTrack(track.name, {\n        volume: 1\n      }, this.master);\n    });\n  }\n\n  connect() {// nothing to do?\n  }\n\n  disconnect() {\n    Object.keys(this.tracks).forEach(trackId => {\n      this.tracks[trackId].disconnect();\n    });\n  }\n\n  start(clipId, trackId, time) {\n    if (this.audioSources[clipId]) {\n      return;\n    }\n\n    const buffer = this.buffers.getBuffer(clipId);\n    const track = this.tracks[trackId];\n    const source = this.audio.createAudioSource({\n      buffer\n    }, track);\n    this.audioSources[clipId] = source;\n    source.start(time);\n  }\n\n  stop(clipId, time) {\n    const source = this.audioSources[clipId];\n\n    if (source !== undefined) {\n      source.stop(time);\n    }\n\n    this.audioSources[clipId] = undefined;\n  }\n\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/sampler/Sampler.ts"],"names":["AudioContextEngine","Sampler","constructor","buffers","ctx","master","tracks","audioSources","audio","createTrack","volume","initTracks","forEach","track","id","name","connect","disconnect","Object","keys","trackId","start","clipId","time","buffer","getBuffer","source","createAudioSource","stop","undefined"],"mappings":"AAEA,SAASA,kBAAT,QAAmC,sBAAnC;AAQA,OAAO,MAAMC,OAAN,CAAc;AAMnBC,EAAAA,WAAW,CAASC,OAAT,EAAiCC,GAAjC,EAAqD;AAAA,SAA5CD,OAA4C,GAA5CA,OAA4C;AAAA,SALxDE,MAKwD;AAAA,SAJxDC,MAIwD,GAJnB,EAImB;AAAA,SAHxDC,YAGwD,GAHA,EAGA;AAAA,SAFxDC,KAEwD;AAC9D,SAAKA,KAAL,GAAa,IAAIR,kBAAJ,CAAuBI,GAAvB,CAAb;AACA,SAAKC,MAAL,GAAc,KAAKG,KAAL,CAAWC,WAAX,CAAuB,QAAvB,EAAiC;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjC,CAAd;AACD;;AACMC,EAAAA,UAAP,CAAkBL,MAAlB,EAA0C;AACxCA,IAAAA,MAAM,CAACM,OAAP,CAAeC,KAAK,IAAI;AACtB,WAAKP,MAAL,CAAYO,KAAK,CAACC,EAAlB,IAAwB,KAAKN,KAAL,CAAWC,WAAX,CACtBI,KAAK,CAACE,IADgB,EAEtB;AAAEL,QAAAA,MAAM,EAAE;AAAV,OAFsB,EAGtB,KAAKL,MAHiB,CAAxB;AAKD,KAND;AAOD;;AACMW,EAAAA,OAAP,GAAiB,CACf;AACD;;AACMC,EAAAA,UAAP,GAAoB;AAClBC,IAAAA,MAAM,CAACC,IAAP,CAAY,KAAKb,MAAjB,EAAyBM,OAAzB,CAAiCQ,OAAO,IAAI;AAC1C,WAAKd,MAAL,CAAYc,OAAZ,EAAqBH,UAArB;AACD,KAFD;AAGD;;AACMI,EAAAA,KAAP,CAAaC,MAAb,EAA6BF,OAA7B,EAA8CG,IAA9C,EAA4D;AAC1D,QAAI,KAAKhB,YAAL,CAAkBe,MAAlB,CAAJ,EAA+B;AAC7B;AACD;;AACD,UAAME,MAAM,GAAG,KAAKrB,OAAL,CAAasB,SAAb,CAAuBH,MAAvB,CAAf;AACA,UAAMT,KAAK,GAAG,KAAKP,MAAL,CAAYc,OAAZ,CAAd;AACA,UAAMM,MAAM,GAAG,KAAKlB,KAAL,CAAWmB,iBAAX,CAA6B;AAAEH,MAAAA;AAAF,KAA7B,EAAyCX,KAAzC,CAAf;AACA,SAAKN,YAAL,CAAkBe,MAAlB,IAA4BI,MAA5B;AACAA,IAAAA,MAAM,CAACL,KAAP,CAAaE,IAAb;AACD;;AACMK,EAAAA,IAAP,CAAYN,MAAZ,EAA4BC,IAA5B,EAA0C;AACxC,UAAMG,MAAM,GAAG,KAAKnB,YAAL,CAAkBe,MAAlB,CAAf;;AACA,QAAII,MAAM,KAAKG,SAAf,EAA0B;AACxBH,MAAAA,MAAM,CAACE,IAAP,CAAYL,IAAZ;AACD;;AACD,SAAKhB,YAAL,CAAkBe,MAAlB,IAA4BO,SAA5B;AACD;;AA3CkB","sourcesContent":["import { IAudioContext } from \"standardized-audio-context\";\nimport { AudioSource, AudioTrack } from \"./Audio\";\nimport { AudioContextEngine } from \"./AudioContextEngine\";\n\nexport interface SamplerTrack {\n  id: string;\n  name: string;\n  volume?: number;\n}\n\nexport class Sampler {\n  private master: AudioTrack;\n  private tracks: Record<string, AudioTrack> = {};\n  private audioSources: Record<string, AudioSource | undefined> = {};\n  private audio: AudioContextEngine;\n\n  constructor(private buffers: SampleBuffers, ctx: IAudioContext) {\n    this.audio = new AudioContextEngine(ctx);\n    this.master = this.audio.createTrack(\"master\", { volume: 0.8 });\n  }\n  public initTracks(tracks: SamplerTrack[]) {\n    tracks.forEach(track => {\n      this.tracks[track.id] = this.audio.createTrack(\n        track.name,\n        { volume: 1 },\n        this.master,\n      );\n    });\n  }\n  public connect() {\n    // nothing to do?\n  }\n  public disconnect() {\n    Object.keys(this.tracks).forEach(trackId => {\n      this.tracks[trackId].disconnect();\n    });\n  }\n  public start(clipId: string, trackId: string, time: number) {\n    if (this.audioSources[clipId]) {\n      return;\n    }\n    const buffer = this.buffers.getBuffer(clipId);\n    const track = this.tracks[trackId];\n    const source = this.audio.createAudioSource({ buffer }, track);\n    this.audioSources[clipId] = source;\n    source.start(time);\n  }\n  public stop(clipId: string, time: number) {\n    const source = this.audioSources[clipId];\n    if (source !== undefined) {\n      source.stop(time);\n    }\n    this.audioSources[clipId] = undefined;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}