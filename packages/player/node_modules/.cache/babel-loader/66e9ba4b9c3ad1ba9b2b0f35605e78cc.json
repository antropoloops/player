{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { abs, acos, cos, epsilon, halfPi, sin, pi, sqrt, sqrt2 } from \"./math.js\";\nvar pi_sqrt2 = pi / sqrt2;\nexport function larriveeRaw(lambda, phi) {\n  return [lambda * (1 + sqrt(cos(phi))) / 2, phi / (cos(phi / 2) * cos(lambda / 6))];\n}\n\nlarriveeRaw.invert = function (x, y) {\n  var x0 = abs(x),\n      y0 = abs(y),\n      lambda = epsilon,\n      phi = halfPi;\n  if (y0 < pi_sqrt2) phi *= y0 / pi_sqrt2;else lambda += 6 * acos(pi_sqrt2 / y0);\n\n  for (var i = 0; i < 25; i++) {\n    var sinPhi = sin(phi),\n        sqrtcosPhi = sqrt(cos(phi)),\n        sinPhi_2 = sin(phi / 2),\n        cosPhi_2 = cos(phi / 2),\n        sinLambda_6 = sin(lambda / 6),\n        cosLambda_6 = cos(lambda / 6),\n        f0 = 0.5 * lambda * (1 + sqrtcosPhi) - x0,\n        f1 = phi / (cosPhi_2 * cosLambda_6) - y0,\n        df0dPhi = sqrtcosPhi ? -0.25 * lambda * sinPhi / sqrtcosPhi : 0,\n        df0dLambda = 0.5 * (1 + sqrtcosPhi),\n        df1dPhi = (1 + 0.5 * phi * sinPhi_2 / cosPhi_2) / (cosPhi_2 * cosLambda_6),\n        df1dLambda = phi / cosPhi_2 * (sinLambda_6 / 6) / (cosLambda_6 * cosLambda_6),\n        denom = df0dPhi * df1dLambda - df1dPhi * df0dLambda,\n        dPhi = (f0 * df1dLambda - f1 * df0dLambda) / denom,\n        dLambda = (f1 * df0dPhi - f0 * df1dPhi) / denom;\n    phi -= dPhi;\n    lambda -= dLambda;\n    if (abs(dPhi) < epsilon && abs(dLambda) < epsilon) break;\n  }\n\n  return [x < 0 ? -lambda : lambda, y < 0 ? -phi : phi];\n};\n\nexport default function () {\n  return projection(larriveeRaw).scale(97.2672);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/larrivee.js"],"names":["geoProjection","projection","abs","acos","cos","epsilon","halfPi","sin","pi","sqrt","sqrt2","pi_sqrt2","larriveeRaw","lambda","phi","invert","x","y","x0","y0","i","sinPhi","sqrtcosPhi","sinPhi_2","cosPhi_2","sinLambda_6","cosLambda_6","f0","f1","df0dPhi","df0dLambda","df1dPhi","df1dLambda","denom","dPhi","dLambda","scale"],"mappings":"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","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, cos, epsilon, halfPi, sin, pi, sqrt, sqrt2} from \"./math.js\";\n\nvar pi_sqrt2 = pi / sqrt2;\n\nexport function larriveeRaw(lambda, phi) {\n  return [\n    lambda * (1 + sqrt(cos(phi))) / 2,\n    phi / (cos(phi / 2) * cos(lambda / 6))\n  ];\n}\n\nlarriveeRaw.invert = function(x, y) {\n  var x0 = abs(x),\n      y0 = abs(y),\n      lambda = epsilon,\n      phi = halfPi;\n  if (y0 < pi_sqrt2) phi *= y0 / pi_sqrt2;\n  else lambda += 6 * acos(pi_sqrt2 / y0);\n  for (var i = 0; i < 25; i++) {\n    var sinPhi = sin(phi),\n        sqrtcosPhi = sqrt(cos(phi)),\n        sinPhi_2 = sin(phi / 2),\n        cosPhi_2 = cos(phi / 2),\n        sinLambda_6 = sin(lambda / 6),\n        cosLambda_6 = cos(lambda / 6),\n        f0 = 0.5 * lambda * (1 + sqrtcosPhi) - x0,\n        f1 = phi / (cosPhi_2 * cosLambda_6) - y0,\n        df0dPhi = sqrtcosPhi ? -0.25 * lambda * sinPhi / sqrtcosPhi : 0,\n        df0dLambda = 0.5 * (1 + sqrtcosPhi),\n        df1dPhi = (1 + 0.5 * phi * sinPhi_2 / cosPhi_2) / (cosPhi_2 * cosLambda_6),\n        df1dLambda = (phi / cosPhi_2) * (sinLambda_6 / 6) / (cosLambda_6 * cosLambda_6),\n        denom = df0dPhi * df1dLambda - df1dPhi * df0dLambda,\n        dPhi = (f0 * df1dLambda - f1 * df0dLambda) / denom,\n        dLambda = (f1 * df0dPhi - f0 * df1dPhi) / denom;\n    phi -= dPhi;\n    lambda -= dLambda;\n    if (abs(dPhi) < epsilon && abs(dLambda) < epsilon) break;\n  }\n  return [x < 0 ? -lambda : lambda, y < 0 ? -phi : phi];\n};\n\nexport default function() {\n  return projection(larriveeRaw)\n      .scale(97.2672);\n}\n"]},"metadata":{},"sourceType":"module"}