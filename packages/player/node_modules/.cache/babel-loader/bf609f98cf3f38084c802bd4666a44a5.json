{"ast":null,"code":"import { createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent } from 'automation-events';\nimport { createAbortError } from './factories/abort-error';\nimport { createAddAudioNodeConnections } from './factories/add-audio-node-connections';\nimport { createAddAudioParamConnections } from './factories/add-audio-param-connections';\nimport { createAddAudioWorkletModule } from './factories/add-audio-worklet-module';\nimport { createAnalyserNodeConstructor } from './factories/analyser-node-constructor';\nimport { createAnalyserNodeRendererFactory } from './factories/analyser-node-renderer-factory';\nimport { createAudioBufferConstructor } from './factories/audio-buffer-constructor';\nimport { createAudioBufferSourceNodeConstructor } from './factories/audio-buffer-source-node-constructor';\nimport { createAudioBufferSourceNodeRendererFactory } from './factories/audio-buffer-source-node-renderer-factory';\nimport { createAudioContextConstructor } from './factories/audio-context-constructor';\nimport { createAudioDestinationNodeConstructor } from './factories/audio-destination-node-constructor';\nimport { createAudioDestinationNodeRenderer } from './factories/audio-destination-node-renderer-factory';\nimport { createAudioListenerFactory } from './factories/audio-listener-factory';\nimport { createAudioNodeConstructor } from './factories/audio-node-constructor';\nimport { createAudioParamFactory } from './factories/audio-param-factory';\nimport { createAudioParamRenderer } from './factories/audio-param-renderer';\nimport { createAudioWorkletNodeConstructor } from './factories/audio-worklet-node-constructor';\nimport { createAudioWorkletNodeRendererFactory } from './factories/audio-worklet-node-renderer-factory';\nimport { createBaseAudioContextConstructor } from './factories/base-audio-context-constructor';\nimport { createBiquadFilterNodeConstructor } from './factories/biquad-filter-node-constructor';\nimport { createBiquadFilterNodeRendererFactory } from './factories/biquad-filter-node-renderer-factory';\nimport { createCacheTestResult } from './factories/cache-test-result';\nimport { createChannelMergerNodeConstructor } from './factories/channel-merger-node-constructor';\nimport { createChannelMergerNodeRendererFactory } from './factories/channel-merger-node-renderer-factory';\nimport { createChannelSplitterNodeConstructor } from './factories/channel-splitter-node-constructor';\nimport { createChannelSplitterNodeRendererFactory } from './factories/channel-splitter-node-renderer-factory';\nimport { createConnectAudioParam } from './factories/connect-audio-param';\nimport { createConnectMultipleOutputs } from './factories/connect-multiple-outputs';\nimport { createConnectedNativeAudioBufferSourceNodeFactory } from './factories/connected-native-audio-buffer-source-node-factory';\nimport { createConstantSourceNodeConstructor } from './factories/constant-source-node-constructor';\nimport { createConstantSourceNodeRendererFactory } from './factories/constant-source-node-renderer-factory';\nimport { createConvertNumberToUnsignedLong } from './factories/convert-number-to-unsigned-long';\nimport { createConvolverNodeConstructor } from './factories/convolver-node-constructor';\nimport { createConvolverNodeRendererFactory } from './factories/convolver-node-renderer-factory';\nimport { createCreateNativeOfflineAudioContext } from './factories/create-native-offline-audio-context';\nimport { createDataCloneError } from './factories/data-clone-error';\nimport { createDecodeAudioData } from './factories/decode-audio-data';\nimport { createDecrementCycleCounter } from './factories/decrement-cycle-counter';\nimport { createDelayNodeConstructor } from './factories/delay-node-constructor';\nimport { createDelayNodeRendererFactory } from './factories/delay-node-renderer-factory';\nimport { createDetectCycles } from './factories/detect-cycles';\nimport { createDisconnectMultipleOutputs } from './factories/disconnect-multiple-outputs';\nimport { createDynamicsCompressorNodeConstructor } from './factories/dynamics-compressor-node-constructor';\nimport { createDynamicsCompressorNodeRendererFactory } from './factories/dynamics-compressor-node-renderer-factory';\nimport { createEncodingError } from './factories/encoding-error';\nimport { createEvaluateSource } from './factories/evaluate-source';\nimport { createEventTargetConstructor } from './factories/event-target-constructor';\nimport { createExposeCurrentFrameAndCurrentTime } from './factories/expose-current-frame-and-current-time';\nimport { createFetchSource } from './factories/fetch-source';\nimport { createGainNodeConstructor } from './factories/gain-node-constructor';\nimport { createGainNodeRendererFactory } from './factories/gain-node-renderer-factory';\nimport { createGetAudioNodeRenderer } from './factories/get-audio-node-renderer';\nimport { createGetAudioParamRenderer } from './factories/get-audio-param-renderer';\nimport { createGetBackupNativeContext } from './factories/get-backup-native-context';\nimport { createGetNativeContext } from './factories/get-native-context';\nimport { createIIRFilterNodeConstructor } from './factories/iir-filter-node-constructor';\nimport { createIIRFilterNodeRendererFactory } from './factories/iir-filter-node-renderer-factory';\nimport { createIncrementCycleCounterFactory } from './factories/increment-cycle-counter-factory';\nimport { createIndexSizeError } from './factories/index-size-error';\nimport { createInvalidAccessError } from './factories/invalid-access-error';\nimport { createInvalidStateError } from './factories/invalid-state-error';\nimport { createIsAnyAudioContext } from './factories/is-any-audio-context';\nimport { createIsAnyAudioNode } from './factories/is-any-audio-node';\nimport { createIsAnyAudioParam } from './factories/is-any-audio-param';\nimport { createIsAnyOfflineAudioContext } from './factories/is-any-offline-audio-context';\nimport { createIsNativeAudioContext } from './factories/is-native-audio-context';\nimport { createIsNativeAudioNode } from './factories/is-native-audio-node';\nimport { createIsNativeAudioParam } from './factories/is-native-audio-param';\nimport { createIsNativeContext } from './factories/is-native-context';\nimport { createIsNativeOfflineAudioContext } from './factories/is-native-offline-audio-context';\nimport { createIsSecureContext } from './factories/is-secure-context';\nimport { createIsSupportedPromise } from './factories/is-supported-promise';\nimport { createMediaElementAudioSourceNodeConstructor } from './factories/media-element-audio-source-node-constructor';\nimport { createMediaStreamAudioSourceNodeConstructor } from './factories/media-stream-audio-source-node-constructor';\nimport { createMediaStreamTrackAudioSourceNodeConstructor } from './factories/media-stream-track-audio-source-node-constructor';\nimport { createMinimalAudioContextConstructor } from './factories/minimal-audio-context-constructor';\nimport { createMinimalBaseAudioContextConstructor } from './factories/minimal-base-audio-context-constructor';\nimport { createMinimalOfflineAudioContextConstructor } from './factories/minimal-offline-audio-context-constructor';\nimport { createMonitorConnections } from './factories/monitor-connections';\nimport { createNativeAnalyserNodeFactory } from './factories/native-analyser-node-factory';\nimport { createNativeAudioBufferConstructor } from './factories/native-audio-buffer-constructor';\nimport { createNativeAudioBufferSourceNodeFactory } from './factories/native-audio-buffer-source-node-factory';\nimport { createNativeAudioContextConstructor } from './factories/native-audio-context-constructor';\nimport { createNativeAudioDestinationNodeFactory } from './factories/native-audio-destination-node';\nimport { createNativeAudioNodeFactory } from './factories/native-audio-node-factory';\nimport { createNativeAudioWorkletNodeConstructor } from './factories/native-audio-worklet-node-constructor';\nimport { createNativeAudioWorkletNodeFactory } from './factories/native-audio-worklet-node-factory';\nimport { createNativeAudioWorkletNodeFakerFactory } from './factories/native-audio-worklet-node-faker-factory';\nimport { createNativeBiquadFilterNodeFactory } from './factories/native-biquad-filter-node-factory';\nimport { createNativeChannelMergerNodeFactory } from './factories/native-channel-merger-node-factory';\nimport { createNativeChannelSplitterNodeFactory } from './factories/native-channel-splitter-node-factory';\nimport { createNativeConstantSourceNodeFactory } from './factories/native-constant-source-node-factory';\nimport { createNativeConstantSourceNodeFakerFactory } from './factories/native-constant-source-node-faker-factory';\nimport { createNativeConvolverNodeFactory } from './factories/native-convolver-node-factory';\nimport { createNativeConvolverNodeFakerFactory } from './factories/native-convolver-node-faker-factory';\nimport { createNativeDelayNodeFactory } from './factories/native-delay-node-factory';\nimport { createNativeDynamicsCompressorNodeFactory } from './factories/native-dynamics-compressor-node-factory';\nimport { createNativeGainNodeFactory } from './factories/native-gain-node-factory';\nimport { createNativeIIRFilterNodeFactory } from './factories/native-iir-filter-node-factory';\nimport { createNativeIIRFilterNodeFakerFactory } from './factories/native-iir-filter-node-faker-factory';\nimport { createNativeMediaElementAudioSourceNodeFactory } from './factories/native-media-element-audio-source-node-factory';\nimport { createNativeMediaStreamAudioSourceNodeFactory } from './factories/native-media-stream-audio-source-node-factory';\nimport { createNativeMediaStreamTrackAudioSourceNodeFactory } from './factories/native-media-stream-track-audio-source-node-factory';\nimport { createNativeOfflineAudioContextConstructor } from './factories/native-offline-audio-context-constructor';\nimport { createNativeOscillatorNodeFactory } from './factories/native-oscillator-node-factory';\nimport { createNativePannerNodeFactory } from './factories/native-panner-node-factory';\nimport { createNativePannerNodeFakerFactory } from './factories/native-panner-node-faker-factory';\nimport { createNativePeriodicWaveFactory } from './factories/native-periodic-wave-factory';\nimport { createNativeScriptProcessorNodeFactory } from './factories/native-script-processor-node-factory';\nimport { createNativeStereoPannerNodeFactory } from './factories/native-stereo-panner-node-factory';\nimport { createNativeStereoPannerNodeFakerFactory } from './factories/native-stereo-panner-node-faker-factory';\nimport { createNativeWaveShaperNodeFactory } from './factories/native-wave-shaper-node-factory';\nimport { createNativeWaveShaperNodeFakerFactory } from './factories/native-wave-shaper-node-faker-factory';\nimport { createNotSupportedError } from './factories/not-supported-error';\nimport { createOfflineAudioContextConstructor } from './factories/offline-audio-context-constructor';\nimport { createOscillatorNodeConstructor } from './factories/oscillator-node-constructor';\nimport { createOscillatorNodeRendererFactory } from './factories/oscillator-node-renderer-factory';\nimport { createPannerNodeConstructor } from './factories/panner-node-constructor';\nimport { createPannerNodeRendererFactory } from './factories/panner-node-renderer-factory';\nimport { createPeriodicWaveConstructor } from './factories/periodic-wave-constructor';\nimport { createRenderAutomation } from './factories/render-automation';\nimport { createRenderInputsOfAudioNode } from './factories/render-inputs-of-audio-node';\nimport { createRenderInputsOfAudioParam } from './factories/render-inputs-of-audio-param';\nimport { createRenderNativeOfflineAudioContext } from './factories/render-native-offline-audio-context';\nimport { createStartRendering } from './factories/start-rendering';\nimport { createStereoPannerNodeConstructor } from './factories/stereo-panner-node-constructor';\nimport { createStereoPannerNodeRendererFactory } from './factories/stereo-panner-node-renderer-factory';\nimport { createTestAudioBufferConstructorSupport } from './factories/test-audio-buffer-constructor-support';\nimport { createTestAudioBufferCopyChannelMethodsSubarraySupport } from './factories/test-audio-buffer-copy-channel-methods-subarray-support';\nimport { createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport } from './factories/test-audio-buffer-source-node-start-method-consecutive-calls-support';\nimport { createTestAudioBufferSourceNodeStartMethodDurationParameterSupport } from './factories/test-audio-buffer-source-node-start-method-duration-parameter-support';\nimport { createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport } from './factories/test-audio-buffer-source-node-start-method-offset-clamping-support';\nimport { createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport } from './factories/test-audio-buffer-source-node-stop-method-nullified-buffer-support';\nimport { createTestAudioContextCloseMethodSupport } from './factories/test-audio-context-close-method-support';\nimport { createTestAudioContextDecodeAudioDataMethodTypeErrorSupport } from './factories/test-audio-context-decode-audio-data-method-type-error-support';\nimport { createTestAudioContextOptionsSupport } from './factories/test-audio-context-options-support';\nimport { createTestAudioNodeConnectMethodSupport } from './factories/test-audio-node-connect-method-support';\nimport { createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport } from './factories/test-audio-scheduled-source-node-start-method-negative-parameters-support';\nimport { createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport } from './factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support';\nimport { createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport } from './factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support';\nimport { createTestAudioWorkletProcessorNoOutputsSupport } from './factories/test-audio-worklet-processor-no-outputs-support';\nimport { createTestConstantSourceNodeAccurateSchedulingSupport } from './factories/test-constant-source-node-accurate-scheduling-support';\nimport { createTestConvolverNodeBufferReassignabilitySupport } from './factories/test-convolver-node-buffer-reassignability-support';\nimport { createTestIsSecureContextSupport } from './factories/test-is-secure-context-support';\nimport { createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport } from './factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support';\nimport { createTestOfflineAudioContextCurrentTimeSupport } from './factories/test-offline-audio-context-current-time-support';\nimport { createTestStereoPannerNodeDefaultValueSupport } from './factories/test-stereo-panner-node-default-value-support';\nimport { createUnknownError } from './factories/unknown-error';\nimport { createWaveShaperNodeConstructor } from './factories/wave-shaper-node-constructor';\nimport { createWaveShaperNodeRendererFactory } from './factories/wave-shaper-node-renderer-factory';\nimport { createWindow } from './factories/window';\nimport { createWrapAudioBufferCopyChannelMethods } from './factories/wrap-audio-buffer-copy-channel-methods';\nimport { createWrapAudioBufferCopyChannelMethodsOutOfBounds } from './factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds';\nimport { createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer } from './factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer';\nimport { createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls } from './factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls';\nimport { createWrapChannelMergerNode } from './factories/wrap-channel-merger-node';\nimport { AUDIO_NODE_CONNECTIONS_STORE, AUDIO_NODE_STORE, AUDIO_PARAM_CONNECTIONS_STORE, AUDIO_PARAM_STORE, CONTEXT_STORE, CYCLE_COUNTERS } from './globals';\nimport { connectNativeAudioNodeToNativeAudioNode } from './helpers/connect-native-audio-node-to-native-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from './helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from './helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from './helpers/get-audio-param-connections';\nimport { getNativeAudioNode } from './helpers/get-native-audio-node';\nimport { getNativeAudioParam } from './helpers/get-native-audio-param';\nimport { getValueForKey } from './helpers/get-value-for-key';\nimport { insertElementInSet } from './helpers/insert-element-in-set';\nimport { isActiveAudioNode } from './helpers/is-active-audio-node';\nimport { isDCCurve } from './helpers/is-dc-curve';\nimport { isPartOfACycle } from './helpers/is-part-of-a-cycle';\nimport { overwriteAccessors } from './helpers/overwrite-accessors';\nimport { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from './helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { testPromiseSupport } from './helpers/test-promise-support';\nimport { testTransferablesSupport } from './helpers/test-transferables-support';\nimport { wrapAudioBufferSourceNodeStartMethodOffsetClamping } from './helpers/wrap-audio-buffer-source-node-start-method-offset-clamping';\nimport { wrapEventListener } from './helpers/wrap-event-listener';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\n\nexport * from './interfaces/index';\nexport * from './types/index';\nvar cacheTestResult = createCacheTestResult(new Map(), new WeakMap());\nvar window = createWindow();\nvar nativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor(window);\nvar isNativeOfflineAudioContext = createIsNativeOfflineAudioContext(nativeOfflineAudioContextConstructor);\nvar nativeAudioContextConstructor = createNativeAudioContextConstructor(window);\nvar getBackupNativeContext = createGetBackupNativeContext(isNativeOfflineAudioContext, nativeAudioContextConstructor, nativeOfflineAudioContextConstructor);\nvar createNativeAudioNode = createNativeAudioNodeFactory(getBackupNativeContext);\nvar createNativeAnalyserNode = createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError, createNativeAudioNode);\nvar getAudioNodeRenderer = createGetAudioNodeRenderer(getAudioNodeConnections);\nvar renderInputsOfAudioNode = createRenderInputsOfAudioNode(getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle);\nvar createAnalyserNodeRenderer = createAnalyserNodeRendererFactory(createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode);\nvar auxiliaryGainNodeStore = new WeakMap();\nvar getNativeContext = createGetNativeContext(CONTEXT_STORE);\nvar audioParamAudioNodeStore = new WeakMap();\nvar eventTargetConstructor = createEventTargetConstructor(wrapEventListener);\nvar isNativeAudioNode = createIsNativeAudioNode(window);\nvar isNativeAudioParam = createIsNativeAudioParam(window);\nvar audioNodeConstructor = createAudioNodeConstructor(createAddAudioNodeConnections(AUDIO_NODE_CONNECTIONS_STORE), auxiliaryGainNodeStore, cacheTestResult, createIncrementCycleCounterFactory(CYCLE_COUNTERS, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode), createIndexSizeError, createInvalidAccessError, createNotSupportedError, createDecrementCycleCounter(connectNativeAudioNodeToNativeAudioNode, CYCLE_COUNTERS, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext), createDetectCycles(audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey), eventTargetConstructor, getNativeContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext);\nvar analyserNodeConstructor = createAnalyserNodeConstructor(audioNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext);\nexport { analyserNodeConstructor as AnalyserNode };\nvar audioBufferStore = new WeakSet();\nvar nativeAudioBufferConstructor = createNativeAudioBufferConstructor(window);\nvar convertNumberToUnsignedLong = createConvertNumberToUnsignedLong(new Uint32Array(1));\nvar wrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError);\nvar wrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong);\nvar audioBufferConstructor = createAudioBufferConstructor(audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, createTestAudioBufferConstructorSupport(nativeAudioBufferConstructor), wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nexport { audioBufferConstructor as AudioBuffer };\nvar testAudioScheduledSourceNodeStartMethodNegativeParametersSupport = createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport(createNativeAudioNode);\nvar testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(createNativeAudioNode);\nvar testAudioScheduledSourceNodeStopMethodNegativeParametersSupport = createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport(createNativeAudioNode);\nvar wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(createNativeAudioNode);\nvar renderInputsOfAudioParam = createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle);\nvar connectAudioParam = createConnectAudioParam(renderInputsOfAudioParam);\nvar createNativeAudioBufferSourceNode = createNativeAudioBufferSourceNodeFactory(cacheTestResult, createNativeAudioNode, createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(createNativeAudioNode), createTestAudioBufferSourceNodeStartMethodDurationParameterSupport(nativeOfflineAudioContextConstructor), createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport(createNativeAudioNode), createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport(createNativeAudioNode), testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClamping, createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer(overwriteAccessors), wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nvar renderAutomation = createRenderAutomation(createGetAudioParamRenderer(getAudioParamConnections), renderInputsOfAudioParam);\nvar createAudioBufferSourceNodeRenderer = createAudioBufferSourceNodeRendererFactory(connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nvar createAudioParam = createAudioParamFactory(createAddAudioParamConnections(AUDIO_PARAM_CONNECTIONS_STORE), audioParamAudioNodeStore, AUDIO_PARAM_STORE, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor);\nvar audioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor(audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nexport { audioBufferSourceNodeConstructor as AudioBufferSourceNode };\nvar createNativeGainNode = createNativeGainNodeFactory(createNativeAudioNode);\nvar audioDestinationNodeConstructor = createAudioDestinationNodeConstructor(audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNodeFactory(createNativeGainNode, overwriteAccessors), getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode);\nvar createNativeBiquadFilterNode = createNativeBiquadFilterNodeFactory(createNativeAudioNode);\nvar createBiquadFilterNodeRenderer = createBiquadFilterNodeRendererFactory(connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nvar biquadFilterNodeConstructor = createBiquadFilterNodeConstructor(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext);\nvar monitorConnections = createMonitorConnections(insertElementInSet, isNativeAudioNode);\nvar wrapChannelMergerNode = createWrapChannelMergerNode(createInvalidStateError, createNativeAudioNode, monitorConnections);\nvar createNativeChannelMergerNode = createNativeChannelMergerNodeFactory(createNativeAudioNode, wrapChannelMergerNode);\nvar createChannelMergerNodeRenderer = createChannelMergerNodeRendererFactory(createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode);\nvar channelMergerNodeConstructor = createChannelMergerNodeConstructor(audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext);\nvar createNativeChannelSplitterNode = createNativeChannelSplitterNodeFactory(createNativeAudioNode);\nvar createChannelSplitterNodeRenderer = createChannelSplitterNodeRendererFactory(createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode);\nvar channelSplitterNodeConstructor = createChannelSplitterNodeConstructor(audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext);\nvar createNativeConstantSourceNodeFaker = createNativeConstantSourceNodeFakerFactory(createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections);\nvar createNativeConstantSourceNode = createNativeConstantSourceNodeFactory(cacheTestResult, createNativeAudioNode, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport);\nvar createConstantSourceNodeRenderer = createConstantSourceNodeRendererFactory(connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nvar constantSourceNodeConstructor = createConstantSourceNodeConstructor(audioNodeConstructor, createAudioParam, createConstantSourceNodeRenderer, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nvar createNativeConvolverNodeFaker = createNativeConvolverNodeFakerFactory(createNativeAudioNode, createNativeGainNode, monitorConnections);\nvar createNativeConvolverNode = createNativeConvolverNodeFactory(createNativeAudioNode, createNativeConvolverNodeFaker, createNotSupportedError, overwriteAccessors);\nvar createConvolverNodeRenderer = createConvolverNodeRendererFactory(createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode);\nvar convolverNodeConstructor = createConvolverNodeConstructor(audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext);\nvar createNativeDelayNode = createNativeDelayNodeFactory(createNativeAudioNode);\nvar createDelayNodeRenderer = createDelayNodeRendererFactory(connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nvar delayNodeConstructor = createDelayNodeConstructor(audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext);\nvar createNativeDynamicsCompressorNode = createNativeDynamicsCompressorNodeFactory(createNativeAudioNode, createNotSupportedError);\nvar createDynamicsCompressorNodeRenderer = createDynamicsCompressorNodeRendererFactory(connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nvar dynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext);\nvar createGainNodeRenderer = createGainNodeRendererFactory(connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nvar gainNodeConstructor = createGainNodeConstructor(audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext);\nvar createNativeScriptProcessorNode = createNativeScriptProcessorNodeFactory(createNativeAudioNode);\nvar createNativeIIRFilterNodeFaker = createNativeIIRFilterNodeFakerFactory(createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError);\nvar renderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext(cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, createTestOfflineAudioContextCurrentTimeSupport(createNativeGainNode, nativeOfflineAudioContextConstructor));\nvar createIIRFilterNodeRenderer = createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, createNativeAudioNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nvar createNativeIIRFilterNode = createNativeIIRFilterNodeFactory(createNativeAudioNode, createNativeIIRFilterNodeFaker);\nvar iIRFilterNodeConstructor = createIIRFilterNodeConstructor(audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nvar createAudioListener = createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext);\nvar minimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor(audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, wrapEventListener);\nvar createNativeOscillatorNode = createNativeOscillatorNodeFactory(cacheTestResult, createNativeAudioNode, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nvar createOscillatorNodeRenderer = createOscillatorNodeRendererFactory(connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nvar oscillatorNodeConstructor = createOscillatorNodeConstructor(audioNodeConstructor, createAudioParam, createInvalidStateError, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nvar createConnectedNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNodeFactory(createNativeAudioBufferSourceNode);\nvar createNativeWaveShaperNodeFaker = createNativeWaveShaperNodeFakerFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeGainNode, isDCCurve, monitorConnections);\nvar createNativeWaveShaperNode = createNativeWaveShaperNodeFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, overwriteAccessors);\nvar createNativePannerNodeFaker = createNativePannerNodeFakerFactory(connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeAudioNode, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, monitorConnections);\nvar createNativePannerNode = createNativePannerNodeFactory(createNativeAudioNode, createNativePannerNodeFaker);\nvar createPannerNodeRenderer = createPannerNodeRendererFactory(connectAudioParam, createNativePannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nvar pannerNodeConstructor = createPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nvar createNativePeriodicWave = createNativePeriodicWaveFactory(getBackupNativeContext);\nvar periodicWaveConstructor = createPeriodicWaveConstructor(createNativePeriodicWave, getNativeContext, new WeakSet());\nvar nativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections);\nvar createNativeStereoPannerNode = createNativeStereoPannerNodeFactory(createNativeAudioNode, nativeStereoPannerNodeFakerFactory, createNotSupportedError);\nvar createStereoPannerNodeRenderer = createStereoPannerNodeRendererFactory(connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nvar stereoPannerNodeConstructor = createStereoPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nvar createWaveShaperNodeRenderer = createWaveShaperNodeRendererFactory(createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode);\nvar waveShaperNodeConstructor = createWaveShaperNodeConstructor(audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nvar isSecureContext = createIsSecureContext(window);\nvar exposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime(window); // The addAudioWorkletModule() function is only available in a SecureContext.\n\nexport var addAudioWorkletModule = isSecureContext ? createAddAudioWorkletModule(createAbortError, createNotSupportedError, createEvaluateSource(window), exposeCurrentFrameAndCurrentTime, createFetchSource(createAbortError), getBackupNativeContext, getNativeContext, new WeakMap(), new WeakMap()) : undefined;\nvar isNativeAudioContext = createIsNativeAudioContext(nativeAudioContextConstructor);\nvar isNativeContext = createIsNativeContext(isNativeAudioContext, isNativeOfflineAudioContext);\nexport var decodeAudioData = createDecodeAudioData(audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, new WeakSet(), getNativeContext, isNativeContext, isNativeOfflineAudioContext, nativeOfflineAudioContextConstructor, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nvar baseAudioContextConstructor = createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor);\nvar createNativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNodeFactory(createNativeAudioNode);\nvar mediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaElementAudioSourceNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext);\nvar createNativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNodeFactory(createNativeAudioNode);\nvar mediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioSourceNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext);\nvar createNativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNodeFactory(createInvalidStateError, createNativeAudioNode);\nvar mediaStreamTrackAudioSourceNodeConstructor = createMediaStreamTrackAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext);\nvar audioContextConstructor = createAudioContextConstructor(baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor);\nexport { audioContextConstructor as AudioContext };\nvar connectMultipleOutputs = createConnectMultipleOutputs(createIndexSizeError);\nvar disconnectMultipleOutputs = createDisconnectMultipleOutputs(createIndexSizeError);\nvar createNativeAudioWorkletNodeFaker = createNativeAudioWorkletNodeFakerFactory(auxiliaryGainNodeStore, connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, monitorConnections);\nvar createNativeAudioWorkletNode = createNativeAudioWorkletNodeFactory(createInvalidStateError, createNativeAudioNode, createNativeAudioWorkletNodeFaker, createNotSupportedError, isNativeOfflineAudioContext);\nvar nativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor(window);\nvar createAudioWorkletNodeRenderer = createAudioWorkletNodeRendererFactory(connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext); // The AudioWorkletNode constructor is only available in a SecureContext.\n\nvar audioWorkletNodeConstructor = isSecureContext ? createAudioWorkletNodeConstructor(audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, gainNodeConstructor, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, wrapEventListener) : undefined;\nexport { audioWorkletNodeConstructor as AudioWorkletNode };\nexport { biquadFilterNodeConstructor as BiquadFilterNode };\nexport { channelMergerNodeConstructor as ChannelMergerNode };\nexport { channelSplitterNodeConstructor as ChannelSplitterNode };\nexport { convolverNodeConstructor as ConvolverNode };\nexport { constantSourceNodeConstructor as ConstantSourceNode };\nexport { delayNodeConstructor as DelayNode };\nexport { dynamicsCompressorNodeConstructor as DynamicsCompressorNode };\nexport { gainNodeConstructor as GainNode };\nexport { iIRFilterNodeConstructor as IIRFilterNode };\nexport { mediaElementAudioSourceNodeConstructor as MediaElementAudioSourceNode };\nexport { mediaStreamAudioSourceNodeConstructor as MediaStreamAudioSourceNode };\nexport { mediaStreamTrackAudioSourceNodeConstructor as MediaStreamTrackAudioSourceNode };\nvar minimalAudioContextConstructor = createMinimalAudioContextConstructor(createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor);\nexport { minimalAudioContextConstructor as MinimalAudioContext };\nvar createNativeOfflineAudioContext = createCreateNativeOfflineAudioContext(createNotSupportedError, nativeOfflineAudioContextConstructor);\nvar startRendering = createStartRendering(audioBufferStore, cacheTestResult, getAudioNodeRenderer, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nvar minimalOfflineAudioContextConstructor = createMinimalOfflineAudioContextConstructor(cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering);\nexport { minimalOfflineAudioContextConstructor as MinimalOfflineAudioContext };\nvar offlineAudioContextConstructor = createOfflineAudioContextConstructor(baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering);\nexport { offlineAudioContextConstructor as OfflineAudioContext };\nexport { oscillatorNodeConstructor as OscillatorNode };\nexport { pannerNodeConstructor as PannerNode };\nexport { periodicWaveConstructor as PeriodicWave };\nexport { stereoPannerNodeConstructor as StereoPannerNode };\nexport { waveShaperNodeConstructor as WaveShaperNode };\nexport var isAnyAudioContext = createIsAnyAudioContext(CONTEXT_STORE, isNativeAudioContext);\nexport var isAnyAudioNode = createIsAnyAudioNode(AUDIO_NODE_STORE, isNativeAudioNode);\nexport var isAnyAudioParam = createIsAnyAudioParam(AUDIO_PARAM_STORE, isNativeAudioParam);\nexport var isAnyOfflineAudioContext = createIsAnyOfflineAudioContext(CONTEXT_STORE, isNativeOfflineAudioContext);\nexport var isSupported = function isSupported() {\n  return createIsSupportedPromise(cacheTestResult, createTestAudioBufferCopyChannelMethodsSubarraySupport(nativeOfflineAudioContextConstructor), createTestAudioContextCloseMethodSupport(nativeAudioContextConstructor), createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor), createTestAudioContextOptionsSupport(nativeAudioContextConstructor), createTestAudioNodeConnectMethodSupport(nativeOfflineAudioContextConstructor), createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), createTestConstantSourceNodeAccurateSchedulingSupport(createNativeAudioNode, nativeOfflineAudioContextConstructor), createTestConvolverNodeBufferReassignabilitySupport(nativeOfflineAudioContextConstructor), createTestIsSecureContextSupport(window), createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport(nativeAudioContextConstructor), createTestStereoPannerNodeDefaultValueSupport(nativeOfflineAudioContextConstructor), testTransferablesSupport);\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/module.js"],"names":["createCancelAndHoldAutomationEvent","createCancelScheduledValuesAutomationEvent","createExponentialRampToValueAutomationEvent","createLinearRampToValueAutomationEvent","createSetTargetAutomationEvent","createSetValueAutomationEvent","createSetValueCurveAutomationEvent","createAbortError","createAddAudioNodeConnections","createAddAudioParamConnections","createAddAudioWorkletModule","createAnalyserNodeConstructor","createAnalyserNodeRendererFactory","createAudioBufferConstructor","createAudioBufferSourceNodeConstructor","createAudioBufferSourceNodeRendererFactory","createAudioContextConstructor","createAudioDestinationNodeConstructor","createAudioDestinationNodeRenderer","createAudioListenerFactory","createAudioNodeConstructor","createAudioParamFactory","createAudioParamRenderer","createAudioWorkletNodeConstructor","createAudioWorkletNodeRendererFactory","createBaseAudioContextConstructor","createBiquadFilterNodeConstructor","createBiquadFilterNodeRendererFactory","createCacheTestResult","createChannelMergerNodeConstructor","createChannelMergerNodeRendererFactory","createChannelSplitterNodeConstructor","createChannelSplitterNodeRendererFactory","createConnectAudioParam","createConnectMultipleOutputs","createConnectedNativeAudioBufferSourceNodeFactory","createConstantSourceNodeConstructor","createConstantSourceNodeRendererFactory","createConvertNumberToUnsignedLong","createConvolverNodeConstructor","createConvolverNodeRendererFactory","createCreateNativeOfflineAudioContext","createDataCloneError","createDecodeAudioData","createDecrementCycleCounter","createDelayNodeConstructor","createDelayNodeRendererFactory","createDetectCycles","createDisconnectMultipleOutputs","createDynamicsCompressorNodeConstructor","createDynamicsCompressorNodeRendererFactory","createEncodingError","createEvaluateSource","createEventTargetConstructor","createExposeCurrentFrameAndCurrentTime","createFetchSource","createGainNodeConstructor","createGainNodeRendererFactory","createGetAudioNodeRenderer","createGetAudioParamRenderer","createGetBackupNativeContext","createGetNativeContext","createIIRFilterNodeConstructor","createIIRFilterNodeRendererFactory","createIncrementCycleCounterFactory","createIndexSizeError","createInvalidAccessError","createInvalidStateError","createIsAnyAudioContext","createIsAnyAudioNode","createIsAnyAudioParam","createIsAnyOfflineAudioContext","createIsNativeAudioContext","createIsNativeAudioNode","createIsNativeAudioParam","createIsNativeContext","createIsNativeOfflineAudioContext","createIsSecureContext","createIsSupportedPromise","createMediaElementAudioSourceNodeConstructor","createMediaStreamAudioSourceNodeConstructor","createMediaStreamTrackAudioSourceNodeConstructor","createMinimalAudioContextConstructor","createMinimalBaseAudioContextConstructor","createMinimalOfflineAudioContextConstructor","createMonitorConnections","createNativeAnalyserNodeFactory","createNativeAudioBufferConstructor","createNativeAudioBufferSourceNodeFactory","createNativeAudioContextConstructor","createNativeAudioDestinationNodeFactory","createNativeAudioNodeFactory","createNativeAudioWorkletNodeConstructor","createNativeAudioWorkletNodeFactory","createNativeAudioWorkletNodeFakerFactory","createNativeBiquadFilterNodeFactory","createNativeChannelMergerNodeFactory","createNativeChannelSplitterNodeFactory","createNativeConstantSourceNodeFactory","createNativeConstantSourceNodeFakerFactory","createNativeConvolverNodeFactory","createNativeConvolverNodeFakerFactory","createNativeDelayNodeFactory","createNativeDynamicsCompressorNodeFactory","createNativeGainNodeFactory","createNativeIIRFilterNodeFactory","createNativeIIRFilterNodeFakerFactory","createNativeMediaElementAudioSourceNodeFactory","createNativeMediaStreamAudioSourceNodeFactory","createNativeMediaStreamTrackAudioSourceNodeFactory","createNativeOfflineAudioContextConstructor","createNativeOscillatorNodeFactory","createNativePannerNodeFactory","createNativePannerNodeFakerFactory","createNativePeriodicWaveFactory","createNativeScriptProcessorNodeFactory","createNativeStereoPannerNodeFactory","createNativeStereoPannerNodeFakerFactory","createNativeWaveShaperNodeFactory","createNativeWaveShaperNodeFakerFactory","createNotSupportedError","createOfflineAudioContextConstructor","createOscillatorNodeConstructor","createOscillatorNodeRendererFactory","createPannerNodeConstructor","createPannerNodeRendererFactory","createPeriodicWaveConstructor","createRenderAutomation","createRenderInputsOfAudioNode","createRenderInputsOfAudioParam","createRenderNativeOfflineAudioContext","createStartRendering","createStereoPannerNodeConstructor","createStereoPannerNodeRendererFactory","createTestAudioBufferConstructorSupport","createTestAudioBufferCopyChannelMethodsSubarraySupport","createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport","createTestAudioBufferSourceNodeStartMethodDurationParameterSupport","createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport","createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport","createTestAudioContextCloseMethodSupport","createTestAudioContextDecodeAudioDataMethodTypeErrorSupport","createTestAudioContextOptionsSupport","createTestAudioNodeConnectMethodSupport","createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport","createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport","createTestAudioWorkletProcessorNoOutputsSupport","createTestConstantSourceNodeAccurateSchedulingSupport","createTestConvolverNodeBufferReassignabilitySupport","createTestIsSecureContextSupport","createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport","createTestOfflineAudioContextCurrentTimeSupport","createTestStereoPannerNodeDefaultValueSupport","createUnknownError","createWaveShaperNodeConstructor","createWaveShaperNodeRendererFactory","createWindow","createWrapAudioBufferCopyChannelMethods","createWrapAudioBufferCopyChannelMethodsOutOfBounds","createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer","createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","createWrapChannelMergerNode","AUDIO_NODE_CONNECTIONS_STORE","AUDIO_NODE_STORE","AUDIO_PARAM_CONNECTIONS_STORE","AUDIO_PARAM_STORE","CONTEXT_STORE","CYCLE_COUNTERS","connectNativeAudioNodeToNativeAudioNode","disconnectNativeAudioNodeFromNativeAudioNode","getAudioNodeConnections","getAudioParamConnections","getNativeAudioNode","getNativeAudioParam","getValueForKey","insertElementInSet","isActiveAudioNode","isDCCurve","isPartOfACycle","overwriteAccessors","testAudioBufferCopyChannelMethodsOutOfBoundsSupport","testPromiseSupport","testTransferablesSupport","wrapAudioBufferSourceNodeStartMethodOffsetClamping","wrapEventListener","cacheTestResult","Map","WeakMap","window","nativeOfflineAudioContextConstructor","isNativeOfflineAudioContext","nativeAudioContextConstructor","getBackupNativeContext","createNativeAudioNode","createNativeAnalyserNode","getAudioNodeRenderer","renderInputsOfAudioNode","createAnalyserNodeRenderer","auxiliaryGainNodeStore","getNativeContext","audioParamAudioNodeStore","eventTargetConstructor","isNativeAudioNode","isNativeAudioParam","audioNodeConstructor","analyserNodeConstructor","AnalyserNode","audioBufferStore","WeakSet","nativeAudioBufferConstructor","convertNumberToUnsignedLong","Uint32Array","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","audioBufferConstructor","AudioBuffer","testAudioScheduledSourceNodeStartMethodNegativeParametersSupport","testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","testAudioScheduledSourceNodeStopMethodNegativeParametersSupport","wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","renderInputsOfAudioParam","connectAudioParam","createNativeAudioBufferSourceNode","renderAutomation","createAudioBufferSourceNodeRenderer","createAudioParam","audioBufferSourceNodeConstructor","AudioBufferSourceNode","createNativeGainNode","audioDestinationNodeConstructor","createNativeBiquadFilterNode","createBiquadFilterNodeRenderer","biquadFilterNodeConstructor","monitorConnections","wrapChannelMergerNode","createNativeChannelMergerNode","createChannelMergerNodeRenderer","channelMergerNodeConstructor","createNativeChannelSplitterNode","createChannelSplitterNodeRenderer","channelSplitterNodeConstructor","createNativeConstantSourceNodeFaker","createNativeConstantSourceNode","createConstantSourceNodeRenderer","constantSourceNodeConstructor","createNativeConvolverNodeFaker","createNativeConvolverNode","createConvolverNodeRenderer","convolverNodeConstructor","createNativeDelayNode","createDelayNodeRenderer","delayNodeConstructor","createNativeDynamicsCompressorNode","createDynamicsCompressorNodeRenderer","dynamicsCompressorNodeConstructor","createGainNodeRenderer","gainNodeConstructor","createNativeScriptProcessorNode","createNativeIIRFilterNodeFaker","renderNativeOfflineAudioContext","createIIRFilterNodeRenderer","createNativeIIRFilterNode","iIRFilterNodeConstructor","createAudioListener","minimalBaseAudioContextConstructor","createNativeOscillatorNode","createOscillatorNodeRenderer","oscillatorNodeConstructor","createConnectedNativeAudioBufferSourceNode","createNativeWaveShaperNodeFaker","createNativeWaveShaperNode","createNativePannerNodeFaker","createNativePannerNode","createPannerNodeRenderer","pannerNodeConstructor","createNativePeriodicWave","periodicWaveConstructor","nativeStereoPannerNodeFakerFactory","createNativeStereoPannerNode","createStereoPannerNodeRenderer","stereoPannerNodeConstructor","createWaveShaperNodeRenderer","waveShaperNodeConstructor","isSecureContext","exposeCurrentFrameAndCurrentTime","addAudioWorkletModule","undefined","isNativeAudioContext","isNativeContext","decodeAudioData","baseAudioContextConstructor","createNativeMediaElementAudioSourceNode","mediaElementAudioSourceNodeConstructor","createNativeMediaStreamAudioSourceNode","mediaStreamAudioSourceNodeConstructor","createNativeMediaStreamTrackAudioSourceNode","mediaStreamTrackAudioSourceNodeConstructor","audioContextConstructor","AudioContext","connectMultipleOutputs","disconnectMultipleOutputs","createNativeAudioWorkletNodeFaker","createNativeAudioWorkletNode","nativeAudioWorkletNodeConstructor","createAudioWorkletNodeRenderer","audioWorkletNodeConstructor","AudioWorkletNode","BiquadFilterNode","ChannelMergerNode","ChannelSplitterNode","ConvolverNode","ConstantSourceNode","DelayNode","DynamicsCompressorNode","GainNode","IIRFilterNode","MediaElementAudioSourceNode","MediaStreamAudioSourceNode","MediaStreamTrackAudioSourceNode","minimalAudioContextConstructor","MinimalAudioContext","createNativeOfflineAudioContext","startRendering","minimalOfflineAudioContextConstructor","MinimalOfflineAudioContext","offlineAudioContextConstructor","OfflineAudioContext","OscillatorNode","PannerNode","PeriodicWave","StereoPannerNode","WaveShaperNode","isAnyAudioContext","isAnyAudioNode","isAnyAudioParam","isAnyOfflineAudioContext","isSupported"],"mappings":"AAAA,SAASA,kCAAT,EAA6CC,0CAA7C,EAAyFC,2CAAzF,EAAsIC,sCAAtI,EAA8KC,8BAA9K,EAA8MC,6BAA9M,EAA6OC,kCAA7O,QAAuR,mBAAvR;AACA,SAASC,gBAAT,QAAiC,yBAAjC;AACA,SAASC,6BAAT,QAA8C,wCAA9C;AACA,SAASC,8BAAT,QAA+C,yCAA/C;AACA,SAASC,2BAAT,QAA4C,sCAA5C;AACA,SAASC,6BAAT,QAA8C,uCAA9C;AACA,SAASC,iCAAT,QAAkD,4CAAlD;AACA,SAASC,4BAAT,QAA6C,sCAA7C;AACA,SAASC,sCAAT,QAAuD,kDAAvD;AACA,SAASC,0CAAT,QAA2D,uDAA3D;AACA,SAASC,6BAAT,QAA8C,uCAA9C;AACA,SAASC,qCAAT,QAAsD,gDAAtD;AACA,SAASC,kCAAT,QAAmD,qDAAnD;AACA,SAASC,0BAAT,QAA2C,oCAA3C;AACA,SAASC,0BAAT,QAA2C,oCAA3C;AACA,SAASC,uBAAT,QAAwC,iCAAxC;AACA,SAASC,wBAAT,QAAyC,kCAAzC;AACA,SAASC,iCAAT,QAAkD,4CAAlD;AACA,SAASC,qCAAT,QAAsD,iDAAtD;AACA,SAASC,iCAAT,QAAkD,4CAAlD;AACA,SAASC,iCAAT,QAAkD,4CAAlD;AACA,SAASC,qCAAT,QAAsD,iDAAtD;AACA,SAASC,qBAAT,QAAsC,+BAAtC;AACA,SAASC,kCAAT,QAAmD,6CAAnD;AACA,SAASC,sCAAT,QAAuD,kDAAvD;AACA,SAASC,oCAAT,QAAqD,+CAArD;AACA,SAASC,wCAAT,QAAyD,oDAAzD;AACA,SAASC,uBAAT,QAAwC,iCAAxC;AACA,SAASC,4BAAT,QAA6C,sCAA7C;AACA,SAASC,iDAAT,QAAkE,+DAAlE;AACA,SAASC,mCAAT,QAAoD,8CAApD;AACA,SAASC,uCAAT,QAAwD,mDAAxD;AACA,SAASC,iCAAT,QAAkD,6CAAlD;AACA,SAASC,8BAAT,QAA+C,wCAA/C;AACA,SAASC,kCAAT,QAAmD,6CAAnD;AACA,SAASC,qCAAT,QAAsD,iDAAtD;AACA,SAASC,oBAAT,QAAqC,8BAArC;AACA,SAASC,qBAAT,QAAsC,+BAAtC;AACA,SAASC,2BAAT,QAA4C,qCAA5C;AACA,SAASC,0BAAT,QAA2C,oCAA3C;AACA,SAASC,8BAAT,QAA+C,yCAA/C;AACA,SAASC,kBAAT,QAAmC,2BAAnC;AACA,SAASC,+BAAT,QAAgD,yCAAhD;AACA,SAASC,uCAAT,QAAwD,kDAAxD;AACA,SAASC,2CAAT,QAA4D,uDAA5D;AACA,SAASC,mBAAT,QAAoC,4BAApC;AACA,SAASC,oBAAT,QAAqC,6BAArC;AACA,SAASC,4BAAT,QAA6C,sCAA7C;AACA,SAASC,sCAAT,QAAuD,mDAAvD;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SAASC,yBAAT,QAA0C,mCAA1C;AACA,SAASC,6BAAT,QAA8C,wCAA9C;AACA,SAASC,0BAAT,QAA2C,qCAA3C;AACA,SAASC,2BAAT,QAA4C,sCAA5C;AACA,SAASC,4BAAT,QAA6C,uCAA7C;AACA,SAASC,sBAAT,QAAuC,gCAAvC;AACA,SAASC,8BAAT,QAA+C,yCAA/C;AACA,SAASC,kCAAT,QAAmD,8CAAnD;AACA,SAASC,kCAAT,QAAmD,6CAAnD;AACA,SAASC,oBAAT,QAAqC,8BAArC;AACA,SAASC,wBAAT,QAAyC,kCAAzC;AACA,SAASC,uBAAT,QAAwC,iCAAxC;AACA,SAASC,uBAAT,QAAwC,kCAAxC;AACA,SAASC,oBAAT,QAAqC,+BAArC;AACA,SAASC,qBAAT,QAAsC,gCAAtC;AACA,SAASC,8BAAT,QAA+C,0CAA/C;AACA,SAASC,0BAAT,QAA2C,qCAA3C;AACA,SAASC,uBAAT,QAAwC,kCAAxC;AACA,SAASC,wBAAT,QAAyC,mCAAzC;AACA,SAASC,qBAAT,QAAsC,+BAAtC;AACA,SAASC,iCAAT,QAAkD,6CAAlD;AACA,SAASC,qBAAT,QAAsC,+BAAtC;AACA,SAASC,wBAAT,QAAyC,kCAAzC;AACA,SAASC,4CAAT,QAA6D,yDAA7D;AACA,SAASC,2CAAT,QAA4D,wDAA5D;AACA,SAASC,gDAAT,QAAiE,8DAAjE;AACA,SAASC,oCAAT,QAAqD,+CAArD;AACA,SAASC,wCAAT,QAAyD,oDAAzD;AACA,SAASC,2CAAT,QAA4D,uDAA5D;AACA,SAASC,wBAAT,QAAyC,iCAAzC;AACA,SAASC,+BAAT,QAAgD,0CAAhD;AACA,SAASC,kCAAT,QAAmD,6CAAnD;AACA,SAASC,wCAAT,QAAyD,qDAAzD;AACA,SAASC,mCAAT,QAAoD,8CAApD;AACA,SAASC,uCAAT,QAAwD,2CAAxD;AACA,SAASC,4BAAT,QAA6C,uCAA7C;AACA,SAASC,uCAAT,QAAwD,mDAAxD;AACA,SAASC,mCAAT,QAAoD,+CAApD;AACA,SAASC,wCAAT,QAAyD,qDAAzD;AACA,SAASC,mCAAT,QAAoD,+CAApD;AACA,SAASC,oCAAT,QAAqD,gDAArD;AACA,SAASC,sCAAT,QAAuD,kDAAvD;AACA,SAASC,qCAAT,QAAsD,iDAAtD;AACA,SAASC,0CAAT,QAA2D,uDAA3D;AACA,SAASC,gCAAT,QAAiD,2CAAjD;AACA,SAASC,qCAAT,QAAsD,iDAAtD;AACA,SAASC,4BAAT,QAA6C,uCAA7C;AACA,SAASC,yCAAT,QAA0D,qDAA1D;AACA,SAASC,2BAAT,QAA4C,sCAA5C;AACA,SAASC,gCAAT,QAAiD,4CAAjD;AACA,SAASC,qCAAT,QAAsD,kDAAtD;AACA,SAASC,8CAAT,QAA+D,4DAA/D;AACA,SAASC,6CAAT,QAA8D,2DAA9D;AACA,SAASC,kDAAT,QAAmE,iEAAnE;AACA,SAASC,0CAAT,QAA2D,sDAA3D;AACA,SAASC,iCAAT,QAAkD,4CAAlD;AACA,SAASC,6BAAT,QAA8C,wCAA9C;AACA,SAASC,kCAAT,QAAmD,8CAAnD;AACA,SAASC,+BAAT,QAAgD,0CAAhD;AACA,SAASC,sCAAT,QAAuD,kDAAvD;AACA,SAASC,mCAAT,QAAoD,+CAApD;AACA,SAASC,wCAAT,QAAyD,qDAAzD;AACA,SAASC,iCAAT,QAAkD,6CAAlD;AACA,SAASC,sCAAT,QAAuD,mDAAvD;AACA,SAASC,uBAAT,QAAwC,iCAAxC;AACA,SAASC,oCAAT,QAAqD,+CAArD;AACA,SAASC,+BAAT,QAAgD,yCAAhD;AACA,SAASC,mCAAT,QAAoD,8CAApD;AACA,SAASC,2BAAT,QAA4C,qCAA5C;AACA,SAASC,+BAAT,QAAgD,0CAAhD;AACA,SAASC,6BAAT,QAA8C,uCAA9C;AACA,SAASC,sBAAT,QAAuC,+BAAvC;AACA,SAASC,6BAAT,QAA8C,yCAA9C;AACA,SAASC,8BAAT,QAA+C,0CAA/C;AACA,SAASC,qCAAT,QAAsD,iDAAtD;AACA,SAASC,oBAAT,QAAqC,6BAArC;AACA,SAASC,iCAAT,QAAkD,4CAAlD;AACA,SAASC,qCAAT,QAAsD,iDAAtD;AACA,SAASC,uCAAT,QAAwD,mDAAxD;AACA,SAASC,sDAAT,QAAuE,qEAAvE;AACA,SAASC,iEAAT,QAAkF,kFAAlF;AACA,SAASC,kEAAT,QAAmF,mFAAnF;AACA,SAASC,+DAAT,QAAgF,gFAAhF;AACA,SAASC,+DAAT,QAAgF,gFAAhF;AACA,SAASC,wCAAT,QAAyD,qDAAzD;AACA,SAASC,2DAAT,QAA4E,4EAA5E;AACA,SAASC,oCAAT,QAAqD,gDAArD;AACA,SAASC,uCAAT,QAAwD,oDAAxD;AACA,SAASC,sEAAT,QAAuF,uFAAvF;AACA,SAASC,mEAAT,QAAoF,oFAApF;AACA,SAASC,qEAAT,QAAsF,sFAAtF;AACA,SAASC,+CAAT,QAAgE,6DAAhE;AACA,SAASC,qDAAT,QAAsE,mEAAtE;AACA,SAASC,mDAAT,QAAoE,gEAApE;AACA,SAASC,gCAAT,QAAiD,4CAAjD;AACA,SAASC,uEAAT,QAAwF,0FAAxF;AACA,SAASC,+CAAT,QAAgE,6DAAhE;AACA,SAASC,6CAAT,QAA8D,2DAA9D;AACA,SAASC,kBAAT,QAAmC,2BAAnC;AACA,SAASC,+BAAT,QAAgD,0CAAhD;AACA,SAASC,mCAAT,QAAoD,+CAApD;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,uCAAT,QAAwD,oDAAxD;AACA,SAASC,kDAAT,QAAmE,kEAAnE;AACA,SAASC,wDAAT,QAAyE,wEAAzE;AACA,SAASC,4DAAT,QAA6E,4EAA7E;AACA,SAASC,2BAAT,QAA4C,sCAA5C;AACA,SAASC,4BAAT,EAAuCC,gBAAvC,EAAyDC,6BAAzD,EAAwFC,iBAAxF,EAA2GC,aAA3G,EAA0HC,cAA1H,QAAgJ,WAAhJ;AACA,SAASC,uCAAT,QAAwD,0DAAxD;AACA,SAASC,4CAAT,QAA6D,+DAA7D;AACA,SAASC,uBAAT,QAAwC,sCAAxC;AACA,SAASC,wBAAT,QAAyC,uCAAzC;AACA,SAASC,kBAAT,QAAmC,iCAAnC;AACA,SAASC,mBAAT,QAAoC,kCAApC;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,SAASC,kBAAT,QAAmC,iCAAnC;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AACA,SAASC,mDAAT,QAAoE,wEAApE;AACA,SAASC,kBAAT,QAAmC,gCAAnC;AACA,SAASC,wBAAT,QAAyC,sCAAzC;AACA,SAASC,kDAAT,QAAmE,sEAAnE;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AACA;;;;;AAIA,cAAc,oBAAd;AACA,cAAc,eAAd;AACA,IAAMC,eAAe,GAAG9J,qBAAqB,CAAC,IAAI+J,GAAJ,EAAD,EAAY,IAAIC,OAAJ,EAAZ,CAA7C;AACA,IAAMC,MAAM,GAAGhC,YAAY,EAA3B;AACA,IAAMiC,oCAAoC,GAAGhF,0CAA0C,CAAC+E,MAAD,CAAvF;AACA,IAAME,2BAA2B,GAAGnH,iCAAiC,CAACkH,oCAAD,CAArE;AACA,IAAME,6BAA6B,GAAGvG,mCAAmC,CAACoG,MAAD,CAAzE;AACA,IAAMI,sBAAsB,GAAGrI,4BAA4B,CAACmI,2BAAD,EAA8BC,6BAA9B,EAA6DF,oCAA7D,CAA3D;AACA,IAAMI,qBAAqB,GAAGvG,4BAA4B,CAACsG,sBAAD,CAA1D;AACA,IAAME,wBAAwB,GAAG7G,+BAA+B,CAACoG,eAAD,EAAkBzH,oBAAlB,EAAwCiI,qBAAxC,CAAhE;AACA,IAAME,oBAAoB,GAAG1I,0BAA0B,CAACiH,uBAAD,CAAvD;AACA,IAAM0B,uBAAuB,GAAGrE,6BAA6B,CAAC2C,uBAAD,EAA0ByB,oBAA1B,EAAgDjB,cAAhD,CAA7D;AACA,IAAMmB,0BAA0B,GAAG1L,iCAAiC,CAACuL,wBAAD,EAA2BtB,kBAA3B,EAA+CwB,uBAA/C,CAApE;AACA,IAAME,sBAAsB,GAAG,IAAIX,OAAJ,EAA/B;AACA,IAAMY,gBAAgB,GAAG3I,sBAAsB,CAAC0G,aAAD,CAA/C;AACA,IAAMkC,wBAAwB,GAAG,IAAIb,OAAJ,EAAjC;AACA,IAAMc,sBAAsB,GAAGrJ,4BAA4B,CAACoI,iBAAD,CAA3D;AACA,IAAMkB,iBAAiB,GAAGlI,uBAAuB,CAACoH,MAAD,CAAjD;AACA,IAAMe,kBAAkB,GAAGlI,wBAAwB,CAACmH,MAAD,CAAnD;AACA,IAAMgB,oBAAoB,GAAGzL,0BAA0B,CAACZ,6BAA6B,CAAC2J,4BAAD,CAA9B,EAA8DoC,sBAA9D,EAAsFb,eAAtF,EAAuG1H,kCAAkC,CAACwG,cAAD,EAAiBE,4CAAjB,EAA+DC,uBAA/D,EAAwFE,kBAAxF,EAA4GC,mBAA5G,EAAiIG,iBAAjI,CAAzI,EAA8RhH,oBAA9R,EAAoTC,wBAApT,EAA8UsD,uBAA9U,EAAuW5E,2BAA2B,CAAC6H,uCAAD,EAA0CD,cAA1C,EAA0DG,uBAA1D,EAAmFE,kBAAnF,EAAuGC,mBAAvG,EAA4H0B,gBAA5H,EAA8IvB,iBAA9I,EAAiKc,2BAAjK,CAAlY,EAAikBhJ,kBAAkB,CAAC0J,wBAAD,EAA2B9B,uBAA3B,EAAoDI,cAApD,CAAnlB,EAAwpB2B,sBAAxpB,EAAgrBF,gBAAhrB,EAAksBG,iBAAlsB,EAAqtBC,kBAArtB,EAAyuBb,2BAAzuB,CAAvD;AACA,IAAMe,uBAAuB,GAAGnM,6BAA6B,CAACkM,oBAAD,EAAuBP,0BAAvB,EAAmDrI,oBAAnD,EAAyEkI,wBAAzE,EAAmGK,gBAAnG,EAAqHT,2BAArH,CAA7D;AACA,SAASe,uBAAuB,IAAIC,YAApC;AACA,IAAMC,gBAAgB,GAAG,IAAIC,OAAJ,EAAzB;AACA,IAAMC,4BAA4B,GAAG3H,kCAAkC,CAACsG,MAAD,CAAvE;AACA,IAAMsB,2BAA2B,GAAG7K,iCAAiC,CAAC,IAAI8K,WAAJ,CAAgB,CAAhB,CAAD,CAArE;AACA,IAAMC,iCAAiC,GAAGvD,uCAAuC,CAACqD,2BAAD,EAA8BlJ,oBAA9B,CAAjF;AACA,IAAMqJ,4CAA4C,GAAGvD,kDAAkD,CAACoD,2BAAD,CAAvG;AACA,IAAMI,sBAAsB,GAAG1M,4BAA4B,CAACmM,gBAAD,EAAmBtB,eAAnB,EAAoClE,uBAApC,EAA6D0F,4BAA7D,EAA2FpB,oCAA3F,EAAiIxD,uCAAuC,CAAC4E,4BAAD,CAAxK,EAAwMG,iCAAxM,EAA2OC,4CAA3O,CAA3D;AACA,SAASC,sBAAsB,IAAIC,WAAnC;AACA,IAAMC,gEAAgE,GAAGzE,sEAAsE,CAACkD,qBAAD,CAA/I;AACA,IAAMwB,6DAA6D,GAAGzE,mEAAmE,CAACiD,qBAAD,CAAzI;AACA,IAAMyB,+DAA+D,GAAGzE,qEAAqE,CAACgD,qBAAD,CAA7I;AACA,IAAM0B,sDAAsD,GAAG3D,4DAA4D,CAACiC,qBAAD,CAA3H;AACA,IAAM2B,wBAAwB,GAAG5F,8BAA8B,CAACmE,oBAAD,EAAuBxB,wBAAvB,EAAiDO,cAAjD,CAA/D;AACA,IAAM2C,iBAAiB,GAAG7L,uBAAuB,CAAC4L,wBAAD,CAAjD;AACA,IAAME,iCAAiC,GAAGvI,wCAAwC,CAACkG,eAAD,EAAkBQ,qBAAlB,EAAyC1D,iEAAiE,CAAC0D,qBAAD,CAA1G,EAAmIzD,kEAAkE,CAACqD,oCAAD,CAArM,EAA6OpD,+DAA+D,CAACwD,qBAAD,CAA5S,EAAqUvD,+DAA+D,CAACuD,qBAAD,CAApY,EAA6ZuB,gEAA7Z,EAA+dC,6DAA/d,EAA8hBC,+DAA9hB,EAA+lBnC,kDAA/lB,EAAmpBxB,wDAAwD,CAACoB,kBAAD,CAA3sB,EAAiuBwC,sDAAjuB,CAAlF;AACA,IAAMI,gBAAgB,GAAGjG,sBAAsB,CAACpE,2BAA2B,CAACiH,wBAAD,CAA5B,EAAwDiD,wBAAxD,CAA/C;AACA,IAAMI,mCAAmC,GAAGlN,0CAA0C,CAAC+M,iBAAD,EAAoBC,iCAApB,EAAuDlD,kBAAvD,EAA2EmD,gBAA3E,EAA6F3B,uBAA7F,CAAtF;AACA,IAAM6B,gBAAgB,GAAG7M,uBAAuB,CAACZ,8BAA8B,CAAC4J,6BAAD,CAA/B,EAAgEoC,wBAAhE,EAA0FnC,iBAA1F,EAA6GhJ,wBAA7G,EAAuItB,kCAAvI,EAA2KC,0CAA3K,EAAuNC,2CAAvN,EAAoQC,sCAApQ,EAA4SC,8BAA5S,EAA4UC,6BAA5U,EAA2WC,kCAA3W,EAA+Y0L,6BAA/Y,CAAhD;AACA,IAAMmC,gCAAgC,GAAGrN,sCAAsC,CAAC+L,oBAAD,EAAuBoB,mCAAvB,EAA4DC,gBAA5D,EAA8E/J,uBAA9E,EAAuG4J,iCAAvG,EAA0IvB,gBAA1I,EAA4JT,2BAA5J,EAAyLN,iBAAzL,CAA/E;AACA,SAAS0C,gCAAgC,IAAIC,qBAA7C;AACA,IAAMC,oBAAoB,GAAG7H,2BAA2B,CAAC0F,qBAAD,CAAxD;AACA,IAAMoC,+BAA+B,GAAGrN,qCAAqC,CAAC4L,oBAAD,EAAuB3L,kCAAvB,EAA2D+C,oBAA3D,EAAiFE,uBAAjF,EAA0GuB,uCAAuC,CAAC2I,oBAAD,EAAuBjD,kBAAvB,CAAjJ,EAA6LoB,gBAA7L,EAA+MT,2BAA/M,EAA4OM,uBAA5O,CAA7E;AACA,IAAMkC,4BAA4B,GAAGxI,mCAAmC,CAACmG,qBAAD,CAAxE;AACA,IAAMsC,8BAA8B,GAAG7M,qCAAqC,CAACmM,iBAAD,EAAoBS,4BAApB,EAAkD1D,kBAAlD,EAAsEmD,gBAAtE,EAAwF3B,uBAAxF,CAA5E;AACA,IAAMoC,2BAA2B,GAAG/M,iCAAiC,CAACmL,oBAAD,EAAuBqB,gBAAvB,EAAyCM,8BAAzC,EAAyEtK,wBAAzE,EAAmGqK,4BAAnG,EAAiI/B,gBAAjI,EAAmJT,2BAAnJ,CAArE;AACA,IAAM2C,kBAAkB,GAAGrJ,wBAAwB,CAAC2F,kBAAD,EAAqB2B,iBAArB,CAAnD;AACA,IAAMgC,qBAAqB,GAAGzE,2BAA2B,CAAC/F,uBAAD,EAA0B+H,qBAA1B,EAAiDwC,kBAAjD,CAAzD;AACA,IAAME,6BAA6B,GAAG5I,oCAAoC,CAACkG,qBAAD,EAAwByC,qBAAxB,CAA1E;AACA,IAAME,+BAA+B,GAAG/M,sCAAsC,CAAC8M,6BAAD,EAAgC/D,kBAAhC,EAAoDwB,uBAApD,CAA9E;AACA,IAAMyC,4BAA4B,GAAGjN,kCAAkC,CAACgL,oBAAD,EAAuBgC,+BAAvB,EAAwDD,6BAAxD,EAAuFpC,gBAAvF,EAAyGT,2BAAzG,CAAvE;AACA,IAAMgD,+BAA+B,GAAG9I,sCAAsC,CAACiG,qBAAD,CAA9E;AACA,IAAM8C,iCAAiC,GAAGhN,wCAAwC,CAAC+M,+BAAD,EAAkClE,kBAAlC,EAAsDwB,uBAAtD,CAAlF;AACA,IAAM4C,8BAA8B,GAAGlN,oCAAoC,CAAC8K,oBAAD,EAAuBmC,iCAAvB,EAA0DD,+BAA1D,EAA2FvC,gBAA3F,EAA6GT,2BAA7G,CAA3E;AACA,IAAMmD,mCAAmC,GAAG/I,0CAA0C,CAAC4H,iCAAD,EAAoCM,oBAApC,EAA0DK,kBAA1D,CAAtF;AACA,IAAMS,8BAA8B,GAAGjJ,qCAAqC,CAACwF,eAAD,EAAkBQ,qBAAlB,EAAyCgD,mCAAzC,EAA8EzB,gEAA9E,EAAgJE,+DAAhJ,CAA5E;AACA,IAAMyB,gCAAgC,GAAG/M,uCAAuC,CAACyL,iBAAD,EAAoBqB,8BAApB,EAAoDtE,kBAApD,EAAwEmD,gBAAxE,EAA0F3B,uBAA1F,CAAhF;AACA,IAAMgD,6BAA6B,GAAGjN,mCAAmC,CAACyK,oBAAD,EAAuBqB,gBAAvB,EAAyCkB,gCAAzC,EAA2ED,8BAA3E,EAA2G3C,gBAA3G,EAA6HT,2BAA7H,EAA0JN,iBAA1J,CAAzE;AACA,IAAM6D,8BAA8B,GAAGjJ,qCAAqC,CAAC6F,qBAAD,EAAwBmC,oBAAxB,EAA8CK,kBAA9C,CAA5E;AACA,IAAMa,yBAAyB,GAAGnJ,gCAAgC,CAAC8F,qBAAD,EAAwBoD,8BAAxB,EAAwD9H,uBAAxD,EAAiF4D,kBAAjF,CAAlE;AACA,IAAMoE,2BAA2B,GAAGhN,kCAAkC,CAAC+M,yBAAD,EAA4B1E,kBAA5B,EAAgDwB,uBAAhD,CAAtE;AACA,IAAMoD,wBAAwB,GAAGlN,8BAA8B,CAACsK,oBAAD,EAAuB2C,2BAAvB,EAAoDD,yBAApD,EAA+E/C,gBAA/E,EAAiGT,2BAAjG,CAA/D;AACA,IAAM2D,qBAAqB,GAAGpJ,4BAA4B,CAAC4F,qBAAD,CAA1D;AACA,IAAMyD,uBAAuB,GAAG7M,8BAA8B,CAACgL,iBAAD,EAAoB4B,qBAApB,EAA2C7E,kBAA3C,EAA+DmD,gBAA/D,EAAiF3B,uBAAjF,CAA9D;AACA,IAAMuD,oBAAoB,GAAG/M,0BAA0B,CAACgK,oBAAD,EAAuBqB,gBAAvB,EAAyCyB,uBAAzC,EAAkED,qBAAlE,EAAyFlD,gBAAzF,EAA2GT,2BAA3G,CAAvD;AACA,IAAM8D,kCAAkC,GAAGtJ,yCAAyC,CAAC2F,qBAAD,EAAwB1E,uBAAxB,CAApF;AACA,IAAMsI,oCAAoC,GAAG5M,2CAA2C,CAAC4K,iBAAD,EAAoB+B,kCAApB,EAAwDhF,kBAAxD,EAA4EmD,gBAA5E,EAA8F3B,uBAA9F,CAAxF;AACA,IAAM0D,iCAAiC,GAAG9M,uCAAuC,CAAC4J,oBAAD,EAAuBqB,gBAAvB,EAAyC4B,oCAAzC,EAA+ED,kCAA/E,EAAmHrI,uBAAnH,EAA4IgF,gBAA5I,EAA8JT,2BAA9J,CAAjF;AACA,IAAMiE,sBAAsB,GAAGvM,6BAA6B,CAACqK,iBAAD,EAAoBO,oBAApB,EAA0CxD,kBAA1C,EAA8DmD,gBAA9D,EAAgF3B,uBAAhF,CAA5D;AACA,IAAM4D,mBAAmB,GAAGzM,yBAAyB,CAACqJ,oBAAD,EAAuBqB,gBAAvB,EAAyC8B,sBAAzC,EAAiE3B,oBAAjE,EAAuF7B,gBAAvF,EAAyGT,2BAAzG,CAArD;AACA,IAAMmE,+BAA+B,GAAG/I,sCAAsC,CAAC+E,qBAAD,CAA9E;AACA,IAAMiE,8BAA8B,GAAGzJ,qCAAqC,CAACxC,wBAAD,EAA2BC,uBAA3B,EAAoD+L,+BAApD,EAAqF1I,uBAArF,CAA5E;AACA,IAAM4I,+BAA+B,GAAGlI,qCAAqC,CAACwD,eAAD,EAAkB2C,oBAAlB,EAAwC6B,+BAAxC,EAAyE1G,+CAA+C,CAAC6E,oBAAD,EAAuBvC,oCAAvB,CAAxH,CAA7E;AACA,IAAMuE,2BAA2B,GAAGtM,kCAAkC,CAACgK,iCAAD,EAAoC7B,qBAApC,EAA2DrB,kBAA3D,EAA+EiB,oCAA/E,EAAqHO,uBAArH,EAA8I+D,+BAA9I,CAAtE;AACA,IAAME,yBAAyB,GAAG7J,gCAAgC,CAACyF,qBAAD,EAAwBiE,8BAAxB,CAAlE;AACA,IAAMI,wBAAwB,GAAGzM,8BAA8B,CAAC+I,oBAAD,EAAuByD,yBAAvB,EAAkDD,2BAAlD,EAA+E7D,gBAA/E,EAAiGT,2BAAjG,CAA/D;AACA,IAAMyE,mBAAmB,GAAGrP,0BAA0B,CAAC+M,gBAAD,EAAmBU,6BAAnB,EAAkDO,8BAAlD,EAAkFe,+BAAlF,EAAmHnE,2BAAnH,CAAtD;AACA,IAAM0E,kCAAkC,GAAGtL,wCAAwC,CAACmJ,+BAAD,EAAkCkC,mBAAlC,EAAuD9D,sBAAvD,EAA+EjB,iBAA/E,CAAnF;AACA,IAAMiF,0BAA0B,GAAG3J,iCAAiC,CAAC2E,eAAD,EAAkBQ,qBAAlB,EAAyCuB,gEAAzC,EAA2GC,6DAA3G,EAA0KC,+DAA1K,EAA2OC,sDAA3O,CAApE;AACA,IAAM+C,4BAA4B,GAAGhJ,mCAAmC,CAACmG,iBAAD,EAAoB4C,0BAApB,EAAgD7F,kBAAhD,EAAoEmD,gBAApE,EAAsF3B,uBAAtF,CAAxE;AACA,IAAMuE,yBAAyB,GAAGlJ,+BAA+B,CAACmF,oBAAD,EAAuBqB,gBAAvB,EAAyC/J,uBAAzC,EAAkEuM,0BAAlE,EAA8FC,4BAA9F,EAA4HnE,gBAA5H,EAA8IT,2BAA9I,EAA2KN,iBAA3K,CAAjE;AACA,IAAMoF,0CAA0C,GAAG1O,iDAAiD,CAAC4L,iCAAD,CAApG;AACA,IAAM+C,+BAA+B,GAAGvJ,sCAAsC,CAACsJ,0CAAD,EAA6C1M,uBAA7C,EAAsE+H,qBAAtE,EAA6FmC,oBAA7F,EAAmHnD,SAAnH,EAA8HwD,kBAA9H,CAA9E;AACA,IAAMqC,0BAA0B,GAAGzJ,iCAAiC,CAACuJ,0CAAD,EAA6C1M,uBAA7C,EAAsE+H,qBAAtE,EAA6F4E,+BAA7F,EAA8H5F,SAA9H,EAAyIwD,kBAAzI,EAA6JtD,kBAA7J,CAApE;AACA,IAAM4F,2BAA2B,GAAG/J,kCAAkC,CAACwD,uCAAD,EAA0CtG,uBAA1C,EAAmE+H,qBAAnE,EAA0F0C,6BAA1F,EAAyHP,oBAAzH,EAA+I6B,+BAA/I,EAAgLa,0BAAhL,EAA4MvJ,uBAA5M,EAAqOkD,4CAArO,EAAmRgE,kBAAnR,CAAtE;AACA,IAAMuC,sBAAsB,GAAGjK,6BAA6B,CAACkF,qBAAD,EAAwB8E,2BAAxB,CAA5D;AACA,IAAME,wBAAwB,GAAGrJ,+BAA+B,CAACiG,iBAAD,EAAoBmD,sBAApB,EAA4CpG,kBAA5C,EAAgEmD,gBAAhE,EAAkF3B,uBAAlF,CAAhE;AACA,IAAM8E,qBAAqB,GAAGvJ,2BAA2B,CAACiF,oBAAD,EAAuBqB,gBAAvB,EAAyC+C,sBAAzC,EAAiEC,wBAAjE,EAA2F1E,gBAA3F,EAA6GT,2BAA7G,CAAzD;AACA,IAAMqF,wBAAwB,GAAGlK,+BAA+B,CAAC+E,sBAAD,CAAhE;AACA,IAAMoF,uBAAuB,GAAGvJ,6BAA6B,CAACsJ,wBAAD,EAA2B5E,gBAA3B,EAA6C,IAAIS,OAAJ,EAA7C,CAA7D;AACA,IAAMqE,kCAAkC,GAAGjK,wCAAwC,CAACuH,6BAAD,EAAgCG,+BAAhC,EAAiEV,oBAAjE,EAAuF0C,0BAAvF,EAAmHvJ,uBAAnH,EAA4IkH,kBAA5I,CAAnF;AACA,IAAM6C,4BAA4B,GAAGnK,mCAAmC,CAAC8E,qBAAD,EAAwBoF,kCAAxB,EAA4D9J,uBAA5D,CAAxE;AACA,IAAMgK,8BAA8B,GAAGnJ,qCAAqC,CAACyF,iBAAD,EAAoByD,4BAApB,EAAkD1G,kBAAlD,EAAsEmD,gBAAtE,EAAwF3B,uBAAxF,CAA5E;AACA,IAAMoF,2BAA2B,GAAGrJ,iCAAiC,CAACyE,oBAAD,EAAuBqB,gBAAvB,EAAyCqD,4BAAzC,EAAuEC,8BAAvE,EAAuGhF,gBAAvG,EAAyHT,2BAAzH,CAArE;AACA,IAAM2F,4BAA4B,GAAG9H,mCAAmC,CAACmH,0BAAD,EAA6BlG,kBAA7B,EAAiDwB,uBAAjD,CAAxE;AACA,IAAMsF,yBAAyB,GAAGhI,+BAA+B,CAACkD,oBAAD,EAAuB1I,uBAAvB,EAAgD4M,0BAAhD,EAA4EW,4BAA5E,EAA0GlF,gBAA1G,EAA4HT,2BAA5H,CAAjE;AACA,IAAM6F,eAAe,GAAG/M,qBAAqB,CAACgH,MAAD,CAA7C;AACA,IAAMgG,gCAAgC,GAAGvO,sCAAsC,CAACuI,MAAD,CAA/E,C,CACA;;AACA,OAAO,IAAMiG,qBAAqB,GAAIF,eAAD,GACjClR,2BAA2B,CAACH,gBAAD,EAAmBiH,uBAAnB,EAA4CpE,oBAAoB,CAACyI,MAAD,CAAhE,EAA0EgG,gCAA1E,EAA4GtO,iBAAiB,CAAChD,gBAAD,CAA7H,EAAiJ0L,sBAAjJ,EAAyKO,gBAAzK,EAA2L,IAAIZ,OAAJ,EAA3L,EAA0M,IAAIA,OAAJ,EAA1M,CADM,GAEjCmG,SAFG;AAGP,IAAMC,oBAAoB,GAAGxN,0BAA0B,CAACwH,6BAAD,CAAvD;AACA,IAAMiG,eAAe,GAAGtN,qBAAqB,CAACqN,oBAAD,EAAuBjG,2BAAvB,CAA7C;AACA,OAAO,IAAMmG,eAAe,GAAGvP,qBAAqB,CAACqK,gBAAD,EAAmBtB,eAAnB,EAAoChJ,oBAApC,EAA0DS,mBAA1D,EAA+E,IAAI8J,OAAJ,EAA/E,EAA8FT,gBAA9F,EAAgHyF,eAAhH,EAAiIlG,2BAAjI,EAA8JD,oCAA9J,EAAoMT,mDAApM,EAAyPC,kBAAzP,EAA6Q+B,iCAA7Q,EAAgTC,4CAAhT,CAA7C;AACP,IAAM6E,2BAA2B,GAAG1Q,iCAAiC,CAACqQ,qBAAD,EAAwBhF,uBAAxB,EAAiDS,sBAAjD,EAAyEY,gCAAzE,EAA2GM,2BAA3G,EAAwIK,4BAAxI,EAAsKG,8BAAtK,EAAsMI,6BAAtM,EAAqOI,wBAArO,EAA+PyC,eAA/P,EAAgRtC,oBAAhR,EAAsSG,iCAAtS,EAAyUE,mBAAzU,EAA8VM,wBAA9V,EAAwXE,kCAAxX,EAA4ZG,yBAA5Z,EAAubO,qBAAvb,EAA8cE,uBAA9c,EAAueI,2BAAve,EAAogBE,yBAApgB,CAArE;AACA,IAAMS,uCAAuC,GAAGzL,8CAA8C,CAACuF,qBAAD,CAA9F;AACA,IAAMmG,sCAAsC,GAAGtN,4CAA4C,CAAC8H,oBAAD,EAAuBuF,uCAAvB,EAAgE5K,uBAAhE,EAAyFgF,gBAAzF,EAA2GT,2BAA3G,CAA3F;AACA,IAAMuG,sCAAsC,GAAG1L,6CAA6C,CAACsF,qBAAD,CAA5F;AACA,IAAMqG,qCAAqC,GAAGvN,2CAA2C,CAAC6H,oBAAD,EAAuByF,sCAAvB,EAA+D9K,uBAA/D,EAAwFgF,gBAAxF,EAA0GT,2BAA1G,CAAzF;AACA,IAAMyG,2CAA2C,GAAG3L,kDAAkD,CAAC1C,uBAAD,EAA0B+H,qBAA1B,CAAtG;AACA,IAAMuG,0CAA0C,GAAGxN,gDAAgD,CAAC4H,oBAAD,EAAuB2F,2CAAvB,EAAoEhL,uBAApE,EAA6FgF,gBAA7F,EAA+GT,2BAA/G,CAAnG;AACA,IAAM2G,uBAAuB,GAAG1R,6BAA6B,CAACmR,2BAAD,EAA8BhO,uBAA9B,EAAuDqD,uBAAvD,EAAgFkC,kBAAhF,EAAoG2I,sCAApG,EAA4IE,qCAA5I,EAAmLE,0CAAnL,EAA+NzG,6BAA/N,CAA7D;AACA,SAAS0G,uBAAuB,IAAIC,YAApC;AACA,IAAMC,sBAAsB,GAAG1Q,4BAA4B,CAAC+B,oBAAD,CAA3D;AACA,IAAM4O,yBAAyB,GAAG7P,+BAA+B,CAACiB,oBAAD,CAAjE;AACA,IAAM6O,iCAAiC,GAAGhN,wCAAwC,CAACyG,sBAAD,EAAyBqG,sBAAzB,EAAiD3O,oBAAjD,EAAuEE,uBAAvE,EAAgGyK,6BAAhG,EAA+HG,+BAA/H,EAAgKI,8BAAhK,EAAgMd,oBAAhM,EAAsN6B,+BAAtN,EAAuP1I,uBAAvP,EAAgRqL,yBAAhR,EAA2ShB,gCAA3S,EAA6UnD,kBAA7U,CAAlF;AACA,IAAMqE,4BAA4B,GAAGlN,mCAAmC,CAAC1B,uBAAD,EAA0B+H,qBAA1B,EAAiD4G,iCAAjD,EAAoFtL,uBAApF,EAA6GuE,2BAA7G,CAAxE;AACA,IAAMiH,iCAAiC,GAAGpN,uCAAuC,CAACiG,MAAD,CAAjF;AACA,IAAMoH,8BAA8B,GAAGzR,qCAAqC,CAACsM,iBAAD,EAAoB8E,sBAApB,EAA4C7E,iCAA5C,EAA+Ea,6BAA/E,EAA8GG,+BAA9G,EAA+II,8BAA/I,EAA+Kd,oBAA/K,EAAqMwE,yBAArM,EAAgOhB,gCAAhO,EAAkQhH,kBAAlQ,EAAsRmI,iCAAtR,EAAyTlH,oCAAzT,EAA+VkC,gBAA/V,EAAiX3B,uBAAjX,EAA0Y+D,+BAA1Y,CAA5E,C,CACA;;AACA,IAAM8C,2BAA2B,GAAItB,eAAD,GAChCrQ,iCAAiC,CAACsL,oBAAD,EAAuBqB,gBAAvB,EAAyC+E,8BAAzC,EAAyEF,4BAAzE,EAAuG9C,mBAAvG,EAA4HzD,gBAA5H,EAA8IT,2BAA9I,EAA2KiH,iCAA3K,EAA8MvH,iBAA9M,CADD,GAEhCsG,SAFJ;AAGA,SAASmB,2BAA2B,IAAIC,gBAAxC;AACA,SAAS1E,2BAA2B,IAAI2E,gBAAxC;AACA,SAAStE,4BAA4B,IAAIuE,iBAAzC;AACA,SAASpE,8BAA8B,IAAIqE,mBAA3C;AACA,SAAS7D,wBAAwB,IAAI8D,aAArC;AACA,SAASlE,6BAA6B,IAAImE,kBAA1C;AACA,SAAS5D,oBAAoB,IAAI6D,SAAjC;AACA,SAAS1D,iCAAiC,IAAI2D,sBAA9C;AACA,SAASzD,mBAAmB,IAAI0D,QAAhC;AACA,SAASpD,wBAAwB,IAAIqD,aAArC;AACA,SAASvB,sCAAsC,IAAIwB,2BAAnD;AACA,SAAStB,qCAAqC,IAAIuB,0BAAlD;AACA,SAASrB,0CAA0C,IAAIsB,+BAAvD;AACA,IAAMC,8BAA8B,GAAG9O,oCAAoC,CAACf,uBAAD,EAA0BqD,uBAA1B,EAAmDkC,kBAAnD,EAAuE+G,kCAAvE,EAA2GzE,6BAA3G,CAA3E;AACA,SAASgI,8BAA8B,IAAIC,mBAA3C;AACA,IAAMC,+BAA+B,GAAGzR,qCAAqC,CAAC+E,uBAAD,EAA0BsE,oCAA1B,CAA7E;AACA,IAAMqI,cAAc,GAAGhM,oBAAoB,CAAC6E,gBAAD,EAAmBtB,eAAnB,EAAoCU,oBAApC,EAA0DgE,+BAA1D,EAA2F/E,mDAA3F,EAAgJgC,iCAAhJ,EAAmLC,4CAAnL,CAA3C;AACA,IAAM8G,qCAAqC,GAAGhP,2CAA2C,CAACsG,eAAD,EAAkBvH,uBAAlB,EAA2C+P,+BAA3C,EAA4EzD,kCAA5E,EAAgH0D,cAAhH,CAAzF;AACA,SAASC,qCAAqC,IAAIC,0BAAlD;AACA,IAAMC,8BAA8B,GAAG7M,oCAAoC,CAAC0K,2BAAD,EAA8BzG,eAA9B,EAA+CvH,uBAA/C,EAAwE+P,+BAAxE,EAAyGC,cAAzG,CAA3E;AACA,SAASG,8BAA8B,IAAIC,mBAA3C;AACA,SAAS3D,yBAAyB,IAAI4D,cAAtC;AACA,SAASrD,qBAAqB,IAAIsD,UAAlC;AACA,SAASpD,uBAAuB,IAAIqD,YAApC;AACA,SAASjD,2BAA2B,IAAIkD,gBAAxC;AACA,SAAShD,yBAAyB,IAAIiD,cAAtC;AACA,OAAO,IAAMC,iBAAiB,GAAGzQ,uBAAuB,CAACmG,aAAD,EAAgByH,oBAAhB,CAAjD;AACP,OAAO,IAAM8C,cAAc,GAAGzQ,oBAAoB,CAAC+F,gBAAD,EAAmBuC,iBAAnB,CAA3C;AACP,OAAO,IAAMoI,eAAe,GAAGzQ,qBAAqB,CAACgG,iBAAD,EAAoBsC,kBAApB,CAA7C;AACP,OAAO,IAAMoI,wBAAwB,GAAGzQ,8BAA8B,CAACgG,aAAD,EAAgBwB,2BAAhB,CAA/D;AACP,OAAO,IAAMkJ,WAAW,GAAG,SAAdA,WAAc;AAAA,SAAMnQ,wBAAwB,CAAC4G,eAAD,EAAkBnD,sDAAsD,CAACuD,oCAAD,CAAxE,EAAgHlD,wCAAwC,CAACoD,6BAAD,CAAxJ,EAAyLnD,2DAA2D,CAACiD,oCAAD,CAApP,EAA4RhD,oCAAoC,CAACkD,6BAAD,CAAhU,EAAiWjD,uCAAuC,CAAC+C,oCAAD,CAAxY,EAAgb3C,+CAA+C,CAAC6J,iCAAD,EAAoClH,oCAApC,CAA/d,EAA0iB1C,qDAAqD,CAAC8C,qBAAD,EAAwBJ,oCAAxB,CAA/lB,EAA8pBzC,mDAAmD,CAACyC,oCAAD,CAAjtB,EAAyvBxC,gCAAgC,CAACuC,MAAD,CAAzxB,EAAmyBtC,uEAAuE,CAACyC,6BAAD,CAA12B,EAA24BvC,6CAA6C,CAACqC,oCAAD,CAAx7B,EAAg+BP,wBAAh+B,CAA9B;AAAA,CAApB","sourcesContent":["import { createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent } from 'automation-events';\nimport { createAbortError } from './factories/abort-error';\nimport { createAddAudioNodeConnections } from './factories/add-audio-node-connections';\nimport { createAddAudioParamConnections } from './factories/add-audio-param-connections';\nimport { createAddAudioWorkletModule } from './factories/add-audio-worklet-module';\nimport { createAnalyserNodeConstructor } from './factories/analyser-node-constructor';\nimport { createAnalyserNodeRendererFactory } from './factories/analyser-node-renderer-factory';\nimport { createAudioBufferConstructor } from './factories/audio-buffer-constructor';\nimport { createAudioBufferSourceNodeConstructor } from './factories/audio-buffer-source-node-constructor';\nimport { createAudioBufferSourceNodeRendererFactory } from './factories/audio-buffer-source-node-renderer-factory';\nimport { createAudioContextConstructor } from './factories/audio-context-constructor';\nimport { createAudioDestinationNodeConstructor } from './factories/audio-destination-node-constructor';\nimport { createAudioDestinationNodeRenderer } from './factories/audio-destination-node-renderer-factory';\nimport { createAudioListenerFactory } from './factories/audio-listener-factory';\nimport { createAudioNodeConstructor } from './factories/audio-node-constructor';\nimport { createAudioParamFactory } from './factories/audio-param-factory';\nimport { createAudioParamRenderer } from './factories/audio-param-renderer';\nimport { createAudioWorkletNodeConstructor } from './factories/audio-worklet-node-constructor';\nimport { createAudioWorkletNodeRendererFactory } from './factories/audio-worklet-node-renderer-factory';\nimport { createBaseAudioContextConstructor } from './factories/base-audio-context-constructor';\nimport { createBiquadFilterNodeConstructor } from './factories/biquad-filter-node-constructor';\nimport { createBiquadFilterNodeRendererFactory } from './factories/biquad-filter-node-renderer-factory';\nimport { createCacheTestResult } from './factories/cache-test-result';\nimport { createChannelMergerNodeConstructor } from './factories/channel-merger-node-constructor';\nimport { createChannelMergerNodeRendererFactory } from './factories/channel-merger-node-renderer-factory';\nimport { createChannelSplitterNodeConstructor } from './factories/channel-splitter-node-constructor';\nimport { createChannelSplitterNodeRendererFactory } from './factories/channel-splitter-node-renderer-factory';\nimport { createConnectAudioParam } from './factories/connect-audio-param';\nimport { createConnectMultipleOutputs } from './factories/connect-multiple-outputs';\nimport { createConnectedNativeAudioBufferSourceNodeFactory } from './factories/connected-native-audio-buffer-source-node-factory';\nimport { createConstantSourceNodeConstructor } from './factories/constant-source-node-constructor';\nimport { createConstantSourceNodeRendererFactory } from './factories/constant-source-node-renderer-factory';\nimport { createConvertNumberToUnsignedLong } from './factories/convert-number-to-unsigned-long';\nimport { createConvolverNodeConstructor } from './factories/convolver-node-constructor';\nimport { createConvolverNodeRendererFactory } from './factories/convolver-node-renderer-factory';\nimport { createCreateNativeOfflineAudioContext } from './factories/create-native-offline-audio-context';\nimport { createDataCloneError } from './factories/data-clone-error';\nimport { createDecodeAudioData } from './factories/decode-audio-data';\nimport { createDecrementCycleCounter } from './factories/decrement-cycle-counter';\nimport { createDelayNodeConstructor } from './factories/delay-node-constructor';\nimport { createDelayNodeRendererFactory } from './factories/delay-node-renderer-factory';\nimport { createDetectCycles } from './factories/detect-cycles';\nimport { createDisconnectMultipleOutputs } from './factories/disconnect-multiple-outputs';\nimport { createDynamicsCompressorNodeConstructor } from './factories/dynamics-compressor-node-constructor';\nimport { createDynamicsCompressorNodeRendererFactory } from './factories/dynamics-compressor-node-renderer-factory';\nimport { createEncodingError } from './factories/encoding-error';\nimport { createEvaluateSource } from './factories/evaluate-source';\nimport { createEventTargetConstructor } from './factories/event-target-constructor';\nimport { createExposeCurrentFrameAndCurrentTime } from './factories/expose-current-frame-and-current-time';\nimport { createFetchSource } from './factories/fetch-source';\nimport { createGainNodeConstructor } from './factories/gain-node-constructor';\nimport { createGainNodeRendererFactory } from './factories/gain-node-renderer-factory';\nimport { createGetAudioNodeRenderer } from './factories/get-audio-node-renderer';\nimport { createGetAudioParamRenderer } from './factories/get-audio-param-renderer';\nimport { createGetBackupNativeContext } from './factories/get-backup-native-context';\nimport { createGetNativeContext } from './factories/get-native-context';\nimport { createIIRFilterNodeConstructor } from './factories/iir-filter-node-constructor';\nimport { createIIRFilterNodeRendererFactory } from './factories/iir-filter-node-renderer-factory';\nimport { createIncrementCycleCounterFactory } from './factories/increment-cycle-counter-factory';\nimport { createIndexSizeError } from './factories/index-size-error';\nimport { createInvalidAccessError } from './factories/invalid-access-error';\nimport { createInvalidStateError } from './factories/invalid-state-error';\nimport { createIsAnyAudioContext } from './factories/is-any-audio-context';\nimport { createIsAnyAudioNode } from './factories/is-any-audio-node';\nimport { createIsAnyAudioParam } from './factories/is-any-audio-param';\nimport { createIsAnyOfflineAudioContext } from './factories/is-any-offline-audio-context';\nimport { createIsNativeAudioContext } from './factories/is-native-audio-context';\nimport { createIsNativeAudioNode } from './factories/is-native-audio-node';\nimport { createIsNativeAudioParam } from './factories/is-native-audio-param';\nimport { createIsNativeContext } from './factories/is-native-context';\nimport { createIsNativeOfflineAudioContext } from './factories/is-native-offline-audio-context';\nimport { createIsSecureContext } from './factories/is-secure-context';\nimport { createIsSupportedPromise } from './factories/is-supported-promise';\nimport { createMediaElementAudioSourceNodeConstructor } from './factories/media-element-audio-source-node-constructor';\nimport { createMediaStreamAudioSourceNodeConstructor } from './factories/media-stream-audio-source-node-constructor';\nimport { createMediaStreamTrackAudioSourceNodeConstructor } from './factories/media-stream-track-audio-source-node-constructor';\nimport { createMinimalAudioContextConstructor } from './factories/minimal-audio-context-constructor';\nimport { createMinimalBaseAudioContextConstructor } from './factories/minimal-base-audio-context-constructor';\nimport { createMinimalOfflineAudioContextConstructor } from './factories/minimal-offline-audio-context-constructor';\nimport { createMonitorConnections } from './factories/monitor-connections';\nimport { createNativeAnalyserNodeFactory } from './factories/native-analyser-node-factory';\nimport { createNativeAudioBufferConstructor } from './factories/native-audio-buffer-constructor';\nimport { createNativeAudioBufferSourceNodeFactory } from './factories/native-audio-buffer-source-node-factory';\nimport { createNativeAudioContextConstructor } from './factories/native-audio-context-constructor';\nimport { createNativeAudioDestinationNodeFactory } from './factories/native-audio-destination-node';\nimport { createNativeAudioNodeFactory } from './factories/native-audio-node-factory';\nimport { createNativeAudioWorkletNodeConstructor } from './factories/native-audio-worklet-node-constructor';\nimport { createNativeAudioWorkletNodeFactory } from './factories/native-audio-worklet-node-factory';\nimport { createNativeAudioWorkletNodeFakerFactory } from './factories/native-audio-worklet-node-faker-factory';\nimport { createNativeBiquadFilterNodeFactory } from './factories/native-biquad-filter-node-factory';\nimport { createNativeChannelMergerNodeFactory } from './factories/native-channel-merger-node-factory';\nimport { createNativeChannelSplitterNodeFactory } from './factories/native-channel-splitter-node-factory';\nimport { createNativeConstantSourceNodeFactory } from './factories/native-constant-source-node-factory';\nimport { createNativeConstantSourceNodeFakerFactory } from './factories/native-constant-source-node-faker-factory';\nimport { createNativeConvolverNodeFactory } from './factories/native-convolver-node-factory';\nimport { createNativeConvolverNodeFakerFactory } from './factories/native-convolver-node-faker-factory';\nimport { createNativeDelayNodeFactory } from './factories/native-delay-node-factory';\nimport { createNativeDynamicsCompressorNodeFactory } from './factories/native-dynamics-compressor-node-factory';\nimport { createNativeGainNodeFactory } from './factories/native-gain-node-factory';\nimport { createNativeIIRFilterNodeFactory } from './factories/native-iir-filter-node-factory';\nimport { createNativeIIRFilterNodeFakerFactory } from './factories/native-iir-filter-node-faker-factory';\nimport { createNativeMediaElementAudioSourceNodeFactory } from './factories/native-media-element-audio-source-node-factory';\nimport { createNativeMediaStreamAudioSourceNodeFactory } from './factories/native-media-stream-audio-source-node-factory';\nimport { createNativeMediaStreamTrackAudioSourceNodeFactory } from './factories/native-media-stream-track-audio-source-node-factory';\nimport { createNativeOfflineAudioContextConstructor } from './factories/native-offline-audio-context-constructor';\nimport { createNativeOscillatorNodeFactory } from './factories/native-oscillator-node-factory';\nimport { createNativePannerNodeFactory } from './factories/native-panner-node-factory';\nimport { createNativePannerNodeFakerFactory } from './factories/native-panner-node-faker-factory';\nimport { createNativePeriodicWaveFactory } from './factories/native-periodic-wave-factory';\nimport { createNativeScriptProcessorNodeFactory } from './factories/native-script-processor-node-factory';\nimport { createNativeStereoPannerNodeFactory } from './factories/native-stereo-panner-node-factory';\nimport { createNativeStereoPannerNodeFakerFactory } from './factories/native-stereo-panner-node-faker-factory';\nimport { createNativeWaveShaperNodeFactory } from './factories/native-wave-shaper-node-factory';\nimport { createNativeWaveShaperNodeFakerFactory } from './factories/native-wave-shaper-node-faker-factory';\nimport { createNotSupportedError } from './factories/not-supported-error';\nimport { createOfflineAudioContextConstructor } from './factories/offline-audio-context-constructor';\nimport { createOscillatorNodeConstructor } from './factories/oscillator-node-constructor';\nimport { createOscillatorNodeRendererFactory } from './factories/oscillator-node-renderer-factory';\nimport { createPannerNodeConstructor } from './factories/panner-node-constructor';\nimport { createPannerNodeRendererFactory } from './factories/panner-node-renderer-factory';\nimport { createPeriodicWaveConstructor } from './factories/periodic-wave-constructor';\nimport { createRenderAutomation } from './factories/render-automation';\nimport { createRenderInputsOfAudioNode } from './factories/render-inputs-of-audio-node';\nimport { createRenderInputsOfAudioParam } from './factories/render-inputs-of-audio-param';\nimport { createRenderNativeOfflineAudioContext } from './factories/render-native-offline-audio-context';\nimport { createStartRendering } from './factories/start-rendering';\nimport { createStereoPannerNodeConstructor } from './factories/stereo-panner-node-constructor';\nimport { createStereoPannerNodeRendererFactory } from './factories/stereo-panner-node-renderer-factory';\nimport { createTestAudioBufferConstructorSupport } from './factories/test-audio-buffer-constructor-support';\nimport { createTestAudioBufferCopyChannelMethodsSubarraySupport } from './factories/test-audio-buffer-copy-channel-methods-subarray-support';\nimport { createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport } from './factories/test-audio-buffer-source-node-start-method-consecutive-calls-support';\nimport { createTestAudioBufferSourceNodeStartMethodDurationParameterSupport } from './factories/test-audio-buffer-source-node-start-method-duration-parameter-support';\nimport { createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport } from './factories/test-audio-buffer-source-node-start-method-offset-clamping-support';\nimport { createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport } from './factories/test-audio-buffer-source-node-stop-method-nullified-buffer-support';\nimport { createTestAudioContextCloseMethodSupport } from './factories/test-audio-context-close-method-support';\nimport { createTestAudioContextDecodeAudioDataMethodTypeErrorSupport } from './factories/test-audio-context-decode-audio-data-method-type-error-support';\nimport { createTestAudioContextOptionsSupport } from './factories/test-audio-context-options-support';\nimport { createTestAudioNodeConnectMethodSupport } from './factories/test-audio-node-connect-method-support';\nimport { createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport } from './factories/test-audio-scheduled-source-node-start-method-negative-parameters-support';\nimport { createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport } from './factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support';\nimport { createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport } from './factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support';\nimport { createTestAudioWorkletProcessorNoOutputsSupport } from './factories/test-audio-worklet-processor-no-outputs-support';\nimport { createTestConstantSourceNodeAccurateSchedulingSupport } from './factories/test-constant-source-node-accurate-scheduling-support';\nimport { createTestConvolverNodeBufferReassignabilitySupport } from './factories/test-convolver-node-buffer-reassignability-support';\nimport { createTestIsSecureContextSupport } from './factories/test-is-secure-context-support';\nimport { createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport } from './factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support';\nimport { createTestOfflineAudioContextCurrentTimeSupport } from './factories/test-offline-audio-context-current-time-support';\nimport { createTestStereoPannerNodeDefaultValueSupport } from './factories/test-stereo-panner-node-default-value-support';\nimport { createUnknownError } from './factories/unknown-error';\nimport { createWaveShaperNodeConstructor } from './factories/wave-shaper-node-constructor';\nimport { createWaveShaperNodeRendererFactory } from './factories/wave-shaper-node-renderer-factory';\nimport { createWindow } from './factories/window';\nimport { createWrapAudioBufferCopyChannelMethods } from './factories/wrap-audio-buffer-copy-channel-methods';\nimport { createWrapAudioBufferCopyChannelMethodsOutOfBounds } from './factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds';\nimport { createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer } from './factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer';\nimport { createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls } from './factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls';\nimport { createWrapChannelMergerNode } from './factories/wrap-channel-merger-node';\nimport { AUDIO_NODE_CONNECTIONS_STORE, AUDIO_NODE_STORE, AUDIO_PARAM_CONNECTIONS_STORE, AUDIO_PARAM_STORE, CONTEXT_STORE, CYCLE_COUNTERS } from './globals';\nimport { connectNativeAudioNodeToNativeAudioNode } from './helpers/connect-native-audio-node-to-native-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from './helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from './helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from './helpers/get-audio-param-connections';\nimport { getNativeAudioNode } from './helpers/get-native-audio-node';\nimport { getNativeAudioParam } from './helpers/get-native-audio-param';\nimport { getValueForKey } from './helpers/get-value-for-key';\nimport { insertElementInSet } from './helpers/insert-element-in-set';\nimport { isActiveAudioNode } from './helpers/is-active-audio-node';\nimport { isDCCurve } from './helpers/is-dc-curve';\nimport { isPartOfACycle } from './helpers/is-part-of-a-cycle';\nimport { overwriteAccessors } from './helpers/overwrite-accessors';\nimport { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from './helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { testPromiseSupport } from './helpers/test-promise-support';\nimport { testTransferablesSupport } from './helpers/test-transferables-support';\nimport { wrapAudioBufferSourceNodeStartMethodOffsetClamping } from './helpers/wrap-audio-buffer-source-node-start-method-offset-clamping';\nimport { wrapEventListener } from './helpers/wrap-event-listener';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\nexport * from './interfaces/index';\nexport * from './types/index';\nconst cacheTestResult = createCacheTestResult(new Map(), new WeakMap());\nconst window = createWindow();\nconst nativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor(window);\nconst isNativeOfflineAudioContext = createIsNativeOfflineAudioContext(nativeOfflineAudioContextConstructor);\nconst nativeAudioContextConstructor = createNativeAudioContextConstructor(window);\nconst getBackupNativeContext = createGetBackupNativeContext(isNativeOfflineAudioContext, nativeAudioContextConstructor, nativeOfflineAudioContextConstructor);\nconst createNativeAudioNode = createNativeAudioNodeFactory(getBackupNativeContext);\nconst createNativeAnalyserNode = createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError, createNativeAudioNode);\nconst getAudioNodeRenderer = createGetAudioNodeRenderer(getAudioNodeConnections);\nconst renderInputsOfAudioNode = createRenderInputsOfAudioNode(getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle);\nconst createAnalyserNodeRenderer = createAnalyserNodeRendererFactory(createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst auxiliaryGainNodeStore = new WeakMap();\nconst getNativeContext = createGetNativeContext(CONTEXT_STORE);\nconst audioParamAudioNodeStore = new WeakMap();\nconst eventTargetConstructor = createEventTargetConstructor(wrapEventListener);\nconst isNativeAudioNode = createIsNativeAudioNode(window);\nconst isNativeAudioParam = createIsNativeAudioParam(window);\nconst audioNodeConstructor = createAudioNodeConstructor(createAddAudioNodeConnections(AUDIO_NODE_CONNECTIONS_STORE), auxiliaryGainNodeStore, cacheTestResult, createIncrementCycleCounterFactory(CYCLE_COUNTERS, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode), createIndexSizeError, createInvalidAccessError, createNotSupportedError, createDecrementCycleCounter(connectNativeAudioNodeToNativeAudioNode, CYCLE_COUNTERS, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext), createDetectCycles(audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey), eventTargetConstructor, getNativeContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext);\nconst analyserNodeConstructor = createAnalyserNodeConstructor(audioNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext);\nexport { analyserNodeConstructor as AnalyserNode };\nconst audioBufferStore = new WeakSet();\nconst nativeAudioBufferConstructor = createNativeAudioBufferConstructor(window);\nconst convertNumberToUnsignedLong = createConvertNumberToUnsignedLong(new Uint32Array(1));\nconst wrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError);\nconst wrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong);\nconst audioBufferConstructor = createAudioBufferConstructor(audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, createTestAudioBufferConstructorSupport(nativeAudioBufferConstructor), wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nexport { audioBufferConstructor as AudioBuffer };\nconst testAudioScheduledSourceNodeStartMethodNegativeParametersSupport = createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport(createNativeAudioNode);\nconst testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(createNativeAudioNode);\nconst testAudioScheduledSourceNodeStopMethodNegativeParametersSupport = createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport(createNativeAudioNode);\nconst wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(createNativeAudioNode);\nconst renderInputsOfAudioParam = createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle);\nconst connectAudioParam = createConnectAudioParam(renderInputsOfAudioParam);\nconst createNativeAudioBufferSourceNode = createNativeAudioBufferSourceNodeFactory(cacheTestResult, createNativeAudioNode, createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(createNativeAudioNode), createTestAudioBufferSourceNodeStartMethodDurationParameterSupport(nativeOfflineAudioContextConstructor), createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport(createNativeAudioNode), createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport(createNativeAudioNode), testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClamping, createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer(overwriteAccessors), wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst renderAutomation = createRenderAutomation(createGetAudioParamRenderer(getAudioParamConnections), renderInputsOfAudioParam);\nconst createAudioBufferSourceNodeRenderer = createAudioBufferSourceNodeRendererFactory(connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst createAudioParam = createAudioParamFactory(createAddAudioParamConnections(AUDIO_PARAM_CONNECTIONS_STORE), audioParamAudioNodeStore, AUDIO_PARAM_STORE, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor);\nconst audioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor(audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nexport { audioBufferSourceNodeConstructor as AudioBufferSourceNode };\nconst createNativeGainNode = createNativeGainNodeFactory(createNativeAudioNode);\nconst audioDestinationNodeConstructor = createAudioDestinationNodeConstructor(audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNodeFactory(createNativeGainNode, overwriteAccessors), getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode);\nconst createNativeBiquadFilterNode = createNativeBiquadFilterNodeFactory(createNativeAudioNode);\nconst createBiquadFilterNodeRenderer = createBiquadFilterNodeRendererFactory(connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst biquadFilterNodeConstructor = createBiquadFilterNodeConstructor(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext);\nconst monitorConnections = createMonitorConnections(insertElementInSet, isNativeAudioNode);\nconst wrapChannelMergerNode = createWrapChannelMergerNode(createInvalidStateError, createNativeAudioNode, monitorConnections);\nconst createNativeChannelMergerNode = createNativeChannelMergerNodeFactory(createNativeAudioNode, wrapChannelMergerNode);\nconst createChannelMergerNodeRenderer = createChannelMergerNodeRendererFactory(createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelMergerNodeConstructor = createChannelMergerNodeConstructor(audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeChannelSplitterNode = createNativeChannelSplitterNodeFactory(createNativeAudioNode);\nconst createChannelSplitterNodeRenderer = createChannelSplitterNodeRendererFactory(createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelSplitterNodeConstructor = createChannelSplitterNodeConstructor(audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeConstantSourceNodeFaker = createNativeConstantSourceNodeFakerFactory(createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections);\nconst createNativeConstantSourceNode = createNativeConstantSourceNodeFactory(cacheTestResult, createNativeAudioNode, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport);\nconst createConstantSourceNodeRenderer = createConstantSourceNodeRendererFactory(connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst constantSourceNodeConstructor = createConstantSourceNodeConstructor(audioNodeConstructor, createAudioParam, createConstantSourceNodeRenderer, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createNativeConvolverNodeFaker = createNativeConvolverNodeFakerFactory(createNativeAudioNode, createNativeGainNode, monitorConnections);\nconst createNativeConvolverNode = createNativeConvolverNodeFactory(createNativeAudioNode, createNativeConvolverNodeFaker, createNotSupportedError, overwriteAccessors);\nconst createConvolverNodeRenderer = createConvolverNodeRendererFactory(createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst convolverNodeConstructor = createConvolverNodeConstructor(audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeDelayNode = createNativeDelayNodeFactory(createNativeAudioNode);\nconst createDelayNodeRenderer = createDelayNodeRendererFactory(connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst delayNodeConstructor = createDelayNodeConstructor(audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeDynamicsCompressorNode = createNativeDynamicsCompressorNodeFactory(createNativeAudioNode, createNotSupportedError);\nconst createDynamicsCompressorNodeRenderer = createDynamicsCompressorNodeRendererFactory(connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst dynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext);\nconst createGainNodeRenderer = createGainNodeRendererFactory(connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst gainNodeConstructor = createGainNodeConstructor(audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeScriptProcessorNode = createNativeScriptProcessorNodeFactory(createNativeAudioNode);\nconst createNativeIIRFilterNodeFaker = createNativeIIRFilterNodeFakerFactory(createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError);\nconst renderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext(cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, createTestOfflineAudioContextCurrentTimeSupport(createNativeGainNode, nativeOfflineAudioContextConstructor));\nconst createIIRFilterNodeRenderer = createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, createNativeAudioNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst createNativeIIRFilterNode = createNativeIIRFilterNodeFactory(createNativeAudioNode, createNativeIIRFilterNodeFaker);\nconst iIRFilterNodeConstructor = createIIRFilterNodeConstructor(audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createAudioListener = createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext);\nconst minimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor(audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, wrapEventListener);\nconst createNativeOscillatorNode = createNativeOscillatorNodeFactory(cacheTestResult, createNativeAudioNode, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst createOscillatorNodeRenderer = createOscillatorNodeRendererFactory(connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst oscillatorNodeConstructor = createOscillatorNodeConstructor(audioNodeConstructor, createAudioParam, createInvalidStateError, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createConnectedNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNodeFactory(createNativeAudioBufferSourceNode);\nconst createNativeWaveShaperNodeFaker = createNativeWaveShaperNodeFakerFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeGainNode, isDCCurve, monitorConnections);\nconst createNativeWaveShaperNode = createNativeWaveShaperNodeFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, overwriteAccessors);\nconst createNativePannerNodeFaker = createNativePannerNodeFakerFactory(connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeAudioNode, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, monitorConnections);\nconst createNativePannerNode = createNativePannerNodeFactory(createNativeAudioNode, createNativePannerNodeFaker);\nconst createPannerNodeRenderer = createPannerNodeRendererFactory(connectAudioParam, createNativePannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst pannerNodeConstructor = createPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createNativePeriodicWave = createNativePeriodicWaveFactory(getBackupNativeContext);\nconst periodicWaveConstructor = createPeriodicWaveConstructor(createNativePeriodicWave, getNativeContext, new WeakSet());\nconst nativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections);\nconst createNativeStereoPannerNode = createNativeStereoPannerNodeFactory(createNativeAudioNode, nativeStereoPannerNodeFakerFactory, createNotSupportedError);\nconst createStereoPannerNodeRenderer = createStereoPannerNodeRendererFactory(connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst stereoPannerNodeConstructor = createStereoPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createWaveShaperNodeRenderer = createWaveShaperNodeRendererFactory(createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst waveShaperNodeConstructor = createWaveShaperNodeConstructor(audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst isSecureContext = createIsSecureContext(window);\nconst exposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime(window);\n// The addAudioWorkletModule() function is only available in a SecureContext.\nexport const addAudioWorkletModule = (isSecureContext) ?\n    createAddAudioWorkletModule(createAbortError, createNotSupportedError, createEvaluateSource(window), exposeCurrentFrameAndCurrentTime, createFetchSource(createAbortError), getBackupNativeContext, getNativeContext, new WeakMap(), new WeakMap()) :\n    undefined;\nconst isNativeAudioContext = createIsNativeAudioContext(nativeAudioContextConstructor);\nconst isNativeContext = createIsNativeContext(isNativeAudioContext, isNativeOfflineAudioContext);\nexport const decodeAudioData = createDecodeAudioData(audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, new WeakSet(), getNativeContext, isNativeContext, isNativeOfflineAudioContext, nativeOfflineAudioContextConstructor, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst baseAudioContextConstructor = createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor);\nconst createNativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNodeFactory(createNativeAudioNode);\nconst mediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaElementAudioSourceNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNodeFactory(createNativeAudioNode);\nconst mediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioSourceNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNodeFactory(createInvalidStateError, createNativeAudioNode);\nconst mediaStreamTrackAudioSourceNodeConstructor = createMediaStreamTrackAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext);\nconst audioContextConstructor = createAudioContextConstructor(baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor);\nexport { audioContextConstructor as AudioContext };\nconst connectMultipleOutputs = createConnectMultipleOutputs(createIndexSizeError);\nconst disconnectMultipleOutputs = createDisconnectMultipleOutputs(createIndexSizeError);\nconst createNativeAudioWorkletNodeFaker = createNativeAudioWorkletNodeFakerFactory(auxiliaryGainNodeStore, connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, monitorConnections);\nconst createNativeAudioWorkletNode = createNativeAudioWorkletNodeFactory(createInvalidStateError, createNativeAudioNode, createNativeAudioWorkletNodeFaker, createNotSupportedError, isNativeOfflineAudioContext);\nconst nativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor(window);\nconst createAudioWorkletNodeRenderer = createAudioWorkletNodeRendererFactory(connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\n// The AudioWorkletNode constructor is only available in a SecureContext.\nconst audioWorkletNodeConstructor = (isSecureContext) ?\n    createAudioWorkletNodeConstructor(audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, gainNodeConstructor, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, wrapEventListener) :\n    undefined;\nexport { audioWorkletNodeConstructor as AudioWorkletNode };\nexport { biquadFilterNodeConstructor as BiquadFilterNode };\nexport { channelMergerNodeConstructor as ChannelMergerNode };\nexport { channelSplitterNodeConstructor as ChannelSplitterNode };\nexport { convolverNodeConstructor as ConvolverNode };\nexport { constantSourceNodeConstructor as ConstantSourceNode };\nexport { delayNodeConstructor as DelayNode };\nexport { dynamicsCompressorNodeConstructor as DynamicsCompressorNode };\nexport { gainNodeConstructor as GainNode };\nexport { iIRFilterNodeConstructor as IIRFilterNode };\nexport { mediaElementAudioSourceNodeConstructor as MediaElementAudioSourceNode };\nexport { mediaStreamAudioSourceNodeConstructor as MediaStreamAudioSourceNode };\nexport { mediaStreamTrackAudioSourceNodeConstructor as MediaStreamTrackAudioSourceNode };\nconst minimalAudioContextConstructor = createMinimalAudioContextConstructor(createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor);\nexport { minimalAudioContextConstructor as MinimalAudioContext };\nconst createNativeOfflineAudioContext = createCreateNativeOfflineAudioContext(createNotSupportedError, nativeOfflineAudioContextConstructor);\nconst startRendering = createStartRendering(audioBufferStore, cacheTestResult, getAudioNodeRenderer, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst minimalOfflineAudioContextConstructor = createMinimalOfflineAudioContextConstructor(cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering);\nexport { minimalOfflineAudioContextConstructor as MinimalOfflineAudioContext };\nconst offlineAudioContextConstructor = createOfflineAudioContextConstructor(baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering);\nexport { offlineAudioContextConstructor as OfflineAudioContext };\nexport { oscillatorNodeConstructor as OscillatorNode };\nexport { pannerNodeConstructor as PannerNode };\nexport { periodicWaveConstructor as PeriodicWave };\nexport { stereoPannerNodeConstructor as StereoPannerNode };\nexport { waveShaperNodeConstructor as WaveShaperNode };\nexport const isAnyAudioContext = createIsAnyAudioContext(CONTEXT_STORE, isNativeAudioContext);\nexport const isAnyAudioNode = createIsAnyAudioNode(AUDIO_NODE_STORE, isNativeAudioNode);\nexport const isAnyAudioParam = createIsAnyAudioParam(AUDIO_PARAM_STORE, isNativeAudioParam);\nexport const isAnyOfflineAudioContext = createIsAnyOfflineAudioContext(CONTEXT_STORE, isNativeOfflineAudioContext);\nexport const isSupported = () => createIsSupportedPromise(cacheTestResult, createTestAudioBufferCopyChannelMethodsSubarraySupport(nativeOfflineAudioContextConstructor), createTestAudioContextCloseMethodSupport(nativeAudioContextConstructor), createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor), createTestAudioContextOptionsSupport(nativeAudioContextConstructor), createTestAudioNodeConnectMethodSupport(nativeOfflineAudioContextConstructor), createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), createTestConstantSourceNodeAccurateSchedulingSupport(createNativeAudioNode, nativeOfflineAudioContextConstructor), createTestConvolverNodeBufferReassignabilitySupport(nativeOfflineAudioContextConstructor), createTestIsSecureContextSupport(window), createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport(nativeAudioContextConstructor), createTestStereoPannerNodeDefaultValueSupport(nativeOfflineAudioContextConstructor), testTransferablesSupport);\n//# sourceMappingURL=/build/es2018/module.js.map"]},"metadata":{},"sourceType":"module"}