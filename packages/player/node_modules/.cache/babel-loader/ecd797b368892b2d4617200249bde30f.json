{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { mollweideRaw } from \"./mollweide.js\";\nimport { sinusoidalRaw } from \"./sinusoidal.js\";\nexport var sinuMollweidePhi = 0.7109889596207567;\nexport var sinuMollweideY = 0.0528035274542;\nexport function sinuMollweideRaw(lambda, phi) {\n  return phi > -sinuMollweidePhi ? (lambda = mollweideRaw(lambda, phi), lambda[1] += sinuMollweideY, lambda) : sinusoidalRaw(lambda, phi);\n}\n\nsinuMollweideRaw.invert = function (x, y) {\n  return y > -sinuMollweidePhi ? mollweideRaw.invert(x, y - sinuMollweideY) : sinusoidalRaw.invert(x, y);\n};\n\nexport default function () {\n  return projection(sinuMollweideRaw).rotate([-20, -55]).scale(164.263).center([0, -5.4036]);\n}","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/d3-geo-projection/src/sinuMollweide.js"],"names":["geoProjection","projection","mollweideRaw","sinusoidalRaw","sinuMollweidePhi","sinuMollweideY","sinuMollweideRaw","lambda","phi","invert","x","y","rotate","scale","center"],"mappings":"AAAA,SAAQA,aAAa,IAAIC,UAAzB,QAA0C,QAA1C;AACA,SAAQC,YAAR,QAA2B,gBAA3B;AACA,SAAQC,aAAR,QAA4B,iBAA5B;AAEA,OAAO,IAAIC,gBAAgB,GAAG,kBAAvB;AAEP,OAAO,IAAIC,cAAc,GAAG,eAArB;AAEP,OAAO,SAASC,gBAAT,CAA0BC,MAA1B,EAAkCC,GAAlC,EAAuC;AAC5C,SAAOA,GAAG,GAAG,CAACJ,gBAAP,IACAG,MAAM,GAAGL,YAAY,CAACK,MAAD,EAASC,GAAT,CAArB,EAAoCD,MAAM,CAAC,CAAD,CAAN,IAAaF,cAAjD,EAAiEE,MADjE,IAEDJ,aAAa,CAACI,MAAD,EAASC,GAAT,CAFnB;AAGD;;AAEDF,gBAAgB,CAACG,MAAjB,GAA0B,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACvC,SAAOA,CAAC,GAAG,CAACP,gBAAL,GACDF,YAAY,CAACO,MAAb,CAAoBC,CAApB,EAAuBC,CAAC,GAAGN,cAA3B,CADC,GAEDF,aAAa,CAACM,MAAd,CAAqBC,CAArB,EAAwBC,CAAxB,CAFN;AAGD,CAJD;;AAMA,eAAe,YAAW;AACxB,SAAOV,UAAU,CAACK,gBAAD,CAAV,CACFM,MADE,CACK,CAAC,CAAC,EAAF,EAAM,CAAC,EAAP,CADL,EAEFC,KAFE,CAEI,OAFJ,EAGFC,MAHE,CAGK,CAAC,CAAD,EAAI,CAAC,MAAL,CAHL,CAAP;AAID","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {mollweideRaw} from \"./mollweide.js\";\nimport {sinusoidalRaw} from \"./sinusoidal.js\";\n\nexport var sinuMollweidePhi = 0.7109889596207567;\n\nexport var sinuMollweideY = 0.0528035274542;\n\nexport function sinuMollweideRaw(lambda, phi) {\n  return phi > -sinuMollweidePhi\n      ? (lambda = mollweideRaw(lambda, phi), lambda[1] += sinuMollweideY, lambda)\n      : sinusoidalRaw(lambda, phi);\n}\n\nsinuMollweideRaw.invert = function(x, y) {\n  return y > -sinuMollweidePhi\n      ? mollweideRaw.invert(x, y - sinuMollweideY)\n      : sinusoidalRaw.invert(x, y);\n};\n\nexport default function() {\n  return projection(sinuMollweideRaw)\n      .rotate([-20, -55])\n      .scale(164.263)\n      .center([0, -5.4036]);\n}\n"]},"metadata":{},"sourceType":"module"}