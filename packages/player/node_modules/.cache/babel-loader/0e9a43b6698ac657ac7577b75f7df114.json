{"ast":null,"code":"var _jsxFileName = \"/Users/dani/Antropoloops/atpls-player/src/ui/Player/Player.tsx\";\nimport React, { useEffect } from \"react\";\nimport { autoUnlockAudio } from \"../../player/AudioContext\";\nimport { Spinner } from \"../shared/Spinner\";\nimport { useDeviceType } from \"../useDeviceType\";\nimport { Controller } from \"./Controller\";\nimport { Session } from \"./Session\";\nimport { Sidebar } from \"./Sidebar\";\nimport { useFullscreen } from \"./useFullscreen\";\nimport { useKeyboardListener } from \"./useKeyboardListener\";\nimport { usePlayer } from \"./usePlayer\";\nimport { useSession } from \"./useSession\";\nexport const Player = ({\n  audioset\n}) => {\n  var _player$control;\n\n  const session = useSession(audioset);\n  const player = usePlayer(audioset, session.loader);\n\n  const _useFullscreen = useFullscreen(),\n        isFullscreen = _useFullscreen.isFullscreen,\n        toggleFullscreen = _useFullscreen.toggleFullscreen;\n\n  const _useDeviceType = useDeviceType(),\n        isDesktop = _useDeviceType.isDesktop;\n\n  useKeyboardListener((_player$control = player.control) === null || _player$control === void 0 ? void 0 : _player$control.keyboard);\n  useEffect(() => {\n    autoUnlockAudio();\n  }, []);\n  const areVisualsVisible = isDesktop || player.isStarted;\n  const isSidebarVisible = !isFullscreen;\n  const showSpinner = player.isStarted && !player.clipsReady;\n  const showSession = !player.isStarted;\n  const showControl = true;\n\n  const Header = () => React.createElement(\"div\", {\n    className: \"Header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Hola!\");\n\n  return React.createElement(\"div\", {\n    className: \"App Player\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, isSidebarVisible && React.createElement(Sidebar, {\n    header: Header,\n    audioset: audioset,\n    onFullscreen: toggleFullscreen,\n    onStopAll: () => {\n      var _player$control2;\n\n      return player === null || player === void 0 ? void 0 : (_player$control2 = player.control) === null || _player$control2 === void 0 ? void 0 : _player$control2.stopAll(0);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, showSpinner && React.createElement(\"div\", {\n    className: \"spin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  })), showSession && React.createElement(Session, {\n    audioset: audioset,\n    isStarted: player.isStarted,\n    onStart: () => player.setStarted(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), showControl && React.createElement(Controller, {\n    audioset: audioset,\n    state: player.state,\n    control: player.isStarted ? player.control : undefined,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  })), areVisualsVisible && React.createElement(\"div\", {\n    className: \"visuals\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"visuals\",\n    ref: player.visualsRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  })));\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/src/ui/Player/Player.tsx"],"names":["React","useEffect","autoUnlockAudio","Spinner","useDeviceType","Controller","Session","Sidebar","useFullscreen","useKeyboardListener","usePlayer","useSession","Player","audioset","session","player","loader","isFullscreen","toggleFullscreen","isDesktop","control","keyboard","areVisualsVisible","isStarted","isSidebarVisible","showSpinner","clipsReady","showSession","showControl","Header","stopAll","setStarted","state","undefined","visualsRef"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { Audioset } from \"../../audioset\";\nimport { autoUnlockAudio } from \"../../player/AudioContext\";\nimport { Spinner } from \"../shared/Spinner\";\nimport { useDeviceType } from \"../useDeviceType\";\nimport { Controller } from \"./Controller\";\nimport { Session } from \"./Session\";\nimport { Sidebar } from \"./Sidebar\";\nimport { useFullscreen } from \"./useFullscreen\";\nimport { useKeyboardListener } from \"./useKeyboardListener\";\nimport { usePlayer } from \"./usePlayer\";\nimport { useSession } from \"./useSession\";\n\nexport interface PlayerProps {\n  audioset: Audioset;\n}\n\nexport const Player = ({ audioset }: PlayerProps) => {\n  const session = useSession(audioset);\n  const player = usePlayer(audioset, session.loader);\n  const { isFullscreen, toggleFullscreen } = useFullscreen();\n  const { isDesktop } = useDeviceType();\n  useKeyboardListener(player.control?.keyboard);\n\n  useEffect(() => {\n    autoUnlockAudio();\n  }, []);\n\n  const areVisualsVisible = isDesktop || player.isStarted;\n  const isSidebarVisible = !isFullscreen;\n\n  const showSpinner = player.isStarted && !player.clipsReady;\n  const showSession = !player.isStarted;\n  const showControl = true;\n\n  const Header = () => <div className=\"Header\">Hola!</div>;\n\n  return (\n    <div className=\"App Player\">\n      {isSidebarVisible && (\n        <Sidebar\n          header={Header}\n          audioset={audioset}\n          onFullscreen={toggleFullscreen}\n          onStopAll={() => player?.control?.stopAll(0)}\n        >\n          {showSpinner && (\n            <div className=\"spin\">\n              <Spinner />\n            </div>\n          )}\n          {showSession && (\n            <Session\n              audioset={audioset}\n              isStarted={player.isStarted}\n              onStart={() => player.setStarted(true)}\n            />\n          )}\n          {showControl && (\n            <Controller\n              audioset={audioset}\n              state={player.state}\n              control={player.isStarted ? player.control : undefined}\n            />\n          )}\n        </Sidebar>\n      )}\n      {areVisualsVisible && (\n        <div className=\"visuals\">\n          <div id=\"visuals\" ref={player.visualsRef} />\n        </div>\n      )}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}