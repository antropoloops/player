{"ast":null,"code":"import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeConvolverNodeFakerFactory = (createNativeAudioNode, createNativeGainNode, monitorConnections) => {\n  return (nativeContext, {\n    buffer,\n    channelCount,\n    channelCountMode,\n    channelInterpretation,\n    disableNormalization\n  }) => {\n    const convolverNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createConvolver());\n    assignNativeAudioNodeOptions(convolverNode, {\n      // Bug #166: Chrome & Opera do not allow yet to set the channelCount to 1.\n      channelCount: Math.max(channelCount, 2),\n      // Bug #167: Chrome & Opera do not allow yet to set the channelCountMode to 'explicit'.\n      channelCountMode: channelCountMode === 'max' ? channelCountMode : 'clamped-max',\n      channelInterpretation\n    });\n    const gainNode = createNativeGainNode(nativeContext, {\n      channelCount,\n      channelCountMode,\n      channelInterpretation,\n      gain: 1\n    });\n    const nativeConvolverNodeFaker = {\n      get buffer() {\n        return convolverNode.buffer;\n      },\n\n      set buffer(value) {\n        convolverNode.buffer = value;\n      },\n\n      get bufferSize() {\n        return undefined;\n      },\n\n      get channelCount() {\n        return gainNode.channelCount;\n      },\n\n      set channelCount(value) {\n        // Bug #166: Chrome & Opera do not allow yet to set the channelCount to 1.\n        if (value > 2) {\n          convolverNode.channelCount = value;\n        }\n\n        gainNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return gainNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        // Bug #167: Chrome & Opera do not allow yet to set the channelCountMode to 'explicit'.\n        if (value === 'max') {\n          convolverNode.channelCountMode = value;\n        }\n\n        gainNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return convolverNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        convolverNode.channelInterpretation = value;\n        gainNode.channelInterpretation = value;\n      },\n\n      get context() {\n        return convolverNode.context;\n      },\n\n      get inputs() {\n        return [convolverNode];\n      },\n\n      get numberOfInputs() {\n        return convolverNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return convolverNode.numberOfOutputs;\n      },\n\n      get normalize() {\n        return convolverNode.normalize;\n      },\n\n      set normalize(value) {\n        convolverNode.normalize = value;\n      },\n\n      addEventListener(...args) {\n        return convolverNode.addEventListener(args[0], args[1], args[2]);\n      },\n\n      dispatchEvent(...args) {\n        return convolverNode.dispatchEvent(args[0]);\n      },\n\n      removeEventListener(...args) {\n        return convolverNode.removeEventListener(args[0], args[1], args[2]);\n      }\n\n    }; // The normalize property needs to be set before setting the buffer.\n\n    if (disableNormalization === nativeConvolverNodeFaker.normalize) {\n      nativeConvolverNodeFaker.normalize = !disableNormalization;\n    }\n\n    if (buffer !== nativeConvolverNodeFaker.buffer) {\n      nativeConvolverNodeFaker.buffer = buffer;\n    }\n\n    const whenConnected = () => convolverNode.connect(gainNode);\n\n    const whenDisconnected = () => convolverNode.disconnect(gainNode);\n\n    return monitorConnections(interceptConnections(nativeConvolverNodeFaker, gainNode), whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"sources":["/Users/dani/Antropoloops/atpls-player/node_modules/standardized-audio-context/build/es2018/factories/native-convolver-node-faker-factory.js"],"names":["assignNativeAudioNodeOptions","interceptConnections","createNativeConvolverNodeFakerFactory","createNativeAudioNode","createNativeGainNode","monitorConnections","nativeContext","buffer","channelCount","channelCountMode","channelInterpretation","disableNormalization","convolverNode","ntvCntxt","createConvolver","Math","max","gainNode","gain","nativeConvolverNodeFaker","value","bufferSize","undefined","context","inputs","numberOfInputs","numberOfOutputs","normalize","addEventListener","args","dispatchEvent","removeEventListener","whenConnected","connect","whenDisconnected","disconnect"],"mappings":"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","sourcesContent":["import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeConvolverNodeFakerFactory = (createNativeAudioNode, createNativeGainNode, monitorConnections) => {\n    return (nativeContext, { buffer, channelCount, channelCountMode, channelInterpretation, disableNormalization }) => {\n        const convolverNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createConvolver());\n        assignNativeAudioNodeOptions(convolverNode, {\n            // Bug #166: Chrome & Opera do not allow yet to set the channelCount to 1.\n            channelCount: Math.max(channelCount, 2),\n            // Bug #167: Chrome & Opera do not allow yet to set the channelCountMode to 'explicit'.\n            channelCountMode: (channelCountMode === 'max') ? channelCountMode : 'clamped-max',\n            channelInterpretation\n        });\n        const gainNode = createNativeGainNode(nativeContext, { channelCount, channelCountMode, channelInterpretation, gain: 1 });\n        const nativeConvolverNodeFaker = {\n            get buffer() {\n                return convolverNode.buffer;\n            },\n            set buffer(value) {\n                convolverNode.buffer = value;\n            },\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return gainNode.channelCount;\n            },\n            set channelCount(value) {\n                // Bug #166: Chrome & Opera do not allow yet to set the channelCount to 1.\n                if (value > 2) {\n                    convolverNode.channelCount = value;\n                }\n                gainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return gainNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                // Bug #167: Chrome & Opera do not allow yet to set the channelCountMode to 'explicit'.\n                if (value === 'max') {\n                    convolverNode.channelCountMode = value;\n                }\n                gainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return convolverNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                convolverNode.channelInterpretation = value;\n                gainNode.channelInterpretation = value;\n            },\n            get context() {\n                return convolverNode.context;\n            },\n            get inputs() {\n                return [convolverNode];\n            },\n            get numberOfInputs() {\n                return convolverNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return convolverNode.numberOfOutputs;\n            },\n            get normalize() {\n                return convolverNode.normalize;\n            },\n            set normalize(value) {\n                convolverNode.normalize = value;\n            },\n            addEventListener(...args) {\n                return convolverNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return convolverNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return convolverNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        // The normalize property needs to be set before setting the buffer.\n        if (disableNormalization === nativeConvolverNodeFaker.normalize) {\n            nativeConvolverNodeFaker.normalize = !disableNormalization;\n        }\n        if (buffer !== nativeConvolverNodeFaker.buffer) {\n            nativeConvolverNodeFaker.buffer = buffer;\n        }\n        const whenConnected = () => convolverNode.connect(gainNode);\n        const whenDisconnected = () => convolverNode.disconnect(gainNode);\n        return monitorConnections(interceptConnections(nativeConvolverNodeFaker, gainNode), whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-convolver-node-faker-factory.js.map"]},"metadata":{},"sourceType":"module"}